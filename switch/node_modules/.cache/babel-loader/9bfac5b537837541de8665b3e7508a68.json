{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n/**\r\n * @callback EdgeZoneSourceCallback\r\n *\r\n * @param {integer} quantity - The number of particles to place on the source edge. If 0, `stepRate` should be used instead.\r\n * @param {number} [stepRate] - The distance between each particle. When set, `quantity` is implied and should be set to `0`.\r\n *\r\n * @return {Phaser.Geom.Point[]} - The points placed on the source edge.\r\n */\n\n/**\r\n * @typedef {object} EdgeZoneSource\r\n *\r\n * @property {EdgeZoneSourceCallback} getPoints - A function placing points on the source's edge or edges.\r\n *\r\n * @see Phaser.Curves.Curve\r\n * @see Phaser.Curves.Path\r\n * @see Phaser.Geom.Circle\r\n * @see Phaser.Geom.Ellipse\r\n * @see Phaser.Geom.Line\r\n * @see Phaser.Geom.Polygon\r\n * @see Phaser.Geom.Rectangle\r\n * @see Phaser.Geom.Triangle\r\n */\n\n/**\r\n * @classdesc\r\n * A zone that places particles on a shape's edges.\r\n *\r\n * @class EdgeZone\r\n * @memberof Phaser.GameObjects.Particles.Zones\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {EdgeZoneSource} source - An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.\r\n * @param {integer} quantity - The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.\r\n * @param {number} stepRate - The distance between each particle. When set, `quantity` is implied and should be set to 0.\r\n * @param {boolean} [yoyo=false] - Whether particles are placed from start to end and then end to start.\r\n * @param {boolean} [seamless=true] - Whether one endpoint will be removed if it's identical to the other.\r\n */\n\n\nvar EdgeZone = new Class({\n  initialize: function EdgeZone(source, quantity, stepRate, yoyo, seamless) {\n    if (yoyo === undefined) {\n      yoyo = false;\n    }\n\n    if (seamless === undefined) {\n      seamless = true;\n    }\n    /**\r\n     * An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#source\r\n     * @type {EdgeZoneSource|RandomZoneSource}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.source = source;\n    /**\r\n     * The points placed on the source edge.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#points\r\n     * @type {Phaser.Geom.Point[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.points = [];\n    /**\r\n     * The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#quantity\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.quantity = quantity;\n    /**\r\n     * The distance between each particle. When set, `quantity` is implied and should be set to 0.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#stepRate\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.stepRate = stepRate;\n    /**\r\n     * Whether particles are placed from start to end and then end to start.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#yoyo\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.yoyo = yoyo;\n    /**\r\n     * The counter used for iterating the EdgeZone's points.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#counter\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.counter = -1;\n    /**\r\n     * Whether one endpoint will be removed if it's identical to the other.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#seamless\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.seamless = seamless;\n    /**\r\n     * An internal count of the points belonging to this EdgeZone.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#_length\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._length = 0;\n    /**\r\n     * An internal value used to keep track of the current iteration direction for the EdgeZone's points.\r\n     *\r\n     * 0 = forwards, 1 = backwards\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.EdgeZone#_direction\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._direction = 0;\n    this.updateSource();\n  },\n\n  /**\r\n   * Update the {@link Phaser.GameObjects.Particles.Zones.EdgeZone#points} from the EdgeZone's\r\n   * {@link Phaser.GameObjects.Particles.Zones.EdgeZone#source}.\r\n   *\r\n   * Also updates internal properties.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Zones.EdgeZone#updateSource\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Zones.EdgeZone} This Edge Zone.\r\n   */\n  updateSource: function updateSource() {\n    this.points = this.source.getPoints(this.quantity, this.stepRate); //  Remove ends?\n\n    if (this.seamless) {\n      var a = this.points[0];\n      var b = this.points[this.points.length - 1];\n\n      if (a.x === b.x && a.y === b.y) {\n        this.points.pop();\n      }\n    }\n\n    var oldLength = this._length;\n    this._length = this.points.length; //  Adjust counter if we now have less points than before\n\n    if (this._length < oldLength && this.counter > this._length) {\n      this.counter = this._length - 1;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Change the EdgeZone's source.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Zones.EdgeZone#changeSource\r\n   * @since 3.0.0\r\n   *\r\n   * @param {EdgeZoneSource} source - An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Zones.EdgeZone} This Edge Zone.\r\n   */\n  changeSource: function changeSource(source) {\n    this.source = source;\n    return this.updateSource();\n  },\n\n  /**\r\n   * Get the next point in the Zone and set its coordinates on the given Particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Zones.EdgeZone#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle.\r\n   */\n  getPoint: function getPoint(particle) {\n    if (this._direction === 0) {\n      this.counter++;\n\n      if (this.counter >= this._length) {\n        if (this.yoyo) {\n          this._direction = 1;\n          this.counter = this._length - 1;\n        } else {\n          this.counter = 0;\n        }\n      }\n    } else {\n      this.counter--;\n\n      if (this.counter === -1) {\n        if (this.yoyo) {\n          this._direction = 0;\n          this.counter = 0;\n        } else {\n          this.counter = this._length - 1;\n        }\n      }\n    }\n\n    var point = this.points[this.counter];\n\n    if (point) {\n      particle.x = point.x;\n      particle.y = point.y;\n    }\n  }\n});\nmodule.exports = EdgeZone;","map":null,"metadata":{},"sourceType":"script"}