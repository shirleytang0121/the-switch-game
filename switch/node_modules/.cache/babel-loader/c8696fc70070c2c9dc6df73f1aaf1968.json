{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A generic Key object which can be passed to the Process functions (and so on)\r\n * keycode must be an integer\r\n *\r\n * @class Key\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} keyCode - The keycode of this key.\r\n */\n\n\nvar Key = new Class({\n  Extends: EventEmitter,\n  initialize: function Key(keyCode) {\n    EventEmitter.call(this);\n    /**\r\n     * The keycode of this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#keyCode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.keyCode = keyCode;\n    /**\r\n     * The original DOM event.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#originalEvent\r\n     * @type {KeyboardEvent}\r\n     * @since 3.0.0\r\n     */\n\n    this.originalEvent = undefined;\n    /**\r\n     * Can this Key be processed?\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#isDown\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isDown = false;\n    /**\r\n     * The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#isUp\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.isUp = true;\n    /**\r\n     * The down state of the ALT key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#altKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.altKey = false;\n    /**\r\n     * The down state of the CTRL key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#ctrlKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.ctrlKey = false;\n    /**\r\n     * The down state of the SHIFT key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#shiftKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shiftKey = false;\n    /**\r\n     * The down state of the Meta key, if pressed at the same time as this key.\r\n     * On a Mac the Meta Key is the Command key. On Windows keyboards, it's the Windows key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#metaKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.metaKey = false;\n    /**\r\n     * The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#location\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.location = 0;\n    /**\r\n     * The timestamp when the key was last pressed down.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#timeDown\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeDown = 0;\n    /**\r\n     * The number of milliseconds this key was held down for in the previous down - up sequence.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The timestamp when the key was last released.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#timeUp\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeUp = 0;\n    /**\r\n     * When a key is held down should it continuously fire the `down` event each time it repeats?\r\n     * \r\n     * By default it will emit the `down` event just once, but if you wish to receive the event\r\n     * for each repeat as well, enable this property.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#emitOnRepeat\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.emitOnRepeat = false;\n    /**\r\n     * If a key is held down this holds down the number of times the key has 'repeated'.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#repeats\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeats = 0;\n    /**\r\n     * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_justDown\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._justDown = false;\n    /**\r\n     * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_justUp\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._justUp = false;\n    /**\r\n     * Internal tick counter.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_tick\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._tick = -1;\n  },\n\n  /**\r\n   * Controls if this Key will continuously emit a `down` event while being held down (true),\r\n   * or emit the event just once, on first press, and then skip future events (false).\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#setEmitOnRepeat\r\n   * @since 3.16.0\r\n   * \r\n   * @param {boolean} value - Emit `down` events on repeated key down actions, or just once?\r\n   * \r\n   * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n   */\n  setEmitOnRepeat: function setEmitOnRepeat(value) {\n    this.emitOnRepeat = value;\n    return this;\n  },\n\n  /**\r\n   * Processes the Key Down action for this Key.\r\n   * Called automatically by the Keyboard Plugin.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#onDown\r\n   * @fires Phaser.Input.Keyboard.Events#DOWN\r\n   * @since 3.16.0\r\n   * \r\n   * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n   */\n  onDown: function onDown(event) {\n    this.originalEvent = event;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    this.altKey = event.altKey;\n    this.ctrlKey = event.ctrlKey;\n    this.shiftKey = event.shiftKey;\n    this.metaKey = event.metaKey;\n    this.location = event.location;\n    this.repeats++;\n\n    if (!this.isDown) {\n      this.isDown = true;\n      this.isUp = false;\n      this.timeDown = event.timeStamp;\n      this.duration = 0;\n      this._justDown = true;\n      this._justUp = false;\n      this.emit(Events.DOWN, this, event);\n    } else if (this.emitOnRepeat) {\n      this.emit(Events.DOWN, this, event);\n    }\n  },\n\n  /**\r\n   * Processes the Key Up action for this Key.\r\n   * Called automatically by the Keyboard Plugin.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#onUp\r\n   * @fires Phaser.Input.Keyboard.Events#UP\r\n   * @since 3.16.0\r\n   * \r\n   * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n   */\n  onUp: function onUp(event) {\n    this.originalEvent = event;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    this.isDown = false;\n    this.isUp = true;\n    this.timeUp = event.timeStamp;\n    this.duration = this.timeUp - this.timeDown;\n    this.repeats = 0;\n    this._justDown = false;\n    this._justUp = true;\n    this._tick = -1;\n    this.emit(Events.UP, this, event);\n  },\n\n  /**\r\n   * Resets this Key object back to its default un-pressed state.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#reset\r\n   * @since 3.6.0\r\n   * \r\n   * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n   */\n  reset: function reset() {\n    this.preventDefault = true;\n    this.enabled = true;\n    this.isDown = false;\n    this.isUp = true;\n    this.altKey = false;\n    this.ctrlKey = false;\n    this.shiftKey = false;\n    this.metaKey = false;\n    this.timeDown = 0;\n    this.duration = 0;\n    this.timeUp = 0;\n    this.repeats = 0;\n    this._justDown = false;\n    this._justUp = false;\n    this._tick = -1;\n    return this;\n  },\n\n  /**\r\n   * Removes any bound event handlers and removes local references.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#destroy\r\n   * @since 3.16.0\r\n   */\n  destroy: function destroy() {\n    this.removeAllListeners();\n    this.originalEvent = null;\n  }\n});\nmodule.exports = Key;","map":null,"metadata":{},"sourceType":"script"}