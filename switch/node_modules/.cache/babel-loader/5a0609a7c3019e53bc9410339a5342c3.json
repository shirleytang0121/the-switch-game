{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Elastic ease-out.\r\n *\r\n * @function Phaser.Math.Easing.Elastic.Out\r\n * @since 3.0.0\r\n *\r\n * @param {number} v - The value to be tweened.\r\n * @param {number} [amplitude=0.1] - The amplitude of the elastic ease.\r\n * @param {number} [period=0.1] - Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles.\r\n *\r\n * @return {number} The tweened value.\r\n */\nvar Out = function Out(v, amplitude, period) {\n  if (amplitude === undefined) {\n    amplitude = 0.1;\n  }\n\n  if (period === undefined) {\n    period = 0.1;\n  }\n\n  if (v === 0) {\n    return 0;\n  } else if (v === 1) {\n    return 1;\n  } else {\n    var s = period / 4;\n\n    if (amplitude < 1) {\n      amplitude = 1;\n    } else {\n      s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n    }\n\n    return amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1;\n  }\n};\n\nmodule.exports = Out;","map":null,"metadata":{},"sourceType":"script"}