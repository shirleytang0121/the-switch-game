{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Length = require('../line/Length');\n\nvar Line = require('../line/Line');\n\nvar Perimeter = require('./Perimeter');\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Polygon.GetPoints\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The Polygon to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n */\n\n\nvar GetPoints = function GetPoints(polygon, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  var points = polygon.points;\n  var perimeter = Perimeter(polygon); //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n  if (!quantity) {\n    quantity = perimeter / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var position = perimeter * (i / quantity);\n    var accumulatedPerimeter = 0;\n\n    for (var j = 0; j < points.length; j++) {\n      var pointA = points[j];\n      var pointB = points[(j + 1) % points.length];\n      var line = new Line(pointA.x, pointA.y, pointB.x, pointB.y);\n      var length = Length(line);\n\n      if (position < accumulatedPerimeter || position > accumulatedPerimeter + length) {\n        accumulatedPerimeter += length;\n        continue;\n      }\n\n      var point = line.getPoint((position - accumulatedPerimeter) / length);\n      out.push(point);\n      break;\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":null,"metadata":{},"sourceType":"script"}