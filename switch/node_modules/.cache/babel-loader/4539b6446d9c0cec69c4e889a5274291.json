{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n/**\r\n * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n * information in the destination region.\r\n *\r\n * @function Phaser.Tilemaps.Components.Copy\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar Copy = function Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer) {\n  if (srcTileX < 0) {\n    srcTileX = 0;\n  }\n\n  if (srcTileY < 0) {\n    srcTileY = 0;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  var srcTiles = GetTilesWithin(srcTileX, srcTileY, width, height, null, layer);\n  var offsetX = destTileX - srcTileX;\n  var offsetY = destTileY - srcTileY;\n\n  for (var i = 0; i < srcTiles.length; i++) {\n    var tileX = srcTiles[i].x + offsetX;\n    var tileY = srcTiles[i].y + offsetY;\n\n    if (tileX >= 0 && tileX < layer.width && tileY >= 0 && tileY < layer.height) {\n      if (layer.data[tileY][tileX]) {\n        layer.data[tileY][tileX].copy(srcTiles[i]);\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    // Recalculate the faces within the destination area and neighboring tiles\n    CalculateFacesWithin(destTileX - 1, destTileY - 1, width + 2, height + 2, layer);\n  }\n};\n\nmodule.exports = Copy;","map":null,"metadata":{},"sourceType":"script"}