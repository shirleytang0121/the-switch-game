{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar TileToWorldX = require('./TileToWorldX');\n\nvar TileToWorldY = require('./TileToWorldY');\n\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar ReplaceByIndex = require('./ReplaceByIndex');\n/**\r\n * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n *\r\n * @function Phaser.Tilemaps.Components.CreateFromTiles\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a one-to-one mapping with the indexes array.\r\n * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e. scene.make.sprite).\r\n * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n */\n\n\nvar CreateFromTiles = function CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, layer) {\n  if (spriteConfig === undefined) {\n    spriteConfig = {};\n  }\n\n  if (!Array.isArray(indexes)) {\n    indexes = [indexes];\n  }\n\n  var tilemapLayer = layer.tilemapLayer;\n\n  if (scene === undefined) {\n    scene = tilemapLayer.scene;\n  }\n\n  if (camera === undefined) {\n    camera = scene.cameras.main;\n  }\n\n  var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\n  var sprites = [];\n  var i;\n\n  for (i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n\n    if (indexes.indexOf(tile.index) !== -1) {\n      spriteConfig.x = TileToWorldX(tile.x, camera, layer);\n      spriteConfig.y = TileToWorldY(tile.y, camera, layer);\n      var sprite = scene.make.sprite(spriteConfig);\n      sprites.push(sprite);\n    }\n  }\n\n  if (typeof replacements === 'number') {\n    //  Assume 1 replacement for all types of tile given\n    for (i = 0; i < indexes.length; i++) {\n      ReplaceByIndex(indexes[i], replacements, 0, 0, layer.width, layer.height, layer);\n    }\n  } else if (Array.isArray(replacements)) {\n    //  Assume 1 to 1 mapping with indexes array\n    for (i = 0; i < indexes.length; i++) {\n      ReplaceByIndex(indexes[i], replacements[i], 0, 0, layer.width, layer.height, layer);\n    }\n  }\n\n  return sprites;\n};\n\nmodule.exports = CreateFromTiles;","map":null,"metadata":{},"sourceType":"script"}