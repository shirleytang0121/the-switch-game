{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  Contains the plugins that Phaser uses globally and locally.\n//  These are the source objects, not instantiated.\nvar corePlugins = {}; //  Contains the plugins that the dev has loaded into their game\n//  These are the source objects, not instantiated.\n\nvar customPlugins = {};\n/**\r\n * @typedef {object} CorePluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the core plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n * @property {string} [mapping] - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @property {boolean} [custom=false] - Core Scene plugin or a Custom Scene plugin?\r\n */\n\n/**\r\n * @typedef {object} CustomPluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the custom plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n */\n\nvar PluginCache = {};\n/**\r\n * @namespace Phaser.Plugins.PluginCache\r\n */\n\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @method Phaser.Plugins.PluginCache.register\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {boolean} [custom=false] - Core Scene plugin or a Custom Scene plugin?\r\n */\n\nPluginCache.register = function (key, plugin, mapping, custom) {\n  if (custom === undefined) {\n    custom = false;\n  }\n\n  corePlugins[key] = {\n    plugin: plugin,\n    mapping: mapping,\n    custom: custom\n  };\n};\n/**\r\n * Stores a custom plugin in the global plugin cache.\r\n * The key must be unique, within the scope of the cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.registerCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {?any} data - A value to be passed to the plugin's `init` method.\r\n */\n\n\nPluginCache.registerCustom = function (key, plugin, mapping, data) {\n  customPlugins[key] = {\n    plugin: plugin,\n    mapping: mapping,\n    data: data\n  };\n};\n/**\r\n * Checks if the given key is already being used in the core plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the core cache, otherwise `false`.\r\n */\n\n\nPluginCache.hasCore = function (key) {\n  return corePlugins.hasOwnProperty(key);\n};\n/**\r\n * Checks if the given key is already being used in the custom plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the custom cache, otherwise `false`.\r\n */\n\n\nPluginCache.hasCustom = function (key) {\n  return customPlugins.hasOwnProperty(key);\n};\n/**\r\n * Returns the core plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to get.\r\n *\r\n * @return {CorePluginContainer} The core plugin object.\r\n */\n\n\nPluginCache.getCore = function (key) {\n  return corePlugins[key];\n};\n/**\r\n * Returns the custom plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {CustomPluginContainer} The custom plugin object.\r\n */\n\n\nPluginCache.getCustom = function (key) {\n  return customPlugins[key];\n};\n/**\r\n * Returns an object from the custom cache based on the given key that can be instantiated.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustomClass\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {function} The custom plugin object.\r\n */\n\n\nPluginCache.getCustomClass = function (key) {\n  return customPlugins.hasOwnProperty(key) ? customPlugins[key].plugin : null;\n};\n/**\r\n * Removes a core plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.remove\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to remove.\r\n */\n\n\nPluginCache.remove = function (key) {\n  if (corePlugins.hasOwnProperty(key)) {\n    delete corePlugins[key];\n  }\n};\n/**\r\n * Removes a custom plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.removeCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to remove.\r\n */\n\n\nPluginCache.removeCustom = function (key) {\n  if (customPlugins.hasOwnProperty(key)) {\n    delete customPlugins[key];\n  }\n};\n/**\r\n * Removes all Core Plugins.\r\n * \r\n * This includes all of the internal system plugins that Phaser needs, like the Input Plugin and Loader Plugin.\r\n * So be sure you only call this if you do not wish to run Phaser again.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCorePlugins\r\n * @since 3.12.0\r\n */\n\n\nPluginCache.destroyCorePlugins = function () {\n  for (var key in corePlugins) {\n    if (corePlugins.hasOwnProperty(key)) {\n      delete corePlugins[key];\n    }\n  }\n};\n/**\r\n * Removes all Custom Plugins.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCustomPlugins\r\n * @since 3.12.0\r\n */\n\n\nPluginCache.destroyCustomPlugins = function () {\n  for (var key in customPlugins) {\n    if (customPlugins.hasOwnProperty(key)) {\n      delete customPlugins[key];\n    }\n  }\n};\n\nmodule.exports = PluginCache;","map":null,"metadata":{},"sourceType":"script"}