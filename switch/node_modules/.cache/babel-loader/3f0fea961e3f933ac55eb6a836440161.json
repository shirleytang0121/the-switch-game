{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar ImpactBody = require('./ImpactBody');\n\nvar ImpactImage = require('./ImpactImage');\n\nvar ImpactSprite = require('./ImpactSprite');\n/**\r\n * @classdesc\r\n * The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - A reference to the Impact Physics world.\r\n */\n\n\nvar Factory = new Class({\n  initialize: function Factory(world) {\n    /**\r\n     * A reference to the Impact Physics world.\r\n     *\r\n     * @name Phaser.Physics.Impact.Factory#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n    this.world = world;\n    /**\r\n     * A reference to the Scene.Systems this Impact Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Impact.Factory#sys\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.sys = world.scene.sys;\n  },\n\n  /**\r\n   * Creates a new ImpactBody object and adds it to the physics simulation.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#body\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of the body in the physics world.\r\n   * @param {number} y - The vertical position of the body in the physics world.\r\n   * @param {number} width - The width of the body.\r\n   * @param {number} height - The height of the body.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactBody} The ImpactBody object that was created.\r\n   */\n  body: function body(x, y, width, height) {\n    return new ImpactBody(this.world, x, y, width, height);\n  },\n\n  /**\r\n   * Adds an Impact Physics Body to the given Game Object.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to receive the physics body.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n   */\n  existing: function existing(gameObject) {\n    var x = gameObject.x - gameObject.frame.centerX;\n    var y = gameObject.y - gameObject.frame.centerY;\n    var w = gameObject.width;\n    var h = gameObject.height;\n    gameObject.body = this.world.create(x, y, w, h);\n    gameObject.body.parent = gameObject;\n    gameObject.body.gameObject = gameObject;\n    return gameObject;\n  },\n\n  /**\r\n   * Creates a new ImpactImage object and adds it to the physics world.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#image\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactImage} The ImpactImage object that was created.\r\n   */\n  image: function image(x, y, key, frame) {\n    var image = new ImpactImage(this.world, x, y, key, frame);\n    this.sys.displayList.add(image);\n    return image;\n  },\n\n  /**\r\n   * Creates a new ImpactSprite object and adds it to the physics world.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#sprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactSprite} The ImpactSprite object that was created.\r\n   */\n  sprite: function sprite(x, y, key, frame) {\n    var sprite = new ImpactSprite(this.world, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    return sprite;\n  },\n\n  /**\r\n   * Destroys this Factory.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function destroy() {\n    this.world = null;\n    this.sys = null;\n  }\n});\nmodule.exports = Factory;","map":null,"metadata":{},"sourceType":"script"}