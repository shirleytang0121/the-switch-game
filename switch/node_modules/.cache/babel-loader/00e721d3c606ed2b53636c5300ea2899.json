{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * @typedef {object} MapDataConfig\r\n * @property {string} [name] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @property {number} [width=0] - The width of the entire tilemap.\r\n * @property {number} [height=0] - The height of the entire tilemap.\r\n * @property {number} [tileWidth=0] - The width of the tiles.\r\n * @property {number} [tileHeight=0] - The height of the tiles.\r\n * @property {number} [widthInPixels] - The width in pixels of the entire tilemap.\r\n * @property {number} [heightInPixels] - The height in pixels of the entire tilemap.\r\n * @property {integer} [format] - The format of the Tilemap, as defined in Tiled.\r\n * @property {string} [orientation] - The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.\r\n * @property {string} [renderOrder] - Determines the draw order of tilemap. Default is right-down.\r\n * @property {number} [version] - The version of Tiled the map uses.\r\n * @property {number} [properties] - Map specific properties (can be specified in Tiled).\r\n * @property {Phaser.Tilemaps.LayerData[]} [layers] - The layers of the tilemap.\r\n * @property {array} [images] - An array with all the layers configured to the MapData.\r\n * @property {object} [objects] - An array of Tiled Image Layers.\r\n * @property {object} [collision] - An object of Tiled Object Layers.\r\n * @property {Phaser.Tilemaps.Tileset[]} [tilesets] - The tilesets the map uses.\r\n * @property {array} [imageCollections] - The collection of images the map uses(specified in Tiled).\r\n * @property {array} [tiles] - [description]\r\n */\n\n/**\r\n * @classdesc\r\n * A class for representing data about a map. Maps are parsed from CSV, Tiled, etc. into this\r\n * format. A Tilemap object get a copy of this data and then unpacks the needed properties into\r\n * itself.\r\n *\r\n * @class MapData\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {MapDataConfig} [config] - [description]\r\n */\n\n\nvar MapData = new Class({\n  initialize: function MapData(config) {\n    if (config === undefined) {\n      config = {};\n    }\n    /**\r\n     * The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.name = GetFastValue(config, 'name', 'map');\n    /**\r\n     * The width of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = GetFastValue(config, 'width', 0);\n    /**\r\n     * The height of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = GetFastValue(config, 'height', 0);\n    /**\r\n     * The width of the tiles.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tileWidth\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileWidth = GetFastValue(config, 'tileWidth', 0);\n    /**\r\n     * The height of the tiles.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tileHeight\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileHeight = GetFastValue(config, 'tileHeight', 0);\n    /**\r\n     * The width in pixels of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#widthInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.widthInPixels = GetFastValue(config, 'widthInPixels', this.width * this.tileWidth);\n    /**\r\n     * The height in pixels of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#heightInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.heightInPixels = GetFastValue(config, 'heightInPixels', this.height * this.tileHeight);\n    /**\r\n     * [description]\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#format\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.format = GetFastValue(config, 'format', null);\n    /**\r\n     * The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#orientation\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.orientation = GetFastValue(config, 'orientation', 'orthogonal');\n    /**\r\n     * Determines the draw order of tilemap. Default is right-down\r\n     * \r\n     * 0, or 'right-down'\r\n     * 1, or 'left-down'\r\n     * 2, or 'right-up'\r\n     * 3, or 'left-up'\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#renderOrder\r\n     * @type {string}\r\n     * @since 3.12.0\r\n     */\n\n    this.renderOrder = GetFastValue(config, 'renderOrder', 'right-down');\n    /**\r\n     * The version of the map data (as specified in Tiled).\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#version\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.version = GetFastValue(config, 'version', '1');\n    /**\r\n     * Map specific properties (can be specified in Tiled)\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = GetFastValue(config, 'properties', {});\n    /**\r\n     * An array with all the layers configured to the MapData.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#layers\r\n     * @type {(Phaser.Tilemaps.LayerData[]|Phaser.Tilemaps.ObjectLayer)}\r\n     * @since 3.0.0\r\n     */\n\n    this.layers = GetFastValue(config, 'layers', []);\n    /**\r\n     * An array of Tiled Image Layers.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#images\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.images = GetFastValue(config, 'images', []);\n    /**\r\n     * An object of Tiled Object Layers.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#objects\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.objects = GetFastValue(config, 'objects', {});\n    /**\r\n      * An object of collision data. Must be created as physics object or will return undefined.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#collision\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.collision = GetFastValue(config, 'collision', {});\n    /**\r\n     * An array of Tilesets.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tilesets\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilesets = GetFastValue(config, 'tilesets', []);\n    /**\r\n     * The collection of images the map uses(specified in Tiled)\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#imageCollections\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.imageCollections = GetFastValue(config, 'imageCollections', []);\n    /**\r\n     * [description]\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tiles\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.tiles = GetFastValue(config, 'tiles', []);\n  }\n});\nmodule.exports = MapData;","map":null,"metadata":{},"sourceType":"script"}