{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar LeaderboardScore = require('./LeaderboardScore');\n/**\r\n * @classdesc\r\n * This class represents one single Leaderboard that belongs to a Facebook Instant Game.\r\n * \r\n * You do not need to instantiate this class directly, it will be created when you use the\r\n * `getLeaderboard()` method of the main plugin.\r\n *\r\n * @class Leaderboard\r\n * @memberOf Phaser.FacebookInstantGamesPlugin\r\n * @constructor\r\n * @since 3.13.0\r\n * \r\n * @param {Phaser.FacebookInstantGamesPlugin} plugin - A reference to the Facebook Instant Games Plugin.\r\n * @param {any} data - An Instant Game leaderboard instance.\r\n */\n\n\nvar Leaderboard = new Class({\n  Extends: EventEmitter,\n  initialize: function Leaderboard(plugin, data) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Facebook Instant Games Plugin.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#plugin\r\n     * @type {Phaser.FacebookInstantGamesPlugin}\r\n     * @since 3.13.0\r\n     */\n\n    this.plugin = plugin;\n    /**\r\n     * An Instant Game leaderboard instance.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#ref\r\n     * @type {any}\r\n     * @since 3.13.0\r\n     */\n\n    this.ref = data;\n    /**\r\n     * The name of the leaderboard.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#name\r\n     * @type {string}\r\n     * @since 3.13.0\r\n     */\n\n    this.name = data.getName();\n    /**\r\n     * The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#contextID\r\n     * @type {string}\r\n     * @since 3.13.0\r\n     */\n\n    this.contextID = data.getContextID();\n    /**\r\n     * The total number of player entries in the leaderboard.\r\n     * This value defaults to zero. Populate it via the `getEntryCount()` method.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#entryCount\r\n     * @type {integer}\r\n     * @since 3.13.0\r\n     */\n\n    this.entryCount = 0;\n    /**\r\n     * The players score object.\r\n     * This value defaults to `null`. Populate it via the `getPlayerScore()` method.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#playerScore\r\n     * @type {LeaderboardScore}\r\n     * @since 3.13.0\r\n     */\n\n    this.playerScore = null;\n    /**\r\n     * The scores in the Leaderboard from the currently requested range.\r\n     * This value defaults to an empty array. Populate it via the `getScores()` method.\r\n     * The contents of this array are reset each time `getScores()` is called.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesPlugin.Leaderboard#scores\r\n     * @type {LeaderboardScore[]}\r\n     * @since 3.13.0\r\n     */\n\n    this.scores = [];\n    this.getEntryCount();\n  },\n\n  /**\r\n   * Fetches the total number of player entries in the leaderboard.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getEntryCount\r\n   * @since 3.13.0\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getEntryCount: function getEntryCount() {\n    var _this = this;\n\n    this.ref.getEntryCountAsync().then(function (count) {\n      _this.entryCount = count;\n\n      _this.emit('getentrycount', count, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\r\n   * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `setscore` event along with the LeaderboardScore object and the name of the Leaderboard.\r\n   * \r\n   * If the save fails the event will send `null` as the score value.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#setScore\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} score - The new score for the player. Must be a 64-bit integer number.\r\n   * @param {(string|any)} [data] - Metadata to associate with the stored score. Must be less than 2KB in size. If an object is given it will be passed to `JSON.stringify`.\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  setScore: function setScore(score, data) {\n    if (data === undefined) {\n      data = '';\n    }\n\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    }\n\n    var _this = this;\n\n    this.ref.setScoreAsync(score, data).then(function (entry) {\n      if (entry) {\n        var score = LeaderboardScore(entry);\n        _this.playerScore = score;\n\n        _this.emit('setscore', score, _this.name);\n      } else {\n        _this.emit('setscore', null, _this.name);\n      }\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Gets the players leaderboard entry and stores it in the `playerScore` property.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n   * \r\n   * If the player has not yet saved a score, the event will send `null` as the score value, and `playerScore` will be set to `null` as well.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getPlayerScore\r\n   * @since 3.13.0\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getPlayerScore: function getPlayerScore() {\n    var _this = this;\n\n    this.ref.getPlayerEntryAsync().then(function (entry) {\n      if (entry) {\n        var score = LeaderboardScore(entry);\n        _this.playerScore = score;\n\n        _this.emit('getplayerscore', score, _this.name);\n      } else {\n        _this.emit('getplayerscore', null, _this.name);\n      }\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getScores\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n   * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getScores: function getScores(count, offset) {\n    if (count === undefined) {\n      count = 10;\n    }\n\n    if (offset === undefined) {\n      offset = 0;\n    }\n\n    var _this = this;\n\n    this.ref.getEntriesAsync(count, offset).then(function (entries) {\n      _this.scores = [];\n      entries.forEach(function (entry) {\n        _this.scores.push(LeaderboardScore(entry));\n      });\n\n      _this.emit('getscores', _this.scores, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Retrieves a set of leaderboard entries, based on the current player's connected players (including the current player), ordered by local rank within the set of connected players.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getconnectedscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesPlugin.Leaderboard#getConnectedScores\r\n   * @since 3.16.0\r\n   * \r\n   * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n   * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getConnectedScores: function getConnectedScores(count, offset) {\n    if (count === undefined) {\n      count = 10;\n    }\n\n    if (offset === undefined) {\n      offset = 0;\n    }\n\n    var _this = this;\n\n    this.ref.getConnectedPlayerEntriesAsync().then(function (entries) {\n      _this.scores = [];\n      entries.forEach(function (entry) {\n        _this.scores.push(LeaderboardScore(entry));\n      });\n\n      _this.emit('getconnectedscores', _this.scores, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  }\n});\nmodule.exports = Leaderboard;","map":null,"metadata":{},"sourceType":"script"}