{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * @callback HitAreaCallback\r\n *\r\n * @param {any} hitArea - The hit area object.\r\n * @param {number} x - The translated x coordinate of the hit test event.\r\n * @param {number} y - The translated y coordinate of the hit test event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that invoked the hit test.\r\n *\r\n * @return {boolean} `true` if the coordinates fall within the space of the hitArea, otherwise `false`.\r\n */\n\n/**\r\n * @typedef {object} Phaser.Input.InteractiveObject\r\n *\r\n * @property {Phaser.GameObjects.GameObject} gameObject - The Game Object to which this Interactive Object is bound.\r\n * @property {boolean} enabled - Is this Interactive Object currently enabled for input events?\r\n * @property {boolean} draggable - Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.\r\n * @property {boolean} dropZone - Is this Interactive Object a drag-targets drop zone? Set when the object is created.\r\n * @property {(boolean|string)} cursor - Should this Interactive Object change the cursor (via css) when over? (desktop only)\r\n * @property {?Phaser.GameObjects.GameObject} target - An optional drop target for a draggable Interactive Object.\r\n * @property {Phaser.Cameras.Scene2D.Camera} camera - The most recent Camera to be tested against this Interactive Object.\r\n * @property {any} hitArea - The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\r\n * @property {HitAreaCallback} hitAreaCallback - The 'contains' check callback that the hit area shape will use for all hit tests.\r\n * @property {number} localX - The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @property {number} localY - The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @property {(0|1|2)} dragState - The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.\r\n * @property {number} dragStartX - The x coordinate that the Pointer started dragging this Interactive Object from.\r\n * @property {number} dragStartY - The y coordinate that the Pointer started dragging this Interactive Object from.\r\n * @property {number} dragX - The x coordinate that this Interactive Object is currently being dragged to.\r\n * @property {number} dragY - The y coordinate that this Interactive Object is currently being dragged to.\r\n */\n\n/**\r\n * Creates a new Interactive Object.\r\n * \r\n * This is called automatically by the Input Manager when you enable a Game Object for input.\r\n *\r\n * The resulting Interactive Object is mapped to the Game Object's `input` property.\r\n *\r\n * @function Phaser.Input.CreateInteractiveObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to which this Interactive Object is bound.\r\n * @param {any} hitArea - The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\r\n * @param {HitAreaCallback} hitAreaCallback - The 'contains' check callback that the hit area shape will use for all hit tests.\r\n *\r\n * @return {Phaser.Input.InteractiveObject} The new Interactive Object.\r\n */\nvar CreateInteractiveObject = function CreateInteractiveObject(gameObject, hitArea, hitAreaCallback) {\n  return {\n    gameObject: gameObject,\n    enabled: true,\n    draggable: false,\n    dropZone: false,\n    cursor: false,\n    target: null,\n    camera: null,\n    hitArea: hitArea,\n    hitAreaCallback: hitAreaCallback,\n    localX: 0,\n    localY: 0,\n    //  0 = Not being dragged\n    //  1 = Being checked for dragging\n    //  2 = Being dragged\n    dragState: 0,\n    dragStartX: 0,\n    dragStartY: 0,\n    dragX: 0,\n    dragY: 0\n  };\n};\n\nmodule.exports = CreateInteractiveObject;","map":null,"metadata":{},"sourceType":"script"}