{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar EarCut = require('../polygon/Earcut');\n\nvar Triangle = require('./Triangle');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Triangle.BuildFromPolygon\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Triangle[]} O - [out,$return]\r\n *\r\n * @param {array} data - A flat array of vertice coordinates like [x0,y0, x1,y1, x2,y2, ...]\r\n * @param {array} [holes=null] - An array of hole indices if any (e.g. [5, 8] for a 12-vertice input would mean one hole with vertices 5–7 and another with 8–11).\r\n * @param {number} [scaleX=1] - [description]\r\n * @param {number} [scaleY=1] - [description]\r\n * @param {(array|Phaser.Geom.Triangle[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Triangle[])} [description]\r\n */\n\n\nvar BuildFromPolygon = function BuildFromPolygon(data, holes, scaleX, scaleY, out) {\n  if (holes === undefined) {\n    holes = null;\n  }\n\n  if (scaleX === undefined) {\n    scaleX = 1;\n  }\n\n  if (scaleY === undefined) {\n    scaleY = 1;\n  }\n\n  if (out === undefined) {\n    out = [];\n  }\n\n  var tris = EarCut(data, holes);\n  var a;\n  var b;\n  var c;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x3;\n  var y3;\n\n  for (var i = 0; i < tris.length; i += 3) {\n    a = tris[i];\n    b = tris[i + 1];\n    c = tris[i + 2];\n    x1 = data[a * 2] * scaleX;\n    y1 = data[a * 2 + 1] * scaleY;\n    x2 = data[b * 2] * scaleX;\n    y2 = data[b * 2 + 1] * scaleY;\n    x3 = data[c * 2] * scaleX;\n    y3 = data[c * 2 + 1] * scaleY;\n    out.push(new Triangle(x1, y1, x2, y2, x3, y3));\n  }\n\n  return out;\n};\n\nmodule.exports = BuildFromPolygon;","map":null,"metadata":{},"sourceType":"script"}