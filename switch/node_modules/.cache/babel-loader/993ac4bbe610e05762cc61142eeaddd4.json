{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CONST = require('./const');\n\nvar CustomSet = require('../structs/Set');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar FileTypesManager = require('./FileTypesManager');\n\nvar GetFastValue = require('../utils/object/GetFastValue');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar XHRSettings = require('./XHRSettings');\n/**\r\n * @classdesc\r\n * The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\r\n * You typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\r\n * called before the Scenes `create` method, allowing you to preload assets that the Scene may need.\r\n *\r\n * If you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\r\n * yourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\r\n *\r\n * The Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\r\n * Files are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\r\n *\r\n * Once the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\r\n * event, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\r\n * simply adding a new file to it, while running, will ensure it's added into the current queue.\r\n *\r\n * Every Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\r\n * assets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\r\n * file inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\r\n * for loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\r\n * in your game.\r\n *\r\n * The Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\r\n * when it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\r\n * See those files for more details.\r\n *\r\n * @class LoaderPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Loader instance.\r\n */\n\n\nvar LoaderPlugin = new Class({\n  Extends: EventEmitter,\n  initialize: function LoaderPlugin(scene) {\n    EventEmitter.call(this);\n    var gameConfig = scene.sys.game.config;\n    var sceneConfig = scene.sys.settings.loader;\n    /**\r\n     * The Scene which owns this Loader instance.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene Systems.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * A reference to the global Cache Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#cacheManager\r\n     * @type {Phaser.Cache.CacheManager}\r\n     * @since 3.7.0\r\n     */\n\n    this.cacheManager = scene.sys.cache;\n    /**\r\n     * A reference to the global Texture Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#textureManager\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @since 3.7.0\r\n     */\n\n    this.textureManager = scene.sys.textures;\n    /**\r\n     * A reference to the global Scene Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#sceneManager\r\n     * @type {Phaser.Scenes.SceneManager}\r\n     * @protected\r\n     * @since 3.16.0\r\n     */\n\n    this.sceneManager = scene.sys.game.scene; //  Inject the available filetypes into the Loader\n\n    FileTypesManager.install(this);\n    /**\r\n     * An optional prefix that is automatically prepended to the start of every file key.\r\n     * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n     * You can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\r\n     * from that point on. It does _not_ change any file already in the load queue.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#prefix\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.7.0\r\n     */\n\n    this.prefix = '';\n    /**\r\n     * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n     *\r\n     * ```javascript\r\n     * this.load.path = \"images/sprites/\";\r\n     * this.load.image(\"ball\", \"ball.png\");\r\n     * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n     * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n     * ```\r\n     *\r\n     * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n     * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n     * given as it's an absolute URL.\r\n     *\r\n     * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n     *\r\n     * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#path\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.path = '';\n    /**\r\n     * If you want to append a URL before the path of any asset you can set this here.\r\n     * \r\n     * Useful if allowing the asset base url to be configured outside of the game code.\r\n     * \r\n     * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#baseURL\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.baseURL = '';\n    this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\n    this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\n    this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\n    /**\r\n     * The number of concurrent / parallel resources to try and fetch at once.\r\n     *\r\n     * Old browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\r\n     *\r\n     * The default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#maxParallelDownloads\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.maxParallelDownloads = GetFastValue(sceneConfig, 'maxParallelDownloads', gameConfig.loaderMaxParallelDownloads);\n    /**\r\n     * xhr specific global settings (can be overridden on a per-file basis)\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#xhr\r\n     * @type {XHRSettingsObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.xhr = XHRSettings(GetFastValue(sceneConfig, 'responseType', gameConfig.loaderResponseType), GetFastValue(sceneConfig, 'async', gameConfig.loaderAsync), GetFastValue(sceneConfig, 'user', gameConfig.loaderUser), GetFastValue(sceneConfig, 'password', gameConfig.loaderPassword), GetFastValue(sceneConfig, 'timeout', gameConfig.loaderTimeout));\n    /**\r\n     * The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#crossOrigin\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.crossOrigin = GetFastValue(sceneConfig, 'crossOrigin', gameConfig.loaderCrossOrigin);\n    /**\r\n     * The total number of files to load. It may not always be accurate because you may add to the Loader during the process\r\n     * of loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalToLoad\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalToLoad = 0;\n    /**\r\n     * The progress of the current load queue, as a float value between 0 and 1.\r\n     * This is updated automatically as files complete loading.\r\n     * Note that it is possible for this value to go down again if you add content to the current load queue during a load.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#progress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Files are placed in this Set when they're added to the Loader via `addFile`.\r\n     * \r\n     * They are moved to the `inflight` Set when they start loading, and assuming a successful\r\n     * load, to the `queue` Set for further processing.\r\n     *\r\n     * By the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#list\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.list = new CustomSet();\n    /**\r\n     * Files are stored in this Set while they're in the process of being loaded.\r\n     * \r\n     * Upon a successful load they are moved to the `queue` Set.\r\n     * \r\n     * By the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#inflight\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.inflight = new CustomSet();\n    /**\r\n     * Files are stored in this Set while they're being processed.\r\n     * \r\n     * If the process is successful they are moved to their final destination, which could be\r\n     * a Cache or the Texture Manager.\r\n     * \r\n     * At the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#queue\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.queue = new CustomSet();\n    /**\r\n     * A temporary Set in which files are stored after processing,\r\n     * awaiting destruction at the end of the load process.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#_deleteQueue\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @private\r\n     * @since 3.7.0\r\n     */\n\n    this._deleteQueue = new CustomSet();\n    /**\r\n     * The total number of files that failed to load during the most recent load.\r\n     * This value is reset when you call `Loader.start`.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalFailed\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.totalFailed = 0;\n    /**\r\n     * The total number of files that successfully loaded during the most recent load.\r\n     * This value is reset when you call `Loader.start`.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalComplete\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.totalComplete = 0;\n    /**\r\n     * The current state of the Loader.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#state\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.state = CONST.LOADER_IDLE;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.pluginStart, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#pluginStart\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  pluginStart: function pluginStart() {\n    this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * If you want to append a URL before the path of any asset you can set this here.\r\n   * \r\n   * Useful if allowing the asset base url to be configured outside of the game code.\r\n   * \r\n   * Once a base URL is set it will affect every file loaded by the Loader from that point on. It does _not_ change any\r\n   * file _already_ being loaded. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setBaseURL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [url] - The URL to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setBaseURL: function setBaseURL(url) {\n    if (url === undefined) {\n      url = '';\n    }\n\n    if (url !== '' && url.substr(-1) !== '/') {\n      url = url.concat('/');\n    }\n\n    this.baseURL = url;\n    return this;\n  },\n\n  /**\r\n   * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n   *\r\n   * ```javascript\r\n   * this.load.setPath(\"images/sprites/\");\r\n   * this.load.image(\"ball\", \"ball.png\");\r\n   * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n   * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n   * ```\r\n   *\r\n   * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n   * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n   * given as it's an absolute URL.\r\n   *\r\n   * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n   * \r\n   * Once a path is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n   * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setPath\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [path] - The path to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setPath: function setPath(path) {\n    if (path === undefined) {\n      path = '';\n    }\n\n    if (path !== '' && path.substr(-1) !== '/') {\n      path = path.concat('/');\n    }\n\n    this.path = path;\n    return this;\n  },\n\n  /**\r\n   * An optional prefix that is automatically prepended to the start of every file key.\r\n   * \r\n   * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n   * \r\n   * Once a prefix is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n   * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setPrefix\r\n   * @since 3.7.0\r\n   *\r\n   * @param {string} [prefix] - The prefix to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setPrefix: function setPrefix(prefix) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n\n    this.prefix = prefix;\n    return this;\n  },\n\n  /**\r\n   * Sets the Cross Origin Resource Sharing value used when loading files.\r\n   * \r\n   * Files can override this value on a per-file basis by specifying an alternative `crossOrigin` value in their file config.\r\n   * \r\n   * Once CORs is set it will then affect every file loaded by the Loader from that point on, as long as they don't have\r\n   * their own CORs setting. To reset it, call this method with no arguments.\r\n   *\r\n   * For more details about CORs see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setCORS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [crossOrigin] - The value to use for the `crossOrigin` property in the load request.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setCORS: function setCORS(crossOrigin) {\n    this.crossOrigin = crossOrigin;\n    return this;\n  },\n\n  /**\r\n   * Adds a file, or array of files, into the load queue.\r\n   *\r\n   * The file must be an instance of `Phaser.Loader.File`, or a class that extends it. The Loader will check that the key\r\n   * used by the file won't conflict with any other key either in the loader, the inflight queue or the target cache.\r\n   * If allowed it will then add the file into the pending list, read for the load to start. Or, if the load has already\r\n   * started, ready for the next batch of files to be pulled from the list to the inflight queue.\r\n   *\r\n   * You should not normally call this method directly, but rather use one of the Loader methods like `image` or `atlas`,\r\n   * however you can call this as long as the file given to it is well formed.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#addFile\r\n   * @fires Phaser.Loader.Events#ADD\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Loader.File|Phaser.Loader.File[])} file - The file, or array of files, to be added to the load queue.\r\n   */\n  addFile: function addFile(file) {\n    if (!Array.isArray(file)) {\n      file = [file];\n    }\n\n    for (var i = 0; i < file.length; i++) {\n      var item = file[i]; //  Does the file already exist in the cache or texture manager?\n      //  Or will it conflict with a file already in the queue or inflight?\n\n      if (!this.keyExists(item)) {\n        this.list.set(item);\n        this.emit(Events.ADD, item.key, item.type, this, item);\n\n        if (this.isLoading()) {\n          this.totalToLoad++;\n          this.updateProgress();\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Checks the key and type of the given file to see if it will conflict with anything already\r\n   * in a Cache, the Texture Manager, or the list or inflight queues.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#keyExists\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The file to check the key of.\r\n   *\r\n   * @return {boolean} `true` if adding this file will cause a cache or queue conflict, otherwise `false`.\r\n   */\n  keyExists: function keyExists(file) {\n    var keyConflict = file.hasCacheConflict();\n\n    if (!keyConflict) {\n      this.list.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n    }\n\n    if (!keyConflict && this.isLoading()) {\n      this.inflight.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n      this.queue.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n    }\n\n    return keyConflict;\n  },\n\n  /**\r\n   * Takes a well formed, fully parsed pack file object and adds its entries into the load queue. Usually you do not call\r\n   * this method directly, but instead use `Loader.pack` and supply a path to a JSON file that holds the\r\n   * pack data. However, if you've got the data prepared you can pass it to this method.\r\n   *\r\n   * You can also provide an optional key. If you do then it will only add the entries from that part of the pack into\r\n   * to the load queue. If not specified it will add all entries it finds. For more details about the pack file format\r\n   * see the `LoaderPlugin.pack` method.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#addPack\r\n   * @since 3.7.0\r\n   *\r\n   * @param {any} data - The Pack File data to be parsed and each entry of it to added to the load queue.\r\n   * @param {string} [packKey] - An optional key to use from the pack file data.\r\n   *\r\n   * @return {boolean} `true` if any files were added to the queue, otherwise `false`.\r\n   */\n  addPack: function addPack(pack, packKey) {\n    //  if no packKey provided we'll add everything to the queue\n    if (packKey && pack.hasOwnProperty(packKey)) {\n      pack = {\n        packKey: pack[packKey]\n      };\n    }\n\n    var total = 0; //  Store the loader settings in case this pack replaces them\n\n    var currentBaseURL = this.baseURL;\n    var currentPath = this.path;\n    var currentPrefix = this.prefix; //  Here we go ...\n\n    for (var key in pack) {\n      var config = pack[key]; //  Any meta data to process?\n\n      var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\n      var path = GetFastValue(config, 'path', currentPath);\n      var prefix = GetFastValue(config, 'prefix', currentPrefix);\n      var files = GetFastValue(config, 'files', null);\n      var defaultType = GetFastValue(config, 'defaultType', 'void');\n\n      if (Array.isArray(files)) {\n        this.setBaseURL(baseURL);\n        this.setPath(path);\n        this.setPrefix(prefix);\n\n        for (var i = 0; i < files.length; i++) {\n          var file = files[i];\n          var type = file.hasOwnProperty('type') ? file.type : defaultType;\n\n          if (this[type]) {\n            this[type](file);\n            total++;\n          }\n        }\n      }\n    } //  Reset the loader settings\n\n\n    this.setBaseURL(currentBaseURL);\n    this.setPath(currentPath);\n    this.setPrefix(currentPrefix);\n    return total > 0;\n  },\n\n  /**\r\n   * Is the Loader actively loading, or processing loaded files?\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#isLoading\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Loader is busy loading or processing, otherwise `false`.\r\n   */\n  isLoading: function isLoading() {\n    return this.state === CONST.LOADER_LOADING || this.state === CONST.LOADER_PROCESSING;\n  },\n\n  /**\r\n   * Is the Loader ready to start a new load?\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#isReady\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Loader is ready to start a new load, otherwise `false`.\r\n   */\n  isReady: function isReady() {\n    return this.state === CONST.LOADER_IDLE || this.state === CONST.LOADER_COMPLETE;\n  },\n\n  /**\r\n   * Starts the Loader running. This will reset the progress and totals and then emit a `start` event.\r\n   * If there is nothing in the queue the Loader will immediately complete, otherwise it will start\r\n   * loading the first batch of files.\r\n   *\r\n   * The Loader is started automatically if the queue is populated within your Scenes `preload` method.\r\n   *\r\n   * However, outside of this, you need to call this method to start it.\r\n   *\r\n   * If the Loader is already running this method will simply return.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#start\r\n   * @fires Phaser.Loader.Events#START\r\n   * @since 3.0.0\r\n   */\n  start: function start() {\n    if (!this.isReady()) {\n      return;\n    }\n\n    this.progress = 0;\n    this.totalFailed = 0;\n    this.totalComplete = 0;\n    this.totalToLoad = this.list.size;\n    this.emit(Events.START, this);\n\n    if (this.list.size === 0) {\n      this.loadComplete();\n    } else {\n      this.state = CONST.LOADER_LOADING;\n      this.inflight.clear();\n      this.queue.clear();\n      this.updateProgress();\n      this.checkLoadQueue();\n      this.systems.events.on(SceneEvents.UPDATE, this.update, this);\n    }\n  },\n\n  /**\r\n   * Called automatically during the load process.\r\n   * It updates the `progress` value and then emits a progress event, which you can use to\r\n   * display a loading bar in your game.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#updateProgress\r\n   * @fires Phaser.Loader.Events#PROGRESS\r\n   * @since 3.0.0\r\n   */\n  updateProgress: function updateProgress() {\n    this.progress = 1 - (this.list.size + this.inflight.size) / this.totalToLoad;\n    this.emit(Events.PROGRESS, this.progress);\n  },\n\n  /**\r\n   * Called automatically during the load process.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#update\r\n   * @since 3.10.0\r\n   */\n  update: function update() {\n    if (this.state === CONST.LOADER_LOADING && this.list.size > 0 && this.inflight.size < this.maxParallelDownloads) {\n      this.checkLoadQueue();\n    }\n  },\n\n  /**\r\n   * An internal method called by the Loader.\r\n   * \r\n   * It will check to see if there are any more files in the pending list that need loading, and if so it will move\r\n   * them from the list Set into the inflight Set, set their CORs flag and start them loading.\r\n   * \r\n   * It will carrying on doing this for each file in the pending list until it runs out, or hits the max allowed parallel downloads.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#checkLoadQueue\r\n   * @private\r\n   * @since 3.7.0\r\n   */\n  checkLoadQueue: function checkLoadQueue() {\n    this.list.each(function (file) {\n      if (file.state === CONST.FILE_POPULATED || file.state === CONST.FILE_PENDING && this.inflight.size < this.maxParallelDownloads) {\n        this.inflight.set(file);\n        this.list.delete(file); //  If the file doesn't have its own crossOrigin set, we'll use the Loaders (which is undefined by default)\n\n        if (!file.crossOrigin) {\n          file.crossOrigin = this.crossOrigin;\n        }\n\n        file.load();\n      }\n\n      if (this.inflight.size === this.maxParallelDownloads) {\n        //  Tells the Set iterator to abort\n        return false;\n      }\n    }, this);\n  },\n\n  /**\r\n   * An internal method called automatically by the XHRLoader belong to a File.\r\n   * \r\n   * This method will remove the given file from the inflight Set and update the load progress.\r\n   * If the file was successful its `onProcess` method is called, otherwise it is added to the delete queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#nextFile\r\n   * @fires Phaser.Loader.Events#FILE_LOAD\r\n   * @fires Phaser.Loader.Events#FILE_LOAD_ERROR\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that just finished loading, or errored during load.\r\n   * @param {boolean} success - `true` if the file loaded successfully, otherwise `false`.\r\n   */\n  nextFile: function nextFile(file, success) {\n    //  Has the game been destroyed during load? If so, bail out now.\n    if (!this.inflight) {\n      return;\n    }\n\n    this.inflight.delete(file);\n    this.updateProgress();\n\n    if (success) {\n      this.totalComplete++;\n      this.queue.set(file);\n      this.emit(Events.FILE_LOAD, file);\n      file.onProcess();\n    } else {\n      this.totalFailed++;\n\n      this._deleteQueue.set(file);\n\n      this.emit(Events.FILE_LOAD_ERROR, file);\n      this.fileProcessComplete(file);\n    }\n  },\n\n  /**\r\n   * An internal method that is called automatically by the File when it has finished processing.\r\n   *\r\n   * If the process was successful, and the File isn't part of a MultiFile, its `addToCache` method is called.\r\n   *\r\n   * It this then removed from the queue. If there are no more files to load `loadComplete` is called.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#fileProcessComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The file that has finished processing.\r\n   */\n  fileProcessComplete: function fileProcessComplete(file) {\n    //  Has the game been destroyed during load? If so, bail out now.\n    if (!this.scene || !this.systems || !this.systems.game || this.systems.game.pendingDestroy) {\n      return;\n    } //  This file has failed, so move it to the failed Set\n\n\n    if (file.state === CONST.FILE_ERRORED) {\n      if (file.multiFile) {\n        file.multiFile.onFileFailed(file);\n      }\n    } else if (file.state === CONST.FILE_COMPLETE) {\n      if (file.multiFile) {\n        if (file.multiFile.isReadyToProcess()) {\n          //  If we got here then all files the link file needs are ready to add to the cache\n          file.multiFile.addToCache();\n        }\n      } else {\n        //  If we got here, then the file processed, so let it add itself to its cache\n        file.addToCache();\n      }\n    } //  Remove it from the queue\n\n\n    this.queue.delete(file); //  Nothing left to do?\n\n    if (this.list.size === 0 && this.inflight.size === 0 && this.queue.size === 0) {\n      this.loadComplete();\n    }\n  },\n\n  /**\r\n   * Called at the end when the load queue is exhausted and all files have either loaded or errored.\r\n   * By this point every loaded file will now be in its associated cache and ready for use.\r\n   *\r\n   * Also clears down the Sets, puts progress to 1 and clears the deletion queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#loadComplete\r\n   * @fires Phaser.Loader.Events#COMPLETE\r\n   * @fires Phaser.Loader.Events#POST_PROCESS\r\n   * @since 3.7.0\r\n   */\n  loadComplete: function loadComplete() {\n    this.emit(Events.POST_PROCESS, this);\n    this.list.clear();\n    this.inflight.clear();\n    this.queue.clear();\n    this.progress = 1;\n    this.state = CONST.LOADER_COMPLETE;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this); //  Call 'destroy' on each file ready for deletion\n\n    this._deleteQueue.iterateLocal('destroy');\n\n    this._deleteQueue.clear();\n\n    this.emit(Events.COMPLETE, this, this.totalComplete, this.totalFailed);\n  },\n\n  /**\r\n   * Adds a File into the pending-deletion queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#flagForRemoval\r\n   * @since 3.7.0\r\n   * \r\n   * @param {Phaser.Loader.File} file - The File to be queued for deletion when the Loader completes.\r\n   */\n  flagForRemoval: function flagForRemoval(file) {\n    this._deleteQueue.set(file);\n  },\n\n  /**\r\n   * Converts the given JSON data into a file that the browser then prompts you to download so you can save it locally.\r\n   *\r\n   * The data must be well formed JSON and ready-parsed, not a JavaScript object.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#saveJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} data - The JSON data, ready parsed.\r\n   * @param {string} [filename=file.json] - The name to save the JSON file as.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n   */\n  saveJSON: function saveJSON(data, filename) {\n    return this.save(JSON.stringify(data), filename);\n  },\n\n  /**\r\n   * Causes the browser to save the given data as a file to its default Downloads folder.\r\n   * \r\n   * Creates a DOM level anchor link, assigns it as being a `download` anchor, sets the href\r\n   * to be an ObjectURL based on the given data, and then invokes a click event.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#save\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} data - The data to be saved. Will be passed through URL.createObjectURL.\r\n   * @param {string} [filename=file.json] - The filename to save the file as.\r\n   * @param {string} [filetype=application/json] - The file type to use when saving the file. Defaults to JSON.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n   */\n  save: function save(data, filename, filetype) {\n    if (filename === undefined) {\n      filename = 'file.json';\n    }\n\n    if (filetype === undefined) {\n      filetype = 'application/json';\n    }\n\n    var blob = new Blob([data], {\n      type: filetype\n    });\n    var url = URL.createObjectURL(blob);\n    var a = document.createElement('a');\n    a.download = filename;\n    a.textContent = 'Download ' + filename;\n    a.href = url;\n    a.click();\n    return this;\n  },\n\n  /**\r\n   * Resets the Loader.\r\n   *\r\n   * This will clear all lists and reset the base URL, path and prefix.\r\n   *\r\n   * Warning: If the Loader is currently downloading files, or has files in its queue, they will be aborted.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#reset\r\n   * @since 3.0.0\r\n   */\n  reset: function reset() {\n    this.list.clear();\n    this.inflight.clear();\n    this.queue.clear();\n    var gameConfig = this.systems.game.config;\n    var sceneConfig = this.systems.settings.loader;\n    this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\n    this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\n    this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\n    this.state = CONST.LOADER_IDLE;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    this.reset();\n    this.state = CONST.LOADER_SHUTDOWN;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this);\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.state = CONST.LOADER_DESTROYED;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this);\n    this.systems.events.off(SceneEvents.START, this.pluginStart, this);\n    this.list = null;\n    this.inflight = null;\n    this.queue = null;\n    this.scene = null;\n    this.systems = null;\n    this.textureManager = null;\n    this.cacheManager = null;\n    this.sceneManager = null;\n  }\n});\nPluginCache.register('Loader', LoaderPlugin, 'load');\nmodule.exports = LoaderPlugin;","map":null,"metadata":{},"sourceType":"script"}