{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * @typedef {object} HSVColorObject\r\n *\r\n * @property {number} h - The hue color value. A number between 0 and 1\r\n * @property {number} s - The saturation color value. A number between 0 and 1\r\n * @property {number} v - The lightness color value. A number between 0 and 1\r\n */\n\n/**\r\n * Converts an RGB color value to HSV (hue, saturation and value).\r\n * Conversion forumla from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.RGBToHSV\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {(HSVColorObject|Phaser.Display.Color)} [out] - An object to store the color values in. If not given an HSV Color Object will be created.\r\n *\r\n * @return {(HSVColorObject|Phaser.Display.Color)} An object with the properties `h`, `s` and `v` set.\r\n */\nvar RGBToHSV = function RGBToHSV(r, g, b, out) {\n  if (out === undefined) {\n    out = {\n      h: 0,\n      s: 0,\n      v: 0\n    };\n  }\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var min = Math.min(r, g, b);\n  var max = Math.max(r, g, b);\n  var d = max - min; // achromatic by default\n\n  var h = 0;\n  var s = max === 0 ? 0 : d / max;\n  var v = max;\n\n  if (max !== min) {\n    if (max === r) {\n      h = (g - b) / d + (g < b ? 6 : 0);\n    } else if (max === g) {\n      h = (b - r) / d + 2;\n    } else if (max === b) {\n      h = (r - g) / d + 4;\n    }\n\n    h /= 6;\n  }\n\n  if (out.hasOwnProperty('_h')) {\n    out._h = h;\n    out._s = s;\n    out._v = v;\n  } else {\n    out.h = h;\n    out.s = s;\n    out.v = v;\n  }\n\n  return out;\n};\n\nmodule.exports = RGBToHSV;","map":null,"metadata":{},"sourceType":"script"}