{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar AddToDOM = require('../dom/AddToDOM');\n\nvar AnimationManager = require('../animations/AnimationManager');\n\nvar CacheManager = require('../cache/CacheManager');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar Class = require('../utils/Class');\n\nvar Config = require('./Config');\n\nvar CreateRenderer = require('./CreateRenderer');\n\nvar DataManager = require('../data/DataManager');\n\nvar DebugHeader = require('./DebugHeader');\n\nvar Device = require('../device');\n\nvar DOMContentLoaded = require('../dom/DOMContentLoaded');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar InputManager = require('../input/InputManager');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar PluginManager = require('../plugins/PluginManager');\n\nvar ScaleManager = require('../scale/ScaleManager');\n\nvar SceneManager = require('../scene/SceneManager');\n\nvar SoundManagerCreator = require('../sound/SoundManagerCreator');\n\nvar TextureEvents = require('../textures/events');\n\nvar TextureManager = require('../textures/TextureManager');\n\nvar TimeStep = require('./TimeStep');\n\nvar VisibilityHandler = require('./VisibilityHandler');\n\nif (typeof EXPERIMENTAL) {\n  var CreateDOMContainer = require('../dom/CreateDOMContainer');\n}\n\nif (typeof PLUGIN_FBINSTANT) {\n  var FacebookInstantGamesPlugin = require('../../plugins/fbinstant/src/FacebookInstantGamesPlugin');\n}\n/**\r\n * @classdesc\r\n * The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\r\n * for handling the boot process, parsing the configuration values, creating the renderer,\r\n * and setting-up all of the global Phaser systems, such as sound and input.\r\n * Once that is complete it will start the Scene Manager and then begin the main game loop.\r\n *\r\n * You should generally avoid accessing any of the systems created by Game, and instead use those\r\n * made available to you via the Phaser.Scene Systems class instead.\r\n *\r\n * @class Game\r\n * @memberof Phaser\r\n * @constructor\r\n * @fires Phaser.Core.Events#BLUR\r\n * @fires Phaser.Core.Events#FOCUS\r\n * @fires Phaser.Core.Events#HIDDEN\r\n * @fires Phaser.Core.Events#VISIBLE\r\n * @since 3.0.0\r\n *\r\n * @param {GameConfig} [GameConfig] - The configuration object for your Phaser Game instance.\r\n */\n\n\nvar Game = new Class({\n  initialize: function Game(config) {\n    /**\r\n     * The parsed Game Configuration object.\r\n     *\r\n     * The values stored within this object are read-only and should not be changed at run-time.\r\n     *\r\n     * @name Phaser.Game#config\r\n     * @type {Phaser.Core.Config}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n    this.config = new Config(config);\n    /**\r\n     * A reference to either the Canvas or WebGL Renderer that this Game is using.\r\n     *\r\n     * @name Phaser.Game#renderer\r\n     * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n     * @since 3.0.0\r\n     */\n\n    this.renderer = null;\n\n    if (typeof EXPERIMENTAL) {\n      /**\r\n       * A reference to an HTML Div Element used as a DOM Element Container.\r\n       * \r\n       * Only set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\r\n       * if you provide a parent element to insert the Phaser Game inside.\r\n       *\r\n       * See the DOM Element Game Object for more details.\r\n       *\r\n       * @name Phaser.Game#domContainer\r\n       * @type {HTMLDivElement}\r\n       * @since 3.12.0\r\n       */\n      this.domContainer = null;\n    }\n    /**\r\n     * A reference to the HTML Canvas Element that Phaser uses to render the game.\r\n     * This is created automatically by Phaser unless you provide a `canvas` property\r\n     * in your Game Config.\r\n     *\r\n     * @name Phaser.Game#canvas\r\n     * @type {HTMLCanvasElement}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.canvas = null;\n    /**\r\n     * A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\r\n     * If the game is running under Canvas it will be a 2d Canvas Rendering Context.\r\n     * If the game is running under WebGL it will be a WebGL Rendering Context.\r\n     * This context is created automatically by Phaser unless you provide a `context` property\r\n     * in your Game Config.\r\n     *\r\n     * @name Phaser.Game#context\r\n     * @type {(CanvasRenderingContext2D|WebGLRenderingContext)}\r\n     * @since 3.0.0\r\n     */\n\n    this.context = null;\n    /**\r\n     * A flag indicating when this Game instance has finished its boot process.\r\n     *\r\n     * @name Phaser.Game#isBooted\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.isBooted = false;\n    /**\r\n     * A flag indicating if this Game is currently running its game step or not.\r\n     *\r\n     * @name Phaser.Game#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * An Event Emitter which is used to broadcast game-level events from the global systems.\r\n     *\r\n     * @name Phaser.Game#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = new EventEmitter();\n    /**\r\n     * An instance of the Animation Manager.\r\n     *\r\n     * The Animation Manager is a global system responsible for managing all animations used within your game.\r\n     *\r\n     * @name Phaser.Game#anims\r\n     * @type {Phaser.Animations.AnimationManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.anims = new AnimationManager(this);\n    /**\r\n     * An instance of the Texture Manager.\r\n     *\r\n     * The Texture Manager is a global system responsible for managing all textures being used by your game.\r\n     *\r\n     * @name Phaser.Game#textures\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.textures = new TextureManager(this);\n    /**\r\n     * An instance of the Cache Manager.\r\n     *\r\n     * The Cache Manager is a global system responsible for caching, accessing and releasing external game assets.\r\n     *\r\n     * @name Phaser.Game#cache\r\n     * @type {Phaser.Cache.CacheManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.cache = new CacheManager(this);\n    /**\r\n     * An instance of the Data Manager\r\n     *\r\n     * @name Phaser.Game#registry\r\n     * @type {Phaser.Data.DataManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.registry = new DataManager(this);\n    /**\r\n     * An instance of the Input Manager.\r\n     *\r\n     * The Input Manager is a global system responsible for the capture of browser-level input events.\r\n     *\r\n     * @name Phaser.Game#input\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.input = new InputManager(this, this.config);\n    /**\r\n     * An instance of the Scene Manager.\r\n     *\r\n     * The Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.\r\n     *\r\n     * @name Phaser.Game#scene\r\n     * @type {Phaser.Scenes.SceneManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = new SceneManager(this, this.config.sceneConfig);\n    /**\r\n     * A reference to the Device inspector.\r\n     *\r\n     * Contains information about the device running this game, such as OS, browser vendor and feature support.\r\n     * Used by various systems to determine capabilities and code paths.\r\n     *\r\n     * @name Phaser.Game#device\r\n     * @type {Phaser.DeviceConf}\r\n     * @since 3.0.0\r\n     */\n\n    this.device = Device;\n    /**\r\n     * An instance of the Scale Manager.\r\n     *\r\n     * The Scale Manager is a global system responsible for handling scaling of the game canvas.\r\n     *\r\n     * @name Phaser.Game#scale\r\n     * @type {Phaser.Scale.ScaleManager}\r\n     * @since 3.16.0\r\n     */\n\n    this.scale = new ScaleManager(this, this.config);\n    /**\r\n     * An instance of the base Sound Manager.\r\n     *\r\n     * The Sound Manager is a global system responsible for the playback and updating of all audio in your game.\r\n     *\r\n     * @name Phaser.Game#sound\r\n     * @type {Phaser.Sound.BaseSoundManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.sound = SoundManagerCreator.create(this);\n    /**\r\n     * An instance of the Time Step.\r\n     *\r\n     * The Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\r\n     * them and calculating delta values. It then automatically calls the game step.\r\n     *\r\n     * @name Phaser.Game#loop\r\n     * @type {Phaser.Core.TimeStep}\r\n     * @since 3.0.0\r\n     */\n\n    this.loop = new TimeStep(this, this.config.fps);\n    /**\r\n     * An instance of the Plugin Manager.\r\n     *\r\n     * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\r\n     * those plugins into Scenes as required.\r\n     *\r\n     * @name Phaser.Game#plugins\r\n     * @type {Phaser.Plugins.PluginManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.plugins = new PluginManager(this, this.config);\n\n    if (typeof PLUGIN_FBINSTANT) {\n      /**\r\n       * An instance of the Facebook Instant Games Plugin.\r\n       * \r\n       * This will only be available if the plugin has been built into Phaser,\r\n       * or you're using the special Facebook Instant Games custom build.\r\n       *\r\n       * @name Phaser.Game#facebook\r\n       * @type {Phaser.FacebookInstantGamesPlugin}\r\n       * @since 3.13.0\r\n       */\n      this.facebook = new FacebookInstantGamesPlugin(this);\n    }\n    /**\r\n     * Is this Game pending destruction at the start of the next frame?\r\n     *\r\n     * @name Phaser.Game#pendingDestroy\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n\n    this.pendingDestroy = false;\n    /**\r\n     * Remove the Canvas once the destroy is over?\r\n     *\r\n     * @name Phaser.Game#removeCanvas\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.removeCanvas = false;\n    /**\r\n     * Remove everything when the game is destroyed.\r\n     * You cannot create a new Phaser instance on the same web page after doing this.\r\n     *\r\n     * @name Phaser.Game#noReturn\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this.noReturn = false;\n    /**\r\n     * Does the window the game is running in currently have focus or not?\r\n     * This is modified by the VisibilityHandler.\r\n     *\r\n     * @name Phaser.Game#hasFocus\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.9.0\r\n     */\n\n    this.hasFocus = false; //  Wait for the DOM Ready event, then call boot.\n\n    DOMContentLoaded(this.boot.bind(this));\n  },\n\n  /**\r\n   * This method is called automatically when the DOM is ready. It is responsible for creating the renderer,\r\n   * displaying the Debug Header, adding the game canvas to the DOM and emitting the 'boot' event.\r\n   * It listens for a 'ready' event from the base systems and once received it will call `Game.start`.\r\n   *\r\n   * @method Phaser.Game#boot\r\n   * @protected\r\n   * @fires Phaser.Core.Events#BOOT\r\n   * @listens Phaser.Textures.Events#READY\r\n   * @since 3.0.0\r\n   */\n  boot: function boot() {\n    if (!PluginCache.hasCore('EventEmitter')) {\n      console.warn('Aborting. Core Plugins missing.');\n      return;\n    }\n\n    this.isBooted = true;\n    this.config.preBoot(this);\n    this.scale.preBoot();\n    CreateRenderer(this);\n\n    if (typeof EXPERIMENTAL) {\n      CreateDOMContainer(this);\n    }\n\n    DebugHeader(this);\n    AddToDOM(this.canvas, this.config.parent); //  The Texture Manager has to wait on a couple of non-blocking events before it's fully ready.\n    //  So it will emit this internal event when done:\n\n    this.textures.once(TextureEvents.READY, this.texturesReady, this);\n    this.events.emit(Events.BOOT);\n  },\n\n  /**\r\n   * Called automatically when the Texture Manager has finished setting up and preparing the\r\n   * default textures.\r\n   *\r\n   * @method Phaser.Game#texturesReady\r\n   * @private\r\n   * @fires Phaser.Game#ready\r\n   * @since 3.12.0\r\n   */\n  texturesReady: function texturesReady() {\n    //  Start all the other systems\n    this.events.emit(Events.READY);\n    this.start();\n  },\n\n  /**\r\n   * Called automatically by Game.boot once all of the global systems have finished setting themselves up.\r\n   * By this point the Game is now ready to start the main loop running.\r\n   * It will also enable the Visibility Handler.\r\n   *\r\n   * @method Phaser.Game#start\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  start: function start() {\n    this.isRunning = true;\n    this.config.postBoot(this);\n\n    if (this.renderer) {\n      this.loop.start(this.step.bind(this));\n    } else {\n      this.loop.start(this.headlessStep.bind(this));\n    }\n\n    VisibilityHandler(this);\n    var eventEmitter = this.events;\n    eventEmitter.on(Events.HIDDEN, this.onHidden, this);\n    eventEmitter.on(Events.VISIBLE, this.onVisible, this);\n    eventEmitter.on(Events.BLUR, this.onBlur, this);\n    eventEmitter.on(Events.FOCUS, this.onFocus, this);\n  },\n\n  /**\r\n   * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n   * Request Animation Frame, or Set Timeout on very old browsers.)\r\n   *\r\n   * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n   *\r\n   * It will then render each Scene in turn, via the Renderer. This process emits `prerender` and `postrender` events.\r\n   *\r\n   * @method Phaser.Game#step\r\n   * @fires Phaser.Core.Events#PRE_STEP_EVENT\r\n   * @fires Phaser.Core.Events#STEP_EVENT\r\n   * @fires Phaser.Core.Events#POST_STEP_EVENT\r\n   * @fires Phaser.Core.Events#PRE_RENDER_EVENT\r\n   * @fires Phaser.Core.Events#POST_RENDER_EVENT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  step: function step(time, delta) {\n    if (this.pendingDestroy) {\n      return this.runDestroy();\n    }\n\n    var eventEmitter = this.events; //  Global Managers like Input and Sound update in the prestep\n\n    eventEmitter.emit(Events.PRE_STEP, time, delta); //  This is mostly meant for user-land code and plugins\n\n    eventEmitter.emit(Events.STEP, time, delta); //  Update the Scene Manager and all active Scenes\n\n    this.scene.update(time, delta); //  Our final event before rendering starts\n\n    eventEmitter.emit(Events.POST_STEP, time, delta);\n    var renderer = this.renderer; //  Run the Pre-render (clearing the canvas, setting background colors, etc)\n\n    renderer.preRender();\n    eventEmitter.emit(Events.PRE_RENDER, renderer, time, delta); //  The main render loop. Iterates all Scenes and all Cameras in those scenes, rendering to the renderer instance.\n\n    this.scene.render(renderer); //  The Post-Render call. Tidies up loose end, takes snapshots, etc.\n\n    renderer.postRender(); //  The final event before the step repeats. Your last chance to do anything to the canvas before it all starts again.\n\n    eventEmitter.emit(Events.POST_RENDER, renderer, time, delta);\n  },\n\n  /**\r\n   * A special version of the Game Step for the HEADLESS renderer only.\r\n   *\r\n   * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n   * Request Animation Frame, or Set Timeout on very old browsers.)\r\n   *\r\n   * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n   *\r\n   * This process emits `prerender` and `postrender` events, even though nothing actually displays.\r\n   *\r\n   * @method Phaser.Game#headlessStep\r\n   * @fires Phaser.Game#prerenderEvent\r\n   * @fires Phaser.Game#postrenderEvent\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  headlessStep: function headlessStep(time, delta) {\n    var eventEmitter = this.events; //  Global Managers\n\n    eventEmitter.emit(Events.PRE_STEP, time, delta);\n    eventEmitter.emit(Events.STEP, time, delta); //  Scenes\n\n    this.scene.update(time, delta);\n    eventEmitter.emit(Events.POST_STEP, time, delta); //  Render\n\n    eventEmitter.emit(Events.PRE_RENDER);\n    eventEmitter.emit(Events.POST_RENDER);\n  },\n\n  /**\r\n   * Called automatically by the Visibility Handler.\r\n   * This will pause the main loop and then emit a pause event.\r\n   *\r\n   * @method Phaser.Game#onHidden\r\n   * @protected\r\n   * @fires Phaser.Core.Events#PAUSE\r\n   * @since 3.0.0\r\n   */\n  onHidden: function onHidden() {\n    this.loop.pause();\n    this.events.emit(Events.PAUSE);\n  },\n\n  /**\r\n   * Called automatically by the Visibility Handler.\r\n   * This will resume the main loop and then emit a resume event.\r\n   *\r\n   * @method Phaser.Game#onVisible\r\n   * @protected\r\n   * @fires Phaser.Core.Events#RESUME\r\n   * @since 3.0.0\r\n   */\n  onVisible: function onVisible() {\n    this.loop.resume();\n    this.events.emit(Events.RESUME);\n  },\n\n  /**\r\n   * Called automatically by the Visibility Handler.\r\n   * This will set the main loop into a 'blurred' state, which pauses it.\r\n   *\r\n   * @method Phaser.Game#onBlur\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: function onBlur() {\n    this.hasFocus = false;\n    this.loop.blur();\n  },\n\n  /**\r\n   * Called automatically by the Visibility Handler.\r\n   * This will set the main loop into a 'focused' state, which resumes it.\r\n   *\r\n   * @method Phaser.Game#onFocus\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: function onFocus() {\n    this.hasFocus = true;\n    this.loop.focus();\n  },\n\n  /**\r\n   * Returns the current game frame.\r\n   * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.\r\n   *\r\n   * @method Phaser.Game#getFrame\r\n   * @since 3.16.0\r\n   * \r\n   * @return {number} The current game frame.\r\n   */\n  getFrame: function getFrame() {\n    return this.loop.frame;\n  },\n\n  /**\r\n   * Returns the current game timestamp.\r\n   * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.\r\n   *\r\n   * @method Phaser.Game#getTime\r\n   * @since 3.16.0\r\n   * \r\n   * @return {number} The current game timestamp.\r\n   */\n  getTime: function getTime() {\n    return this.loop.frame.time;\n  },\n\n  /**\r\n   * Flags this Game instance as needing to be destroyed on the next frame.\r\n   * It will wait until the current frame has completed and then call `runDestroy` internally.\r\n   * \r\n   * If you **do not** need to run Phaser again on the same web page you can set the `noReturn` argument to `true` and it will free-up\r\n   * memory being held by the core Phaser plugins. If you do need to create another game instance on the same page, leave this as `false`.\r\n   *\r\n   * @method Phaser.Game#destroy\r\n   * @fires Phaser.Core.Events#DESTROY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} removeCanvas - Set to `true` if you would like the parent canvas element removed from the DOM, or `false` to leave it in place.\r\n   * @param {boolean} [noReturn=false] - If `true` all the core Phaser plugins are destroyed. You cannot create another instance of Phaser on the same web page if you do this.\r\n   */\n  destroy: function destroy(removeCanvas, noReturn) {\n    if (noReturn === undefined) {\n      noReturn = false;\n    }\n\n    this.pendingDestroy = true;\n    this.removeCanvas = removeCanvas;\n    this.noReturn = noReturn;\n  },\n\n  /**\r\n   * Destroys this Phaser.Game instance, all global systems, all sub-systems and all Scenes.\r\n   *\r\n   * @method Phaser.Game#runDestroy\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  runDestroy: function runDestroy() {\n    this.events.emit(Events.DESTROY);\n    this.events.removeAllListeners();\n    this.scene.destroy();\n\n    if (this.renderer) {\n      this.renderer.destroy();\n    }\n\n    if (this.removeCanvas && this.canvas) {\n      CanvasPool.remove(this.canvas);\n\n      if (this.canvas.parentNode) {\n        this.canvas.parentNode.removeChild(this.canvas);\n      }\n    }\n\n    if (typeof EXPERIMENTAL) {\n      if (this.domContainer) {\n        this.domContainer.parentNode.removeChild(this.domContainer);\n      }\n    }\n\n    this.loop.destroy();\n    this.pendingDestroy = false;\n  }\n});\nmodule.exports = Game;\n/**\r\n * \"Computers are good at following instructions, but not at reading your mind.\" - Donald Knuth\r\n */","map":null,"metadata":{},"sourceType":"script"}