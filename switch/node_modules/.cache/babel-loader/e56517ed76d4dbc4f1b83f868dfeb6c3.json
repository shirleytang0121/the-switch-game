{"ast":null,"code":"/**\r\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n* Vectors are the basis of all the geometry related operations in the engine.\r\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vector\r\n*/\n// TODO: consider params for reusing vector objects\nvar Vector = {};\nmodule.exports = Vector;\n\n(function () {\n  /**\r\n   * Creates a new vector.\r\n   * @method create\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @return {vector} A new vector\r\n   */\n  Vector.create = function (x, y) {\n    return {\n      x: x || 0,\n      y: y || 0\n    };\n  };\n  /**\r\n   * Returns a new vector with `x` and `y` copied from the given `vector`.\r\n   * @method clone\r\n   * @param {vector} vector\r\n   * @return {vector} A new cloned vector\r\n   */\n\n\n  Vector.clone = function (vector) {\n    return {\n      x: vector.x,\n      y: vector.y\n    };\n  };\n  /**\r\n   * Returns the magnitude (length) of a vector.\r\n   * @method magnitude\r\n   * @param {vector} vector\r\n   * @return {number} The magnitude of the vector\r\n   */\n\n\n  Vector.magnitude = function (vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  };\n  /**\r\n   * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\r\n   * @method magnitudeSquared\r\n   * @param {vector} vector\r\n   * @return {number} The squared magnitude of the vector\r\n   */\n\n\n  Vector.magnitudeSquared = function (vector) {\n    return vector.x * vector.x + vector.y * vector.y;\n  };\n  /**\r\n   * Rotates the vector about (0, 0) by specified angle.\r\n   * @method rotate\r\n   * @param {vector} vector\r\n   * @param {number} angle\r\n   * @param {vector} [output]\r\n   * @return {vector} The vector rotated about (0, 0)\r\n   */\n\n\n  Vector.rotate = function (vector, angle, output) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n    if (!output) output = {};\n    var x = vector.x * cos - vector.y * sin;\n    output.y = vector.x * sin + vector.y * cos;\n    output.x = x;\n    return output;\n  };\n  /**\r\n   * Rotates the vector about a specified point by specified angle.\r\n   * @method rotateAbout\r\n   * @param {vector} vector\r\n   * @param {number} angle\r\n   * @param {vector} point\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector rotated about the point\r\n   */\n\n\n  Vector.rotateAbout = function (vector, angle, point, output) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n    if (!output) output = {};\n    var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n    output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n    output.x = x;\n    return output;\n  };\n  /**\r\n   * Normalises a vector (such that its magnitude is `1`).\r\n   * @method normalise\r\n   * @param {vector} vector\r\n   * @return {vector} A new vector normalised\r\n   */\n\n\n  Vector.normalise = function (vector) {\n    var magnitude = Vector.magnitude(vector);\n    if (magnitude === 0) return {\n      x: 0,\n      y: 0\n    };\n    return {\n      x: vector.x / magnitude,\n      y: vector.y / magnitude\n    };\n  };\n  /**\r\n   * Returns the dot-product of two vectors.\r\n   * @method dot\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The dot product of the two vectors\r\n   */\n\n\n  Vector.dot = function (vectorA, vectorB) {\n    return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n  };\n  /**\r\n   * Returns the cross-product of two vectors.\r\n   * @method cross\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The cross product of the two vectors\r\n   */\n\n\n  Vector.cross = function (vectorA, vectorB) {\n    return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n  };\n  /**\r\n   * Returns the cross-product of three vectors.\r\n   * @method cross3\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} vectorC\r\n   * @return {number} The cross product of the three vectors\r\n   */\n\n\n  Vector.cross3 = function (vectorA, vectorB, vectorC) {\n    return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n  };\n  /**\r\n   * Adds the two vectors.\r\n   * @method add\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector of vectorA and vectorB added\r\n   */\n\n\n  Vector.add = function (vectorA, vectorB, output) {\n    if (!output) output = {};\n    output.x = vectorA.x + vectorB.x;\n    output.y = vectorA.y + vectorB.y;\n    return output;\n  };\n  /**\r\n   * Subtracts the two vectors.\r\n   * @method sub\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector of vectorA and vectorB subtracted\r\n   */\n\n\n  Vector.sub = function (vectorA, vectorB, output) {\n    if (!output) output = {};\n    output.x = vectorA.x - vectorB.x;\n    output.y = vectorA.y - vectorB.y;\n    return output;\n  };\n  /**\r\n   * Multiplies a vector and a scalar.\r\n   * @method mult\r\n   * @param {vector} vector\r\n   * @param {number} scalar\r\n   * @return {vector} A new vector multiplied by scalar\r\n   */\n\n\n  Vector.mult = function (vector, scalar) {\n    return {\n      x: vector.x * scalar,\n      y: vector.y * scalar\n    };\n  };\n  /**\r\n   * Divides a vector and a scalar.\r\n   * @method div\r\n   * @param {vector} vector\r\n   * @param {number} scalar\r\n   * @return {vector} A new vector divided by scalar\r\n   */\n\n\n  Vector.div = function (vector, scalar) {\n    return {\n      x: vector.x / scalar,\n      y: vector.y / scalar\n    };\n  };\n  /**\r\n   * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\r\n   * @method perp\r\n   * @param {vector} vector\r\n   * @param {bool} [negate=false]\r\n   * @return {vector} The perpendicular vector\r\n   */\n\n\n  Vector.perp = function (vector, negate) {\n    negate = negate === true ? -1 : 1;\n    return {\n      x: negate * -vector.y,\n      y: negate * vector.x\n    };\n  };\n  /**\r\n   * Negates both components of a vector such that it points in the opposite direction.\r\n   * @method neg\r\n   * @param {vector} vector\r\n   * @return {vector} The negated vector\r\n   */\n\n\n  Vector.neg = function (vector) {\n    return {\n      x: -vector.x,\n      y: -vector.y\n    };\n  };\n  /**\r\n   * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\r\n   * @method angle\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The angle in radians\r\n   */\n\n\n  Vector.angle = function (vectorA, vectorB) {\n    return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n  };\n  /**\r\n   * Temporary vector pool (not thread-safe).\r\n   * @property _temp\r\n   * @type {vector[]}\r\n   * @private\r\n   */\n\n\n  Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n})();","map":null,"metadata":{},"sourceType":"script"}