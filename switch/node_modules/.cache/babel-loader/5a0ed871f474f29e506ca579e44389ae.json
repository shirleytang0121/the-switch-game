{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture, where the Sprite Sheet is stored as a frame within an Atlas.\r\n *\r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheetFromAtlas\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {Phaser.Textures.Frame} frame - The Frame that contains the Sprite Sheet.\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - Index of the start frame in the sprite sheet\r\n * @param {number} [config.endFrame=-1] - Index of the end frame in the sprite sheet. -1 mean all the rest of the frames\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\n\n\nvar SpriteSheetFromAtlas = function SpriteSheetFromAtlas(texture, frame, config) {\n  var frameWidth = GetFastValue(config, 'frameWidth', null);\n  var frameHeight = GetFastValue(config, 'frameHeight', frameWidth); //  If missing we can't proceed\n\n  if (!frameWidth) {\n    throw new Error('TextureManager.SpriteSheetFromAtlas: Invalid frameWidth given.');\n  } //  Add in a __BASE entry (for the entire atlas)\n  // var source = texture.source[sourceIndex];\n  // texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\n\n\n  var startFrame = GetFastValue(config, 'startFrame', 0);\n  var endFrame = GetFastValue(config, 'endFrame', -1);\n  var margin = GetFastValue(config, 'margin', 0);\n  var spacing = GetFastValue(config, 'spacing', 0);\n  var x = frame.cutX;\n  var y = frame.cutY;\n  var cutWidth = frame.cutWidth;\n  var cutHeight = frame.cutHeight;\n  var sheetWidth = frame.realWidth;\n  var sheetHeight = frame.realHeight;\n  var row = Math.floor((sheetWidth - margin + spacing) / (frameWidth + spacing));\n  var column = Math.floor((sheetHeight - margin + spacing) / (frameHeight + spacing));\n  var total = row * column; //  trim offsets\n\n  var leftPad = frame.x;\n  var leftWidth = frameWidth - leftPad;\n  var rightWidth = frameWidth - (sheetWidth - cutWidth - leftPad);\n  var topPad = frame.y;\n  var topHeight = frameHeight - topPad;\n  var bottomHeight = frameHeight - (sheetHeight - cutHeight - topPad); // console.log('x / y', x, y);\n  // console.log('cutW / H', cutWidth, cutHeight);\n  // console.log('sheetW / H', sheetWidth, sheetHeight);\n  // console.log('row', row, 'column', column, 'total', total);\n  // console.log('LW', leftWidth, 'RW', rightWidth, 'TH', topHeight, 'BH', bottomHeight);\n\n  if (startFrame > total || startFrame < -total) {\n    startFrame = 0;\n  }\n\n  if (startFrame < 0) {\n    //  Allow negative skipframes.\n    startFrame = total + startFrame;\n  }\n\n  if (endFrame !== -1) {\n    total = startFrame + (endFrame + 1);\n  }\n\n  var sheetFrame;\n  var frameX = margin;\n  var frameY = margin;\n  var frameIndex = 0;\n  var sourceIndex = frame.sourceIndex;\n\n  for (var sheetY = 0; sheetY < column; sheetY++) {\n    var topRow = sheetY === 0;\n    var bottomRow = sheetY === column - 1;\n\n    for (var sheetX = 0; sheetX < row; sheetX++) {\n      var leftRow = sheetX === 0;\n      var rightRow = sheetX === row - 1;\n      sheetFrame = texture.add(frameIndex, sourceIndex, x + frameX, y + frameY, frameWidth, frameHeight);\n\n      if (leftRow || topRow || rightRow || bottomRow) {\n        var destX = leftRow ? leftPad : 0;\n        var destY = topRow ? topPad : 0;\n        var trimWidth = 0;\n        var trimHeight = 0;\n\n        if (leftRow) {\n          trimWidth += frameWidth - leftWidth;\n        }\n\n        if (rightRow) {\n          trimWidth += frameWidth - rightWidth;\n        }\n\n        if (topRow) {\n          trimHeight += frameHeight - topHeight;\n        }\n\n        if (bottomRow) {\n          trimHeight += frameHeight - bottomHeight;\n        }\n\n        var destWidth = frameWidth - trimWidth;\n        var destHeight = frameHeight - trimHeight;\n        sheetFrame.cutWidth = destWidth;\n        sheetFrame.cutHeight = destHeight;\n        sheetFrame.setTrim(frameWidth, frameHeight, destX, destY, destWidth, destHeight);\n      }\n\n      frameX += spacing;\n\n      if (leftRow) {\n        frameX += leftWidth;\n      } else if (rightRow) {\n        frameX += rightWidth;\n      } else {\n        frameX += frameWidth;\n      }\n\n      frameIndex++;\n    }\n\n    frameX = margin;\n    frameY += spacing;\n\n    if (topRow) {\n      frameY += topHeight;\n    } else if (bottomRow) {\n      frameY += bottomHeight;\n    } else {\n      frameY += frameHeight;\n    }\n  }\n\n  return texture;\n};\n\nmodule.exports = SpriteSheetFromAtlas;","map":null,"metadata":{},"sourceType":"script"}