{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar DegToRad = require('../math/DegToRad');\n\nvar DynamicTilemapLayer = require('./dynamiclayer/DynamicTilemapLayer.js');\n\nvar Extend = require('../utils/object/Extend');\n\nvar Formats = require('./Formats');\n\nvar LayerData = require('./mapdata/LayerData');\n\nvar Rotate = require('../math/Rotate');\n\nvar StaticTilemapLayer = require('./staticlayer/StaticTilemapLayer.js');\n\nvar Tile = require('./Tile');\n\nvar TilemapComponents = require('./components');\n\nvar Tileset = require('./Tileset');\n/**\r\n * @callback TilemapFilterCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - An object found in the filtered area.\r\n * @param {number} index - The index of the object within the array.\r\n * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The object.\r\n */\n\n/**\r\n * @callback TilemapFindCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - An object found.\r\n * @param {number} index - The index of the object within the array.\r\n * @param {Phaser.GameObjects.GameObject[]} array - An array of all the objects found.\r\n *\r\n * @return {boolean} `true` if the callback should be invoked, otherwise `false`.\r\n */\n\n/**\r\n * @classdesc\r\n * A Tilemap is a container for Tilemap data. This isn't a display object, rather, it holds data\r\n * about the map and allows you to add tilesets and tilemap layers to it. A map can have one or\r\n * more tilemap layers (StaticTilemapLayer or DynamicTilemapLayer), which are the display\r\n * objects that actually render tiles.\r\n *\r\n * The Tilemap data be parsed from a Tiled JSON file, a CSV file or a 2D array. Tiled is a free\r\n * software package specifically for creating tile maps, and is available from:\r\n * http://www.mapeditor.org\r\n *\r\n * A Tilemap has handy methods for getting & manipulating the tiles within a layer. You can only\r\n * use the methods that change tiles (e.g. removeTileAt) on a DynamicTilemapLayer.\r\n *\r\n * Note that all Tilemaps use a base tile size to calculate dimensions from, but that a\r\n * StaticTilemapLayer or DynamicTilemapLayer may have its own unique tile size that overrides\r\n * it.\r\n *\r\n * @class Tilemap\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {Phaser.Tilemaps.MapData} mapData - A MapData instance containing Tilemap data.\r\n */\n\n\nvar Tilemap = new Class({\n  initialize: function Tilemap(scene, mapData) {\n    /**\r\n     * @name Phaser.Tilemaps.Tilemap#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * The base width of a tile in pixels. Note that individual layers may have a different tile\r\n     * width.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#tileWidth\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileWidth = mapData.tileWidth;\n    /**\r\n     * The base height of a tile in pixels. Note that individual layers may have a different\r\n     * tile height.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#tileHeight\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileHeight = mapData.tileHeight;\n    /**\r\n     * The width of the map (in tiles).\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = mapData.width;\n    /**\r\n     * The height of the map (in tiles).\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = mapData.height;\n    /**\r\n     * The orientation of the map data (as specified in Tiled), usually 'orthogonal'.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#orientation\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.orientation = mapData.orientation;\n    /**\r\n     * The render (draw) order of the map data (as specified in Tiled), usually 'right-down'.\r\n     *\r\n     * The draw orders are:\r\n     *\r\n     * right-down\r\n     * left-down\r\n     * right-up\r\n     * left-up\r\n     *\r\n     * This can be changed via the `setRenderOrder` method.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#renderOrder\r\n     * @type {string}\r\n     * @since 3.12.0\r\n     */\n\n    this.renderOrder = mapData.renderOrder;\n    /**\r\n     * The format of the map data.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#format\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.format = mapData.format;\n    /**\r\n     * The version of the map data (as specified in Tiled, usually 1).\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#version\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.version = mapData.version;\n    /**\r\n     * Map specific properties as specified in Tiled.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = mapData.properties;\n    /**\r\n     * The width of the map in pixels based on width * tileWidth.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#widthInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.widthInPixels = mapData.widthInPixels;\n    /**\r\n     * The height of the map in pixels based on height * tileHeight.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#heightInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.heightInPixels = mapData.heightInPixels;\n    /**\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#imageCollections\r\n     * @type {Phaser.Tilemaps.ImageCollection[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.imageCollections = mapData.imageCollections;\n    /**\r\n     * An array of Tiled Image Layers.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#images\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.images = mapData.images;\n    /**\r\n     * An array of Tilemap layer data.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#layers\r\n     * @type {Phaser.Tilemaps.LayerData[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.layers = mapData.layers;\n    /**\r\n     * An array of Tilesets used in the map.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#tilesets\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilesets = mapData.tilesets;\n    /**\r\n     * An array of ObjectLayer instances parsed from Tiled object layers.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#objects\r\n     * @type {Phaser.Tilemaps.ObjectLayer[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.objects = mapData.objects;\n    /**\r\n     * The index of the currently selected LayerData object.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#currentLayerIndex\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.currentLayerIndex = 0;\n  },\n\n  /**\r\n   * Sets the rendering (draw) order of the tiles in this map.\r\n   *\r\n   * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n   * drawing to the right and then moving down to the next row.\r\n   *\r\n   * The draw orders are:\r\n   *\r\n   * 0 = right-down\r\n   * 1 = left-down\r\n   * 2 = right-up\r\n   * 3 = left-up\r\n   *\r\n   * Setting the render order does not change the tiles or how they are stored in the layer,\r\n   * it purely impacts the order in which they are rendered.\r\n   *\r\n   * You can provide either an integer (0 to 3), or the string version of the order.\r\n   *\r\n   * Calling this method _after_ creating Static or Dynamic Tilemap Layers will **not** automatically\r\n   * update them to use the new render order. If you call this method after creating layers, use their\r\n   * own `setRenderOrder` methods to change them as needed.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setRenderOrder\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n   *\r\n   * @return {this} This Tilemap object.\r\n   */\n  setRenderOrder: function setRenderOrder(renderOrder) {\n    var orders = ['right-down', 'left-down', 'right-up', 'left-up'];\n\n    if (typeof renderOrder === 'number') {\n      renderOrder = orders[renderOrder];\n    }\n\n    if (orders.indexOf(renderOrder) > -1) {\n      this.renderOrder = renderOrder;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Adds an image to the map to be used as a tileset. A single map may use multiple tilesets.\r\n   * Note that the tileset name can be found in the JSON file exported from Tiled, or in the Tiled\r\n   * editor.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#addTilesetImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} tilesetName - The name of the tileset as specified in the map data.\r\n   * @param {string} [key] - The key of the Phaser.Cache image used for this tileset. If\r\n   * `undefined` or `null` it will look for an image with a key matching the tilesetName parameter.\r\n   * @param {integer} [tileWidth] - The width of the tile (in pixels) in the Tileset Image. If not\r\n   * given it will default to the map's tileWidth value, or the tileWidth specified in the Tiled\r\n   * JSON file.\r\n   * @param {integer} [tileHeight] - The height of the tiles (in pixels) in the Tileset Image. If\r\n   * not given it will default to the map's tileHeight value, or the tileHeight specified in the\r\n   * Tiled JSON file.\r\n   * @param {integer} [tileMargin] - The margin around the tiles in the sheet (in pixels). If not\r\n   * specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n   * @param {integer} [tileSpacing] - The spacing between each the tile in the sheet (in pixels).\r\n   * If not specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n   * @param {integer} [gid=0] - If adding multiple tilesets to a blank map, specify the starting\r\n   * GID this set will use here.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tileset} Returns the Tileset object that was created or updated, or null if it\r\n   * failed.\r\n   */\n  addTilesetImage: function addTilesetImage(tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid) {\n    if (tilesetName === undefined) {\n      return null;\n    }\n\n    if (key === undefined || key === null) {\n      key = tilesetName;\n    }\n\n    if (!this.scene.sys.textures.exists(key)) {\n      console.warn('Invalid Tileset Image: ' + key);\n      return null;\n    }\n\n    var texture = this.scene.sys.textures.get(key);\n    var index = this.getTilesetIndex(tilesetName);\n\n    if (index === null && this.format === Formats.TILED_JSON) {\n      console.warn('No data found for Tileset: ' + tilesetName);\n      return null;\n    }\n\n    var tileset = this.tilesets[index];\n\n    if (tileset) {\n      tileset.setTileSize(tileWidth, tileHeight);\n      tileset.setSpacing(tileMargin, tileSpacing);\n      tileset.setImage(texture);\n      return tileset;\n    }\n\n    if (tileWidth === undefined) {\n      tileWidth = this.tileWidth;\n    }\n\n    if (tileHeight === undefined) {\n      tileHeight = this.tileHeight;\n    }\n\n    if (tileMargin === undefined) {\n      tileMargin = 0;\n    }\n\n    if (tileSpacing === undefined) {\n      tileSpacing = 0;\n    }\n\n    if (gid === undefined) {\n      gid = 0;\n    }\n\n    tileset = new Tileset(tilesetName, gid, tileWidth, tileHeight, tileMargin, tileSpacing);\n    tileset.setImage(texture);\n    this.tilesets.push(tileset);\n    return tileset;\n  },\n\n  /**\r\n   * Turns the StaticTilemapLayer associated with the given layer into a DynamicTilemapLayer. If\r\n   * no layer specified, the map's current layer is used. This is useful if you want to manipulate\r\n   * a map at the start of a scene, but then make it non-manipulable and optimize it for speed.\r\n   * Note: the DynamicTilemapLayer passed in is destroyed, so make sure to store the value\r\n   * returned from this method if you want to manipulate the new StaticTilemapLayer.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#convertLayerToStatic\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer)} [layer] - The name of the layer from Tiled, the\r\n   * index of the layer in the map, or a DynamicTilemapLayer.\r\n   *\r\n   * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer that was created, or null if it\r\n   * failed.\r\n   */\n  convertLayerToStatic: function convertLayerToStatic(layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    var dynamicLayer = layer.tilemapLayer;\n\n    if (!dynamicLayer || !(dynamicLayer instanceof DynamicTilemapLayer)) {\n      return null;\n    }\n\n    var staticLayer = new StaticTilemapLayer(dynamicLayer.scene, dynamicLayer.tilemap, dynamicLayer.layerIndex, dynamicLayer.tileset, dynamicLayer.x, dynamicLayer.y);\n    this.scene.sys.displayList.add(staticLayer);\n    dynamicLayer.destroy();\n    return staticLayer;\n  },\n\n  /**\r\n   * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n   * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n   * information in the destination region.\r\n   *\r\n   * If no layer specified, the map's current layer is used. This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n   * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n   * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  copy: function copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'copy')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates a new and empty DynamicTilemapLayer. The currently selected layer in the map is set to this new layer.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#createBlankDynamicLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of this layer. Must be unique within the map.\r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n   * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n   * @param {integer} [width] - The width of the layer in tiles. If not specified, it will default to the map's width.\r\n   * @param {integer} [height] - The height of the layer in tiles. If not specified, it will default to the map's height.\r\n   * @param {integer} [tileWidth] - The width of the tiles the layer uses for calculations. If not specified, it will default to the map's tileWidth.\r\n   * @param {integer} [tileHeight] - The height of the tiles the layer uses for calculations. If not specified, it will default to the map's tileHeight.\r\n   *\r\n   * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n   */\n  createBlankDynamicLayer: function createBlankDynamicLayer(name, tileset, x, y, width, height, tileWidth, tileHeight) {\n    if (tileWidth === undefined) {\n      tileWidth = tileset.tileWidth;\n    }\n\n    if (tileHeight === undefined) {\n      tileHeight = tileset.tileHeight;\n    }\n\n    if (width === undefined) {\n      width = this.width;\n    }\n\n    if (height === undefined) {\n      height = this.height;\n    }\n\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    var index = this.getLayerIndex(name);\n\n    if (index !== null) {\n      console.warn('Invalid Tilemap Layer ID: ' + name);\n      return null;\n    }\n\n    var layerData = new LayerData({\n      name: name,\n      tileWidth: tileWidth,\n      tileHeight: tileHeight,\n      width: width,\n      height: height\n    });\n    var row;\n\n    for (var tileY = 0; tileY < height; tileY++) {\n      row = [];\n\n      for (var tileX = 0; tileX < width; tileX++) {\n        row.push(new Tile(layerData, -1, tileX, tileY, tileWidth, tileHeight, this.tileWidth, this.tileHeight));\n      }\n\n      layerData.data.push(row);\n    }\n\n    this.layers.push(layerData);\n    this.currentLayerIndex = this.layers.length - 1;\n    var dynamicLayer = new DynamicTilemapLayer(this.scene, this, this.currentLayerIndex, tileset, x, y);\n    dynamicLayer.setRenderOrder(this.renderOrder);\n    this.scene.sys.displayList.add(dynamicLayer);\n    return dynamicLayer;\n  },\n\n  /**\r\n   * Creates a new DynamicTilemapLayer that renders the LayerData associated with the given\r\n   * `layerID`. The currently selected layer in the map is set to this new layer.\r\n   *\r\n   * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n   * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n   * look at the layers[].name value. Either way it must match.\r\n   *\r\n   * Unlike a static layer, a dynamic layer can be modified. See DynamicTilemapLayer for more\r\n   * information.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#createDynamicLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the layer name from Tiled.\r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   * @param {number} x - The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n   * @param {number} y - The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n   *\r\n   * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n   */\n  createDynamicLayer: function createDynamicLayer(layerID, tileset, x, y) {\n    var index = this.getLayerIndex(layerID);\n\n    if (index === null) {\n      console.warn('Invalid Tilemap Layer ID: ' + layerID);\n      return null;\n    }\n\n    var layerData = this.layers[index]; // Check for an associated static or dynamic tilemap layer\n\n    if (layerData.tilemapLayer) {\n      console.warn('Tilemap Layer ID already exists:' + layerID);\n      return null;\n    }\n\n    this.currentLayerIndex = index; //  Default the x/y position to match Tiled layer offset, if it exists.\n\n    if (x === undefined && this.layers[index].x) {\n      x = this.layers[index].x;\n    }\n\n    if (y === undefined && this.layers[index].y) {\n      y = this.layers[index].y;\n    }\n\n    var layer = new DynamicTilemapLayer(this.scene, this, index, tileset, x, y);\n    layer.setRenderOrder(this.renderOrder);\n    this.scene.sys.displayList.add(layer);\n    return layer;\n  },\n\n  /**\r\n   * Creates a Sprite for every object matching the given gid in the map data. All properties from\r\n   * the map data objectgroup are copied into the `spriteConfig`, so you can use this as an easy\r\n   * way to configure Sprite properties from within the map editor. For example giving an object a\r\n   * property of alpha: 0.5 in the map editor will duplicate that when the Sprite is created.\r\n   *\r\n   * Custom object properties not sharing names with the Sprite's own properties are copied to the\r\n   * Sprite's {@link Phaser.GameObjects.Sprite#data data store}.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#createFromObjects\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the object layer (from Tiled) to create Sprites from.\r\n   * @param {(integer|string)} id - Either the id (object), gid (tile object) or name (object or\r\n   * tile object) from Tiled. Ids are unique in Tiled, but a gid is shared by all tile objects\r\n   * with the same graphic. The same name can be used on multiple objects.\r\n   * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n   * scene.make.sprite).\r\n   * @param {Phaser.Scene} [scene=the scene the map is within] - The Scene to create the Sprites within.\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n   */\n  createFromObjects: function createFromObjects(name, id, spriteConfig, scene) {\n    if (spriteConfig === undefined) {\n      spriteConfig = {};\n    }\n\n    if (scene === undefined) {\n      scene = this.scene;\n    }\n\n    var objectLayer = this.getObjectLayer(name);\n\n    if (!objectLayer) {\n      console.warn('Cannot create from object. Invalid objectgroup name given: ' + name);\n      return;\n    }\n\n    var objects = objectLayer.objects;\n    var sprites = [];\n\n    for (var i = 0; i < objects.length; i++) {\n      var found = false;\n      var obj = objects[i];\n\n      if (obj.gid !== undefined && typeof id === 'number' && obj.gid === id || obj.id !== undefined && typeof id === 'number' && obj.id === id || obj.name !== undefined && typeof id === 'string' && obj.name === id) {\n        found = true;\n      }\n\n      if (found) {\n        var config = Extend({}, spriteConfig, obj.properties);\n        config.x = obj.x;\n        config.y = obj.y;\n        var sprite = this.scene.make.sprite(config);\n        sprite.name = obj.name;\n\n        if (obj.width) {\n          sprite.displayWidth = obj.width;\n        }\n\n        if (obj.height) {\n          sprite.displayHeight = obj.height;\n        } // Origin is (0, 1) in Tiled, so find the offset that matches the Sprite's origin.\n\n\n        var offset = {\n          x: sprite.originX * sprite.displayWidth,\n          y: (sprite.originY - 1) * sprite.displayHeight\n        }; // If the object is rotated, then the origin offset also needs to be rotated.\n\n        if (obj.rotation) {\n          var angle = DegToRad(obj.rotation);\n          Rotate(offset, angle);\n          sprite.rotation = angle;\n        }\n\n        sprite.x += offset.x;\n        sprite.y += offset.y;\n\n        if (obj.flippedHorizontal !== undefined || obj.flippedVertical !== undefined) {\n          sprite.setFlip(obj.flippedHorizontal, obj.flippedVertical);\n        }\n\n        if (!obj.visible) {\n          sprite.visible = false;\n        }\n\n        for (var key in obj.properties) {\n          if (sprite.hasOwnProperty(key)) {\n            continue;\n          }\n\n          sprite.setData(key, obj.properties[key]);\n        }\n\n        sprites.push(sprite);\n      }\n    }\n\n    return sprites;\n  },\n\n  /**\r\n   * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n   * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n   * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n   * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#createFromTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n   * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n   * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n   * one-to-one mapping with the indexes array.\r\n   * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e. scene.make.sprite).\r\n   * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.GameObjects.Sprite[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n   */\n  createFromTiles: function createFromTiles(indexes, replacements, spriteConfig, scene, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, layer);\n  },\n\n  /**\r\n   * Creates a new StaticTilemapLayer that renders the LayerData associated with the given\r\n   * `layerID`. The currently selected layer in the map is set to this new layer.\r\n   *\r\n   * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n   * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n   * look at the layers[].name value. Either way it must match.\r\n   *\r\n   * It's important to remember that a static layer cannot be modified. See StaticTilemapLayer for\r\n   * more information.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#createStaticLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the layer name from Tiled.\r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   * @param {number} [x=0] - The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n   * @param {number} [y=0] - The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\r\n   *\r\n   * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer was created, or null if it failed.\r\n   */\n  createStaticLayer: function createStaticLayer(layerID, tileset, x, y) {\n    var index = this.getLayerIndex(layerID);\n\n    if (index === null) {\n      console.warn('Invalid Tilemap Layer ID: ' + layerID);\n      return null;\n    }\n\n    var layerData = this.layers[index]; //  Check for an associated static or dynamic tilemap layer\n\n    if (layerData.tilemapLayer) {\n      console.warn('Tilemap Layer ID already exists:' + layerID);\n      return null;\n    }\n\n    this.currentLayerIndex = index; //  Default the x/y position to match Tiled layer offset, if it exists.\n\n    if (x === undefined && this.layers[index].x) {\n      x = this.layers[index].x;\n    }\n\n    if (y === undefined && this.layers[index].y) {\n      y = this.layers[index].y;\n    }\n\n    var layer = new StaticTilemapLayer(this.scene, this, index, tileset, x, y);\n    layer.setRenderOrder(this.renderOrder);\n    this.scene.sys.displayList.add(layer);\n    return layer;\n  },\n\n  /**\r\n   * Removes all layer data from this Tilemap and nulls the scene reference. This will destroy any\r\n   * StaticTilemapLayers or DynamicTilemapLayers that have been linked to LayerData.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.removeAllLayers();\n    this.tilesets.length = 0;\n    this.objects.length = 0;\n    this.scene = undefined;\n  },\n\n  /**\r\n   * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n   * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n   * Collision information in the region will be recalculated.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#fill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index to fill the area with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  fill: function fill(index, tileX, tileY, width, height, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'fill')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * For each object in the given object layer, run the given filter callback function. Any\r\n   * objects that pass the filter test (i.e. where the callback returns true) will returned as a\r\n   * new array. Similar to Array.prototype.Filter in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#filterObjects\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Tilemaps.ObjectLayer|string)} objectLayer - The name of an object layer (from Tiled) or an ObjectLayer instance.\r\n   * @param {TilemapFilterCallback} callback - The callback. Each object in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   *\r\n   * @return {?Phaser.GameObjects.GameObject[]} An array of object that match the search, or null if the objectLayer given was invalid.\r\n   */\n  filterObjects: function filterObjects(objectLayer, callback, context) {\n    if (typeof objectLayer === 'string') {\n      var name = objectLayer;\n      objectLayer = this.getObjectLayer(objectLayer);\n\n      if (!objectLayer) {\n        console.warn('No object layer found with the name: ' + name);\n        return null;\n      }\n    }\n\n    return objectLayer.objects.filter(callback, context);\n  },\n\n  /**\r\n   * @typedef {object} FilteringOptions\r\n   * \r\n   * @property {boolean} [isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n   * @property {boolean} [isColliding=false] - If true, only return tiles that collide on at least one side.\r\n   * @property {boolean} [hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n   */\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n   * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#filterTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n   * filter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n   */\n  filterTiles: function filterTiles(callback, context, tileX, tileY, width, height, filteringOptions, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, layer);\n  },\n\n  /**\r\n   * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n   * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n   * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n   * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n   * the top-left.\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#findByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index value to search for.\r\n   * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n   * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the bottom-right. Otherwise it scans from the top-left.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n   */\n  findByIndex: function findByIndex(findIndex, skip, reverse, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.FindByIndex(findIndex, skip, reverse, layer);\n  },\n\n  /**\r\n   * Find the first object in the given object layer that satisfies the provided testing function.\r\n   * I.e. finds the first object for which `callback` returns true. Similar to\r\n   * Array.prototype.find in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#findObject\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Tilemaps.ObjectLayer|string)} objectLayer - The name of an object layer (from Tiled) or an ObjectLayer instance.\r\n   * @param {TilemapFindCallback} callback - The callback. Each object in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   *\r\n   * @return {?Phaser.GameObjects.GameObject} An object that matches the search, or null if no object found.\r\n   */\n  findObject: function findObject(objectLayer, callback, context) {\n    if (typeof objectLayer === 'string') {\n      var name = objectLayer;\n      objectLayer = this.getObjectLayer(objectLayer);\n\n      if (!objectLayer) {\n        console.warn('No object layer found with the name: ' + name);\n        return null;\n      }\n    }\n\n    return objectLayer.objects.find(callback, context) || null;\n  },\n\n  /**\r\n   * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n   * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n   * true. Similar to Array.prototype.find in vanilla JS.\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#findTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The Tile layer to run the search on. If not provided will use the current layer.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n   */\n  findTile: function findTile(callback, context, tileX, tileY, width, height, filteringOptions, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#forEachTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The Tile layer to run the search on. If not provided will use the current layer.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  forEachTile: function forEachTile(callback, context, tileX, tileY, width, height, filteringOptions, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer !== null) {\n      TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Gets the image layer index based on its name.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getImageIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the image to get.\r\n   *\r\n   * @return {integer} The index of the image in this tilemap, or null if not found.\r\n   */\n  getImageIndex: function getImageIndex(name) {\n    return this.getIndex(this.images, name);\n  },\n\n  /**\r\n   * Internally used. Returns the index of the object in one of the Tilemaps arrays whose name\r\n   * property matches the given `name`.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} location - The Tilemap array to search.\r\n   * @param {string} name - The name of the array element to get.\r\n   *\r\n   * @return {number} The index of the element in the array, or null if not found.\r\n   */\n  getIndex: function getIndex(location, name) {\n    for (var i = 0; i < location.length; i++) {\n      if (location[i].name === name) {\n        return i;\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Gets the LayerData from this.layers that is associated with `layer`, or null if an invalid\r\n   * `layer` is given.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n   * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n   * StaticTilemapLayer. If not given will default to the maps current layer index.\r\n   *\r\n   * @return {Phaser.Tilemaps.LayerData} The corresponding LayerData within this.layers.\r\n   */\n  getLayer: function getLayer(layer) {\n    var index = this.getLayerIndex(layer);\n    return index !== null ? this.layers[index] : null;\n  },\n\n  /**\r\n   * Gets the ObjectLayer from this.objects that has the given `name`, or null if no ObjectLayer\r\n   * is found with that name.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getObjectLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [name] - The name of the object layer from Tiled.\r\n   *\r\n   * @return {?Phaser.Tilemaps.ObjectLayer} The corresponding ObjectLayer within this.objects or null.\r\n   */\n  getObjectLayer: function getObjectLayer(name) {\n    var index = this.getIndex(this.objects, name);\n    return index !== null ? this.objects[index] : null;\n  },\n\n  /**\r\n   * Gets the LayerData index of the given `layer` within this.layers, or null if an invalid\r\n   * `layer` is given.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getLayerIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n   * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n   * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n   *\r\n   * @return {integer} The LayerData index within this.layers.\r\n   */\n  getLayerIndex: function getLayerIndex(layer) {\n    if (layer === undefined) {\n      return this.currentLayerIndex;\n    } else if (typeof layer === 'string') {\n      return this.getLayerIndexByName(layer);\n    } else if (typeof layer === 'number' && layer < this.layers.length) {\n      return layer;\n    } else if (layer instanceof StaticTilemapLayer || layer instanceof DynamicTilemapLayer) {\n      return layer.layerIndex;\n    } else {\n      return null;\n    }\n  },\n\n  /**\r\n   * Gets the index of the LayerData within this.layers that has the given `name`, or null if an\r\n   * invalid `name` is given.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getLayerIndexByName\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the layer to get.\r\n   *\r\n   * @return {integer} The LayerData index within this.layers.\r\n   */\n  getLayerIndexByName: function getLayerIndexByName(name) {\n    return this.getIndex(this.layers, name);\n  },\n\n  /**\r\n   * Gets a tile at the given tile coordinates from the given layer.\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n   * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n   * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n   */\n  getTileAt: function getTileAt(tileX, tileY, nonNull, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.GetTileAt(tileX, tileY, nonNull, layer);\n  },\n\n  /**\r\n   * Gets a tile at the given world coordinates from the given layer.\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - X position to get the tile from (given in pixels)\r\n   * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n   * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n   */\n  getTileAtWorldXY: function getTileAtWorldXY(worldX, worldY, nonNull, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    } else {\n      return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, layer);\n    }\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTilesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n   */\n  getTilesWithin: function getTilesWithin(tileX, tileY, width, height, filteringOptions, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, layer);\n  },\n\n  /**\r\n   * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n   * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTilesWithinShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n   */\n  getTilesWithinShape: function getTilesWithinShape(shape, filteringOptions, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTilesWithinWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n   * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n   * @param {number} width - The width of the area.\r\n   * @param {number} height - The height of the area.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n   */\n  getTilesWithinWorldXY: function getTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);\n  },\n\n  /**\r\n   * Gets the Tileset that has the given `name`, or null if an invalid `name` is given.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTileset\r\n   * @since 3.14.0\r\n   *\r\n   * @param {string} name - The name of the Tileset to get.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tileset} The Tileset, or `null` if no matching named tileset was found.\r\n   */\n  getTileset: function getTileset(name) {\n    var index = this.getIndex(this.tilesets, name);\n    return index !== null ? this.tilesets[index] : null;\n  },\n\n  /**\r\n   * Gets the index of the Tileset within this.tilesets that has the given `name`, or null if an\r\n   * invalid `name` is given.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#getTilesetIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the Tileset to get.\r\n   *\r\n   * @return {integer} The Tileset index within this.tilesets.\r\n   */\n  getTilesetIndex: function getTilesetIndex(name) {\n    return this.getIndex(this.tilesets, name);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#hasTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n   */\n  hasTileAt: function hasTileAt(tileX, tileY, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.HasTileAt(tileX, tileY, layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#hasTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n   */\n  hasTileAtWorldXY: function hasTileAtWorldXY(worldX, worldY, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, layer);\n  },\n\n  /**\r\n   * The LayerData object that is currently selected in the map. You can set this property using\r\n   * any type supported by setLayer.\r\n   *\r\n   * @name Phaser.Tilemaps.Tilemap#layer\r\n   * @type {Phaser.Tilemaps.LayerData}\r\n   * @since 3.0.0\r\n   */\n  layer: {\n    get: function get() {\n      return this.layers[this.currentLayerIndex];\n    },\n    set: function set(layer) {\n      this.setLayer(layer);\n    }\n  },\n\n  /**\r\n   * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n   * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n   * location. If you pass in an index, only the index at the specified location will be changed.\r\n   * Collision information will be recalculated at the specified location.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#putTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid or the coordinates were out of bounds.\r\n   */\n  putTileAt: function putTileAt(tile, tileX, tileY, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'putTileAt')) {\n      return null;\n    }\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, layer);\n  },\n\n  /**\r\n   * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n   * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n   * specified location. If you pass in an index, only the index at the specified location will be\r\n   * changed. Collision information will be recalculated at the specified location.\r\n   *\r\n   * If no layer specified, the maps current layer is used. This\r\n   * cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#putTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n   */\n  putTileAtWorldXY: function putTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'putTileAtWorldXY')) {\n      return null;\n    }\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, layer);\n  },\n\n  /**\r\n   * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n   * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n   * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n   * index at the specified location will be changed. Collision information will be recalculated\r\n   * within the region tiles were changed.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#putTilesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  putTilesAt: function putTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'putTilesAt')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will recieve a new index. If an array of indexes is passed in, then\r\n   * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n   * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n   * indexes. This method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#randomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  randomize: function randomize(tileX, tileY, width, height, indexes, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'randomize')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.Randomize(tileX, tileY, width, height, indexes, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n   * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n   * internally to optimize recalculating faces when only one tile has been changed.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#calculateFacesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  calculateFacesAt: function calculateFacesAt(tileX, tileY, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.CalculateFacesAt(tileX, tileY, layer);\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n   * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n   * is mostly used internally.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#calculateFacesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n   */\n  calculateFacesWithin: function calculateFacesWithin(tileX, tileY, width, height, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, layer);\n    return this;\n  },\n\n  /**\r\n   * Removes all layers from this Tilemap and destroys any associated StaticTilemapLayers or\r\n   * DynamicTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#removeAllLayers\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n   */\n  removeAllLayers: function removeAllLayers() {\n    // Destroy any StaticTilemapLayers or DynamicTilemapLayers that are stored in LayerData\n    for (var i = 0; i < this.layers.length; i++) {\n      if (this.layers[i].tilemapLayer) {\n        this.layers[i].tilemapLayer.destroy();\n      }\n    }\n\n    this.layers.length = 0;\n    this.currentLayerIndex = 0;\n    return this;\n  },\n\n  /**\r\n   * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#removeTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n   */\n  removeTileAt: function removeTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'removeTileAt')) {\n      return null;\n    }\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer);\n  },\n\n  /**\r\n   * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#removeTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n   */\n  removeTileAtWorldXY: function removeTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'removeTileAtWorldXY')) {\n      return null;\n    }\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, layer);\n  },\n\n  /**\r\n   * @typedef {object} StyleConfig\r\n   * \r\n   * @property {?number} [tileColor=blue] - Color to use for drawing a filled rectangle at non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n   * @property {?number} [collidingTileColor=orange] - Color to use for drawing a filled rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n   * @property {?number} [faceColor=grey] - Color to use for drawing a line at interesting tile faces. If set to null, interesting tile faces will not be drawn.\r\n   */\n\n  /**\r\n   * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n   * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n   * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n   * wherever you want on the screen.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#renderDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n   * @param {StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  renderDebug: function renderDebug(graphics, styleConfig, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.RenderDebug(graphics, styleConfig, layer);\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n   * not change collision information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#replaceByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} findIndex - The index of the tile to search for.\r\n   * @param {integer} newIndex - The index of the tile to replace it with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  replaceByIndex: function replaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'replaceByIndex')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n   * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n   * collision will be enabled (true) or disabled (false).\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollision: function setCollision(indexes, collides, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetCollision(indexes, collides, recalculateFaces, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n   * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n   * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n   * enabled (true) or disabled (false).\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setCollisionBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} start - The first index of the tile to be set for collision.\r\n   * @param {integer} stop - The last index of the tile to be set for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollisionBetween: function setCollisionBetween(start, stop, collides, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n   * that matches the given properties object, its collision flag will be set. The `collides`\r\n   * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n   * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n   * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n   * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n   * \"types\" property that matches any of those values, its collision flag will be updated.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setCollisionByProperty\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollisionByProperty: function setCollisionByProperty(properties, collides, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n   * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n   * disabled (false).\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setCollisionByExclusion\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollisionByExclusion: function setCollisionByExclusion(indexes, collides, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n   * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n   * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n   * controls if collision will be enabled (true) or disabled (false).\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setCollisionFromCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollisionFromCollisionGroup: function setCollisionFromCollisionGroup(collides, recalculateFaces, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n   * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n   * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n   * at a specific location on the map then see setTileLocationCallback.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setTileIndexCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} callbackContext - The context under which the callback is called.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setTileIndexCallback: function setTileIndexCallback(indexes, callback, callbackContext, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a collision callback for the given rectangular area (in tile coordindates) within the layer.\r\n   * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n   * remove it.\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setTileLocationCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} [callbackContext] - The context under which the callback is called.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setTileLocationCallback: function setTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, layer);\n    return this;\n  },\n\n  /**\r\n   * Sets the current layer to the LayerData associated with `layer`.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setLayer\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n   * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n   * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n   */\n  setLayer: function setLayer(layer) {\n    var index = this.getLayerIndex(layer);\n\n    if (index !== null) {\n      this.currentLayerIndex = index;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the base tile size for the map. Note: this does not necessarily match the tileWidth and\r\n   * tileHeight for all layers. This also updates the base size on all tiles across all layers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setBaseTileSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileWidth - The width of the tiles the map uses for calculations.\r\n   * @param {integer} tileHeight - The height of the tiles the map uses for calculations.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n   */\n  setBaseTileSize: function setBaseTileSize(tileWidth, tileHeight) {\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.widthInPixels = this.width * tileWidth;\n    this.heightInPixels = this.height * tileHeight; // Update the base tile size on all layers & tiles\n\n    for (var i = 0; i < this.layers.length; i++) {\n      this.layers[i].baseTileWidth = tileWidth;\n      this.layers[i].baseTileHeight = tileHeight;\n      var mapData = this.layers[i].data;\n      var mapWidth = this.layers[i].width;\n      var mapHeight = this.layers[i].height;\n\n      for (var row = 0; row < mapHeight; row++) {\n        for (var col = 0; col < mapWidth; col++) {\n          var tile = mapData[row][col];\n\n          if (tile !== null) {\n            tile.setSize(undefined, undefined, tileWidth, tileHeight);\n          }\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the tile size for a specific `layer`. Note: this does not necessarily match the map's\r\n   * tileWidth and tileHeight for all layers. This will set the tile size for the layer and any\r\n   * tiles the layer has.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#setLayerTileSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileWidth - The width of the tiles (in pixels) in the layer.\r\n   * @param {integer} tileHeight - The height of the tiles (in pixels) in the layer.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n   * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n   * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n   */\n  setLayerTileSize: function setLayerTileSize(tileWidth, tileHeight, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return this;\n    }\n\n    layer.tileWidth = tileWidth;\n    layer.tileHeight = tileHeight;\n    var mapData = layer.data;\n    var mapWidth = layer.width;\n    var mapHeight = layer.height;\n\n    for (var row = 0; row < mapHeight; row++) {\n      for (var col = 0; col < mapWidth; col++) {\n        var tile = mapData[row][col];\n\n        if (tile !== null) {\n          tile.setSize(tileWidth, tileHeight);\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n   * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n   * appear to have changed! This method only modifies tile indexes and does not change collision\r\n   * information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#shuffle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  shuffle: function shuffle(tileX, tileY, width, height, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'shuffle')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.Shuffle(tileX, tileY, width, height, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n   * information.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   * This cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#swapByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileA - First tile index.\r\n   * @param {integer} tileB - Second tile index.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  swapByIndex: function swapByIndex(indexA, indexB, tileX, tileY, width, height, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'swapByIndex')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#tileToWorldX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?number} Returns a number, or null if the layer given was invalid.\r\n   */\n  tileToWorldX: function tileToWorldX(tileX, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.TileToWorldX(tileX, camera, layer);\n  },\n\n  /**\r\n   * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#tileToWorldY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer\r\n   * to use. If not given the current layer is used.\r\n   *\r\n   * @return {?number} Returns a number, or null if the layer given was invalid.\r\n   */\n  tileToWorldY: function tileToWorldY(tileX, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.TileToWorldY(tileX, camera, layer);\n  },\n\n  /**\r\n   * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#tileToWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n   */\n  tileToWorldXY: function tileToWorldXY(tileX, tileY, point, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, layer);\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n   * weightedIndexes array. An example weighted array:\r\n   *\r\n   * [\r\n   *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n   *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n   *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n   *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n   * ]\r\n   *\r\n   * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n   * method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * If no layer specified, the map's current layer is used. This\r\n   * cannot be applied to StaticTilemapLayers.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#weightedRandomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n   * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n   * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  weightedRandomize: function weightedRandomize(tileX, tileY, width, height, weightedIndexes, layer) {\n    layer = this.getLayer(layer);\n\n    if (this._isStaticCall(layer, 'weightedRandomize')) {\n      return this;\n    }\n\n    if (layer !== null) {\n      TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, layer);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#worldToTileX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer\r\n   * to use. If not given the current layer is used.\r\n   *\r\n   * @return {?number} Returns a number, or null if the layer given was invalid.\r\n   */\n  worldToTileX: function worldToTileX(worldX, snapToFloor, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, layer);\n  },\n\n  /**\r\n   * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#worldToTileY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?number} Returns a number, or null if the layer given was invalid.\r\n   */\n  worldToTileY: function worldToTileY(worldY, snapToFloor, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, layer);\n  },\n\n  /**\r\n   * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * If no layer specified, the maps current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#worldToTileXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The tile layer to use. If not given the current layer is used.\r\n   *\r\n   * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n   */\n  worldToTileXY: function worldToTileXY(worldX, worldY, snapToFloor, point, camera, layer) {\n    layer = this.getLayer(layer);\n\n    if (layer === null) {\n      return null;\n    }\n\n    return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, layer);\n  },\n\n  /**\r\n   * Used internally to check if a layer is static and prints out a warning.\r\n   *\r\n   * @method Phaser.Tilemaps.Tilemap#_isStaticCall\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean}\r\n   */\n  _isStaticCall: function _isStaticCall(layer, functionName) {\n    if (layer.tilemapLayer instanceof StaticTilemapLayer) {\n      console.warn(functionName + ': You cannot change the tiles in a static tilemap layer');\n      return true;\n    } else {\n      return false;\n    }\n  }\n});\nmodule.exports = Tilemap;","map":null,"metadata":{},"sourceType":"script"}