{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar StrokePathWebGL = require('../StrokePathWebGL');\n\nvar Utils = require('../../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Rectangle#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Rectangle} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar RectangleWebGLRenderer = function RectangleWebGLRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  var camMatrix = pipeline._tempMatrix1;\n  var shapeMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  renderer.setPipeline(pipeline);\n  shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    shapeMatrix.e = src.x;\n    shapeMatrix.f = src.y;\n  } else {\n    shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\n    shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\n  }\n\n  camMatrix.multiply(shapeMatrix, calcMatrix);\n  var dx = src._displayOriginX;\n  var dy = src._displayOriginY;\n  var alpha = camera.alpha * src.alpha;\n\n  if (src.isFilled) {\n    var fillTint = pipeline.fillTint;\n    var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\n    fillTint.TL = fillTintColor;\n    fillTint.TR = fillTintColor;\n    fillTint.BL = fillTintColor;\n    fillTint.BR = fillTintColor;\n    pipeline.setTexture2D();\n    pipeline.batchFillRect(-dx, -dy, src.width, src.height);\n  }\n\n  if (src.isStroked) {\n    StrokePathWebGL(pipeline, src, alpha, dx, dy);\n  }\n};\n\nmodule.exports = RectangleWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}