{"ast":null,"code":"var Matter = require('../../CustomMain');\n/**\r\n * A coordinate wrapping plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterWrap\r\n */\n\n\nvar MatterWrap = {\n  // plugin meta\n  name: 'matter-wrap',\n  // PLUGIN_NAME\n  version: '0.1.4',\n  // PLUGIN_VERSION\n  for: 'matter-js@^0.13.1',\n  silent: true,\n  // no console log please\n  // installs the plugin where `base` is `Matter`\n  // you should not need to call this directly.\n  install: function install(base) {\n    base.after('Engine.update', function () {\n      MatterWrap.Engine.update(this);\n    });\n  },\n  Engine: {\n    /**\r\n     * Updates the engine by wrapping bodies and composites inside `engine.world`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\n    update: function update(engine) {\n      var world = engine.world,\n          bodies = Matter.Composite.allBodies(world),\n          composites = Matter.Composite.allComposites(world);\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var body = bodies[i];\n\n        if (body.plugin.wrap) {\n          MatterWrap.Body.wrap(body, body.plugin.wrap);\n        }\n      }\n\n      for (i = 0; i < composites.length; i += 1) {\n        var composite = composites[i];\n\n        if (composite.plugin.wrap) {\n          MatterWrap.Composite.wrap(composite, composite.plugin.wrap);\n        }\n      }\n    }\n  },\n  Bounds: {\n    /**\r\n     * Returns a translation vector that wraps the `objectBounds` inside the `bounds`.\r\n     * @function MatterWrap.Bounds.wrap\r\n     * @param {Matter.Bounds} objectBounds The bounds of the object to wrap inside the bounds.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} A translation vector (only if wrapping is required).\r\n     */\n    wrap: function wrap(objectBounds, bounds) {\n      var x = null,\n          y = null;\n\n      if (typeof bounds.min.x !== 'undefined' && typeof bounds.max.x !== 'undefined') {\n        if (objectBounds.min.x > bounds.max.x) {\n          x = bounds.min.x - objectBounds.max.x;\n        } else if (objectBounds.max.x < bounds.min.x) {\n          x = bounds.max.x - objectBounds.min.x;\n        }\n      }\n\n      if (typeof bounds.min.y !== 'undefined' && typeof bounds.max.y !== 'undefined') {\n        if (objectBounds.min.y > bounds.max.y) {\n          y = bounds.min.y - objectBounds.max.y;\n        } else if (objectBounds.max.y < bounds.min.y) {\n          y = bounds.max.y - objectBounds.min.y;\n        }\n      }\n\n      if (x !== null || y !== null) {\n        return {\n          x: x || 0,\n          y: y || 0\n        };\n      }\n    }\n  },\n  Body: {\n    /**\r\n     * Wraps the `body` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the body will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Body.wrap\r\n     * @param {Matter.Body} body The body to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\n    wrap: function wrap(body, bounds) {\n      var translation = MatterWrap.Bounds.wrap(body.bounds, bounds);\n\n      if (translation) {\n        Matter.Body.translate(body, translation);\n      }\n\n      return translation;\n    }\n  },\n  Composite: {\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies\r\n     * (not accounting for constraints).\r\n     * @function MatterWrap.Composite.bounds\r\n     * @param {Matter.Composite} composite The composite.\r\n     * @returns {Matter.Bounds} The composite bounds.\r\n     */\n    bounds: function bounds(composite) {\n      var bodies = Matter.Composite.allBodies(composite),\n          vertices = [];\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var body = bodies[i];\n        vertices.push(body.bounds.min, body.bounds.max);\n      }\n\n      return Matter.Bounds.create(vertices);\n    },\n\n    /**\r\n     * Wraps the `composite` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the composite will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Composite.wrap\r\n     * @param {Matter.Composite} composite The composite to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the composite inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\n    wrap: function wrap(composite, bounds) {\n      var translation = MatterWrap.Bounds.wrap(MatterWrap.Composite.bounds(composite), bounds);\n\n      if (translation) {\n        Matter.Composite.translate(composite, translation);\n      }\n\n      return translation;\n    }\n  }\n};\nmodule.exports = MatterWrap;\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\n\n/**\r\n * This plugin adds a new property `body.plugin.wrap` to instances of `Matter.Body`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} body.plugin.wrap\r\n * @memberof Matter.Body\r\n */\n\n/**\r\n * This plugin adds a new property `composite.plugin.wrap` to instances of `Matter.Composite`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} composite.plugin.wrap\r\n * @memberof Matter.Composite\r\n */","map":null,"metadata":{},"sourceType":"script"}