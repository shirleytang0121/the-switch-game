{"ast":null,"code":"/**\r\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n*\r\n* @class Pairs\r\n*/\nvar Pairs = {};\nmodule.exports = Pairs;\n\nvar Pair = require('./Pair');\n\nvar Common = require('../core/Common');\n\n(function () {\n  Pairs._pairMaxIdleLife = 1000;\n  /**\r\n   * Creates a new pairs structure.\r\n   * @method create\r\n   * @param {object} options\r\n   * @return {pairs} A new pairs structure\r\n   */\n\n  Pairs.create = function (options) {\n    return Common.extend({\n      table: {},\n      list: [],\n      collisionStart: [],\n      collisionActive: [],\n      collisionEnd: []\n    }, options);\n  };\n  /**\r\n   * Updates pairs given a list of collisions.\r\n   * @method update\r\n   * @param {object} pairs\r\n   * @param {collision[]} collisions\r\n   * @param {number} timestamp\r\n   */\n\n\n  Pairs.update = function (pairs, collisions, timestamp) {\n    var pairsList = pairs.list,\n        pairsTable = pairs.table,\n        collisionStart = pairs.collisionStart,\n        collisionEnd = pairs.collisionEnd,\n        collisionActive = pairs.collisionActive,\n        collision,\n        pairId,\n        pair,\n        i; // clear collision state arrays, but maintain old reference\n\n    collisionStart.length = 0;\n    collisionEnd.length = 0;\n    collisionActive.length = 0;\n\n    for (i = 0; i < pairsList.length; i++) {\n      pairsList[i].confirmedActive = false;\n    }\n\n    for (i = 0; i < collisions.length; i++) {\n      collision = collisions[i];\n\n      if (collision.collided) {\n        pairId = Pair.id(collision.bodyA, collision.bodyB);\n        pair = pairsTable[pairId];\n\n        if (pair) {\n          // pair already exists (but may or may not be active)\n          if (pair.isActive) {\n            // pair exists and is active\n            collisionActive.push(pair);\n          } else {\n            // pair exists but was inactive, so a collision has just started again\n            collisionStart.push(pair);\n          } // update the pair\n\n\n          Pair.update(pair, collision, timestamp);\n          pair.confirmedActive = true;\n        } else {\n          // pair did not exist, create a new pair\n          pair = Pair.create(collision, timestamp);\n          pairsTable[pairId] = pair; // push the new pair\n\n          collisionStart.push(pair);\n          pairsList.push(pair);\n        }\n      }\n    } // deactivate previously active pairs that are now inactive\n\n\n    for (i = 0; i < pairsList.length; i++) {\n      pair = pairsList[i];\n\n      if (pair.isActive && !pair.confirmedActive) {\n        Pair.setActive(pair, false, timestamp);\n        collisionEnd.push(pair);\n      }\n    }\n  };\n  /**\r\n   * Finds and removes pairs that have been inactive for a set amount of time.\r\n   * @method removeOld\r\n   * @param {object} pairs\r\n   * @param {number} timestamp\r\n   */\n\n\n  Pairs.removeOld = function (pairs, timestamp) {\n    var pairsList = pairs.list,\n        pairsTable = pairs.table,\n        indexesToRemove = [],\n        pair,\n        collision,\n        pairIndex,\n        i;\n\n    for (i = 0; i < pairsList.length; i++) {\n      pair = pairsList[i];\n      collision = pair.collision; // never remove sleeping pairs\n\n      if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n        pair.timeUpdated = timestamp;\n        continue;\n      } // if pair is inactive for too long, mark it to be removed\n\n\n      if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n        indexesToRemove.push(i);\n      }\n    } // remove marked pairs\n\n\n    for (i = 0; i < indexesToRemove.length; i++) {\n      pairIndex = indexesToRemove[i] - i;\n      pair = pairsList[pairIndex];\n      delete pairsTable[pair.id];\n      pairsList.splice(pairIndex, 1);\n    }\n  };\n  /**\r\n   * Clears the given pairs structure.\r\n   * @method clear\r\n   * @param {pairs} pairs\r\n   * @return {pairs} pairs\r\n   */\n\n\n  Pairs.clear = function (pairs) {\n    pairs.table = {};\n    pairs.list.length = 0;\n    pairs.collisionStart.length = 0;\n    pairs.collisionActive.length = 0;\n    pairs.collisionEnd.length = 0;\n    return pairs;\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}