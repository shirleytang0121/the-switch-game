{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar OrthographicCamera = require('./OrthographicCamera');\n\nvar PerspectiveCamera = require('./PerspectiveCamera');\n\nvar PluginCache = require('../../../src/plugins/PluginCache');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\n\nvar CameraManager = new Class({\n  initialize: function CameraManager(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * An Array of the Camera objects being managed by this Camera Manager.\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#cameras\r\n     * @type {Phaser.Cameras.Sprite3D.Camera[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.cameras = [];\n    scene.sys.events.once('boot', this.boot, this);\n    scene.sys.events.on('start', this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene3D.CameraManager#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.systems.events.once('destroy', this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.on('update', this.update, this);\n    eventEmitter.once('shutdown', this.shutdown, this);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [fieldOfView=80] - [description]\r\n   * @param {number} [width] - [description]\r\n   * @param {number} [height] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  add: function add(fieldOfView, width, height) {\n    return this.addPerspectiveCamera(fieldOfView, width, height);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#addOrthographicCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - [description]\r\n   * @param {number} height - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  addOrthographicCamera: function addOrthographicCamera(width, height) {\n    var config = this.scene.sys.game.config;\n\n    if (width === undefined) {\n      width = config.width;\n    }\n\n    if (height === undefined) {\n      height = config.height;\n    }\n\n    var camera = new OrthographicCamera(this.scene, width, height);\n    this.cameras.push(camera);\n    return camera;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#addPerspectiveCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [fieldOfView=80] - [description]\r\n   * @param {number} [width] - [description]\r\n   * @param {number} [height] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  addPerspectiveCamera: function addPerspectiveCamera(fieldOfView, width, height) {\n    var config = this.scene.sys.game.config;\n\n    if (fieldOfView === undefined) {\n      fieldOfView = 80;\n    }\n\n    if (width === undefined) {\n      width = config.width;\n    }\n\n    if (height === undefined) {\n      height = config.height;\n    }\n\n    var camera = new PerspectiveCamera(this.scene, fieldOfView, width, height);\n    this.cameras.push(camera);\n    return camera;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#getCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - [description]\r\n   *\r\n   * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n   */\n  getCamera: function getCamera(name) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      if (this.cameras[i].name === name) {\n        return this.cameras[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#removeCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} camera - [description]\r\n   */\n  removeCamera: function removeCamera(camera) {\n    var cameraIndex = this.cameras.indexOf(camera);\n\n    if (cameraIndex !== -1) {\n      this.cameras.splice(cameraIndex, 1);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#removeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n   */\n  removeAll: function removeAll() {\n    while (this.cameras.length > 0) {\n      var camera = this.cameras.pop();\n      camera.destroy();\n    }\n\n    return this.main;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestep - [description]\r\n   * @param {number} delta - [description]\r\n   */\n  update: function update(timestep, delta) {\n    for (var i = 0, l = this.cameras.length; i < l; ++i) {\n      this.cameras[i].update(timestep, delta);\n    }\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.off('update', this.update, this);\n    eventEmitter.off('shutdown', this.shutdown, this);\n    this.removeAll();\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off('start', this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('CameraManager3D', CameraManager, 'cameras3d');\nmodule.exports = CameraManager;","map":null,"metadata":{},"sourceType":"script"}