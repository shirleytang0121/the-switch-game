{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseCache = require('./BaseCache');\n\nvar Class = require('../utils/Class');\n\nvar GameEvents = require('../core/events');\n/**\r\n * @classdesc\r\n * The Cache Manager is the global cache owned and maintained by the Game instance.\r\n *\r\n * Various systems, such as the file Loader, rely on this cache in order to store the files\r\n * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\r\n * instances, one per type of file. You can also add your own custom caches.\r\n *\r\n * @class CacheManager\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this CacheManager.\r\n */\n\n\nvar CacheManager = new Class({\n  initialize: function CacheManager(game) {\n    /**\r\n     * A reference to the Phaser.Game instance that owns this CacheManager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#game\r\n     * @type {Phaser.Game}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n    this.game = game;\n    /**\r\n     * A Cache storing all binary files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#binary\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.binary = new BaseCache();\n    /**\r\n     * A Cache storing all bitmap font data files, typically added via the Loader.\r\n     * Only the font data is stored in this cache, the textures are part of the Texture Manager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#bitmapFont\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.bitmapFont = new BaseCache();\n    /**\r\n     * A Cache storing all JSON data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#json\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.json = new BaseCache();\n    /**\r\n     * A Cache storing all physics data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#physics\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.physics = new BaseCache();\n    /**\r\n     * A Cache storing all shader source files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#shader\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.shader = new BaseCache();\n    /**\r\n     * A Cache storing all non-streaming audio files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#audio\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.audio = new BaseCache();\n    /**\r\n     * A Cache storing all text files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#text\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.text = new BaseCache();\n    /**\r\n     * A Cache storing all html files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#html\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.12.0\r\n     */\n\n    this.html = new BaseCache();\n    /**\r\n     * A Cache storing all WaveFront OBJ files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#obj\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.obj = new BaseCache();\n    /**\r\n     * A Cache storing all tilemap data files, typically added via the Loader.\r\n     * Only the data is stored in this cache, the textures are part of the Texture Manager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#tilemap\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilemap = new BaseCache();\n    /**\r\n     * A Cache storing all xml data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#xml\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.xml = new BaseCache();\n    /**\r\n     * An object that contains your own custom BaseCache entries.\r\n     * Add to this via the `addCustom` method.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#custom\r\n     * @type {Object.<Phaser.Cache.BaseCache>}\r\n     * @since 3.0.0\r\n     */\n\n    this.custom = {};\n    this.game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Add your own custom Cache for storing your own files.\r\n   * The cache will be available under `Cache.custom.key`.\r\n   * The cache will only be created if the key is not already in use.\r\n   *\r\n   * @method Phaser.Cache.CacheManager#addCustom\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of your custom cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} A reference to the BaseCache that was created. If the key was already in use, a reference to the existing cache is returned instead.\r\n   */\n  addCustom: function addCustom(key) {\n    if (!this.custom.hasOwnProperty(key)) {\n      this.custom[key] = new BaseCache();\n    }\n\n    return this.custom[key];\n  },\n\n  /**\r\n   * Removes all entries from all BaseCaches and destroys all custom caches.\r\n   *\r\n   * @method Phaser.Cache.CacheManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    var keys = ['binary', 'bitmapFont', 'json', 'physics', 'shader', 'audio', 'text', 'html', 'obj', 'tilemap', 'xml'];\n\n    for (var i = 0; i < keys.length; i++) {\n      this[keys[i]].destroy();\n      this[keys[i]] = null;\n    }\n\n    for (var key in this.custom) {\n      this.custom[key].destroy();\n    }\n\n    this.custom = null;\n    this.game = null;\n  }\n});\nmodule.exports = CacheManager;","map":null,"metadata":{},"sourceType":"script"}