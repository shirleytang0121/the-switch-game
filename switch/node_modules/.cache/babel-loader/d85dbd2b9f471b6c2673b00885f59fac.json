{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar Components = require('../../components');\n\nvar GameObject = require('../../GameObject');\n\nvar GetBitmapTextSize = require('../GetBitmapTextSize');\n\nvar ParseFromAtlas = require('../ParseFromAtlas');\n\nvar Render = require('./BitmapTextRender');\n/**\r\n * The font data for an individual character of a Bitmap Font.\r\n *\r\n * Describes the character's position, size, offset and kerning.\r\n *\r\n * @typedef {object} BitmapFontCharacterData\r\n *\r\n * @property {number} x - The x position of the character.\r\n * @property {number} y - The y position of the character.\r\n * @property {number} width - The width of the character.\r\n * @property {number} height - The height of the character.\r\n * @property {number} centerX - The center x position of the character.\r\n * @property {number} centerY - The center y position of the character.\r\n * @property {number} xOffset - The x offset of the character.\r\n * @property {number} yOffset - The y offset of the character.\r\n * @property {object} data - Extra data for the character.\r\n * @property {Object.<number>} kerning - Kerning values, keyed by character code.\r\n */\n\n/**\r\n * Bitmap Font data that can be used by a BitmapText Game Object.\r\n *\r\n * @typedef {object} BitmapFontData\r\n *\r\n * @property {string} font - The name of the font.\r\n * @property {number} size - The size of the font.\r\n * @property {number} lineHeight - The line height of the font.\r\n * @property {boolean} retroFont - Whether this font is a retro font (monospace).\r\n * @property {Object.<number, BitmapFontCharacterData>} chars - The character data of the font, keyed by character code. Each character datum includes a position, size, offset and more.\r\n */\n\n/**\r\n * @typedef {object} JSONBitmapText\r\n * @extends {JSONGameObject}\r\n *\r\n * @property {string} font - The name of the font.\r\n * @property {string} text - The text that this Bitmap Text displays.\r\n * @property {number} fontSize - The size of the font.\r\n * @property {number} letterSpacing - Adds / Removes spacing between characters.\r\n * @property {integer} align - The alignment of the text in a multi-line BitmapText object.\r\n */\n\n/**\r\n * @classdesc\r\n * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\r\n * \r\n * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\r\n * match the font structure.\r\n *\r\n * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\r\n * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\r\n * processing the font texture in an image editor, applying fills and any other effects required.\r\n *\r\n * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\r\n *\r\n * To create a BitmapText data files you need a 3rd party app such as:\r\n *\r\n * BMFont (Windows, free): {@link http://www.angelcode.com/products/bmfont/|http://www.angelcode.com/products/bmfont/}\r\n * Glyph Designer (OS X, commercial): {@link http://www.71squared.com/en/glyphdesigner|http://www.71squared.com/en/glyphdesigner}\r\n * Littera (Web-based, free): {@link http://kvazars.com/littera/|http://kvazars.com/littera/}\r\n *\r\n * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\r\n * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: {@link http://codebeautify.org/xmltojson|http://codebeautify.org/xmltojson}\r\n *\r\n * @class BitmapText\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} x - The x coordinate of this Game Object in world space.\r\n * @param {number} y - The y coordinate of this Game Object in world space.\r\n * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n * @param {(string|string[])} [text] - The string, or array of strings, to be set as the content of this Bitmap Text.\r\n * @param {number} [size] - The font size of this Bitmap Text.\r\n * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object.\r\n */\n\n\nvar BitmapText = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.Depth, Components.Mask, Components.Origin, Components.Pipeline, Components.ScaleMode, Components.ScrollFactor, Components.Texture, Components.Tint, Components.Transform, Components.Visible, Render],\n  initialize: function BitmapText(scene, x, y, font, text, size, align) {\n    if (text === undefined) {\n      text = '';\n    }\n\n    if (align === undefined) {\n      align = 0;\n    }\n\n    GameObject.call(this, scene, 'BitmapText');\n    /**\r\n     * The key of the Bitmap Font used by this Bitmap Text.\r\n     * To change the font after creation please use `setFont`.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#font\r\n     * @type {string}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.font = font;\n    var entry = this.scene.sys.cache.bitmapFont.get(font);\n    /**\r\n     * The data of the Bitmap Font used by this Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#fontData\r\n     * @type {BitmapFontData}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.fontData = entry.data;\n    /**\r\n     * The text that this Bitmap Text object displays.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_text\r\n     * @type {string}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._text = '';\n    /**\r\n     * The font size of this Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_fontSize\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._fontSize = size || this.fontData.size;\n    /**\r\n     * Adds / Removes spacing between characters.\r\n     *\r\n     * Can be a negative or positive number.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_letterSpacing\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.4.0\r\n     */\n\n    this._letterSpacing = 0;\n    /**\r\n     * Controls the alignment of each line of text in this BitmapText object.\r\n     * Only has any effect when this BitmapText contains multiple lines of text, split with carriage-returns.\r\n     * Has no effect with single-lines of text.\r\n     *\r\n     * See the methods `setLeftAlign`, `setCenterAlign` and `setRightAlign`.\r\n     *\r\n     * 0 = Left aligned (default)\r\n     * 1 = Middle aligned\r\n     * 2 = Right aligned\r\n     *\r\n     * The alignment position is based on the longest line of text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_align\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._align = align;\n    /**\r\n     * An object that describes the size of this Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_bounds\r\n     * @type {BitmapTextSize}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._bounds = GetBitmapTextSize(this, false, this._bounds);\n    /**\r\n     * An internal dirty flag for bounds calculation.\r\n     *\r\n     * @name Phaser.GameObjects.BitmapText#_dirty\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._dirty = false;\n    this.setTexture(entry.texture, entry.frame);\n    this.setPosition(x, y);\n    this.setOrigin(0, 0);\n    this.initPipeline();\n    this.setText(text);\n  },\n\n  /**\r\n   * Set the lines of text in this BitmapText to be left-aligned.\r\n   * This only has any effect if this BitmapText contains more than one line of text.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setLeftAlign\r\n   * @since 3.11.0\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setLeftAlign: function setLeftAlign() {\n    this._align = BitmapText.ALIGN_LEFT;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\r\n   * Set the lines of text in this BitmapText to be center-aligned.\r\n   * This only has any effect if this BitmapText contains more than one line of text.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setCenterAlign\r\n   * @since 3.11.0\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setCenterAlign: function setCenterAlign() {\n    this._align = BitmapText.ALIGN_CENTER;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\r\n   * Set the lines of text in this BitmapText to be right-aligned.\r\n   * This only has any effect if this BitmapText contains more than one line of text.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setRightAlign\r\n   * @since 3.11.0\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setRightAlign: function setRightAlign() {\n    this._align = BitmapText.ALIGN_RIGHT;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\r\n   * Set the font size of this Bitmap Text.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setFontSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} size - The font size to set.\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setFontSize: function setFontSize(size) {\n    this._fontSize = size;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\r\n   * Sets the letter spacing between each character of this Bitmap Text.\r\n   * Can be a positive value to increase the space, or negative to reduce it.\r\n   * Spacing is applied after the kerning values have been set.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setLetterSpacing\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [spacing=0] - The amount of horizontal space to add between each character.\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setLetterSpacing: function setLetterSpacing(spacing) {\n    if (spacing === undefined) {\n      spacing = 0;\n    }\n\n    this._letterSpacing = spacing;\n    this._dirty = true;\n    return this;\n  },\n\n  /**\r\n   * Set the textual content of this BitmapText.\r\n   *\r\n   * An array of strings will be converted into multi-line text. Use the align methods to change multi-line alignment.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setText\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} value - The string, or array of strings, to be set as the content of this BitmapText.\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setText: function setText(value) {\n    if (!value && value !== 0) {\n      value = '';\n    }\n\n    if (Array.isArray(value)) {\n      value = value.join('\\n');\n    }\n\n    if (value !== this.text) {\n      this._text = value.toString();\n      this._dirty = true;\n      this.updateDisplayOrigin();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the bounds of this Bitmap Text.\r\n   *\r\n   * An object is returned that contains the position, width and height of the Bitmap Text in local and global\r\n   * contexts.\r\n   *\r\n   * Local size is based on just the font size and a [0, 0] position.\r\n   *\r\n   * Global size takes into account the Game Object's scale, world position and display origin.\r\n   *\r\n   * Also in the object is data regarding the length of each line, should this be a multi-line BitmapText.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#getTextBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [round] - Whether to round the results to the nearest integer.\r\n   *\r\n   * @return {BitmapTextSize} An object that describes the size of this Bitmap Text.\r\n   */\n  getTextBounds: function getTextBounds(round) {\n    //  local = The BitmapText based on fontSize and 0x0 coords\n    //  global = The BitmapText, taking into account scale and world position\n    //  lines = The BitmapText line data\n    if (this._dirty) {\n      GetBitmapTextSize(this, round, this._bounds);\n    }\n\n    return this._bounds;\n  },\n\n  /**\r\n   * Changes the font this BitmapText is using to render.\r\n   *\r\n   * The new texture is loaded and applied to the BitmapText. The existing test, size and alignment are preserved,\r\n   * unless overridden via the arguments.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#setFont\r\n   * @since 3.11.0\r\n   *\r\n   * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n   * @param {number} [size] - The font size of this Bitmap Text. If not specified the current size will be used.\r\n   * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object. If not specified the current alignment will be used.\r\n   *\r\n   * @return {this} This BitmapText Object.\r\n   */\n  setFont: function setFont(key, size, align) {\n    if (size === undefined) {\n      size = this._fontSize;\n    }\n\n    if (align === undefined) {\n      align = this._align;\n    }\n\n    if (key !== this.font) {\n      var entry = this.scene.sys.cache.bitmapFont.get(key);\n\n      if (entry) {\n        this.font = key;\n        this.fontData = entry.data;\n        this._fontSize = size;\n        this._align = align;\n        this.setTexture(entry.texture, entry.frame);\n        GetBitmapTextSize(this, false, this._bounds);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Controls the alignment of each line of text in this BitmapText object.\r\n   *\r\n   * Only has any effect when this BitmapText contains multiple lines of text, split with carriage-returns.\r\n   * Has no effect with single-lines of text.\r\n   *\r\n   * See the methods `setLeftAlign`, `setCenterAlign` and `setRightAlign`.\r\n   *\r\n   * 0 = Left aligned (default)\r\n   * 1 = Middle aligned\r\n   * 2 = Right aligned\r\n   *\r\n   * The alignment position is based on the longest line of text.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#align\r\n   * @type {integer}\r\n   * @since 3.11.0\r\n   */\n  align: {\n    set: function set(value) {\n      this._align = value;\n      this._dirty = true;\n    },\n    get: function get() {\n      return this._align;\n    }\n  },\n\n  /**\r\n   * The text that this Bitmap Text object displays.\r\n   *\r\n   * You can also use the method `setText` if you want a chainable way to change the text content.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#text\r\n   * @type {string}\r\n   * @since 3.0.0\r\n   */\n  text: {\n    set: function set(value) {\n      this.setText(value);\n    },\n    get: function get() {\n      return this._text;\n    }\n  },\n\n  /**\r\n   * The font size of this Bitmap Text.\r\n   *\r\n   * You can also use the method `setFontSize` if you want a chainable way to change the font size.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#fontSize\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  fontSize: {\n    set: function set(value) {\n      this._fontSize = value;\n      this._dirty = true;\n    },\n    get: function get() {\n      return this._fontSize;\n    }\n  },\n\n  /**\r\n   * Adds / Removes spacing between characters.\r\n   *\r\n   * Can be a negative or positive number.\r\n   *\r\n   * You can also use the method `setLetterSpacing` if you want a chainable way to change the letter spacing.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#letterSpacing\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  letterSpacing: {\n    set: function set(value) {\n      this._letterSpacing = value;\n      this._dirty = true;\n    },\n    get: function get() {\n      return this._letterSpacing;\n    }\n  },\n\n  /**\r\n   * The width of this Bitmap Text.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#width\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  width: {\n    get: function get() {\n      this.getTextBounds(false);\n      return this._bounds.global.width;\n    }\n  },\n\n  /**\r\n   * The height of this bitmap text.\r\n   *\r\n   * @name Phaser.GameObjects.BitmapText#height\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  height: {\n    get: function get() {\n      this.getTextBounds(false);\n      return this._bounds.global.height;\n    }\n  },\n\n  /**\r\n   * Build a JSON representation of this Bitmap Text.\r\n   *\r\n   * @method Phaser.GameObjects.BitmapText#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {JSONBitmapText} A JSON representation of this Bitmap Text.\r\n   */\n  toJSON: function toJSON() {\n    var out = Components.ToJSON(this); //  Extra data is added here\n\n    var data = {\n      font: this.font,\n      text: this.text,\n      fontSize: this.fontSize,\n      letterSpacing: this.letterSpacing,\n      align: this.align\n    };\n    out.data = data;\n    return out;\n  }\n});\n/**\r\n * Left align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_LEFT\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\n\nBitmapText.ALIGN_LEFT = 0;\n/**\r\n * Center align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_CENTER\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\n\nBitmapText.ALIGN_CENTER = 1;\n/**\r\n * Right align the text characters in a multi-line BitmapText object.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ALIGN_RIGHT\r\n * @type {integer}\r\n * @since 3.11.0\r\n */\n\nBitmapText.ALIGN_RIGHT = 2;\n/**\r\n * Parse an XML Bitmap Font from an Atlas.\r\n *\r\n * Adds the parsed Bitmap Font data to the cache with the `fontName` key.\r\n *\r\n * @name Phaser.GameObjects.BitmapText.ParseFromAtlas\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to parse the Bitmap Font for.\r\n * @param {string} fontName - The key of the font to add to the Bitmap Font cache.\r\n * @param {string} textureKey - The key of the BitmapFont's texture.\r\n * @param {string} frameKey - The key of the BitmapFont texture's frame.\r\n * @param {string} xmlKey - The key of the XML data of the font to parse.\r\n * @param {integer} [xSpacing] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing] - The y-axis spacing to add to the line height.\r\n *\r\n * @return {boolean} Whether the parsing was successful or not.\r\n */\n\nBitmapText.ParseFromAtlas = ParseFromAtlas;\nmodule.exports = BitmapText;","map":null,"metadata":{},"sourceType":"script"}