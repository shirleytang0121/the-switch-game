{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n\nvar SceneEvents = require('../../scene/events');\n/**\r\n * @typedef {object} InputJSONCameraObject\r\n *\r\n * @property {string} [name=''] - The name of the Camera.\r\n * @property {integer} [x=0] - The horizontal position of the Camera viewport.\r\n * @property {integer} [y=0] - The vertical position of the Camera viewport.\r\n * @property {integer} [width] - The width of the Camera viewport.\r\n * @property {integer} [height] - The height of the Camera viewport.\r\n * @property {number} [zoom=1] - The default zoom level of the Camera.\r\n * @property {number} [rotation=0] - The rotation of the Camera, in radians.\r\n * @property {boolean} [roundPixels=false] - Should the Camera round pixels before rendering?\r\n * @property {number} [scrollX=0] - The horizontal scroll position of the Camera.\r\n * @property {number} [scrollY=0] - The vertical scroll position of the Camera.\r\n * @property {(false|string)} [backgroundColor=false] - A CSS color string controlling the Camera background color.\r\n * @property {?object} [bounds] - Defines the Camera bounds.\r\n * @property {number} [bounds.x=0] - The top-left extent of the Camera bounds.\r\n * @property {number} [bounds.y=0] - The top-left extent of the Camera bounds.\r\n * @property {number} [bounds.width] - The width of the Camera bounds.\r\n * @property {number} [bounds.height] - The height of the Camera bounds.\r\n */\n\n/**\r\n * @classdesc\r\n * The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\r\n * \r\n * By default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\r\n * in your game config.\r\n * \r\n * Create new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\r\n * the new Camera in using the `addExisting` method.\r\n * \r\n * Cameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \r\n * 'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\r\n * zero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\r\n * Game Objects, make sure it's one of the first 31 created.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.\r\n *\r\n * @class CameraManager\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that owns the Camera Manager plugin.\r\n */\n\n\nvar CameraManager = new Class({\n  initialize: function CameraManager(scene) {\n    /**\r\n     * The Scene that owns the Camera Manager plugin.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\r\n     * property set to match this value. By default it is set to match the value set in the\r\n     * game configuration, but can be changed at any point. Equally, individual cameras can\r\n     * also be changed as needed.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#roundPixels\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\n\n    this.roundPixels = scene.sys.game.config.roundPixels;\n    /**\r\n     * An Array of the Camera objects being managed by this Camera Manager.\r\n     * The Cameras are updated and rendered in the same order in which they appear in this array.\r\n     * Do not directly add or remove entries to this array. However, you can move the contents\r\n     * around the array should you wish to adjust the display order.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#cameras\r\n     * @type {Phaser.Cameras.Scene2D.Camera[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.cameras = [];\n    /**\r\n     * A handy reference to the 'main' camera. By default this is the first Camera the\r\n     * Camera Manager creates. You can also set it directly, or use the `makeMain` argument\r\n     * in the `add` and `addExisting` methods. It allows you to access it from your game:\r\n     * \r\n     * ```javascript\r\n     * var cam = this.cameras.main;\r\n     * ```\r\n     * \r\n     * Also see the properties `camera1`, `camera2` and so on.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#main\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @since 3.0.0\r\n     */\n\n    this.main;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#boot\r\n   * @private\r\n   * @listens Phaser.Scenes.Events#DESTROY\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    var sys = this.systems;\n\n    if (sys.settings.cameras) {\n      //  We have cameras to create\n      this.fromJSON(sys.settings.cameras);\n    } else {\n      //  Make one\n      this.add();\n    }\n\n    this.main = this.cameras[0];\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#start\r\n   * @private\r\n   * @listens Phaser.Scenes.Events#UPDATE\r\n   * @listens Phaser.Scenes.Events#SHUTDOWN\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    if (!this.main) {\n      var sys = this.systems;\n\n      if (sys.settings.cameras) {\n        //  We have cameras to create\n        this.fromJSON(sys.settings.cameras);\n      } else {\n        //  Make one\n        this.add();\n      }\n\n      this.main = this.cameras[0];\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Adds a new Camera into the Camera Manager. The Camera Manager can support up to 31 different Cameras.\r\n   * \r\n   * Each Camera has its own viewport, which controls the size of the Camera and its position within the canvas.\r\n   * \r\n   * Use the `Camera.scrollX` and `Camera.scrollY` properties to change where the Camera is looking, or the\r\n   * Camera methods such as `centerOn`. Cameras also have built in special effects, such as fade, flash, shake,\r\n   * pan and zoom.\r\n   * \r\n   * By default Cameras are transparent and will render anything that they can see based on their `scrollX`\r\n   * and `scrollY` values. Game Objects can be set to be ignored by a Camera by using the `Camera.ignore` method.\r\n   * \r\n   * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n   * it after creation if required.\r\n   * \r\n   * See the Camera class documentation for more details.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [x=0] - The horizontal position of the Camera viewport.\r\n   * @param {integer} [y=0] - The vertical position of the Camera viewport.\r\n   * @param {integer} [width] - The width of the Camera viewport. If not given it'll be the game config size.\r\n   * @param {integer} [height] - The height of the Camera viewport. If not given it'll be the game config size.\r\n   * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n   * @param {string} [name=''] - The name of the Camera.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The newly created Camera.\r\n   */\n  add: function add(x, y, width, height, makeMain, name) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = this.scene.sys.scale.width;\n    }\n\n    if (height === undefined) {\n      height = this.scene.sys.scale.height;\n    }\n\n    if (makeMain === undefined) {\n      makeMain = false;\n    }\n\n    if (name === undefined) {\n      name = '';\n    }\n\n    var camera = new Camera(x, y, width, height);\n    camera.setName(name);\n    camera.setScene(this.scene);\n    camera.setRoundPixels(this.roundPixels);\n    camera.id = this.getNextID();\n    this.cameras.push(camera);\n\n    if (makeMain) {\n      this.main = camera;\n    }\n\n    return camera;\n  },\n\n  /**\r\n   * Adds an existing Camera into the Camera Manager.\r\n   * \r\n   * The Camera should either be a `Phaser.Cameras.Scene2D.Camera` instance, or a class that extends from it.\r\n   * \r\n   * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n   * it after addition if required.\r\n   * \r\n   * The Camera will be assigned an ID, which is used for Game Object exclusion and then added to the\r\n   * manager. As long as it doesn't already exist in the manager it will be added then returned.\r\n   * \r\n   * If this method returns `null` then the Camera already exists in this Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#addExisting\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to be added to the Camera Manager.\r\n   * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n   *\r\n   * @return {?Phaser.Cameras.Scene2D.Camera} The Camera that was added to the Camera Manager, or `null` if it couldn't be added.\r\n   */\n  addExisting: function addExisting(camera, makeMain) {\n    if (makeMain === undefined) {\n      makeMain = false;\n    }\n\n    var index = this.cameras.indexOf(camera);\n\n    if (index === -1) {\n      camera.id = this.getNextID();\n      camera.setRoundPixels(this.roundPixels);\n      this.cameras.push(camera);\n\n      if (makeMain) {\n        this.main = camera;\n      }\n\n      return camera;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Gets the next available Camera ID number.\r\n   * \r\n   * The Camera Manager supports up to 31 unique cameras, after which the ID returned will always be zero.\r\n   * You can create additional cameras beyond 31, but they cannot be used for Game Object exclusion.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getNextID\r\n   * @private\r\n   * @since 3.11.0\r\n   *\r\n   * @return {number} The next available Camera ID, or 0 if they're all already in use.\r\n   */\n  getNextID: function getNextID() {\n    var cameras = this.cameras;\n    var testID = 1; //  Find the first free camera ID we can use\n\n    for (var t = 0; t < 32; t++) {\n      var found = false;\n\n      for (var i = 0; i < cameras.length; i++) {\n        var camera = cameras[i];\n\n        if (camera && camera.id === testID) {\n          found = true;\n          continue;\n        }\n      }\n\n      if (found) {\n        testID = testID << 1;\n      } else {\n        return testID;\n      }\n    }\n\n    return 0;\n  },\n\n  /**\r\n   * Gets the total number of Cameras in this Camera Manager.\r\n   * \r\n   * If the optional `isVisible` argument is set it will only count Cameras that are currently visible.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getTotal\r\n   * @since 3.11.0\r\n   * \r\n   * @param {boolean} [isVisible=false] - Set the `true` to only include visible Cameras in the total.\r\n   *\r\n   * @return {integer} The total number of Cameras in this Camera Manager.\r\n   */\n  getTotal: function getTotal(isVisible) {\n    if (isVisible === undefined) {\n      isVisible = false;\n    }\n\n    var total = 0;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (!isVisible || isVisible && camera.visible) {\n        total++;\n      }\n    }\n\n    return total;\n  },\n\n  /**\r\n   * Populates this Camera Manager based on the given configuration object, or an array of config objects.\r\n   * \r\n   * See the `InputJSONCameraObject` documentation for details of the object structure.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(InputJSONCameraObject|InputJSONCameraObject[])} config - A Camera configuration object, or an array of them, to be added to this Camera Manager.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.CameraManager} This Camera Manager instance.\r\n   */\n  fromJSON: function fromJSON(config) {\n    if (!Array.isArray(config)) {\n      config = [config];\n    }\n\n    var gameWidth = this.scene.sys.scale.width;\n    var gameHeight = this.scene.sys.scale.height;\n\n    for (var i = 0; i < config.length; i++) {\n      var cameraConfig = config[i];\n      var x = GetFastValue(cameraConfig, 'x', 0);\n      var y = GetFastValue(cameraConfig, 'y', 0);\n      var width = GetFastValue(cameraConfig, 'width', gameWidth);\n      var height = GetFastValue(cameraConfig, 'height', gameHeight);\n      var camera = this.add(x, y, width, height); //  Direct properties\n\n      camera.name = GetFastValue(cameraConfig, 'name', '');\n      camera.zoom = GetFastValue(cameraConfig, 'zoom', 1);\n      camera.rotation = GetFastValue(cameraConfig, 'rotation', 0);\n      camera.scrollX = GetFastValue(cameraConfig, 'scrollX', 0);\n      camera.scrollY = GetFastValue(cameraConfig, 'scrollY', 0);\n      camera.roundPixels = GetFastValue(cameraConfig, 'roundPixels', false);\n      camera.visible = GetFastValue(cameraConfig, 'visible', true); // Background Color\n\n      var backgroundColor = GetFastValue(cameraConfig, 'backgroundColor', false);\n\n      if (backgroundColor) {\n        camera.setBackgroundColor(backgroundColor);\n      } //  Bounds\n\n\n      var boundsConfig = GetFastValue(cameraConfig, 'bounds', null);\n\n      if (boundsConfig) {\n        var bx = GetFastValue(boundsConfig, 'x', 0);\n        var by = GetFastValue(boundsConfig, 'y', 0);\n        var bwidth = GetFastValue(boundsConfig, 'width', gameWidth);\n        var bheight = GetFastValue(boundsConfig, 'height', gameHeight);\n        camera.setBounds(bx, by, bwidth, bheight);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Gets a Camera based on its name.\r\n   * \r\n   * Camera names are optional and don't have to be set, so this method is only of any use if you\r\n   * have given your Cameras unique names.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the Camera.\r\n   *\r\n   * @return {?Phaser.Cameras.Scene2D.Camera} The first Camera with a name matching the given string, otherwise `null`.\r\n   */\n  getCamera: function getCamera(name) {\n    var cameras = this.cameras;\n\n    for (var i = 0; i < cameras.length; i++) {\n      if (cameras[i].name === name) {\n        return cameras[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Returns an array of all cameras below the given Pointer.\r\n   * \r\n   * The first camera in the array is the top-most camera in the camera list.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getCamerasBelowPointer\r\n   * @since 3.10.0\r\n   *\r\n   * @param {Phaser.Input.Pointer} pointer - The Pointer to check against.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera[]} An array of cameras below the Pointer.\r\n   */\n  getCamerasBelowPointer: function getCamerasBelowPointer(pointer) {\n    var cameras = this.cameras;\n    var x = pointer.x;\n    var y = pointer.y;\n    var output = [];\n\n    for (var i = 0; i < cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (camera.visible && camera.inputEnabled && RectangleContains(camera, x, y)) {\n        //  So the top-most camera is at the top of the search array\n        output.unshift(camera);\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Removes the given Camera, or an array of Cameras, from this Camera Manager.\r\n   * \r\n   * If found in the Camera Manager it will be immediately removed from the local cameras array.\r\n   * If also currently the 'main' camera, 'main' will be reset to be camera 0.\r\n   * \r\n   * The removed Cameras are automatically destroyed if the `runDestroy` argument is `true`, which is the default.\r\n   * If you wish to re-use the cameras then set this to `false`, but know that they will retain their references\r\n   * and internal data until destroyed or re-added to a Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Cameras.Scene2D.Camera|Phaser.Cameras.Scene2D.Camera[])} camera - The Camera, or an array of Cameras, to be removed from this Camera Manager.\r\n   * @param {boolean} [runDestroy=true] - Automatically call `Camera.destroy` on each Camera removed from this Camera Manager.\r\n   * \r\n   * @return {integer} The total number of Cameras removed.\r\n   */\n  remove: function remove(camera, runDestroy) {\n    if (runDestroy === undefined) {\n      runDestroy = true;\n    }\n\n    if (!Array.isArray(camera)) {\n      camera = [camera];\n    }\n\n    var total = 0;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < camera.length; i++) {\n      var index = cameras.indexOf(camera[i]);\n\n      if (index !== -1) {\n        if (runDestroy) {\n          cameras[index].destroy();\n        }\n\n        cameras.splice(index, 1);\n        total++;\n      }\n    }\n\n    if (!this.main && cameras[0]) {\n      this.main = cameras[0];\n    }\n\n    return total;\n  },\n\n  /**\r\n   * The internal render method. This is called automatically by the Scene and should not be invoked directly.\r\n   * \r\n   * It will iterate through all local cameras and render them in turn, as long as they're visible and have\r\n   * an alpha level > 0.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#render\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - The Renderer that will render the children to this camera.\r\n   * @param {Phaser.GameObjects.GameObject[]} children - An array of renderable Game Objects.\r\n   * @param {number} interpolation - Interpolation value. Reserved for future use.\r\n   */\n  render: function render(renderer, children, interpolation) {\n    var scene = this.scene;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < this.cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (camera.visible && camera.alpha > 0) {\n        //  Hard-coded to 1 for now\n        camera.preRender(1);\n        renderer.render(scene, children, interpolation, camera);\n      }\n    }\n  },\n\n  /**\r\n   * Resets this Camera Manager.\r\n   * \r\n   * This will iterate through all current Cameras, destroying them all, then it will reset the\r\n   * cameras array, reset the ID counter and create 1 new single camera using the default values.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#resetAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The freshly created main Camera.\r\n   */\n  resetAll: function resetAll() {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].destroy();\n    }\n\n    this.cameras = [];\n    this.main = this.add();\n    return this.main;\n  },\n\n  /**\r\n   * The main update loop. Called automatically when the Scene steps.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#update\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].update(time, delta);\n    }\n  },\n\n  /**\r\n   * Resizes all cameras to the given dimensions.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#resize\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} width - The new width of the camera.\r\n   * @param {number} height - The new height of the camera.\r\n   */\n  resize: function resize(width, height) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].setSize(width, height);\n    }\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    this.main = undefined;\n\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].destroy();\n    }\n\n    this.cameras = [];\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('CameraManager', CameraManager, 'cameras');\nmodule.exports = CameraManager;","map":null,"metadata":{},"sourceType":"script"}