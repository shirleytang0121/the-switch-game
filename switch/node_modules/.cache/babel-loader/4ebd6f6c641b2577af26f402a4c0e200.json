{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Between = require('../../math/Between');\n\nvar ContainsRect = require('./ContainsRect');\n\nvar Point = require('../point/Point');\n/**\r\n * Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\r\n * The inner Rectangle must be fully contained within the outer rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.RandomOutside\r\n * @since 3.10.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} outer - The outer Rectangle to get the random point within.\r\n * @param {Phaser.Geom.Rectangle} inner - The inner Rectangle to exclude from the returned point.\r\n * @param {Phaser.Geom.Point} [out] - A Point, or Point-like object to store the result in. If not specified, a new Point will be created.\r\n *\r\n * @return {Phaser.Geom.Point} A Point object containing the random values in its `x` and `y` properties.\r\n */\n\n\nvar RandomOutside = function RandomOutside(outer, inner, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  if (ContainsRect(outer, inner)) {\n    //  Pick a random quadrant\n    //\n    //  The quadrants don't extend the full widths / heights of the outer rect to give\n    //  us a better uniformed distribution, otherwise you get clumping in the corners where\n    //  the 4 quads would overlap\n    switch (Between(0, 3)) {\n      case 0:\n        // Top\n        out.x = outer.x + Math.random() * (inner.right - outer.x);\n        out.y = outer.y + Math.random() * (inner.top - outer.y);\n        break;\n\n      case 1:\n        // Bottom\n        out.x = inner.x + Math.random() * (outer.right - inner.x);\n        out.y = inner.bottom + Math.random() * (outer.bottom - inner.bottom);\n        break;\n\n      case 2:\n        // Left\n        out.x = outer.x + Math.random() * (inner.x - outer.x);\n        out.y = inner.y + Math.random() * (outer.bottom - inner.y);\n        break;\n\n      case 3:\n        // Right\n        out.x = inner.right + Math.random() * (outer.right - inner.right);\n        out.y = outer.y + Math.random() * (inner.bottom - outer.y);\n        break;\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = RandomOutside;","map":null,"metadata":{},"sourceType":"script"}