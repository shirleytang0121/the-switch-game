{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Clone = require('../utils/object/Clone');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar GameEvents = require('../core/events');\n\nvar NOOP = require('../utils/NOOP');\n/**\r\n * @callback EachActiveSoundCallback\r\n *\r\n * @param {Phaser.Sound.BaseSoundManager} manager - The SoundManager\r\n * @param {Phaser.Sound.BaseSound} sound - The current active Sound\r\n * @param {number} index - The index of the current active Sound\r\n * @param {Phaser.Sound.BaseSound[]} sounds - All sounds\r\n */\n\n/**\r\n * Audio sprite sound type.\r\n *\r\n * @typedef {object} AudioSpriteSound\r\n *\r\n * @property {object} spritemap - Local reference to 'spritemap' object form json file generated by audiosprite tool.\r\n */\n\n/**\r\n * @classdesc\r\n * The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\r\n * The audio file type and the encoding of those files are extremely important.\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class BaseSoundManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar BaseSoundManager = new Class({\n  Extends: EventEmitter,\n  initialize: function BaseSoundManager(game) {\n    EventEmitter.call(this);\n    /**\r\n     * Local reference to game.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#game\r\n     * @type {Phaser.Game}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.game = game;\n    /**\r\n     * Local reference to the JSON Cache, as used by Audio Sprites.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#jsonCache\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @readonly\r\n     * @since 3.7.0\r\n     */\n\n    this.jsonCache = game.cache.json;\n    /**\r\n     * An array containing all added sounds.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#sounds\r\n     * @type {Phaser.Sound.BaseSound[]}\r\n     * @default []\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.sounds = [];\n    /**\r\n     * Global mute setting.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#mute\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.mute = false;\n    /**\r\n     * Global volume setting.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#volume\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.volume = 1;\n    /**\r\n     * Flag indicating if sounds should be paused when game looses focus,\r\n     * for instance when user switches to another tab/program/app.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#pauseOnBlur\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.pauseOnBlur = true;\n    /**\r\n     * Property that actually holds the value of global playback rate.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#_rate\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._rate = 1;\n    /**\r\n     * Property that actually holds the value of global detune.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#_detune\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._detune = 0;\n    /**\r\n     * Mobile devices require sounds to be triggered from an explicit user action,\r\n     * such as a tap, before any sound can be loaded/played on a web page.\r\n     * Set to true if the audio system is currently locked awaiting user interaction.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#locked\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.locked = this.locked || false;\n    /**\r\n     * Flag used internally for handling when the audio system\r\n     * has been unlocked, if there ever was a need for it.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#unlocked\r\n     * @type {boolean}\r\n     * @default false\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.unlocked = false;\n    game.events.on(GameEvents.BLUR, function () {\n      if (this.pauseOnBlur) {\n        this.onBlur();\n      }\n    }, this);\n    game.events.on(GameEvents.FOCUS, function () {\n      if (this.pauseOnBlur) {\n        this.onFocus();\n      }\n    }, this);\n    game.events.on(GameEvents.PRE_STEP, this.update, this);\n    game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#add\r\n   * @override\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.BaseSound} The new sound instance.\r\n   */\n  add: NOOP,\n\n  /**\r\n   * Adds a new audio sprite sound into the sound manager.\r\n   * Audio Sprites are a combination of audio files and a JSON configuration.\r\n   * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#addAudioSprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {AudioSpriteSound} The new audio sprite sound instance.\r\n   */\n  addAudioSprite: function addAudioSprite(key, config) {\n    if (config === undefined) {\n      config = {};\n    }\n\n    var sound = this.add(key, config);\n    sound.spritemap = this.jsonCache.get(key).spritemap;\n\n    for (var markerName in sound.spritemap) {\n      if (!sound.spritemap.hasOwnProperty(markerName)) {\n        continue;\n      }\n\n      var markerConfig = Clone(config);\n      var marker = sound.spritemap[markerName];\n      markerConfig.loop = marker.hasOwnProperty('loop') ? marker.loop : false;\n      sound.addMarker({\n        name: markerName,\n        start: marker.start,\n        duration: marker.end - marker.start,\n        config: markerConfig\n      });\n    }\n\n    return sound;\n  },\n\n  /**\r\n   * Enables playing sound on the fly without the need to keep a reference to it.\r\n   * Sound will auto destroy once its playback ends.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#play\r\n   * @listens Phaser.Sound.Events#COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {(SoundConfig|SoundMarker)} [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.\r\n   *\r\n   * @return {boolean} Whether the sound started playing successfully.\r\n   */\n  play: function play(key, extra) {\n    var sound = this.add(key);\n    sound.once(Events.COMPLETE, sound.destroy, sound);\n\n    if (extra) {\n      if (extra.name) {\n        sound.addMarker(extra);\n        return sound.play(extra.name);\n      } else {\n        return sound.play(extra);\n      }\n    } else {\n      return sound.play();\n    }\n  },\n\n  /**\r\n   * Enables playing audio sprite sound on the fly without the need to keep a reference to it.\r\n   * Sound will auto destroy once its playback ends.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#playAudioSprite\r\n   * @listens Phaser.Sound.Events#COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {string} spriteName - The name of the sound sprite to play.\r\n   * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {boolean} Whether the audio sprite sound started playing successfully.\r\n   */\n  playAudioSprite: function playAudioSprite(key, spriteName, config) {\n    var sound = this.addAudioSprite(key);\n    sound.once(Events.COMPLETE, sound.destroy, sound);\n    return sound.play(spriteName, config);\n  },\n\n  /**\r\n   * Removes a sound from the sound manager.\r\n   * The removed sound is destroyed before removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Sound.BaseSound} sound - The sound object to remove.\r\n   *\r\n   * @return {boolean} True if the sound was removed successfully, otherwise false.\r\n   */\n  remove: function remove(sound) {\n    var index = this.sounds.indexOf(sound);\n\n    if (index !== -1) {\n      sound.destroy();\n      this.sounds.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Removes all sounds from the sound manager that have an asset key matching the given value.\r\n   * The removed sounds are destroyed before removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#removeByKey\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key to match when removing sound objects.\r\n   *\r\n   * @return {number} The number of matching sound objects that were removed.\r\n   */\n  removeByKey: function removeByKey(key) {\n    var removed = 0;\n\n    for (var i = this.sounds.length - 1; i >= 0; i--) {\n      var sound = this.sounds[i];\n\n      if (sound.key === key) {\n        sound.destroy();\n        this.sounds.splice(i, 1);\n        removed++;\n      }\n    }\n\n    return removed;\n  },\n\n  /**\r\n   * Pauses all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#pauseAll\r\n   * @fires Phaser.Sound.Events#PAUSE_ALL\r\n   * @since 3.0.0\r\n   */\n  pauseAll: function pauseAll() {\n    this.forEachActiveSound(function (sound) {\n      sound.pause();\n    });\n    this.emit(Events.PAUSE_ALL, this);\n  },\n\n  /**\r\n   * Resumes all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#resumeAll\r\n   * @fires Phaser.Sound.Events#RESUME_ALL\r\n   * @since 3.0.0\r\n   */\n  resumeAll: function resumeAll() {\n    this.forEachActiveSound(function (sound) {\n      sound.resume();\n    });\n    this.emit(Events.RESUME_ALL, this);\n  },\n\n  /**\r\n   * Stops all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#stopAll\r\n   * @fires Phaser.Sound.Events#STOP_ALL\r\n   * @since 3.0.0\r\n   */\n  stopAll: function stopAll() {\n    this.forEachActiveSound(function (sound) {\n      sound.stop();\n    });\n    this.emit(Events.STOP_ALL, this);\n  },\n\n  /**\r\n   * Method used internally for unlocking audio playback on devices that\r\n   * require user interaction before any sound can be played on a web page.\r\n   *\r\n   * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#unlock\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  unlock: NOOP,\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#onBlur\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: NOOP,\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#onFocus\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: NOOP,\n\n  /**\r\n   * Update method called on every game step.\r\n   * Removes destroyed sounds and updates every active sound in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#update\r\n   * @protected\r\n   * @fires Phaser.Sound.Events#UNLOCKED\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (this.unlocked) {\n      this.unlocked = false;\n      this.locked = false;\n      this.emit(Events.UNLOCKED, this);\n    }\n\n    for (var i = this.sounds.length - 1; i >= 0; i--) {\n      if (this.sounds[i].pendingRemove) {\n        this.sounds.splice(i, 1);\n      }\n    }\n\n    this.sounds.forEach(function (sound) {\n      sound.update(time, delta);\n    });\n  },\n\n  /**\r\n   * Destroys all the sounds in the game and all associated events.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.removeAllListeners();\n    this.forEachActiveSound(function (sound) {\n      sound.destroy();\n    });\n    this.sounds.length = 0;\n    this.sounds = null;\n    this.game = null;\n  },\n\n  /**\r\n   * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#forEachActiveSound\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {EachActiveSoundCallback} callback - Callback function. (manager: Phaser.Sound.BaseSoundManager, sound: Phaser.Sound.BaseSound, index: number, sounds: Phaser.Manager.BaseSound[]) => void\r\n   * @param {*} [scope] - Callback context.\r\n   */\n  forEachActiveSound: function forEachActiveSound(callback, scope) {\n    var _this = this;\n\n    this.sounds.forEach(function (sound, index) {\n      if (!sound.pendingRemove) {\n        callback.call(scope || _this, sound, index, _this.sounds);\n      }\n    });\n  },\n\n  /**\r\n   * Sets the global playback rate at which all the sounds will be played.\r\n   *\r\n   * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audios playback speed.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#setRate\r\n   * @fires Phaser.Sound.Events#GLOBAL_RATE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - Global playback rate at which all the sounds will be played.\r\n   *\r\n   * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n   */\n  setRate: function setRate(value) {\n    this.rate = value;\n    return this;\n  },\n\n  /**\r\n   * Global playback rate at which all the sounds will be played.\r\n   * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audio's playback speed.\r\n   *\r\n   * @name Phaser.Sound.BaseSoundManager#rate\r\n   * @type {number}\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  rate: {\n    get: function get() {\n      return this._rate;\n    },\n    set: function set(value) {\n      this._rate = value;\n      this.forEachActiveSound(function (sound) {\n        sound.calculateRate();\n      });\n      this.emit(Events.GLOBAL_RATE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#setDetune\r\n   * @fires Phaser.Sound.Events#GLOBAL_DETUNE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n   */\n  setDetune: function setDetune(value) {\n    this.detune = value;\n    return this;\n  },\n\n  /**\r\n   * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @name Phaser.Sound.BaseSoundManager#detune\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  detune: {\n    get: function get() {\n      return this._detune;\n    },\n    set: function set(value) {\n      this._detune = value;\n      this.forEachActiveSound(function (sound) {\n        sound.calculateRate();\n      });\n      this.emit(Events.GLOBAL_DETUNE, this, value);\n    }\n  }\n});\nmodule.exports = BaseSoundManager;","map":null,"metadata":{},"sourceType":"script"}