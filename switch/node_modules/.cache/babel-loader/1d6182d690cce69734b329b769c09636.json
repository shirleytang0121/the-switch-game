{"ast":null,"code":"var AWS = require('../core');\n\nvar STS = require('../../clients/sts');\n/**\r\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\r\n * extra parameters, credentials will be fetched from the\r\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\r\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\r\n * role instead.\r\n *\r\n * To setup temporary credentials, configure a set of master credentials\r\n * using the standard credentials providers (environment, EC2 instance metadata,\r\n * or from the filesystem), then set the global credentials to a new\r\n * temporary credentials object:\r\n *\r\n * ```javascript\r\n * // Note that environment credentials are loaded by default,\r\n * // the following line is shown for clarity:\r\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\r\n *\r\n * // Now set temporary credentials seeded from the master credentials\r\n * AWS.config.credentials = new AWS.TemporaryCredentials();\r\n *\r\n * // subsequent requests will now use temporary credentials from AWS STS.\r\n * new AWS.S3().listBucket(function(err, data) { ... });\r\n * ```\r\n *\r\n * @!attribute masterCredentials\r\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\r\n *     get and refresh temporary credentials from AWS STS.\r\n * @note (see constructor)\r\n */\n\n\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new temporary credentials object.\r\n   *\r\n   * @note In order to create temporary credentials, you first need to have\r\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\r\n   *   master credentials are necessary to retrieve the temporary credentials,\r\n   *   as well as refresh the credentials when they expire.\r\n   * @param params [map] a map of options that are passed to the\r\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\r\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\r\n   *   IAM role.\r\n   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\r\n   *  used to get and refresh temporary credentials from AWS STS.\r\n   * @example Creating a new credentials object for generic temporary credentials\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\r\n   * @example Creating a new credentials object for an IAM role\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\r\n   *   });\r\n   * @see AWS.STS.assumeRole\r\n   * @see AWS.STS.getSessionToken\r\n   */\n  constructor: function TemporaryCredentials(params, masterCredentials) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials(masterCredentials);\n    this.expired = true;\n    this.params = params || {};\n\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName = this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRole} or\r\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\r\n   * to the credentials {constructor}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    self.createClients();\n    if (!callback) callback = function callback(err) {\n      if (err) throw err;\n    };\n    self.masterCredentials.get(function () {\n      self.service.config.credentials = self.masterCredentials;\n      var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;\n      operation.call(self.service, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n\n        callback(err);\n      });\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {\n    this.masterCredentials = masterCredentials || AWS.config.credentials;\n\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n\n    if (typeof this.masterCredentials.get !== 'function') {\n      this.masterCredentials = new AWS.Credentials(this.masterCredentials);\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  createClients: function createClients() {\n    this.service = this.service || new STS({\n      params: this.params\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}