{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CircumferencePoint = require('./CircumferencePoint');\n\nvar FromPercent = require('../../math/FromPercent');\n\nvar MATH_CONST = require('../../math/const');\n\nvar Point = require('../point/Point');\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\r\n * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n * at 180 degrees around the circle.\r\n *\r\n * @function Phaser.Geom.Ellipse.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the circumference point on.\r\n * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the ellipse.\r\n */\n\n\nvar GetPoint = function GetPoint(ellipse, position, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var angle = FromPercent(position, 0, MATH_CONST.PI2);\n  return CircumferencePoint(ellipse, angle, out);\n};\n\nmodule.exports = GetPoint;","map":null,"metadata":{},"sourceType":"script"}