{"ast":null,"code":"var util = require('../core').util;\n\nvar toBuffer = require('./to-buffer').toBuffer;\n/**\r\n * A lossless representation of a signed, 64-bit integer. Instances of this\r\n * class may be used in arithmetic expressions as if they were numeric\r\n * primitives, but the binary representation will be preserved unchanged as the\r\n * `bytes` property of the object. The bytes should be encoded as big-endian,\r\n * two's complement integers.\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\n\n\nfunction Int64(bytes) {\n  if (bytes.length !== 8) {\n    throw new Error('Int64 buffers must be exactly 8 bytes');\n  }\n\n  if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n  this.bytes = bytes;\n}\n/**\r\n * @param {number} number\r\n * @returns {Int64}\r\n *\r\n * @api private\r\n */\n\n\nInt64.fromNumber = function (number) {\n  if (number > 9223372036854775807 || number < -9223372036854775808) {\n    throw new Error(number + ' is too large (or, if negative, too small) to represent as an Int64');\n  }\n\n  var bytes = new Uint8Array(8);\n\n  for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n    bytes[i] = remaining;\n  }\n\n  if (number < 0) {\n    negate(bytes);\n  }\n\n  return new Int64(bytes);\n};\n/**\r\n * @returns {number}\r\n *\r\n * @api private\r\n */\n\n\nInt64.prototype.valueOf = function () {\n  var bytes = this.bytes.slice(0);\n  var negative = bytes[0] & 128;\n\n  if (negative) {\n    negate(bytes);\n  }\n\n  return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n};\n\nInt64.prototype.toString = function () {\n  return String(this.valueOf());\n};\n/**\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\n\n\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n\n    if (bytes[i] !== 0) {\n      break;\n    }\n  }\n}\n/**\r\n * @api private\r\n */\n\n\nmodule.exports = {\n  Int64: Int64\n};","map":null,"metadata":{},"sourceType":"script"}