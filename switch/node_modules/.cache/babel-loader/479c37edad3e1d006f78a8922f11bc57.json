{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../../src/utils/Class');\n\nvar GameObject = require('../../../../src/gameobjects/GameObject');\n\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\n\nvar Vector2 = require('../../../../src/math/Vector2');\n\nvar Vector4 = require('../../../../src/math/Vector4');\n/**\r\n * @classdesc\r\n * A Sprite 3D Game Object.\r\n *\r\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\r\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\r\n *\r\n * @class Sprite3D\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The x position of this Game Object.\r\n * @param {number} y - The y position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar Sprite3D = new Class({\n  Extends: GameObject,\n  initialize: function Sprite3D(scene, x, y, z, texture, frame) {\n    GameObject.call(this, scene, 'Sprite3D');\n    /**\r\n     * The encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#gameObject\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.gameObject = new Sprite(scene, 0, 0, texture, frame);\n    /**\r\n     * The position of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#position\r\n     * @type {Phaser.Math.Vector4}\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector4(x, y, z);\n    /**\r\n     * The 2D size of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#size\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = new Vector2(this.gameObject.width, this.gameObject.height);\n    /**\r\n     * The 2D scale of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#scale\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\r\n     * Whether to automatically set the horizontal scale of the encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#adjustScaleX\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.adjustScaleX = true;\n    /**\r\n     * Whether to automatically set the vertical scale of the encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#adjustScaleY\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.adjustScaleY = true;\n    /**\r\n     * The visible state of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#_visible\r\n     * @type {boolean}\r\n     * @default true\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._visible = true;\n  },\n\n  /**\r\n   * Project this Sprite onto the given 3D Camera.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite3D#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\r\n   */\n  project: function project(camera) {\n    var pos = this.position;\n    var gameObject = this.gameObject;\n    camera.project(pos, gameObject);\n    camera.getPointSize(pos, this.size, this.scale);\n\n    if (this.scale.x <= 0 || this.scale.y <= 0) {\n      gameObject.setVisible(false);\n    } else {\n      if (!gameObject.visible) {\n        gameObject.setVisible(true);\n      }\n\n      if (this.adjustScaleX) {\n        gameObject.scaleX = this.scale.x;\n      }\n\n      if (this.adjustScaleY) {\n        gameObject.scaleY = this.scale.y;\n      }\n\n      gameObject.setDepth(gameObject.z * -1);\n    }\n  },\n\n  /**\r\n   * Set the visible state of the Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite3D#setVisible\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The visible state of the Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\r\n   */\n  setVisible: function setVisible(value) {\n    this.visible = value;\n    return this;\n  },\n\n  /**\r\n   * The visible state of the Game Object.\r\n   *\r\n   * An invisible Game Object will skip rendering, but will still process update logic.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#visible\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  visible: {\n    get: function get() {\n      return this._visible;\n    },\n    set: function set(value) {\n      this._visible = value;\n      this.gameObject.visible = value;\n    }\n  },\n\n  /**\r\n   * The x position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      this.position.x = value;\n    }\n  },\n\n  /**\r\n   * The y position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      this.position.y = value;\n    }\n  },\n\n  /**\r\n   * The z position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#z\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  z: {\n    get: function get() {\n      return this.position.z;\n    },\n    set: function set(value) {\n      this.position.z = value;\n    }\n  }\n});\nmodule.exports = Sprite3D;","map":null,"metadata":{},"sourceType":"script"}