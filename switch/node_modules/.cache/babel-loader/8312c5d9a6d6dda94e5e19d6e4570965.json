{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar Matrix4 = require('../../../src/math/Matrix4');\n\nvar RandomXYZ = require('../../../src/math/RandomXYZ');\n\nvar RandomXYZW = require('../../../src/math/RandomXYZW');\n\nvar RotateVec3 = require('../../../src/math/RotateVec3');\n\nvar Set = require('../../../src/structs/Set');\n\nvar Sprite3D = require('./sprite3d/Sprite3D');\n\nvar Vector2 = require('../../../src/math/Vector2');\n\nvar Vector3 = require('../../../src/math/Vector3');\n\nvar Vector4 = require('../../../src/math/Vector4'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\nvar tmpVec4 = new Vector4();\nvar dirvec = new Vector3();\nvar rightvec = new Vector3();\nvar billboardMatrix = new Matrix4(); //  @author attribute https://github.com/mattdesl/cam3d/wiki\n\n/**\r\n * @typedef {object} RayDef\r\n *\r\n * @property {Phaser.Math.Vector3} origin - [description]\r\n * @property {Phaser.Math.Vector3} direction - [description]\r\n */\n\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\nvar Camera = new Class({\n  initialize: function Camera(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#displayList\r\n     * @type {Phaser.GameObjects.DisplayList}\r\n     * @since 3.0.0\r\n     */\n\n    this.displayList = scene.sys.displayList;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#updateList\r\n     * @type {Phaser.GameObjects.UpdateList}\r\n     * @since 3.0.0\r\n     */\n\n    this.updateList = scene.sys.updateList;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#direction\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.direction = new Vector3(0, 0, -1);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#up\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.up = new Vector3(0, 1, 0);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#position\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector3(); //  The mapping from 3D size units to pixels.\n    //  In the default case 1 3D unit = 128 pixels. So a sprite that is\n    //  256 x 128 px in size will be 2 x 1 units.\n    //  Change to whatever best fits your game assets.\n\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#pixelScale\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.pixelScale = 128;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#projection\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.projection = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#view\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.view = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#combined\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.combined = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#invProjectionView\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.invProjectionView = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#near\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.near = 1;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#far\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.far = 100;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#ray\r\n     * @type {RayDef}\r\n     * @since 3.0.0\r\n     */\n\n    this.ray = {\n      origin: new Vector3(),\n      direction: new Vector3()\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#viewportWidth\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#viewportHeight\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#billboardMatrixDirty\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.billboardMatrixDirty = true;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#children\r\n     * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n     * @since 3.0.0\r\n     */\n\n    this.children = new Set();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   * @param {number} z - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setPosition: function setPosition(x, y, z) {\n    this.position.set(x, y, z);\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setScene\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Scene} scene - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setScene: function setScene(scene) {\n    this.scene = scene;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setPixelScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setPixelScale: function setPixelScale(value) {\n    this.pixelScale = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Sprite3D} sprite3D - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} [description]\r\n   */\n  add: function add(sprite3D) {\n    this.children.set(sprite3D);\n    this.displayList.add(sprite3D.gameObject);\n    this.updateList.add(sprite3D.gameObject);\n    this.updateChildren();\n    return sprite3D;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  remove: function remove(child) {\n    this.displayList.remove(child.gameObject);\n    this.updateList.remove(child.gameObject);\n    this.children.delete(child);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  clear: function clear() {\n    var children = this.getChildren();\n\n    for (var i = 0; i < children.length; i++) {\n      this.remove(children[i]);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @return {array} [description]\r\n   */\n  getChildren: function getChildren() {\n    return this.children.entries;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   * @param {number} z - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} frame - [description]\r\n   * @param {boolean} [visible=true] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} [description]\r\n   */\n  create: function create(x, y, z, key, frame, visible) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    var child = new Sprite3D(this.scene, x, y, z, key, frame);\n    this.displayList.add(child.gameObject);\n    this.updateList.add(child.gameObject);\n    child.visible = visible;\n    this.children.set(child);\n    this.updateChildren();\n    return child;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#createMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} quantity - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} frame - [description]\r\n   * @param {boolean} [visible=true] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n   */\n  createMultiple: function createMultiple(quantity, key, frame, visible) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    var output = [];\n\n    for (var i = 0; i < quantity; i++) {\n      var child = new Sprite3D(this.scene, 0, 0, 0, key, frame);\n      this.displayList.add(child.gameObject);\n      this.updateList.add(child.gameObject);\n      child.visible = visible;\n      this.children.set(child);\n      output.push(child);\n    }\n\n    return output;\n  },\n  //  Create a bunch of Sprite3D objects in a rectangle\n  //  size and spacing are Vec3s (or if integers are converted to vec3s)\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#createRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|{x:number,y:number})} size - [description]\r\n   * @param {(number|{x:number,y:number,z:number})} spacing - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} [frame] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n   */\n  createRect: function createRect(size, spacing, key, frame) {\n    if (typeof size === 'number') {\n      size = {\n        x: size,\n        y: size,\n        z: size\n      };\n    }\n\n    if (typeof spacing === 'number') {\n      spacing = {\n        x: spacing,\n        y: spacing,\n        z: spacing\n      };\n    }\n\n    var quantity = size.x * size.y * size.z;\n    var sprites = this.createMultiple(quantity, key, frame);\n    var i = 0;\n\n    for (var z = 0.5 - size.z / 2; z < size.z / 2; z++) {\n      for (var y = 0.5 - size.y / 2; y < size.y / 2; y++) {\n        for (var x = 0.5 - size.x / 2; x < size.x / 2; x++) {\n          var bx = x * spacing.x;\n          var by = y * spacing.y;\n          var bz = z * spacing.z;\n          sprites[i].position.set(bx, by, bz);\n          i++;\n        }\n      }\n    }\n\n    this.update();\n    return sprites;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#randomSphere\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [radius=1] - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  randomSphere: function randomSphere(radius, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      RandomXYZ(sprites[i].position, radius);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#randomCube\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [scale=1] - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  randomCube: function randomCube(scale, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      RandomXYZW(sprites[i].position, scale);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#translateChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} vec3 - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  translateChildren: function translateChildren(vec3, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      sprites[i].position.add(vec3);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#transformChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat4 - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  transformChildren: function transformChildren(mat4, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      sprites[i].position.transformMat4(mat4);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * Sets the width and height of the viewport. Does not update any matrices.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setViewport\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - [description]\r\n   * @param {number} height - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setViewport: function setViewport(width, height) {\n    this.viewportWidth = width;\n    this.viewportHeight = height;\n    return this.update();\n  },\n\n  /**\r\n   * Translates this camera by a specified Vector3 object\r\n   * or x, y, z parameters. Any undefined x y z values will\r\n   * default to zero, leaving that component unaffected.\r\n   * If you wish to set the camera position directly call setPosition instead.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - [description]\r\n   * @param {number} [y] - [description]\r\n   * @param {number} [z] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  translate: function translate(x, y, z) {\n    if (typeof x === 'object') {\n      this.position.x += x.x || 0;\n      this.position.y += x.y || 0;\n      this.position.z += x.z || 0;\n    } else {\n      this.position.x += x || 0;\n      this.position.y += y || 0;\n      this.position.z += z || 0;\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#lookAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - [description]\r\n   * @param {number} [y] - [description]\r\n   * @param {number} [z] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  lookAt: function lookAt(x, y, z) {\n    var dir = this.direction;\n    var up = this.up;\n\n    if (typeof x === 'object') {\n      dir.copy(x);\n    } else {\n      dir.set(x, y, z);\n    }\n\n    dir.subtract(this.position).normalize(); //  Calculate right vector\n\n    tmpVec3.copy(dir).cross(up).normalize(); //  Calculate up vector\n\n    up.copy(tmpVec3).cross(dir).normalize();\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - [description]\r\n   * @param {Phaser.Math.Vector3} axis - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  rotate: function rotate(radians, axis) {\n    RotateVec3(this.direction, axis, radians);\n    RotateVec3(this.up, axis, radians);\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#rotateAround\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} point - [description]\r\n   * @param {number} radians - [description]\r\n   * @param {Phaser.Math.Vector3} axis - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  rotateAround: function rotateAround(point, radians, axis) {\n    tmpVec3.copy(point).subtract(this.position);\n    this.translate(tmpVec3);\n    this.rotate(radians, axis);\n    this.translate(tmpVec3.negate());\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} vec - [description]\r\n   * @param {Phaser.Math.Vector4} out - [description]\r\n   *\r\n   * @return {Phaser.Math.Vector4} [description]\r\n   */\n  project: function project(vec, out) {\n    if (out === undefined) {\n      out = new Vector4();\n    } //  TODO: support viewport XY\n\n\n    var viewportWidth = this.viewportWidth;\n    var viewportHeight = this.viewportHeight;\n    var n = Camera.NEAR_RANGE;\n    var f = Camera.FAR_RANGE; //  For useful Z and W values we should do the usual steps: clip space -> NDC -> window coords\n    //  Implicit 1.0 for w component\n\n    tmpVec4.set(vec.x, vec.y, vec.z, 1.0); //  Transform into clip space\n\n    tmpVec4.transformMat4(this.combined); //  Avoid divide by zero when 0x0x0 camera projects to a 0x0x0 vec3\n\n    if (tmpVec4.w === 0) {\n      tmpVec4.w = 1;\n    } //  Now into NDC\n\n\n    tmpVec4.x = tmpVec4.x / tmpVec4.w;\n    tmpVec4.y = tmpVec4.y / tmpVec4.w;\n    tmpVec4.z = tmpVec4.z / tmpVec4.w; //  And finally into window coordinates\n\n    out.x = viewportWidth / 2 * tmpVec4.x + (0 + viewportWidth / 2);\n    out.y = viewportHeight / 2 * tmpVec4.y + (0 + viewportHeight / 2);\n    out.z = (f - n) / 2 * tmpVec4.z + (f + n) / 2; //  If the out vector has a fourth component, we also store (1/clip.w), same idea as gl_FragCoord.w\n\n    if (out.w === 0 || out.w) {\n      out.w = 1 / tmpVec4.w;\n    }\n\n    return out;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#unproject\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} vec - [description]\r\n   * @param {Phaser.Math.Vector3} out - [description]\r\n   *\r\n   * @return {Phaser.Math.Vector3} [description]\r\n   */\n  unproject: function unproject(vec, out) {\n    if (out === undefined) {\n      out = new Vector3();\n    }\n\n    var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\n    return out.copy(vec).unproject(viewport, this.invProjectionView);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getPickRay\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} [y] - [description]\r\n   *\r\n   * @return {RayDef} [description]\r\n   */\n  getPickRay: function getPickRay(x, y) {\n    var origin = this.ray.origin.set(x, y, 0);\n    var direction = this.ray.direction.set(x, y, 1);\n    var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\n    var mtx = this.invProjectionView;\n    origin.unproject(viewport, mtx);\n    direction.unproject(viewport, mtx);\n    direction.subtract(origin).normalize();\n    return this.ray;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#updateChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  updateChildren: function updateChildren() {\n    var children = this.children.entries;\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].project(this);\n    }\n\n    return this;\n  },\n  //  Overriden by subclasses\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  update: function update() {\n    return this.updateChildren();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#updateBillboardMatrix\r\n   * @since 3.0.0\r\n   */\n  updateBillboardMatrix: function updateBillboardMatrix() {\n    var dir = dirvec.set(this.direction).negate(); // Better view-aligned billboards might use this:\n    // var dir = tmp.set(camera.position).subtract(p).normalize();\n\n    var right = rightvec.set(this.up).cross(dir).normalize();\n    var up = tmpVec3.set(dir).cross(right).normalize();\n    var out = billboardMatrix.val;\n    out[0] = right.x;\n    out[1] = right.y;\n    out[2] = right.z;\n    out[3] = 0;\n    out[4] = up.x;\n    out[5] = up.y;\n    out[6] = up.z;\n    out[7] = 0;\n    out[8] = dir.x;\n    out[9] = dir.y;\n    out[10] = dir.z;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    this.billboardMatrixDirty = false;\n  },\n\n  /**\r\n   * This is a utility function for canvas 3D rendering,\r\n   * which determines the \"point size\" of a camera-facing\r\n   * sprite billboard given its 3D world position\r\n   * (origin at center of sprite) and its world width\r\n   * and height in x/y.\r\n   *\r\n   * We place into the output Vector2 the scaled width\r\n   * and height. If no `out` is specified, a new Vector2\r\n   * will be created for convenience (this should be avoided\r\n   * in tight loops).\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getPointSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} vec - The position of the 3D Sprite.\r\n   * @param {Phaser.Math.Vector2} size - The x and y dimensions.\r\n   * @param {Phaser.Math.Vector2} out - The result, scaled x and y dimensions.\r\n   *\r\n   * @return {Phaser.Math.Vector2} [description]\r\n   */\n  getPointSize: function getPointSize(vec, size, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    } // TODO: optimize this with a simple distance calculation:\n    // https://developer.valvesoftware.com/wiki/Field_of_View\n\n\n    if (this.billboardMatrixDirty) {\n      this.updateBillboardMatrix();\n    }\n\n    var tmp = tmpVec3;\n    var dx = size.x / this.pixelScale / 2;\n    var dy = size.y / this.pixelScale / 2;\n    tmp.set(-dx, -dy, 0).transformMat4(billboardMatrix).add(vec);\n    this.project(tmp, tmp);\n    var tlx = tmp.x;\n    var tly = tmp.y;\n    tmp.set(dx, dy, 0).transformMat4(billboardMatrix).add(vec);\n    this.project(tmp, tmp);\n    var brx = tmp.x;\n    var bry = tmp.y; // var w = Math.abs(brx - tlx);\n    // var h = Math.abs(bry - tly);\n    //  Allow the projection to get negative ...\n\n    var w = brx - tlx;\n    var h = bry - tly;\n    return out.set(w, h);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.children.clear();\n    this.scene = undefined;\n    this.children = undefined;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setX: function setX(value) {\n    this.position.x = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setY: function setY(value) {\n    this.position.y = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setZ: function setZ(value) {\n    this.position.z = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      this.position.x = value;\n      this.update();\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      this.position.y = value;\n      this.update();\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#z\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  z: {\n    get: function get() {\n      return this.position.z;\n    },\n    set: function set(value) {\n      this.position.z = value;\n      this.update();\n    }\n  }\n});\nCamera.FAR_RANGE = 1.0;\nCamera.NEAR_RANGE = 0.0;\nmodule.exports = Camera;","map":null,"metadata":{},"sourceType":"script"}