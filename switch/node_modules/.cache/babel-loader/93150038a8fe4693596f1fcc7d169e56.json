{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../../src/utils/Class');\n\nvar Vector3 = require('../../../src/math/Vector3'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class PerspectiveCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [fieldOfView=80] - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\n\nvar PerspectiveCamera = new Class({\n  Extends: Camera,\n  //  FOV is converted to radians automatically\n  initialize: function PerspectiveCamera(scene, fieldOfView, viewportWidth, viewportHeight) {\n    if (fieldOfView === undefined) {\n      fieldOfView = 80;\n    }\n\n    if (viewportWidth === undefined) {\n      viewportWidth = 0;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = 0;\n    }\n\n    Camera.call(this, scene);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportWidth\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = viewportWidth;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportHeight\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = viewportHeight;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#fieldOfView\r\n     * @type {integer}\r\n     * @default 80\r\n     * @since 3.0.0\r\n     */\n\n    this.fieldOfView = fieldOfView * Math.PI / 180;\n    this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#setFOV\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  setFOV: function setFOV(value) {\n    this.fieldOfView = value * Math.PI / 180;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  update: function update() {\n    var aspect = this.viewportWidth / this.viewportHeight; //  Create a perspective matrix for our camera\n\n    this.projection.perspective(this.fieldOfView, aspect, Math.abs(this.near), Math.abs(this.far)); //  Build the view matrix\n\n    tmpVec3.copy(this.position).add(this.direction);\n    this.view.lookAt(this.position, tmpVec3, this.up); //  Projection * view matrix\n\n    this.combined.copy(this.projection).multiply(this.view); //  Invert combined matrix, used for unproject\n\n    this.invProjectionView.copy(this.combined).invert();\n    this.billboardMatrixDirty = true;\n    this.updateChildren();\n    return this;\n  }\n});\nmodule.exports = PerspectiveCamera;","map":null,"metadata":{},"sourceType":"script"}