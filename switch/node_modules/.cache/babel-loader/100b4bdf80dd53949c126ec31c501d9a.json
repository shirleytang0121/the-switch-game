{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar DegToRad = require('../../math/DegToRad');\n\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\n/**\r\n * @classdesc\r\n * A Particle is a simple Game Object controlled by a Particle Emitter and Manager, and rendered by the Manager.\r\n * It uses its own lightweight physics system, and can interact only with its Emitter's bounds and zones.\r\n *\r\n * @class Particle\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to which this Particle belongs.\r\n */\n\n\nvar Particle = new Class({\n  initialize: function Particle(emitter) {\n    /**\r\n     * The Emitter to which this Particle belongs.\r\n     *\r\n     * A Particle can only belong to a single Emitter and is created, updated and destroyed via it.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#emitter\r\n     * @type {Phaser.GameObjects.Particles.ParticleEmitter}\r\n     * @since 3.0.0\r\n     */\n    this.emitter = emitter;\n    /**\r\n     * The texture frame used to render this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = null;\n    /**\r\n     * The x coordinate of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x = 0;\n    /**\r\n     * The y coordinate of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The x velocity of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#velocityX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.velocityX = 0;\n    /**\r\n     * The y velocity of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#velocityY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.velocityY = 0;\n    /**\r\n     * The x acceleration of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#accelerationX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationX = 0;\n    /**\r\n     * The y acceleration of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#accelerationY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationY = 0;\n    /**\r\n     * The maximum horizontal velocity this Particle can travel at.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#maxVelocityX\r\n     * @type {number}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityX = 10000;\n    /**\r\n     * The maximum vertical velocity this Particle can travel at.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#maxVelocityY\r\n     * @type {number}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityY = 10000;\n    /**\r\n     * The bounciness, or restitution, of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#bounce\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bounce = 0;\n    /**\r\n     * The horizontal scale of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#scaleX\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleX = 1;\n    /**\r\n     * The vertical scale of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#scaleY\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleY = 1;\n    /**\r\n     * The alpha value of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#alpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.alpha = 1;\n    /**\r\n     * The angle of this Particle in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#angle\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.angle = 0;\n    /**\r\n     * The angle of this Particle in radians.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#rotation\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rotation = 0;\n    /**\r\n     * The tint applied to this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#tint\r\n     * @type {integer}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\n\n    this.tint = 0xffffff;\n    /**\r\n     * The lifespan of this Particle in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#life\r\n     * @type {number}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     */\n\n    this.life = 1000;\n    /**\r\n     * The current life of this Particle in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#lifeCurrent\r\n     * @type {number}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     */\n\n    this.lifeCurrent = 1000;\n    /**\r\n     * The delay applied to this Particle upon emission, in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#delayCurrent\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delayCurrent = 0;\n    /**\r\n     * The normalized lifespan T value, where 0 is the start and 1 is the end.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#lifeT\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lifeT = 0;\n    /**\r\n     * The data used by the ease equation.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#data\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = {\n      tint: {\n        min: 0xffffff,\n        max: 0xffffff,\n        current: 0xffffff\n      },\n      alpha: {\n        min: 1,\n        max: 1\n      },\n      rotate: {\n        min: 0,\n        max: 0\n      },\n      scaleX: {\n        min: 1,\n        max: 1\n      },\n      scaleY: {\n        min: 1,\n        max: 1\n      }\n    };\n  },\n\n  /**\r\n   * Checks to see if this Particle is alive and updating.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#isAlive\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if this Particle is alive and updating, otherwise `false`.\r\n   */\n  isAlive: function isAlive() {\n    return this.lifeCurrent > 0;\n  },\n\n  /**\r\n   * Resets the position of this particle back to zero.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#resetPosition\r\n   * @since 3.16.0\r\n   */\n  resetPosition: function resetPosition() {\n    this.x = 0;\n    this.y = 0;\n  },\n\n  /**\r\n   * Starts this Particle from the given coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#fire\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to launch this Particle from.\r\n   * @param {number} y - The y coordinate to launch this Particle from.\r\n   */\n  fire: function fire(x, y) {\n    var emitter = this.emitter;\n    this.frame = emitter.getFrame();\n\n    if (emitter.emitZone) {\n      //  Updates particle.x and particle.y during this call\n      emitter.emitZone.getPoint(this);\n    }\n\n    if (x === undefined) {\n      if (emitter.follow) {\n        this.x += emitter.follow.x + emitter.followOffset.x;\n      }\n\n      this.x += emitter.x.onEmit(this, 'x');\n    } else {\n      this.x += x;\n    }\n\n    if (y === undefined) {\n      if (emitter.follow) {\n        this.y += emitter.follow.y + emitter.followOffset.y;\n      }\n\n      this.y += emitter.y.onEmit(this, 'y');\n    } else {\n      this.y += y;\n    }\n\n    this.life = emitter.lifespan.onEmit(this, 'lifespan');\n    this.lifeCurrent = this.life;\n    this.lifeT = 0;\n    var sx = emitter.speedX.onEmit(this, 'speedX');\n    var sy = emitter.speedY ? emitter.speedY.onEmit(this, 'speedY') : sx;\n\n    if (emitter.radial) {\n      var rad = DegToRad(emitter.angle.onEmit(this, 'angle'));\n      this.velocityX = Math.cos(rad) * Math.abs(sx);\n      this.velocityY = Math.sin(rad) * Math.abs(sy);\n    } else if (emitter.moveTo) {\n      var mx = emitter.moveToX.onEmit(this, 'moveToX');\n      var my = emitter.moveToY ? emitter.moveToY.onEmit(this, 'moveToY') : mx;\n      var angle = Math.atan2(my - this.y, mx - this.x);\n      var speed = DistanceBetween(this.x, this.y, mx, my) / (this.life / 1000); //  We know how many pixels we need to move, but how fast?\n      // var speed = this.distanceToXY(displayObject, x, y) / (maxTime / 1000);\n\n      this.velocityX = Math.cos(angle) * speed;\n      this.velocityY = Math.sin(angle) * speed;\n    } else {\n      this.velocityX = sx;\n      this.velocityY = sy;\n    }\n\n    if (emitter.acceleration) {\n      this.accelerationX = emitter.accelerationX.onEmit(this, 'accelerationX');\n      this.accelerationY = emitter.accelerationY.onEmit(this, 'accelerationY');\n    }\n\n    this.maxVelocityX = emitter.maxVelocityX.onEmit(this, 'maxVelocityX');\n    this.maxVelocityY = emitter.maxVelocityY.onEmit(this, 'maxVelocityY');\n    this.delayCurrent = emitter.delay.onEmit(this, 'delay');\n    this.scaleX = emitter.scaleX.onEmit(this, 'scaleX');\n    this.scaleY = emitter.scaleY ? emitter.scaleY.onEmit(this, 'scaleY') : this.scaleX;\n    this.angle = emitter.rotate.onEmit(this, 'rotate');\n    this.rotation = DegToRad(this.angle);\n    this.bounce = emitter.bounce.onEmit(this, 'bounce');\n    this.alpha = emitter.alpha.onEmit(this, 'alpha');\n    this.tint = emitter.tint.onEmit(this, 'tint');\n  },\n\n  /**\r\n   * An internal method that calculates the velocity of the Particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#computeVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter that is updating this Particle.\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   * @param {array} processors - Particle processors (gravity wells).\r\n   */\n  computeVelocity: function computeVelocity(emitter, delta, step, processors) {\n    var vx = this.velocityX;\n    var vy = this.velocityY;\n    var ax = this.accelerationX;\n    var ay = this.accelerationY;\n    var mx = this.maxVelocityX;\n    var my = this.maxVelocityY;\n    vx += emitter.gravityX * step;\n    vy += emitter.gravityY * step;\n\n    if (ax) {\n      vx += ax * step;\n    }\n\n    if (ay) {\n      vy += ay * step;\n    }\n\n    if (vx > mx) {\n      vx = mx;\n    } else if (vx < -mx) {\n      vx = -mx;\n    }\n\n    if (vy > my) {\n      vy = my;\n    } else if (vy < -my) {\n      vy = -my;\n    }\n\n    this.velocityX = vx;\n    this.velocityY = vy; //  Apply any additional processors\n\n    for (var i = 0; i < processors.length; i++) {\n      processors[i].update(this, delta, step);\n    }\n  },\n\n  /**\r\n   * Checks if this Particle is still within the bounds defined by the given Emitter.\r\n   *\r\n   * If not, and depending on the Emitter collision flags, the Particle may either stop or rebound.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#checkBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to check the bounds against.\r\n   */\n  checkBounds: function checkBounds(emitter) {\n    var bounds = emitter.bounds;\n    var bounce = -this.bounce;\n\n    if (this.x < bounds.x && emitter.collideLeft) {\n      this.x = bounds.x;\n      this.velocityX *= bounce;\n    } else if (this.x > bounds.right && emitter.collideRight) {\n      this.x = bounds.right;\n      this.velocityX *= bounce;\n    }\n\n    if (this.y < bounds.y && emitter.collideTop) {\n      this.y = bounds.y;\n      this.velocityY *= bounce;\n    } else if (this.y > bounds.bottom && emitter.collideBottom) {\n      this.y = bounds.bottom;\n      this.velocityY *= bounce;\n    }\n  },\n\n  /**\r\n   * The main update method for this Particle.\r\n   *\r\n   * Updates its life values, computes the velocity and repositions the Particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   * @param {array} processors - An optional array of update processors.\r\n   *\r\n   * @return {boolean} Returns `true` if this Particle has now expired and should be removed, otherwise `false` if still active.\r\n   */\n  update: function update(delta, step, processors) {\n    if (this.delayCurrent > 0) {\n      this.delayCurrent -= delta;\n      return false;\n    }\n\n    var emitter = this.emitter; //  How far along in life is this particle? (t = 0 to 1)\n\n    var t = 1 - this.lifeCurrent / this.life;\n    this.lifeT = t;\n    this.computeVelocity(emitter, delta, step, processors);\n    this.x += this.velocityX * step;\n    this.y += this.velocityY * step;\n\n    if (emitter.bounds) {\n      this.checkBounds(emitter);\n    }\n\n    if (emitter.deathZone && emitter.deathZone.willKill(this)) {\n      this.lifeCurrent = 0; //  No need to go any further, particle has been killed\n\n      return true;\n    }\n\n    this.scaleX = emitter.scaleX.onUpdate(this, 'scaleX', t, this.scaleX);\n\n    if (emitter.scaleY) {\n      this.scaleY = emitter.scaleY.onUpdate(this, 'scaleY', t, this.scaleY);\n    } else {\n      this.scaleY = this.scaleX;\n    }\n\n    this.angle = emitter.rotate.onUpdate(this, 'rotate', t, this.angle);\n    this.rotation = DegToRad(this.angle);\n    this.alpha = emitter.alpha.onUpdate(this, 'alpha', t, this.alpha);\n    this.tint = emitter.tint.onUpdate(this, 'tint', t, this.tint);\n    this.lifeCurrent -= delta;\n    return this.lifeCurrent <= 0;\n  }\n});\nmodule.exports = Particle;","map":null,"metadata":{},"sourceType":"script"}