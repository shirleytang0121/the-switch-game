{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../../src/utils/Class');\n\nvar Vector3 = require('../../../src/math/Vector3'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class OrthographicCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\n\nvar OrthographicCamera = new Class({\n  Extends: Camera,\n  initialize: function OrthographicCamera(scene, viewportWidth, viewportHeight) {\n    if (viewportWidth === undefined) {\n      viewportWidth = 0;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = 0;\n    }\n\n    Camera.call(this, scene);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportWidth\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = viewportWidth;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportHeight\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = viewportHeight;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#_zoom\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._zoom = 1.0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#near\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.near = 0;\n    this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.OrthographicCamera#setToOrtho\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} yDown - [description]\r\n   * @param {number} [viewportWidth] - [description]\r\n   * @param {number} [viewportHeight] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  setToOrtho: function setToOrtho(yDown, viewportWidth, viewportHeight) {\n    if (viewportWidth === undefined) {\n      viewportWidth = this.viewportWidth;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = this.viewportHeight;\n    }\n\n    var zoom = this.zoom;\n    this.up.set(0, yDown ? -1 : 1, 0);\n    this.direction.set(0, 0, yDown ? 1 : -1);\n    this.position.set(zoom * viewportWidth / 2, zoom * viewportHeight / 2, 0);\n    this.viewportWidth = viewportWidth;\n    this.viewportHeight = viewportHeight;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.OrthographicCamera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  update: function update() {\n    var w = this.viewportWidth;\n    var h = this.viewportHeight;\n    var near = Math.abs(this.near);\n    var far = Math.abs(this.far);\n    var zoom = this.zoom;\n\n    if (w === 0 || h === 0) {\n      //  What to do here... hmm?\n      return this;\n    }\n\n    this.projection.ortho(zoom * -w / 2, zoom * w / 2, zoom * -h / 2, zoom * h / 2, near, far); //  Build the view matrix\n\n    tmpVec3.copy(this.position).add(this.direction);\n    this.view.lookAt(this.position, tmpVec3, this.up); //  Projection * view matrix\n\n    this.combined.copy(this.projection).multiply(this.view); //  Invert combined matrix, used for unproject\n\n    this.invProjectionView.copy(this.combined).invert();\n    this.billboardMatrixDirty = true;\n    this.updateChildren();\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.OrthographicCamera#zoom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  zoom: {\n    get: function get() {\n      return this._zoom;\n    },\n    set: function set(value) {\n      this._zoom = value;\n      this.update();\n    }\n  }\n});\nmodule.exports = OrthographicCamera;","map":null,"metadata":{},"sourceType":"script"}