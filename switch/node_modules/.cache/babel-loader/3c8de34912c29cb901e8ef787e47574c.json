{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Checks for intersection between the Line and a Rectangle shape, or a rectangle-like\r\n * object, with public `x`, `y`, `right` and `bottom` properties, such as a Sprite or Body.\r\n *\r\n * An intersection is considered valid if:\r\n *\r\n * The line starts within, or ends within, the Rectangle.\r\n * The line segment intersects one of the 4 rectangle edges.\r\n *\r\n * The for the purposes of this function rectangles are considered 'solid'.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Line and the Rectangle intersect, `false` otherwise.\r\n */\nvar LineToRectangle = function LineToRectangle(line, rect) {\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var bx1 = rect.x;\n  var by1 = rect.y;\n  var bx2 = rect.right;\n  var by2 = rect.bottom;\n  var t = 0; //  If the start or end of the line is inside the rect then we assume\n  //  collision, as rects are solid for our use-case.\n\n  if (x1 >= bx1 && x1 <= bx2 && y1 >= by1 && y1 <= by2 || x2 >= bx1 && x2 <= bx2 && y2 >= by1 && y2 <= by2) {\n    return true;\n  }\n\n  if (x1 < bx1 && x2 >= bx1) {\n    //  Left edge\n    t = y1 + (y2 - y1) * (bx1 - x1) / (x2 - x1);\n\n    if (t > by1 && t <= by2) {\n      return true;\n    }\n  } else if (x1 > bx2 && x2 <= bx2) {\n    //  Right edge\n    t = y1 + (y2 - y1) * (bx2 - x1) / (x2 - x1);\n\n    if (t >= by1 && t <= by2) {\n      return true;\n    }\n  }\n\n  if (y1 < by1 && y2 >= by1) {\n    //  Top edge\n    t = x1 + (x2 - x1) * (by1 - y1) / (y2 - y1);\n\n    if (t >= bx1 && t <= bx2) {\n      return true;\n    }\n  } else if (y1 > by2 && y2 <= by2) {\n    //  Bottom edge\n    t = x1 + (x2 - x1) * (by2 - y1) / (y2 - y1);\n\n    if (t >= bx1 && t <= bx2) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = LineToRectangle;","map":null,"metadata":{},"sourceType":"script"}