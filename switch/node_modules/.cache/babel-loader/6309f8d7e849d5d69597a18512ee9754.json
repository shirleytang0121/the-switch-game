{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Actions = require('../../actions/');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar Range = require('../../utils/array/Range');\n\nvar Set = require('../../structs/Set');\n\nvar Sprite = require('../sprite/Sprite');\n/**\r\n * @callback GroupCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} item - A group member\r\n */\n\n/**\r\n * @callback GroupMultipleCreateCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject[]} items - The newly created group members\r\n */\n\n/**\r\n * @typedef {object} GroupConfig\r\n *\r\n * @property {?GroupClassTypeConstructor} [classType=Sprite] - Sets {@link Phaser.GameObjects.Group#classType}.\r\n * @property {?boolean} [active=true] - Sets {@link Phaser.GameObjects.Group#active}.\r\n * @property {?number} [maxSize=-1] - Sets {@link Phaser.GameObjects.Group#maxSize}.\r\n * @property {?string} [defaultKey=null] - Sets {@link Phaser.GameObjects.Group#defaultKey}.\r\n * @property {?(string|integer)} [defaultFrame=null] - Sets {@link Phaser.GameObjects.Group#defaultFrame}.\r\n * @property {?boolean} [runChildUpdate=false] - Sets {@link Phaser.GameObjects.Group#runChildUpdate}.\r\n * @property {?GroupCallback} [createCallback=null] - Sets {@link Phaser.GameObjects.Group#createCallback}.\r\n * @property {?GroupCallback} [removeCallback=null] - Sets {@link Phaser.GameObjects.Group#removeCallback}.\r\n * @property {?GroupMultipleCreateCallback} [createMultipleCallback=null] - Sets {@link Phaser.GameObjects.Group#createMultipleCallback}.\r\n */\n\n/**\r\n * @typedef {object} GroupCreateConfig\r\n *\r\n * The total number of objects created will be\r\n *\r\n *     key.length * frame.length * frameQuantity * (yoyo ? 2 : 1) * (1 + repeat)\r\n *\r\n * In the simplest case, 1 + `repeat` objects will be created.\r\n *\r\n * If `max` is positive, then the total created will not exceed `max`.\r\n *\r\n * `key` is required. {@link Phaser.GameObjects.Group#defaultKey} is not used.\r\n *\r\n * @property {?GroupClassTypeConstructor} [classType] - The class of each new Game Object.\r\n * @property {string} [key] - The texture key of each new Game Object.\r\n * @property {?(string|integer)} [frame=null] - The texture frame of each new Game Object.\r\n * @property {?boolean} [visible=true] - The visible state of each new Game Object.\r\n * @property {?boolean} [active=true] - The active state of each new Game Object.\r\n * @property {?number} [repeat=0] - The number of times each `key` Ã— `frame` combination will be *repeated* (after the first combination).\r\n * @property {?boolean} [randomKey=false] - Select a `key` at random.\r\n * @property {?boolean} [randomFrame=false] - Select a `frame` at random.\r\n * @property {?boolean} [yoyo=false] - Select keys and frames by moving forward then backward through `key` and `frame`.\r\n * @property {?number} [frameQuantity=1] - The number of times each `frame` should be combined with one `key`.\r\n * @property {?number} [max=0] - The maximum number of new Game Objects to create. 0 is no maximum.\r\n * @property {?object} [setXY]\r\n * @property {?number} [setXY.x=0] - The horizontal position of each new Game Object.\r\n * @property {?number} [setXY.y=0] - The vertical position of each new Game Object.\r\n * @property {?number} [setXY.stepX=0] - Increment each Game Object's horizontal position from the previous by this amount, starting from `setXY.x`.\r\n * @property {?number} [setXY.stepY=0] - Increment each Game Object's vertical position from the previous by this amount, starting from `setXY.y`.\r\n * @property {?object} [setRotation]\r\n * @property {?number} [setRotation.value=0] - Rotation of each new Game Object.\r\n * @property {?number} [setRotation.step=0] - Increment each Game Object's rotation from the previous by this amount, starting at `setRotation.value`.\r\n * @property {?object} [setScale]\r\n * @property {?number} [setScale.x=0] - The horizontal scale of each new Game Object.\r\n * @property {?number} [setScale.y=0] - The vertical scale of each new Game Object.\r\n * @property {?number} [setScale.stepX=0] - Increment each Game Object's horizontal scale from the previous by this amount, starting from `setScale.x`.\r\n * @property {?number} [setScale.stepY=0] - Increment each Game object's vertical scale from the previous by this amount, starting from `setScale.y`.\r\n * @property {?object} [setAlpha]\r\n * @property {?number} [setAlpha.value=0] - The alpha value of each new Game Object.\r\n * @property {?number} [setAlpha.step=0] - Increment each Game Object's alpha from the previous by this amount, starting from `setAlpha.value`.\r\n * @property {?*} [hitArea] - A geometric shape that defines the hit area for the Game Object.\r\n * @property {?HitAreaCallback} [hitAreaCallback] - A callback to be invoked when the Game Object is interacted with.\r\n * @property {?(false|GridAlignConfig)} [gridAlign=false] - Align the new Game Objects in a grid using these settings.\r\n *\r\n * @see Phaser.Actions.GridAlign\r\n * @see Phaser.Actions.SetAlpha\r\n * @see Phaser.Actions.SetHitArea\r\n * @see Phaser.Actions.SetRotation\r\n * @see Phaser.Actions.SetScale\r\n * @see Phaser.Actions.SetXY\r\n * @see Phaser.GameObjects.Group#createFromConfig\r\n * @see Phaser.Utils.Array.Range\r\n */\n\n/**\r\n * A constructor function (class) that can be assigned to `classType`.\r\n * @callback GroupClassTypeConstructor\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @see Phaser.GameObjects.Group#classType\r\n */\n\n/**\r\n * @classdesc A Group is a way for you to create, manipulate, or recycle similar Game Objects.\r\n *\r\n * Group membership is non-exclusive. A Game Object can belong to several groups, one group, or none.\r\n *\r\n * Groups themselves aren't displayable, and can't be positioned, rotated, scaled, or hidden.\r\n *\r\n * @class Group\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|GroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {GroupConfig|GroupCreateConfig} [config] - Settings for this group. If `key` is set, Phaser.GameObjects.Group#createMultiple is also called with these settings.\r\n *\r\n * @see Phaser.Physics.Arcade.Group\r\n * @see Phaser.Physics.Arcade.StaticGroup\r\n */\n\n\nvar Group = new Class({\n  initialize: function Group(scene, children, config) {\n    //  They can pass in any of the following as the first argument:\n    //  1) A single child\n    //  2) An array of children\n    //  3) A config object\n    //  4) An array of config objects\n    //  Or they can pass in a child, or array of children AND a config object\n    if (config) {\n      //  config has been set, are the children an array?\n      if (children && !Array.isArray(children)) {\n        children = [children];\n      }\n    } else if (Array.isArray(children)) {\n      //  No config, so let's check the children argument\n      if (IsPlainObject(children[0])) {\n        //  It's an array of plain config objects\n        config = children;\n        children = null;\n      }\n    } else if (IsPlainObject(children)) {\n      //  Children isn't an array. Is it a config object though?\n      config = children;\n      children = null;\n    }\n    /**\r\n     * This scene this group belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.Group#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.scene = scene;\n    /**\r\n     * Members of this group.\r\n     *\r\n     * @name Phaser.GameObjects.Group#children\r\n     * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n     * @since 3.0.0\r\n     */\n\n    this.children = new Set(children);\n    /**\r\n     * A flag identifying this object as a group.\r\n     *\r\n     * @name Phaser.GameObjects.Group#isParent\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.isParent = true;\n    /**\r\n     * The class to create new group members from.\r\n     *\r\n     * @name Phaser.GameObjects.Group#classType\r\n     * @type {GroupClassTypeConstructor}\r\n     * @since 3.0.0\r\n     * @default Phaser.GameObjects.Sprite\r\n     */\n\n    this.classType = GetFastValue(config, 'classType', Sprite);\n    /**\r\n     * Whether this group runs its {@link Phaser.GameObjects.Group#preUpdate} method\r\n     * (which may update any members).\r\n     *\r\n     * @name Phaser.GameObjects.Group#active\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.active = GetFastValue(config, 'active', true);\n    /**\r\n     * The maximum size of this group, if used as a pool. -1 is no limit.\r\n     *\r\n     * @name Phaser.GameObjects.Group#maxSize\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     * @default -1\r\n     */\n\n    this.maxSize = GetFastValue(config, 'maxSize', -1);\n    /**\r\n     * A default texture key to use when creating new group members.\r\n     *\r\n     * This is used in {@link Phaser.GameObjects.Group#create}\r\n     * but not in {@link Phaser.GameObjects.Group#createMultiple}.\r\n     *\r\n     * @name Phaser.GameObjects.Group#defaultKey\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultKey = GetFastValue(config, 'defaultKey', null);\n    /**\r\n     * A default texture frame to use when creating new group members.\r\n     *\r\n     * @name Phaser.GameObjects.Group#defaultFrame\r\n     * @type {(string|integer)}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFrame = GetFastValue(config, 'defaultFrame', null);\n    /**\r\n     * Whether to call the update method of any members.\r\n     *\r\n     * @name Phaser.GameObjects.Group#runChildUpdate\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Group#preUpdate\r\n     */\n\n    this.runChildUpdate = GetFastValue(config, 'runChildUpdate', false);\n    /**\r\n     * A function to be called when adding or creating group members.\r\n     *\r\n     * @name Phaser.GameObjects.Group#createCallback\r\n     * @type {?GroupCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.createCallback = GetFastValue(config, 'createCallback', null);\n    /**\r\n     * A function to be called when removing group members.\r\n     *\r\n     * @name Phaser.GameObjects.Group#removeCallback\r\n     * @type {?GroupCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.removeCallback = GetFastValue(config, 'removeCallback', null);\n    /**\r\n     * A function to be called when creating several group members at once.\r\n     *\r\n     * @name Phaser.GameObjects.Group#createMultipleCallback\r\n     * @type {?GroupMultipleCreateCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.createMultipleCallback = GetFastValue(config, 'createMultipleCallback', null);\n\n    if (config) {\n      this.createMultiple(config);\n    }\n  },\n\n  /**\r\n   * Creates a new Game Object and adds it to this group, unless the group {@link Phaser.GameObjects.Group#isFull is full}.\r\n   *\r\n   * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal position of the new Game Object in the world.\r\n   * @param {number} [y=0] - The vertical position of the new Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key of the new Game Object.\r\n   * @param {(string|integer)} [frame=defaultFrame] - The texture frame of the new Game Object.\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of the new Game Object.\r\n   * @param {boolean} [active=true] - The {@link Phaser.GameObjects.GameObject#active} state of the new Game Object.\r\n   *\r\n   * @return {any} The new Game Object (usually a Sprite, etc.).\r\n   */\n  create: function create(x, y, key, frame, visible, active) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (key === undefined) {\n      key = this.defaultKey;\n    }\n\n    if (frame === undefined) {\n      frame = this.defaultFrame;\n    }\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    if (active === undefined) {\n      active = true;\n    } //  Pool?\n\n\n    if (this.isFull()) {\n      return null;\n    }\n\n    var child = new this.classType(this.scene, x, y, key, frame);\n    this.scene.sys.displayList.add(child);\n\n    if (child.preUpdate) {\n      this.scene.sys.updateList.add(child);\n    }\n\n    child.visible = visible;\n    child.setActive(active);\n    this.add(child);\n    return child;\n  },\n\n  /**\r\n   * Creates several Game Objects and adds them to this group.\r\n   *\r\n   * If the group becomes {@link Phaser.GameObjects.Group#isFull}, no further Game Objects are created.\r\n   *\r\n   * Calls {@link Phaser.GameObjects.Group#createMultipleCallback} and {@link Phaser.GameObjects.Group#createCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#createMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {GroupCreateConfig|GroupCreateConfig[]} config - Creation settings. This can be a single configuration object or an array of such objects, which will be applied in turn.\r\n   *\r\n   * @return {any[]} The newly created Game Objects.\r\n   */\n  createMultiple: function createMultiple(config) {\n    if (this.isFull()) {\n      return [];\n    }\n\n    if (!Array.isArray(config)) {\n      config = [config];\n    }\n\n    var output = [];\n\n    if (config[0].key) {\n      for (var i = 0; i < config.length; i++) {\n        var entries = this.createFromConfig(config[i]);\n        output = output.concat(entries);\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * A helper for {@link Phaser.GameObjects.Group#createMultiple}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#createFromConfig\r\n   * @since 3.0.0\r\n   *\r\n   * @param {GroupCreateConfig} options - Creation settings.\r\n   *\r\n   * @return {any[]} The newly created Game Objects.\r\n   */\n  createFromConfig: function createFromConfig(options) {\n    if (this.isFull()) {\n      return [];\n    }\n\n    this.classType = GetFastValue(options, 'classType', this.classType);\n    var key = GetFastValue(options, 'key', undefined);\n    var frame = GetFastValue(options, 'frame', null);\n    var visible = GetFastValue(options, 'visible', true);\n    var active = GetFastValue(options, 'active', true);\n    var entries = []; //  Can't do anything without at least a key\n\n    if (key === undefined) {\n      return entries;\n    } else {\n      if (!Array.isArray(key)) {\n        key = [key];\n      }\n\n      if (!Array.isArray(frame)) {\n        frame = [frame];\n      }\n    } //  Build an array of key frame pairs to loop through\n\n\n    var repeat = GetFastValue(options, 'repeat', 0);\n    var randomKey = GetFastValue(options, 'randomKey', false);\n    var randomFrame = GetFastValue(options, 'randomFrame', false);\n    var yoyo = GetFastValue(options, 'yoyo', false);\n    var quantity = GetFastValue(options, 'frameQuantity', 1);\n    var max = GetFastValue(options, 'max', 0); //  If a grid is set we use that to override the quantity?\n\n    var range = Range(key, frame, {\n      max: max,\n      qty: quantity,\n      random: randomKey,\n      randomB: randomFrame,\n      repeat: repeat,\n      yoyo: yoyo\n    });\n\n    for (var c = 0; c < range.length; c++) {\n      var created = this.create(0, 0, range[c].a, range[c].b, visible, active);\n\n      if (!created) {\n        break;\n      }\n\n      entries.push(created);\n    } //  Post-creation options (applied only to those items created in this call):\n\n\n    var x = GetValue(options, 'setXY.x', 0);\n    var y = GetValue(options, 'setXY.y', 0);\n    var stepX = GetValue(options, 'setXY.stepX', 0);\n    var stepY = GetValue(options, 'setXY.stepY', 0);\n    Actions.SetXY(entries, x, y, stepX, stepY);\n    var rotation = GetValue(options, 'setRotation.value', 0);\n    var stepRotation = GetValue(options, 'setRotation.step', 0);\n    Actions.SetRotation(entries, rotation, stepRotation);\n    var scaleX = GetValue(options, 'setScale.x', 1);\n    var scaleY = GetValue(options, 'setScale.y', scaleX);\n    var stepScaleX = GetValue(options, 'setScale.stepX', 0);\n    var stepScaleY = GetValue(options, 'setScale.stepY', 0);\n    Actions.SetScale(entries, scaleX, scaleY, stepScaleX, stepScaleY);\n    var alpha = GetValue(options, 'setAlpha.value', 1);\n    var stepAlpha = GetValue(options, 'setAlpha.step', 0);\n    Actions.SetAlpha(entries, alpha, stepAlpha);\n    var hitArea = GetFastValue(options, 'hitArea', null);\n    var hitAreaCallback = GetFastValue(options, 'hitAreaCallback', null);\n\n    if (hitArea) {\n      Actions.SetHitArea(entries, hitArea, hitAreaCallback);\n    }\n\n    var grid = GetFastValue(options, 'gridAlign', false);\n\n    if (grid) {\n      Actions.GridAlign(entries, grid);\n    }\n\n    if (this.createMultipleCallback) {\n      this.createMultipleCallback.call(this, entries);\n    }\n\n    return entries;\n  },\n\n  /**\r\n   * Updates any group members, if {@link Phaser.GameObjects.Group#runChildUpdate} is enabled.\r\n   *\r\n   * @method Phaser.GameObjects.Group#preUpdate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp.\r\n   * @param {number} delta - The delta time elapsed since the last frame.\r\n   */\n  preUpdate: function preUpdate(time, delta) {\n    if (!this.runChildUpdate || this.children.size === 0) {\n      return;\n    } //  Because a Group child may mess with the length of the Group during its update\n\n\n    var temp = this.children.entries.slice();\n\n    for (var i = 0; i < temp.length; i++) {\n      var item = temp[i];\n\n      if (item.active) {\n        item.update(time, delta);\n      }\n    }\n  },\n\n  /**\r\n   * Adds a Game Object to this group.\r\n   *\r\n   * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to add.\r\n   * @param {boolean} [addToScene=false] - Also add the Game Object to the scene.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This Group object.\r\n   */\n  add: function add(child, addToScene) {\n    if (addToScene === undefined) {\n      addToScene = false;\n    }\n\n    if (this.isFull()) {\n      return this;\n    }\n\n    this.children.set(child);\n\n    if (this.createCallback) {\n      this.createCallback.call(this, child);\n    }\n\n    if (addToScene) {\n      this.scene.sys.displayList.add(child);\n\n      if (child.preUpdate) {\n        this.scene.sys.updateList.add(child);\n      }\n    }\n\n    child.on(Events.DESTROY, this.remove, this);\n    return this;\n  },\n\n  /**\r\n   * Adds several Game Objects to this group.\r\n   *\r\n   * Calls {@link Phaser.GameObjects.Group#createCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#addMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject[]} children - The Game Objects to add.\r\n   * @param {boolean} [addToScene=false] - Also add the Game Objects to the scene.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This group.\r\n   */\n  addMultiple: function addMultiple(children, addToScene) {\n    if (addToScene === undefined) {\n      addToScene = false;\n    }\n\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; i++) {\n        this.add(children[i], addToScene);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Removes a member of this Group and optionally removes it from the Scene and / or destroys it.\r\n   *\r\n   * Calls {@link Phaser.GameObjects.Group#removeCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to remove.\r\n   * @param {boolean} [removeFromScene=false] - Optionally remove the Group member from the Scene it belongs to.\r\n   * @param {boolean} [destroyChild=false] - Optionally call destroy on the removed Group member.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This Group object.\r\n   */\n  remove: function remove(child, removeFromScene, destroyChild) {\n    if (removeFromScene === undefined) {\n      removeFromScene = false;\n    }\n\n    if (destroyChild === undefined) {\n      destroyChild = false;\n    }\n\n    if (!this.children.contains(child)) {\n      return this;\n    }\n\n    this.children.delete(child);\n\n    if (this.removeCallback) {\n      this.removeCallback.call(this, child);\n    }\n\n    child.off(Events.DESTROY, this.remove, this);\n\n    if (destroyChild) {\n      child.destroy();\n    } else if (removeFromScene) {\n      child.scene.sys.displayList.remove(child);\n\n      if (child.preUpdate) {\n        child.scene.sys.updateList.remove(child);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Removes all members of this Group and optionally removes them from the Scene and / or destroys them.\r\n   *\r\n   * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [removeFromScene=false] - Optionally remove each Group member from the Scene.\r\n   * @param {boolean} [destroyChild=false] - Optionally call destroy on the removed Group members.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This group.\r\n   */\n  clear: function clear(removeFromScene, destroyChild) {\n    if (removeFromScene === undefined) {\n      removeFromScene = false;\n    }\n\n    if (destroyChild === undefined) {\n      destroyChild = false;\n    }\n\n    var children = this.children;\n\n    for (var i = 0; i < children.size; i++) {\n      var gameObject = children.entries[i];\n      gameObject.off(Events.DESTROY, this.remove, this);\n\n      if (destroyChild) {\n        gameObject.destroy();\n      } else if (removeFromScene) {\n        gameObject.scene.sys.displayList.remove(gameObject);\n\n        if (gameObject.preUpdate) {\n          gameObject.scene.sys.updateList.remove(gameObject);\n        }\n      }\n    }\n\n    this.children.clear();\n    return this;\n  },\n\n  /**\r\n   * Tests if a Game Object is a member of this group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - A Game Object.\r\n   *\r\n   * @return {boolean} True if the Game Object is a member of this group.\r\n   */\n  contains: function contains(child) {\n    return this.children.contains(child);\n  },\n\n  /**\r\n   * All members of the group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject[]} The group members.\r\n   */\n  getChildren: function getChildren() {\n    return this.children.entries;\n  },\n\n  /**\r\n   * The number of members of the group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getLength\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer}\r\n   */\n  getLength: function getLength() {\n    return this.children.size;\n  },\n\n  /**\r\n   * Scans the Group, from top to bottom, for the first member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getFirst\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first matching group member, or a newly created member, or null.\r\n   */\n  getFirst: function getFirst(state, createIfNull, x, y, key, frame, visible) {\n    return this.getHandler(true, 1, state, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the Group, from top to bottom, for the nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getFirstNth\r\n   * @since 3.6.0\r\n   *\r\n   * @param {integer} nth - The nth matching Group member to search for.\r\n   * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first matching group member, or a newly created member, or null.\r\n   */\n  getFirstNth: function getFirstNth(nth, state, createIfNull, x, y, key, frame, visible) {\n    return this.getHandler(true, nth, state, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the Group for the last member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getLast\r\n   * @since 3.6.0\r\n   *\r\n   * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first matching group member, or a newly created member, or null.\r\n   */\n  getLast: function getLast(state, createIfNull, x, y, key, frame, visible) {\n    return this.getHandler(false, 1, state, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the Group for the last nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getLastNth\r\n   * @since 3.6.0\r\n   *\r\n   * @param {integer} nth - The nth matching Group member to search for.\r\n   * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first matching group member, or a newly created member, or null.\r\n   */\n  getLastNth: function getLastNth(nth, state, createIfNull, x, y, key, frame, visible) {\n    return this.getHandler(false, nth, state, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the group for the last member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getHandler\r\n   * @private\r\n   * @since 3.6.0\r\n   *\r\n   * @param {boolean} forwards - Search front to back or back to front?\r\n   * @param {integer} nth - Stop matching after nth successful matches.\r\n   * @param {boolean} [state=false] - The {@link Phaser.GameObjects.GameObject#active} value to match.\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first matching group member, or a newly created member, or null.\r\n   */\n  getHandler: function getHandler(forwards, nth, state, createIfNull, x, y, key, frame, visible) {\n    if (state === undefined) {\n      state = false;\n    }\n\n    if (createIfNull === undefined) {\n      createIfNull = false;\n    }\n\n    var gameObject;\n    var i;\n    var total = 0;\n    var children = this.children.entries;\n\n    if (forwards) {\n      for (i = 0; i < children.length; i++) {\n        gameObject = children[i];\n\n        if (gameObject.active === state) {\n          total++;\n\n          if (total === nth) {\n            break;\n          }\n        } else {\n          gameObject = null;\n        }\n      }\n    } else {\n      for (i = children.length - 1; i >= 0; i--) {\n        gameObject = children[i];\n\n        if (gameObject.active === state) {\n          total++;\n\n          if (total === nth) {\n            break;\n          }\n        } else {\n          gameObject = null;\n        }\n      }\n    }\n\n    if (gameObject) {\n      if (typeof x === 'number') {\n        gameObject.x = x;\n      }\n\n      if (typeof y === 'number') {\n        gameObject.y = y;\n      }\n\n      return gameObject;\n    } //  Got this far? We need to create or bail\n\n\n    if (createIfNull) {\n      return this.create(x, y, key, frame, visible);\n    } else {\n      return null;\n    }\n  },\n\n  /**\r\n   * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no inactive member is found and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * The new Game Object will have its active state set to `true`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {?any} The first inactive group member, or a newly created member, or null.\r\n   */\n  get: function get(x, y, key, frame, visible) {\n    return this.getFirst(false, true, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `true`,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no active member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getFirstAlive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {any} The first active group member, or a newly created member, or null.\r\n   */\n  getFirstAlive: function getFirstAlive(createIfNull, x, y, key, frame, visible) {\n    return this.getFirst(true, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\r\n   * assigns `x` and `y`, and returns the member.\r\n   *\r\n   * If no inactive member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\r\n   * The new Game Object will have an active state set to `true`.\r\n   * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getFirstDead\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [createIfNull=false] - Create a new Game Object if no matching members are found, using the following arguments.\r\n   * @param {number} [x] - The horizontal position of the Game Object in the world.\r\n   * @param {number} [y] - The vertical position of the Game Object in the world.\r\n   * @param {string} [key=defaultKey] - The texture key assigned to a new Game Object (if one is created).\r\n   * @param {(string|integer)} [frame=defaultFrame] - A texture frame assigned to a new Game Object (if one is created).\r\n   * @param {boolean} [visible=true] - The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created).\r\n   *\r\n   * @return {any} The first inactive group member, or a newly created member, or null.\r\n   */\n  getFirstDead: function getFirstDead(createIfNull, x, y, key, frame, visible) {\n    return this.getFirst(false, createIfNull, x, y, key, frame, visible);\n  },\n\n  /**\r\n   * {@link Phaser.GameObjects.Components.Animation#play Plays} an animation for all members of this group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#playAnimation\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The string-based key of the animation to play.\r\n   * @param {string} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This Group object.\r\n   */\n  playAnimation: function playAnimation(key, startFrame) {\n    Actions.PlayAnimation(this.children.entries, key, startFrame);\n    return this;\n  },\n\n  /**\r\n   * Whether this group's size at its {@link Phaser.GameObjects.Group#maxSize maximum}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#isFull\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} True if the number of members equals {@link Phaser.GameObjects.Group#maxSize}.\r\n   */\n  isFull: function isFull() {\n    if (this.maxSize === -1) {\n      return false;\n    } else {\n      return this.children.size >= this.maxSize;\n    }\n  },\n\n  /**\r\n   * Counts the number of active (or inactive) group members.\r\n   *\r\n   * @method Phaser.GameObjects.Group#countActive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [value=true] - Count active (true) or inactive (false) group members.\r\n   *\r\n   * @return {integer} The number of group members with an active state matching the `active` argument.\r\n   */\n  countActive: function countActive(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    var total = 0;\n\n    for (var i = 0; i < this.children.size; i++) {\n      if (this.children.entries[i].active === value) {\n        total++;\n      }\n    }\n\n    return total;\n  },\n\n  /**\r\n   * Counts the number of in-use (active) group members.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getTotalUsed\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of group members with an active state of true.\r\n   */\n  getTotalUsed: function getTotalUsed() {\n    return this.countActive();\n  },\n\n  /**\r\n   * The difference of {@link Phaser.GameObjects.Group#maxSize} and the number of active group members.\r\n   *\r\n   * This represents the number of group members that could be created or reactivated before reaching the size limit.\r\n   *\r\n   * @method Phaser.GameObjects.Group#getTotalFree\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} maxSize minus the number of active group numbers; or a large number (if maxSize is -1).\r\n   */\n  getTotalFree: function getTotalFree() {\n    var used = this.getTotalUsed();\n    var capacity = this.maxSize === -1 ? 999999999999 : this.maxSize;\n    return capacity - used;\n  },\n\n  /**\r\n   * Sets the depth of each group member.\r\n   *\r\n   * @method Phaser.GameObjects.Group#setDepth\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The amount to set the property to.\r\n   * @param {number} step - This is added to the `value` amount, multiplied by the iteration counter.\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This Group object.\r\n   */\n  setDepth: function setDepth(value, step) {\n    Actions.SetDepth(this.children.entries, value, step);\n    return this;\n  },\n\n  /**\r\n   * Deactivates a member of this group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#kill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - A member of this group.\r\n   */\n  kill: function kill(gameObject) {\n    if (this.children.contains(gameObject)) {\n      gameObject.setActive(false);\n    }\n  },\n\n  /**\r\n   * Deactivates and hides a member of this group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#killAndHide\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - A member of this group.\r\n   */\n  killAndHide: function killAndHide(gameObject) {\n    if (this.children.contains(gameObject)) {\n      gameObject.setActive(false);\n      gameObject.setVisible(false);\n    }\n  },\n\n  /**\r\n   * Toggles (flips) the visible state of each member of this group.\r\n   *\r\n   * @method Phaser.GameObjects.Group#toggleVisible\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Group} This Group object.\r\n   */\n  toggleVisible: function toggleVisible() {\n    Actions.ToggleVisible(this.children.entries);\n    return this;\n  },\n\n  /**\r\n   * Empties this group and removes it from the Scene.\r\n   *\r\n   * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Group#destroy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [destroyChildren=false] - Also {@link Phaser.GameObjects.GameObject#destroy} each group member.\r\n   */\n  destroy: function destroy(destroyChildren) {\n    if (destroyChildren === undefined) {\n      destroyChildren = false;\n    } //  This Game Object had already been destroyed\n\n\n    if (!this.scene || this.ignoreDestroy) {\n      return;\n    }\n\n    if (destroyChildren) {\n      var children = this.children;\n\n      for (var i = 0; i < children.size; i++) {\n        var gameObject = children.entries[i]; //  Remove the event hook first or it'll go all recursive hell on us\n\n        gameObject.off(Events.DESTROY, this.remove, this);\n        gameObject.destroy();\n      }\n    }\n\n    this.children.clear();\n    this.scene = undefined;\n    this.children = undefined;\n  }\n});\nmodule.exports = Group;","map":null,"metadata":{},"sourceType":"script"}