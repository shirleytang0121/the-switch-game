{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseSound = require('../BaseSound');\n\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Extend = require('../../utils/object/Extend');\n/**\r\n * @classdesc\r\n * No audio implementation of the sound. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSound\r\n * @extends Phaser.Sound.BaseSound\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.NoAudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\n\n\nvar NoAudioSound = new Class({\n  Extends: EventEmitter,\n  initialize: function NoAudioSound(manager, key, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    EventEmitter.call(this);\n    this.manager = manager;\n    this.key = key;\n    this.isPlaying = false;\n    this.isPaused = false;\n    this.totalRate = 1;\n    this.duration = 0;\n    this.totalDuration = 0;\n    this.config = Extend({\n      mute: false,\n      volume: 1,\n      rate: 1,\n      detune: 0,\n      seek: 0,\n      loop: false,\n      delay: 0\n    }, config);\n    this.currentConfig = this.config;\n    this.mute = false;\n    this.volume = 1;\n    this.rate = 1;\n    this.detune = 0;\n    this.seek = 0;\n    this.loop = false;\n    this.markers = {};\n    this.currentMarker = null;\n    this.pendingRemove = false;\n  },\n  // eslint-disable-next-line no-unused-vars\n  addMarker: function addMarker(marker) {\n    return false;\n  },\n  // eslint-disable-next-line no-unused-vars\n  updateMarker: function updateMarker(marker) {\n    return false;\n  },\n  // eslint-disable-next-line no-unused-vars\n  removeMarker: function removeMarker(markerName) {\n    return null;\n  },\n  // eslint-disable-next-line no-unused-vars\n  play: function play(markerName, config) {\n    return false;\n  },\n  pause: function pause() {\n    return false;\n  },\n  resume: function resume() {\n    return false;\n  },\n  stop: function stop() {\n    return false;\n  },\n  destroy: function destroy() {\n    this.manager.remove(this);\n    BaseSound.prototype.destroy.call(this);\n  }\n});\nmodule.exports = NoAudioSound;","map":null,"metadata":{},"sourceType":"script"}