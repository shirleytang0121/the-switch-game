{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Matrix used for display transformations for rendering.\r\n *\r\n * It is represented like so:\r\n *\r\n * ```\r\n * | a | c | tx |\r\n * | b | d | ty |\r\n * | 0 | 0 | 1  |\r\n * ```\r\n *\r\n * @class TransformMatrix\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [a=1] - The Scale X value.\r\n * @param {number} [b=0] - The Shear Y value.\r\n * @param {number} [c=0] - The Shear X value.\r\n * @param {number} [d=1] - The Scale Y value.\r\n * @param {number} [tx=0] - The Translate X value.\r\n * @param {number} [ty=0] - The Translate Y value.\r\n */\n\n\nvar TransformMatrix = new Class({\n  initialize: function TransformMatrix(a, b, c, d, tx, ty) {\n    if (a === undefined) {\n      a = 1;\n    }\n\n    if (b === undefined) {\n      b = 0;\n    }\n\n    if (c === undefined) {\n      c = 0;\n    }\n\n    if (d === undefined) {\n      d = 1;\n    }\n\n    if (tx === undefined) {\n      tx = 0;\n    }\n\n    if (ty === undefined) {\n      ty = 0;\n    }\n    /**\r\n     * The matrix values.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#matrix\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.matrix = new Float32Array([a, b, c, d, tx, ty, 0, 0, 1]);\n    /**\r\n     * The decomposed matrix.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#decomposedMatrix\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.decomposedMatrix = {\n      translateX: 0,\n      translateY: 0,\n      scaleX: 1,\n      scaleY: 1,\n      rotation: 0\n    };\n  },\n\n  /**\r\n   * The Scale X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#a\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  a: {\n    get: function get() {\n      return this.matrix[0];\n    },\n    set: function set(value) {\n      this.matrix[0] = value;\n    }\n  },\n\n  /**\r\n   * The Shear Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#b\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  b: {\n    get: function get() {\n      return this.matrix[1];\n    },\n    set: function set(value) {\n      this.matrix[1] = value;\n    }\n  },\n\n  /**\r\n   * The Shear X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#c\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  c: {\n    get: function get() {\n      return this.matrix[2];\n    },\n    set: function set(value) {\n      this.matrix[2] = value;\n    }\n  },\n\n  /**\r\n   * The Scale Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#d\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  d: {\n    get: function get() {\n      return this.matrix[3];\n    },\n    set: function set(value) {\n      this.matrix[3] = value;\n    }\n  },\n\n  /**\r\n   * The Translate X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#e\r\n   * @type {number}\r\n   * @since 3.11.0\r\n   */\n  e: {\n    get: function get() {\n      return this.matrix[4];\n    },\n    set: function set(value) {\n      this.matrix[4] = value;\n    }\n  },\n\n  /**\r\n   * The Translate Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#f\r\n   * @type {number}\r\n   * @since 3.11.0\r\n   */\n  f: {\n    get: function get() {\n      return this.matrix[5];\n    },\n    set: function set(value) {\n      this.matrix[5] = value;\n    }\n  },\n\n  /**\r\n   * The Translate X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#tx\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  tx: {\n    get: function get() {\n      return this.matrix[4];\n    },\n    set: function set(value) {\n      this.matrix[4] = value;\n    }\n  },\n\n  /**\r\n   * The Translate Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#ty\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  ty: {\n    get: function get() {\n      return this.matrix[5];\n    },\n    set: function set(value) {\n      this.matrix[5] = value;\n    }\n  },\n\n  /**\r\n   * The rotation of the Matrix.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#rotation\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  rotation: {\n    get: function get() {\n      return Math.acos(this.a / this.scaleX) * (Math.atan(-this.c / this.a) < 0 ? -1 : 1);\n    }\n  },\n\n  /**\r\n   * The horizontal scale of the Matrix.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#scaleX\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  scaleX: {\n    get: function get() {\n      return Math.sqrt(this.a * this.a + this.c * this.c);\n    }\n  },\n\n  /**\r\n   * The vertical scale of the Matrix.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#scaleY\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  scaleY: {\n    get: function get() {\n      return Math.sqrt(this.b * this.b + this.d * this.d);\n    }\n  },\n\n  /**\r\n   * Reset the Matrix to an identity matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#loadIdentity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  loadIdentity: function loadIdentity() {\n    var matrix = this.matrix;\n    matrix[0] = 1;\n    matrix[1] = 0;\n    matrix[2] = 0;\n    matrix[3] = 1;\n    matrix[4] = 0;\n    matrix[5] = 0;\n    return this;\n  },\n\n  /**\r\n   * Translate the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation value.\r\n   * @param {number} y - The vertical translation value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  translate: function translate(x, y) {\n    var matrix = this.matrix;\n    matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\n    matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\n    return this;\n  },\n\n  /**\r\n   * Scale the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal scale value.\r\n   * @param {number} y - The vertical scale value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  scale: function scale(x, y) {\n    var matrix = this.matrix;\n    matrix[0] *= x;\n    matrix[1] *= x;\n    matrix[2] *= y;\n    matrix[3] *= y;\n    return this;\n  },\n\n  /**\r\n   * Rotate the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} angle - The angle of rotation in radians.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  rotate: function rotate(angle) {\n    var sin = Math.sin(angle);\n    var cos = Math.cos(angle);\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    matrix[0] = a * cos + c * sin;\n    matrix[1] = b * cos + d * sin;\n    matrix[2] = a * -sin + c * cos;\n    matrix[3] = b * -sin + d * cos;\n    return this;\n  },\n\n  /**\r\n   * Multiply this Matrix by the given Matrix.\r\n   * \r\n   * If an `out` Matrix is given then the results will be stored in it.\r\n   * If it is not given, this matrix will be updated in place instead.\r\n   * Use an `out` Matrix if you do not wish to mutate this matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} rhs - The Matrix to multiply by.\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} [out] - An optional Matrix to store the results in.\r\n   *\r\n   * @return {Phaser.GameObjects.Components.TransformMatrix} Either this TransformMatrix, or the `out` Matrix, if given in the arguments.\r\n   */\n  multiply: function multiply(rhs, out) {\n    var matrix = this.matrix;\n    var source = rhs.matrix;\n    var localA = matrix[0];\n    var localB = matrix[1];\n    var localC = matrix[2];\n    var localD = matrix[3];\n    var localE = matrix[4];\n    var localF = matrix[5];\n    var sourceA = source[0];\n    var sourceB = source[1];\n    var sourceC = source[2];\n    var sourceD = source[3];\n    var sourceE = source[4];\n    var sourceF = source[5];\n    var destinationMatrix = out === undefined ? this : out;\n    destinationMatrix.a = sourceA * localA + sourceB * localC;\n    destinationMatrix.b = sourceA * localB + sourceB * localD;\n    destinationMatrix.c = sourceC * localA + sourceD * localC;\n    destinationMatrix.d = sourceC * localB + sourceD * localD;\n    destinationMatrix.e = sourceE * localA + sourceF * localC + localE;\n    destinationMatrix.f = sourceE * localB + sourceF * localD + localF;\n    return destinationMatrix;\n  },\n\n  /**\r\n   * Multiply this Matrix by the matrix given, including the offset.\r\n   * \r\n   * The offsetX is added to the tx value: `offsetX * a + offsetY * c + tx`.\r\n   * The offsetY is added to the ty value: `offsetY * b + offsetY * d + ty`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#multiplyWithOffset\r\n   * @since 3.11.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n   * @param {number} offsetX - Horizontal offset to factor in to the multiplication.\r\n   * @param {number} offsetY - Vertical offset to factor in to the multiplication.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  multiplyWithOffset: function multiplyWithOffset(src, offsetX, offsetY) {\n    var matrix = this.matrix;\n    var otherMatrix = src.matrix;\n    var a0 = matrix[0];\n    var b0 = matrix[1];\n    var c0 = matrix[2];\n    var d0 = matrix[3];\n    var tx0 = matrix[4];\n    var ty0 = matrix[5];\n    var pse = offsetX * a0 + offsetY * c0 + tx0;\n    var psf = offsetX * b0 + offsetY * d0 + ty0;\n    var a1 = otherMatrix[0];\n    var b1 = otherMatrix[1];\n    var c1 = otherMatrix[2];\n    var d1 = otherMatrix[3];\n    var tx1 = otherMatrix[4];\n    var ty1 = otherMatrix[5];\n    matrix[0] = a1 * a0 + b1 * c0;\n    matrix[1] = a1 * b0 + b1 * d0;\n    matrix[2] = c1 * a0 + d1 * c0;\n    matrix[3] = c1 * b0 + d1 * d0;\n    matrix[4] = tx1 * a0 + ty1 * c0 + pse;\n    matrix[5] = tx1 * b0 + ty1 * d0 + psf;\n    return this;\n  },\n\n  /**\r\n   * Transform the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#transform\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} a - The Scale X value.\r\n   * @param {number} b - The Shear Y value.\r\n   * @param {number} c - The Shear X value.\r\n   * @param {number} d - The Scale Y value.\r\n   * @param {number} tx - The Translate X value.\r\n   * @param {number} ty - The Translate Y value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  transform: function transform(a, b, c, d, tx, ty) {\n    var matrix = this.matrix;\n    var a0 = matrix[0];\n    var b0 = matrix[1];\n    var c0 = matrix[2];\n    var d0 = matrix[3];\n    var tx0 = matrix[4];\n    var ty0 = matrix[5];\n    matrix[0] = a * a0 + b * c0;\n    matrix[1] = a * b0 + b * d0;\n    matrix[2] = c * a0 + d * c0;\n    matrix[3] = c * b0 + d * d0;\n    matrix[4] = tx * a0 + ty * c0 + tx0;\n    matrix[5] = tx * b0 + ty * d0 + ty0;\n    return this;\n  },\n\n  /**\r\n   * Transform a point using this Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#transformPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point to transform.\r\n   * @param {number} y - The y coordinate of the point to transform.\r\n   * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The Point object to store the transformed coordinates.\r\n   *\r\n   * @return {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} The Point containing the transformed coordinates.\r\n   */\n  transformPoint: function transformPoint(x, y, point) {\n    if (point === undefined) {\n      point = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    point.x = x * a + y * c + tx;\n    point.y = x * b + y * d + ty;\n    return point;\n  },\n\n  /**\r\n   * Invert the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#invert\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  invert: function invert() {\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    var n = a * d - b * c;\n    matrix[0] = d / n;\n    matrix[1] = -b / n;\n    matrix[2] = -c / n;\n    matrix[3] = a / n;\n    matrix[4] = (c * ty - d * tx) / n;\n    matrix[5] = -(a * ty - b * tx) / n;\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix to copy those of the matrix given.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyFrom\r\n   * @since 3.11.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  copyFrom: function copyFrom(src) {\n    var matrix = this.matrix;\n    matrix[0] = src.a;\n    matrix[1] = src.b;\n    matrix[2] = src.c;\n    matrix[3] = src.d;\n    matrix[4] = src.e;\n    matrix[5] = src.f;\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix to copy those of the array given.\r\n   * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyFromArray\r\n   * @since 3.11.0\r\n   *\r\n   * @param {array} src - The array of values to set into this matrix.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  copyFromArray: function copyFromArray(src) {\n    var matrix = this.matrix;\n    matrix[0] = src[0];\n    matrix[1] = src[1];\n    matrix[2] = src[2];\n    matrix[3] = src[3];\n    matrix[4] = src[4];\n    matrix[5] = src[5];\n    return this;\n  },\n\n  /**\r\n   * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n   * This will use the Context.transform method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyToContext\r\n   * @since 3.12.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n   *\r\n   * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n   */\n  copyToContext: function copyToContext(ctx) {\n    var matrix = this.matrix;\n    ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    return ctx;\n  },\n\n  /**\r\n   * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n   * This will use the Context.setTransform method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#setToContext\r\n   * @since 3.12.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n   *\r\n   * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n   */\n  setToContext: function setToContext(ctx) {\n    var matrix = this.matrix;\n    ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    return ctx;\n  },\n\n  /**\r\n   * Copy the values in this Matrix to the array given.\r\n   * \r\n   * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyToArray\r\n   * @since 3.12.0\r\n   *\r\n   * @param {array} [out] - The array to copy the matrix values in to.\r\n   *\r\n   * @return {array} An array where elements 0 to 5 contain the values from this matrix.\r\n   */\n  copyToArray: function copyToArray(out) {\n    var matrix = this.matrix;\n\n    if (out === undefined) {\n      out = [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]];\n    } else {\n      out[0] = matrix[0];\n      out[1] = matrix[1];\n      out[2] = matrix[2];\n      out[3] = matrix[3];\n      out[4] = matrix[4];\n      out[5] = matrix[5];\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Set the values of this Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#setTransform\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} a - The Scale X value.\r\n   * @param {number} b - The Shear Y value.\r\n   * @param {number} c - The Shear X value.\r\n   * @param {number} d - The Scale Y value.\r\n   * @param {number} tx - The Translate X value.\r\n   * @param {number} ty - The Translate Y value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  setTransform: function setTransform(a, b, c, d, tx, ty) {\n    var matrix = this.matrix;\n    matrix[0] = a;\n    matrix[1] = b;\n    matrix[2] = c;\n    matrix[3] = d;\n    matrix[4] = tx;\n    matrix[5] = ty;\n    return this;\n  },\n\n  /**\r\n   * Decompose this Matrix into its translation, scale and rotation values using QR decomposition.\r\n   * \r\n   * The result must be applied in the following order to reproduce the current matrix:\r\n   * \r\n   * translate -> rotate -> scale\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#decomposeMatrix\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} The decomposed Matrix.\r\n   */\n  decomposeMatrix: function decomposeMatrix() {\n    var decomposedMatrix = this.decomposedMatrix;\n    var matrix = this.matrix; //  a = scale X (1)\n    //  b = shear Y (0)\n    //  c = shear X (0)\n    //  d = scale Y (1)\n\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var determ = a * d - b * c;\n    decomposedMatrix.translateX = matrix[4];\n    decomposedMatrix.translateY = matrix[5];\n\n    if (a || b) {\n      var r = Math.sqrt(a * a + b * b);\n      decomposedMatrix.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);\n      decomposedMatrix.scaleX = r;\n      decomposedMatrix.scaleY = determ / r;\n    } else if (c || d) {\n      var s = Math.sqrt(c * c + d * d);\n      decomposedMatrix.rotation = Math.PI * 0.5 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\n      decomposedMatrix.scaleX = determ / s;\n      decomposedMatrix.scaleY = s;\n    } else {\n      decomposedMatrix.rotation = 0;\n      decomposedMatrix.scaleX = 0;\n      decomposedMatrix.scaleY = 0;\n    }\n\n    return decomposedMatrix;\n  },\n\n  /**\r\n   * Apply the identity, translate, rotate and scale operations on the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#applyITRS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation.\r\n   * @param {number} y - The vertical translation.\r\n   * @param {number} rotation - The angle of rotation in radians.\r\n   * @param {number} scaleX - The horizontal scale.\r\n   * @param {number} scaleY - The vertical scale.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  applyITRS: function applyITRS(x, y, rotation, scaleX, scaleY) {\n    var matrix = this.matrix;\n    var radianSin = Math.sin(rotation);\n    var radianCos = Math.cos(rotation); // Translate\n\n    matrix[4] = x;\n    matrix[5] = y; // Rotate and Scale\n\n    matrix[0] = radianCos * scaleX;\n    matrix[1] = radianSin * scaleX;\n    matrix[2] = -radianSin * scaleY;\n    matrix[3] = radianCos * scaleY;\n    return this;\n  },\n\n  /**\r\n   * Takes the `x` and `y` values and returns a new position in the `output` vector that is the inverse of\r\n   * the current matrix with its transformation applied.\r\n   * \r\n   * Can be used to translate points from world to local space.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#applyInverse\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} x - The x position to translate.\r\n   * @param {number} y - The y position to translate.\r\n   * @param {Phaser.Math.Vector2} [output] - A Vector2, or point-like object, to store the results in.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates, inverse-transformed through this matrix.\r\n   */\n  applyInverse: function applyInverse(x, y, output) {\n    if (output === undefined) {\n      output = new Vector2();\n    }\n\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    var id = 1 / (a * d + c * -b);\n    output.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    output.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return output;\n  },\n\n  /**\r\n   * Returns the X component of this matrix multiplied by the given values.\r\n   * This is the same as `x * a + y * c + e`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getX\r\n   * @since 3.12.0\r\n   * \r\n   * @param {number} x - The x value.\r\n   * @param {number} y - The y value.\r\n   *\r\n   * @return {number} The calculated x value.\r\n   */\n  getX: function getX(x, y) {\n    return x * this.a + y * this.c + this.e;\n  },\n\n  /**\r\n   * Returns the Y component of this matrix multiplied by the given values.\r\n   * This is the same as `x * b + y * d + f`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getY\r\n   * @since 3.12.0\r\n   * \r\n   * @param {number} x - The x value.\r\n   * @param {number} y - The y value.\r\n   *\r\n   * @return {number} The calculated y value.\r\n   */\n  getY: function getY(x, y) {\n    return x * this.b + y * this.d + this.f;\n  },\n\n  /**\r\n   * Returns a string that can be used in a CSS Transform call as a `matrix` property.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getCSSMatrix\r\n   * @since 3.12.0\r\n   *\r\n   * @return {string} A string containing the CSS Transform matrix values.\r\n   */\n  getCSSMatrix: function getCSSMatrix() {\n    var m = this.matrix;\n    return 'matrix(' + m[0] + ',' + m[1] + ',' + m[2] + ',' + m[3] + ',' + m[4] + ',' + m[5] + ')';\n  },\n\n  /**\r\n   * Destroys this Transform Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#destroy\r\n   * @since 3.4.0\r\n   */\n  destroy: function destroy() {\n    this.matrix = null;\n    this.decomposedMatrix = null;\n  }\n});\nmodule.exports = TransformMatrix;","map":null,"metadata":{},"sourceType":"script"}