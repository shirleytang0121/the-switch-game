{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Body = require('../lib/body/Body');\n\nvar MATH_CONST = require('../../../math/const');\n\nvar WrapAngle = require('../../../math/angle/Wrap');\n\nvar WrapAngleDegrees = require('../../../math/angle/WrapDegrees'); //  global bitmask flag for GameObject.renderMask (used by Scale)\n\n\nvar _FLAG = 4; // 0100\n//  Transform Component\n\n/**\r\n * Provides methods used for getting and setting the position, scale and rotation of a Game Object.\r\n *\r\n * @name Phaser.Physics.Matter.Components.Transform\r\n * @since 3.0.0\r\n */\n\nvar Transform = {\n  /**\r\n   * The x position of this Game Object.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function get() {\n      return this.body.position.x;\n    },\n    set: function set(value) {\n      this._tempVec2.set(value, this.y);\n\n      Body.setPosition(this.body, this._tempVec2);\n    }\n  },\n\n  /**\r\n   * The y position of this Game Object.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function get() {\n      return this.body.position.y;\n    },\n    set: function set(value) {\n      this._tempVec2.set(this.x, value);\n\n      Body.setPosition(this.body, this._tempVec2);\n    }\n  },\n\n  /**\r\n   * The horizontal scale of this Game Object.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#scaleX\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  scaleX: {\n    get: function get() {\n      return this._scaleX;\n    },\n    set: function set(value) {\n      var factorX = 1 / this._scaleX;\n      var factorY = 1 / this._scaleY;\n      this._scaleX = value;\n\n      if (this._scaleX === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      } //  Reset Matter scale back to 1 (sigh)\n\n\n      Body.scale(this.body, factorX, factorY);\n      Body.scale(this.body, value, this._scaleY);\n    }\n  },\n\n  /**\r\n   * The vertical scale of this Game Object.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#scaleY\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  scaleY: {\n    get: function get() {\n      return this._scaleY;\n    },\n    set: function set(value) {\n      var factorX = 1 / this._scaleX;\n      var factorY = 1 / this._scaleY;\n      this._scaleY = value;\n\n      if (this._scaleY === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      }\n\n      Body.scale(this.body, factorX, factorY);\n      Body.scale(this.body, this._scaleX, value);\n    }\n  },\n\n  /**\r\n   * Use `angle` to set or get rotation of the physics body associated to this GameObject. Unlike rotation, when using set the value can be in degrees, which will be converted to radians internally.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#angle\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  angle: {\n    get: function get() {\n      return WrapAngleDegrees(this.body.angle * MATH_CONST.RAD_TO_DEG);\n    },\n    set: function set(value) {\n      //  value is in degrees\n      this.rotation = WrapAngleDegrees(value) * MATH_CONST.DEG_TO_RAD;\n    }\n  },\n\n  /**\r\n   * Use `rotation` to set or get the rotation of the physics body associated with this GameObject. The value when set must be in radians.\r\n   *\r\n   * @name Phaser.Physics.Matter.Components.Transform#rotation\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  rotation: {\n    get: function get() {\n      return this.body.angle;\n    },\n    set: function set(value) {\n      //  value is in radians\n      this._rotation = WrapAngle(value);\n      Body.setAngle(this.body, this._rotation);\n    }\n  },\n\n  /**\r\n   * Sets the position of the physics body along x and y axes. Both the parameters to this function are optional and if not passed any they default to 0.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Transform#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal position of the body.\r\n   * @param {number} [y=x] - The vertical position of the body.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setPosition: function setPosition(x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this._tempVec2.set(x, y);\n\n    Body.setPosition(this.body, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Transform#setRotation\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [radians=0] - [description]\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setRotation: function setRotation(radians) {\n    if (radians === undefined) {\n      radians = 0;\n    }\n\n    this._rotation = WrapAngle(radians);\n    Body.setAngle(this.body, radians);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Transform#setFixedRotation\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setFixedRotation: function setFixedRotation() {\n    Body.setInertia(this.body, Infinity);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Transform#setAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [degrees=0] - [description]\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setAngle: function setAngle(degrees) {\n    if (degrees === undefined) {\n      degrees = 0;\n    }\n\n    this.angle = degrees;\n    Body.setAngle(this.body, this.rotation);\n    return this;\n  },\n\n  /**\r\n   * Sets the scale of this Game Object.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Transform#setScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=1] - The horizontal scale of this Game Object.\r\n   * @param {number} [y=x] - The vertical scale of this Game Object. If not set it will use the x value.\r\n   * @param {Phaser.Math.Vector2} [point] - The point (Vector2) from which scaling will occur.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setScale: function setScale(x, y, point) {\n    if (x === undefined) {\n      x = 1;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    var factorX = 1 / this._scaleX;\n    var factorY = 1 / this._scaleY;\n    this._scaleX = x;\n    this._scaleY = y;\n    Body.scale(this.body, factorX, factorY, point);\n    Body.scale(this.body, x, y, point);\n    return this;\n  }\n};\nmodule.exports = Transform;","map":null,"metadata":{},"sourceType":"script"}