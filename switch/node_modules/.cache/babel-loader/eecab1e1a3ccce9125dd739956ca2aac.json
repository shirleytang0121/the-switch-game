{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A three-dimensional matrix.\r\n *\r\n * Defaults to the identity matrix when instantiated.\r\n *\r\n * @class Matrix3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Matrix3} [m] - Optional Matrix3 to copy values from.\r\n */\n\n\nvar Matrix3 = new Class({\n  initialize: function Matrix3(m) {\n    /**\r\n     * The matrix values.\r\n     *\r\n     * @name Phaser.Math.Matrix3#val\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n    this.val = new Float32Array(9);\n\n    if (m) {\n      //  Assume Matrix3 with val:\n      this.copy(m);\n    } else {\n      //  Default to identity\n      this.identity();\n    }\n  },\n\n  /**\r\n   * Make a clone of this Matrix3.\r\n   *\r\n   * @method Phaser.Math.Matrix3#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} A clone of this Matrix3.\r\n   */\n  clone: function clone() {\n    return new Matrix3(this);\n  },\n\n  /**\r\n   * This method is an alias for `Matrix3.copy`.\r\n   *\r\n   * @method Phaser.Math.Matrix3#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to set the values of this Matrix's from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  set: function set(src) {\n    return this.copy(src);\n  },\n\n  /**\r\n   * Copy the values of a given Matrix into this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  copy: function copy(src) {\n    var out = this.val;\n    var a = src.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return this;\n  },\n\n  /**\r\n   * Copy the values of a given Matrix4 into this Matrix3.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} m - The Matrix4 to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromMat4: function fromMat4(m) {\n    var a = m.val;\n    var out = this.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix from the given array.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromArray\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} a - The array to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromArray: function fromArray(a) {\n    var out = this.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return this;\n  },\n\n  /**\r\n   * Reset this Matrix to an identity (default) matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#identity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  identity: function identity() {\n    var out = this.val;\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return this;\n  },\n\n  /**\r\n   * Transpose this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#transpose\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  transpose: function transpose() {\n    var a = this.val;\n    var a01 = a[1];\n    var a02 = a[2];\n    var a12 = a[5];\n    a[1] = a[3];\n    a[2] = a[6];\n    a[3] = a01;\n    a[5] = a[7];\n    a[6] = a02;\n    a[7] = a12;\n    return this;\n  },\n\n  /**\r\n   * Invert this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#invert\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  invert: function invert() {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1 / det;\n    a[0] = b01 * det;\n    a[1] = (-a22 * a01 + a02 * a21) * det;\n    a[2] = (a12 * a01 - a02 * a11) * det;\n    a[3] = b11 * det;\n    a[4] = (a22 * a00 - a02 * a20) * det;\n    a[5] = (-a12 * a00 + a02 * a10) * det;\n    a[6] = b21 * det;\n    a[7] = (-a21 * a00 + a01 * a20) * det;\n    a[8] = (a11 * a00 - a01 * a10) * det;\n    return this;\n  },\n\n  /**\r\n   * Calculate the adjoint, or adjugate, of this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#adjoint\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  adjoint: function adjoint() {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    a[0] = a11 * a22 - a12 * a21;\n    a[1] = a02 * a21 - a01 * a22;\n    a[2] = a01 * a12 - a02 * a11;\n    a[3] = a12 * a20 - a10 * a22;\n    a[4] = a00 * a22 - a02 * a20;\n    a[5] = a02 * a10 - a00 * a12;\n    a[6] = a10 * a21 - a11 * a20;\n    a[7] = a01 * a20 - a00 * a21;\n    a[8] = a00 * a11 - a01 * a10;\n    return this;\n  },\n\n  /**\r\n   * Calculate the determinant of this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#determinant\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The determinant of this Matrix.\r\n   */\n  determinant: function determinant() {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n  },\n\n  /**\r\n   * Multiply this Matrix by the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to multiply this Matrix by.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  multiply: function multiply(src) {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b = src.val;\n    var b00 = b[0];\n    var b01 = b[1];\n    var b02 = b[2];\n    var b10 = b[3];\n    var b11 = b[4];\n    var b12 = b[5];\n    var b20 = b[6];\n    var b21 = b[7];\n    var b22 = b[8];\n    a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return this;\n  },\n\n  /**\r\n   * Translate this Matrix using the given Vector.\r\n   *\r\n   * @method Phaser.Math.Matrix3#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to translate this Matrix with.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  translate: function translate(v) {\n    var a = this.val;\n    var x = v.x;\n    var y = v.y;\n    a[6] = x * a[0] + y * a[3] + a[6];\n    a[7] = x * a[1] + y * a[4] + a[7];\n    a[8] = x * a[2] + y * a[5] + a[8];\n    return this;\n  },\n\n  /**\r\n   * Apply a rotation transformation to this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rad - The angle in radians to rotate by.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  rotate: function rotate(rad) {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    a[0] = c * a00 + s * a10;\n    a[1] = c * a01 + s * a11;\n    a[2] = c * a02 + s * a12;\n    a[3] = c * a10 - s * a00;\n    a[4] = c * a11 - s * a01;\n    a[5] = c * a12 - s * a02;\n    return this;\n  },\n\n  /**\r\n   * Apply a scale transformation to this Matrix.\r\n   *\r\n   * Uses the `x` and `y` components of the given Vector to scale the Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to scale this Matrix with.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  scale: function scale(v) {\n    var a = this.val;\n    var x = v.x;\n    var y = v.y;\n    a[0] = x * a[0];\n    a[1] = x * a[1];\n    a[2] = x * a[2];\n    a[3] = y * a[3];\n    a[4] = y * a[4];\n    a[5] = y * a[5];\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix from the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to set the values of this Matrix from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromQuat: function fromQuat(q) {\n    var x = q.x;\n    var y = q.y;\n    var z = q.z;\n    var w = q.w;\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var out = this.val;\n    out[0] = 1 - (yy + zz);\n    out[3] = xy + wz;\n    out[6] = xz - wy;\n    out[1] = xy - wz;\n    out[4] = 1 - (xx + zz);\n    out[7] = yz + wx;\n    out[2] = xz + wy;\n    out[5] = yz - wx;\n    out[8] = 1 - (xx + yy);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Math.Matrix3#normalFromMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} m - [description]\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  normalFromMat4: function normalFromMat4(m) {\n    var a = m.val;\n    var out = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    var a30 = a[12];\n    var a31 = a[13];\n    var a32 = a[14];\n    var a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return this;\n  }\n});\nmodule.exports = Matrix3;","map":null,"metadata":{},"sourceType":"script"}