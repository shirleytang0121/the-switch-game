{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A MoveTo Curve is a very simple curve consisting of only a single point. Its intended use is to move the ending point in a Path.\r\n *\r\n * @class MoveTo\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - `x` pixel coordinate.\r\n * @param {number} [y] - `y` pixel coordinate.\r\n */\n\n\nvar MoveTo = new Class({\n  initialize: function MoveTo(x, y) {\n    //  Skip length calcs in paths\n\n    /**\r\n     * Denotes that this Curve does not influence the bounds, points, and drawing of its parent Path. Must be `false` or some methods in the parent Path will throw errors.\r\n     *\r\n     * @name Phaser.Curves.MoveTo#active\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n    this.active = false;\n    /**\r\n     * The lone point which this curve consists of.\r\n     *\r\n     * @name Phaser.Curves.MoveTo#p0\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.p0 = new Vector2(x, y);\n  },\n\n  /**\r\n   * Get point at relative position in curve according to length.\r\n   *\r\n   * @method Phaser.Curves.MoveTo#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getPoint: function getPoint(t, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    return out.copy(this.p0);\n  },\n\n  /**\r\n   * Retrieves the point at given position in the curve. This will always return this curve's only point.\r\n   *\r\n   * @method Phaser.Curves.MoveTo#getPointAt\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} u - The position in the path to retrieve, between 0 and 1. Not used.\r\n   * @param {Phaser.Math.Vector2} [out] - An optional vector in which to store the point.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The modified `out` vector, or a new `Vector2` if none was provided.\r\n   */\n  getPointAt: function getPointAt(u, out) {\n    return this.getPoint(u, out);\n  },\n\n  /**\r\n   * Gets the resolution of this curve.\r\n   *\r\n   * @method Phaser.Curves.MoveTo#getResolution\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The resolution of this curve. For a MoveTo the value is always 1.\r\n   */\n  getResolution: function getResolution() {\n    return 1;\n  },\n\n  /**\r\n   * Gets the length of this curve.\r\n   *\r\n   * @method Phaser.Curves.MoveTo#getLength\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this curve. For a MoveTo the value is always 0.\r\n   */\n  getLength: function getLength() {\n    return 0;\n  },\n\n  /**\r\n   * Converts this curve into a JSON-serializable object.\r\n   *\r\n   * @method Phaser.Curves.MoveTo#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {JSONCurve} A primitive object with the curve's type and only point.\r\n   */\n  toJSON: function toJSON() {\n    return {\n      type: 'MoveTo',\n      points: [this.p0.x, this.p0.y]\n    };\n  }\n});\nmodule.exports = MoveTo;","map":null,"metadata":{},"sourceType":"script"}