{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Takes the given string and pads it out, to the length required, using the character\r\n * specified. For example if you need a string to be 6 characters long, you can call:\r\n *\r\n * `pad('bob', 6, '-', 2)`\r\n *\r\n * This would return: `bob---` as it has padded it out to 6 characters, using the `-` on the right.\r\n *\r\n * You can also use it to pad numbers (they are always returned as strings):\r\n * \r\n * `pad(512, 6, '0', 1)`\r\n *\r\n * Would return: `000512` with the string padded to the left.\r\n *\r\n * If you don't specify a direction it'll pad to both sides:\r\n * \r\n * `pad('c64', 7, '*')`\r\n *\r\n * Would return: `**c64**`\r\n *\r\n * @function Phaser.Utils.String.Pad\r\n * @since 3.0.0\r\n *\r\n * @param {string} str - The target string. `toString()` will be called on the string, which means you can also pass in common data types like numbers.\r\n * @param {integer} [len=0] - The number of characters to be added.\r\n * @param {string} [pad=\" \"] - The string to pad it out with (defaults to a space).\r\n * @param {integer} [dir=3] - The direction dir = 1 (left), 2 (right), 3 (both).\r\n * \r\n * @return {string} The padded string.\r\n */\nvar Pad = function Pad(str, len, pad, dir) {\n  if (len === undefined) {\n    len = 0;\n  }\n\n  if (pad === undefined) {\n    pad = ' ';\n  }\n\n  if (dir === undefined) {\n    dir = 3;\n  }\n\n  str = str.toString();\n  var padlen = 0;\n\n  if (len + 1 >= str.length) {\n    switch (dir) {\n      case 1:\n        str = new Array(len + 1 - str.length).join(pad) + str;\n        break;\n\n      case 3:\n        var right = Math.ceil((padlen = len - str.length) / 2);\n        var left = padlen - right;\n        str = new Array(left + 1).join(pad) + str + new Array(right + 1).join(pad);\n        break;\n\n      default:\n        str = str + new Array(len + 1 - str.length).join(pad);\n        break;\n    }\n  }\n\n  return str;\n};\n\nmodule.exports = Pad;","map":null,"metadata":{},"sourceType":"script"}