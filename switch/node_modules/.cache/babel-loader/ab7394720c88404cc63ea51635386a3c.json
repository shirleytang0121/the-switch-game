{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Defaults = require('../tween/Defaults');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar GetBoolean = require('./GetBoolean');\n\nvar GetEaseFunction = require('./GetEaseFunction');\n\nvar GetNewValue = require('./GetNewValue');\n\nvar GetProps = require('./GetProps');\n\nvar GetTargets = require('./GetTargets');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar GetValueOp = require('./GetValueOp');\n\nvar Tween = require('../tween/Tween');\n\nvar TweenData = require('../tween/TweenData');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tweens.Builders.TweenBuilder\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)} parent - [description]\r\n * @param {object} config - [description]\r\n * @param {Phaser.Tweens.TweenConfigDefaults} defaults - Tween configuration defaults.\r\n`\r\n * @property {(object|object[])} targets - The object, or an array of objects, to run the tween on.\r\n * @property {number} [delay=0] - The number of milliseconds to delay before the tween will start.\r\n * @property {number} [duration=1000] - The duration of the tween in milliseconds.\r\n * @property {string} [ease='Power0'] - The easing equation to use for the tween.\r\n * @property {array} [easeParams] - Optional easing parameters.\r\n * @property {number} [hold=0] - The number of milliseconds to hold the tween for before yoyo'ing.\r\n * @property {number} [repeat=0] - The number of times to repeat the tween.\r\n * @property {number} [repeatDelay=0] - The number of milliseconds to pause before a tween will repeat.\r\n * @property {boolean} [yoyo=false] - Should the tween complete, then reverse the values incrementally to get back to the starting tween values? The reverse tweening will also take `duration` milliseconds to complete.\r\n * @property {boolean} [flipX=false] - Horizontally flip the target of the Tween when it completes (before it yoyos, if set to do so). Only works for targets that support the `flipX` property.\r\n * @property {boolean} [flipY=false] - Vertically flip the target of the Tween when it completes (before it yoyos, if set to do so). Only works for targets that support the `flipY` property.\r\n`\r\n{\r\n    targets: null,\r\n    delay: 0,\r\n    duration: 1000,\r\n    ease: 'Power0',\r\n    easeParams: null,\r\n    hold: 0,\r\n    repeat: 0,\r\n    repeatDelay: 0,\r\n    yoyo: false,\r\n    flipX: false,\r\n    flipY: false\r\n};\r\n *\r\n * @return {Phaser.Tweens.Tween} [description]\r\n */\n\n\nvar TweenBuilder = function TweenBuilder(parent, config, defaults) {\n  if (defaults === undefined) {\n    defaults = Defaults;\n  } //  Create arrays of the Targets and the Properties\n\n\n  var targets = defaults.targets ? defaults.targets : GetTargets(config); // var props = (defaults.props) ? defaults.props : GetProps(config);\n\n  var props = GetProps(config); //  Default Tween values\n\n  var delay = GetNewValue(config, 'delay', defaults.delay);\n  var duration = GetNewValue(config, 'duration', defaults.duration);\n  var easeParams = GetValue(config, 'easeParams', defaults.easeParams);\n  var ease = GetEaseFunction(GetValue(config, 'ease', defaults.ease), easeParams);\n  var hold = GetNewValue(config, 'hold', defaults.hold);\n  var repeat = GetNewValue(config, 'repeat', defaults.repeat);\n  var repeatDelay = GetNewValue(config, 'repeatDelay', defaults.repeatDelay);\n  var yoyo = GetBoolean(config, 'yoyo', defaults.yoyo);\n  var flipX = GetBoolean(config, 'flipX', defaults.flipX);\n  var flipY = GetBoolean(config, 'flipY', defaults.flipY);\n  var data = []; //  Loop through every property defined in the Tween, i.e.: props { x, y, alpha }\n\n  for (var p = 0; p < props.length; p++) {\n    var key = props[p].key;\n    var value = props[p].value; //  Create 1 TweenData per target, per property\n\n    for (var t = 0; t < targets.length; t++) {\n      var ops = GetValueOp(key, value);\n      var tweenData = TweenData(targets[t], key, ops.getEnd, ops.getStart, GetEaseFunction(GetValue(value, 'ease', ease), easeParams), GetNewValue(value, 'delay', delay), GetNewValue(value, 'duration', duration), GetBoolean(value, 'yoyo', yoyo), GetNewValue(value, 'hold', hold), GetNewValue(value, 'repeat', repeat), GetNewValue(value, 'repeatDelay', repeatDelay), GetBoolean(value, 'flipX', flipX), GetBoolean(value, 'flipY', flipY));\n      data.push(tweenData);\n    }\n  }\n\n  var tween = new Tween(parent, data, targets);\n  tween.offset = GetAdvancedValue(config, 'offset', null);\n  tween.completeDelay = GetAdvancedValue(config, 'completeDelay', 0);\n  tween.loop = Math.round(GetAdvancedValue(config, 'loop', 0));\n  tween.loopDelay = Math.round(GetAdvancedValue(config, 'loopDelay', 0));\n  tween.paused = GetBoolean(config, 'paused', false);\n  tween.useFrames = GetBoolean(config, 'useFrames', false); //  Set the Callbacks\n\n  var scope = GetValue(config, 'callbackScope', tween); //  Callback parameters: 0 = a reference to the Tween itself, 1 = the target/s of the Tween, ... your own params\n\n  var tweenArray = [tween, null];\n  var callbacks = Tween.TYPES;\n\n  for (var i = 0; i < callbacks.length; i++) {\n    var type = callbacks[i];\n    var callback = GetValue(config, type, false);\n\n    if (callback) {\n      var callbackScope = GetValue(config, type + 'Scope', scope);\n      var callbackParams = GetValue(config, type + 'Params', []); //  The null is reset to be the Tween target\n\n      tween.setCallback(type, callback, tweenArray.concat(callbackParams), callbackScope);\n    }\n  }\n\n  return tween;\n};\n\nmodule.exports = TweenBuilder;","map":null,"metadata":{},"sourceType":"script"}