{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('./components');\n\nvar Sprite = require('../../gameobjects/sprite/Sprite');\n/**\r\n * @classdesc\r\n * An Impact Physics Sprite Game Object.\r\n *\r\n * A Sprite Game Object is used for the display of both static and animated images in your game.\r\n * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\r\n * and animated.\r\n *\r\n * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\r\n * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\r\n * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.\r\n *\r\n * @class ImpactSprite\r\n * @extends Phaser.GameObjects.Sprite\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Physics.Impact.Components.Acceleration\r\n * @extends Phaser.Physics.Impact.Components.BodyScale\r\n * @extends Phaser.Physics.Impact.Components.BodyType\r\n * @extends Phaser.Physics.Impact.Components.Bounce\r\n * @extends Phaser.Physics.Impact.Components.CheckAgainst\r\n * @extends Phaser.Physics.Impact.Components.Collides\r\n * @extends Phaser.Physics.Impact.Components.Debug\r\n * @extends Phaser.Physics.Impact.Components.Friction\r\n * @extends Phaser.Physics.Impact.Components.Gravity\r\n * @extends Phaser.Physics.Impact.Components.Offset\r\n * @extends Phaser.Physics.Impact.Components.SetGameObject\r\n * @extends Phaser.Physics.Impact.Components.Velocity\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar ImpactSprite = new Class({\n  Extends: Sprite,\n  Mixins: [Components.Acceleration, Components.BodyScale, Components.BodyType, Components.Bounce, Components.CheckAgainst, Components.Collides, Components.Debug, Components.Friction, Components.Gravity, Components.Offset, Components.SetGameObject, Components.Velocity],\n  initialize: function ImpactSprite(world, x, y, texture, frame) {\n    Sprite.call(this, world.scene, x, y, texture, frame);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#body\r\n     * @type {Phaser.Physics.Impact.Body}\r\n     * @since 3.0.0\r\n     */\n\n    this.body = world.create(x - this.frame.centerX, y - this.frame.centerY, this.width, this.height);\n    this.body.parent = this;\n    this.body.gameObject = this;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#size\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = this.body.size;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#offset\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.offset = this.body.offset;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#vel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.vel = this.body.vel;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#accel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.accel = this.body.accel;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#friction\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.friction = this.body.friction;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactSprite#maxVel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVel = this.body.maxVel;\n  }\n});\nmodule.exports = ImpactSprite;","map":null,"metadata":{},"sourceType":"script"}