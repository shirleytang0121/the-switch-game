{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar MATH_CONST = require('../const');\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\n\n\nvar RotateTo = function RotateTo(currentAngle, targetAngle, lerp) {\n  if (lerp === undefined) {\n    lerp = 0.05;\n  }\n\n  if (currentAngle === targetAngle) {\n    return currentAngle;\n  }\n\n  if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= MATH_CONST.PI2 - lerp) {\n    currentAngle = targetAngle;\n  } else {\n    if (Math.abs(targetAngle - currentAngle) > Math.PI) {\n      if (targetAngle < currentAngle) {\n        targetAngle += MATH_CONST.PI2;\n      } else {\n        targetAngle -= MATH_CONST.PI2;\n      }\n    }\n\n    if (targetAngle > currentAngle) {\n      currentAngle += lerp;\n    } else if (targetAngle < currentAngle) {\n      currentAngle -= lerp;\n    }\n  }\n\n  return currentAngle;\n};\n\nmodule.exports = RotateTo;","map":null,"metadata":{},"sourceType":"script"}