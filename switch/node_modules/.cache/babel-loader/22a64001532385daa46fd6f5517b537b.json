{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Geom = require('../../geom/');\n\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar Intersects = require('../../geom/intersects/');\n\nvar NOOP = require('../../utils/NOOP');\n\nvar TileToWorldX = require('./TileToWorldX');\n\nvar TileToWorldY = require('./TileToWorldY');\n\nvar WorldToTileX = require('./WorldToTileX');\n\nvar WorldToTileY = require('./WorldToTileY');\n\nvar TriangleToRectangle = function TriangleToRectangle(triangle, rect) {\n  return Intersects.RectangleToTriangle(rect, triangle);\n}; // Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\n// coordinates instead of shifting the tiles.\n\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\n\n\nvar GetTilesWithinShape = function GetTilesWithinShape(shape, filteringOptions, camera, layer) {\n  if (shape === undefined) {\n    return [];\n  } // intersectTest is a function with parameters: shape, rect\n\n\n  var intersectTest = NOOP;\n\n  if (shape instanceof Geom.Circle) {\n    intersectTest = Intersects.CircleToRectangle;\n  } else if (shape instanceof Geom.Rectangle) {\n    intersectTest = Intersects.RectangleToRectangle;\n  } else if (shape instanceof Geom.Triangle) {\n    intersectTest = TriangleToRectangle;\n  } else if (shape instanceof Geom.Line) {\n    intersectTest = Intersects.LineToRectangle;\n  } // Top left corner of the shapes's bounding box, rounded down to include partial tiles\n\n\n  var xStart = WorldToTileX(shape.left, true, camera, layer);\n  var yStart = WorldToTileY(shape.top, true, camera, layer); // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\n\n  var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\n  var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer)); // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\n  // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\n\n  var width = Math.max(xEnd - xStart, 1);\n  var height = Math.max(yEnd - yStart, 1);\n  var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\n  var tileWidth = layer.tileWidth;\n  var tileHeight = layer.tileHeight;\n\n  if (layer.tilemapLayer) {\n    tileWidth *= layer.tilemapLayer.scaleX;\n    tileHeight *= layer.tilemapLayer.scaleY;\n  }\n\n  var results = [];\n  var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\n\n  for (var i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n    tileRect.x = TileToWorldX(tile.x, camera, layer);\n    tileRect.y = TileToWorldY(tile.y, camera, layer);\n\n    if (intersectTest(shape, tileRect)) {\n      results.push(tile);\n    }\n  }\n\n  return results;\n};\n\nmodule.exports = GetTilesWithinShape;","map":null,"metadata":{},"sourceType":"script"}