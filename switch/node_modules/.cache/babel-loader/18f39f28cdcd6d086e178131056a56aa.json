{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar Class = require('../utils/Class');\n\nvar IsSizePowerOfTwo = require('../math/pow2/IsSizePowerOfTwo');\n\nvar ScaleModes = require('../renderer/ScaleModes');\n/**\r\n * @classdesc\r\n * A Texture Source is the encapsulation of the actual source data for a Texture.\r\n * This is typically an Image Element, loaded from the file system or network, or a Canvas Element.\r\n *\r\n * A Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.\r\n *\r\n * @class TextureSource\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture this TextureSource belongs to.\r\n * @param {(HTMLImageElement|HTMLCanvasElement)} source - The source image data.\r\n * @param {integer} [width] - Optional width of the source image. If not given it's derived from the source itself.\r\n * @param {integer} [height] - Optional height of the source image. If not given it's derived from the source itself.\r\n */\n\n\nvar TextureSource = new Class({\n  initialize: function TextureSource(texture, source, width, height) {\n    var game = texture.manager.game;\n    /**\r\n     * The Texture this TextureSource belongs to.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#renderer\r\n     * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n     * @since 3.7.0\r\n     */\n\n    this.renderer = game.renderer;\n    /**\r\n     * The Texture this TextureSource belongs to.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = texture;\n    /**\r\n     * The source of the image data.\r\n     * This is either an Image Element, a Canvas Element or a RenderTexture.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#source\r\n     * @type {(HTMLImageElement|HTMLCanvasElement|Phaser.GameObjects.RenderTexture)}\r\n     * @since 3.12.0\r\n     */\n\n    this.source = source;\n    /**\r\n     * The image data.\r\n     * This is either an Image element or a Canvas element.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#image\r\n     * @type {(HTMLImageElement|HTMLCanvasElement)}\r\n     * @since 3.0.0\r\n     */\n\n    this.image = source;\n    /**\r\n     * Currently un-used.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#compressionAlgorithm\r\n     * @type {integer}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.compressionAlgorithm = null;\n    /**\r\n     * The resolution of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#resolution\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.resolution = 1;\n    /**\r\n     * The width of the source image. If not specified in the constructor it will check\r\n     * the `naturalWidth` and then `width` properties of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#width\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width || source.naturalWidth || source.width || 0;\n    /**\r\n     * The height of the source image. If not specified in the constructor it will check\r\n     * the `naturalHeight` and then `height` properties of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#height\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height || source.naturalHeight || source.height || 0;\n    /**\r\n     * The Scale Mode the image will use when rendering.\r\n     * Either Linear or Nearest.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#scaleMode\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleMode = ScaleModes.DEFAULT;\n    /**\r\n     * Is the source image a Canvas Element?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isCanvas\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.isCanvas = source instanceof HTMLCanvasElement;\n    /**\r\n     * Is the source image a Render Texture?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isRenderTexture\r\n     * @type {boolean}\r\n     * @since 3.12.0\r\n     */\n\n    this.isRenderTexture = source.type === 'RenderTexture';\n    /**\r\n     * Are the source image dimensions a power of two?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isPowerOf2\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.isPowerOf2 = IsSizePowerOfTwo(this.width, this.height);\n    /**\r\n     * The WebGL Texture of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.glTexture = null;\n    this.init(game);\n  },\n\n  /**\r\n   * Creates a WebGL Texture, if required, and sets the Texture filter mode.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#init\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Game} game - A reference to the Phaser Game instance.\r\n   */\n  init: function init(game) {\n    if (this.renderer) {\n      if (this.renderer.gl) {\n        if (this.isCanvas) {\n          this.glTexture = this.renderer.canvasToTexture(this.image);\n        } else if (this.isRenderTexture) {\n          this.image = this.source.canvas;\n          this.glTexture = this.renderer.createTextureFromSource(null, this.width, this.height, this.scaleMode);\n        } else {\n          this.glTexture = this.renderer.createTextureFromSource(this.image, this.width, this.height, this.scaleMode);\n        }\n      } else if (this.isRenderTexture) {\n        this.image = this.source.canvas;\n      }\n    }\n\n    if (!game.config.antialias) {\n      this.setFilter(1);\n    }\n  },\n\n  /**\r\n   * Sets the Filter Mode for this Texture.\r\n   *\r\n   * The mode can be either Linear, the default, or Nearest.\r\n   *\r\n   * For pixel-art you should use Nearest.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#setFilter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n   */\n  setFilter: function setFilter(filterMode) {\n    if (this.renderer.gl) {\n      this.renderer.setTextureFilter(this.glTexture, filterMode);\n    }\n  },\n\n  /**\r\n   * If this TextureSource is backed by a Canvas and is running under WebGL,\r\n   * it updates the WebGLTexture using the canvas data.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#update\r\n   * @since 3.7.0\r\n   */\n  update: function update() {\n    if (this.renderer.gl && this.isCanvas) {\n      this.glTexture = this.renderer.canvasToTexture(this.image, this.glTexture); //  Update all the Frames using this TextureSource\n\n      /*\r\n      var index = this.texture.getTextureSourceIndex(this);\r\n      \r\n      var frames = this.texture.getFramesFromTextureSource(index, true);\r\n        for (var i = 0; i < frames.length; i++)\r\n      {\r\n          frames[i].glTexture = this.glTexture;\r\n      }\r\n      */\n    }\n  },\n\n  /**\r\n   * Destroys this Texture Source and nulls the references.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    if (this.glTexture) {\n      this.renderer.deleteTexture(this.glTexture);\n    }\n\n    if (this.isCanvas) {\n      CanvasPool.remove(this.image);\n    }\n\n    this.renderer = null;\n    this.texture = null;\n    this.source = null;\n    this.image = null;\n    this.glTexture = null;\n  }\n});\nmodule.exports = TextureSource;","map":null,"metadata":{},"sourceType":"script"}