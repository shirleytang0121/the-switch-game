{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n/**\r\n * @classdesc\r\n * The Update List plugin.\r\n *\r\n * Update Lists belong to a Scene and maintain the list Game Objects to be updated every frame.\r\n *\r\n * Some or all of these Game Objects may also be part of the Scene's [Display List]{@link Phaser.GameObjects.DisplayList}, for Rendering.\r\n *\r\n * @class UpdateList\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that the Update List belongs to.\r\n */\n\n\nvar UpdateList = new Class({\n  initialize: function UpdateList(scene) {\n    /**\r\n     * The Scene that the Update List belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * The Scene's Systems.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * The list of Game Objects.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#_list\r\n     * @type {array}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._list = [];\n    /**\r\n     * Game Objects that are pending insertion into the list.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#_pendingInsertion\r\n     * @type {array}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._pendingInsertion = [];\n    /**\r\n     * Game Objects that are pending removal from the list.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#_pendingRemoval\r\n     * @type {array}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._pendingRemoval = [];\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.on(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Add a Game Object to the Update List.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to add.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The added Game Object.\r\n   */\n  add: function add(child) {\n    //  Is child already in this list?\n    if (this._list.indexOf(child) === -1 && this._pendingInsertion.indexOf(child) === -1) {\n      this._pendingInsertion.push(child);\n    }\n\n    return child;\n  },\n\n  /**\r\n   * The pre-update step.\r\n   *\r\n   * Handles Game Objects that are pending insertion to and removal from the list.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#preUpdate\r\n   * @since 3.0.0\r\n   */\n  preUpdate: function preUpdate() {\n    var toRemove = this._pendingRemoval.length;\n    var toInsert = this._pendingInsertion.length;\n\n    if (toRemove === 0 && toInsert === 0) {\n      //  Quick bail\n      return;\n    }\n\n    var i;\n    var gameObject; //  Delete old gameObjects\n\n    for (i = 0; i < toRemove; i++) {\n      gameObject = this._pendingRemoval[i];\n\n      var index = this._list.indexOf(gameObject);\n\n      if (index > -1) {\n        this._list.splice(index, 1);\n      }\n    } //  Move pending to active\n\n\n    this._list = this._list.concat(this._pendingInsertion.splice(0)); //  Clear the lists\n\n    this._pendingRemoval.length = 0;\n    this._pendingInsertion.length = 0;\n  },\n\n  /**\r\n   * The update step.\r\n   *\r\n   * Pre-updates every active Game Object in the list.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp.\r\n   * @param {number} delta - The delta time elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    for (var i = 0; i < this._list.length; i++) {\n      var gameObject = this._list[i];\n\n      if (gameObject.active) {\n        gameObject.preUpdate.call(gameObject, time, delta);\n      }\n    }\n  },\n\n  /**\r\n   * Remove a Game Object from the list.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to remove from the list.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The removed Game Object.\r\n   */\n  remove: function remove(child) {\n    var index = this._list.indexOf(child);\n\n    if (index !== -1) {\n      this._list.splice(index, 1);\n    }\n\n    return child;\n  },\n\n  /**\r\n   * Remove all Game Objects from the list.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#removeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.UpdateList} This UpdateList.\r\n   */\n  removeAll: function removeAll() {\n    var i = this._list.length;\n\n    while (i--) {\n      this.remove(this._list[i]);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    var i = this._list.length;\n\n    while (i--) {\n      this._list[i].destroy(true);\n    }\n\n    i = this._pendingRemoval.length;\n\n    while (i--) {\n      this._pendingRemoval[i].destroy(true);\n    }\n\n    i = this._pendingInsertion.length;\n\n    while (i--) {\n      this._pendingInsertion[i].destroy(true);\n    }\n\n    this._list.length = 0;\n    this._pendingRemoval.length = 0;\n    this._pendingInsertion.length = 0;\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.off(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.GameObjects.UpdateList#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  },\n\n  /**\r\n   * The length of the list.\r\n   *\r\n   * @name Phaser.GameObjects.UpdateList#length\r\n   * @type {integer}\r\n   * @readonly\r\n   * @since 3.10.0\r\n   */\n  length: {\n    get: function get() {\n      return this._list.length;\n    }\n  }\n});\nPluginCache.register('UpdateList', UpdateList, 'updateList');\nmodule.exports = UpdateList;","map":null,"metadata":{},"sourceType":"script"}