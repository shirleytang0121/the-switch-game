{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../../gameobjects/components');\n\nvar CONST = require('../../const');\n\nvar GameObject = require('../../gameobjects/GameObject');\n\nvar StaticTilemapLayerRender = require('./StaticTilemapLayerRender');\n\nvar TilemapComponents = require('../components');\n\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\n\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * @classdesc\r\n * A Static Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Static Tilemap Layer is optimized for rendering speed over flexibility. You cannot apply per-tile\r\n * effects like tint or alpha, or change the tiles or tilesets the layer uses.\r\n * \r\n * Use a Static Tilemap Layer instead of a Dynamic Tilemap Layer when you don't need tile manipulation features.\r\n *\r\n * @class StaticTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\n\n\nvar StaticTilemapLayer = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.Flip, Components.GetBounds, Components.Origin, Components.Pipeline, Components.ScaleMode, Components.Transform, Components.Visible, Components.ScrollFactor, StaticTilemapLayerRender],\n  initialize: function StaticTilemapLayer(scene, tilemap, layerIndex, tileset, x, y) {\n    GameObject.call(this, scene, 'StaticTilemapLayer');\n    /**\r\n     * Used internally by physics system to perform fast type checks.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#isTilemap\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.isTilemap = true;\n    /**\r\n     * The Tilemap that this layer is a part of.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#tilemap\r\n     * @type {Phaser.Tilemaps.Tilemap}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilemap = tilemap;\n    /**\r\n     * The index of the LayerData associated with this layer.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#layerIndex\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.layerIndex = layerIndex;\n    /**\r\n     * The LayerData associated with this layer. LayerData can only be associated with one\r\n     * tilemap layer.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\n\n    this.layer = tilemap.layers[layerIndex]; // Link the LayerData with this static tilemap layer\n\n    this.layer.tilemapLayer = this;\n    /**\r\n     * The Tileset/s associated with this layer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#tileset\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileset = [];\n    /**\r\n     * Used internally by the Canvas renderer.\r\n     * This holds the tiles that are visible within the camera in the last frame.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#culledTiles\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.culledTiles = [];\n    /**\r\n     * Canvas only.\r\n     * \r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n     * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#skipCull\r\n     * @type {boolean}\r\n     * @since 3.12.0\r\n     */\n\n    this.skipCull = false;\n    /**\r\n     * Canvas only.\r\n     * \r\n     * The total number of tiles drawn by the renderer in the last frame.\r\n     * \r\n     * This only works when rending with Canvas.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#tilesDrawn\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.12.0\r\n     */\n\n    this.tilesDrawn = 0;\n    /**\r\n     * Canvas only.\r\n     * \r\n     * The total number of tiles in this layer. Updated every frame.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#tilesTotal\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.12.0\r\n     */\n\n    this.tilesTotal = this.layer.width * this.layer.height;\n    /**\r\n     * Canvas only.\r\n     * \r\n     * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingX\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.12.0\r\n     */\n\n    this.cullPaddingX = 1;\n    /**\r\n     * Canvas only.\r\n     * \r\n     * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingY\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.12.0\r\n     */\n\n    this.cullPaddingY = 1;\n    /**\r\n     * Canvas only.\r\n     * \r\n     * The callback that is invoked when the tiles are culled.\r\n     *\r\n     * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n     *\r\n     * It will be sent 3 arguments:\r\n     *\r\n     * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n     * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n     * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n     *\r\n     * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#cullCallback\r\n     * @type {function}\r\n     * @since 3.12.0\r\n     */\n\n    this.cullCallback = TilemapComponents.CullTiles;\n    /**\r\n     * A reference to the renderer.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#renderer\r\n     * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.renderer = scene.sys.game.renderer;\n    /**\r\n     * An array of vertex buffer objects, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#vertexBuffer\r\n     * @type {WebGLBuffer[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexBuffer = [];\n    /**\r\n     * An array of ArrayBuffer objects, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#bufferData\r\n     * @type {ArrayBuffer[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.bufferData = [];\n    /**\r\n     * An array of Float32 Array objects, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewF32\r\n     * @type {Float32Array[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexViewF32 = [];\n    /**\r\n     * An array of Uint32 Array objects, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewU32\r\n     * @type {Uint32Array[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexViewU32 = [];\n    /**\r\n     * An array of booleans, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single boolean.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#dirty\r\n     * @type {boolean[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.dirty = [];\n    /**\r\n     * An array of integers, used by the WebGL renderer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single integer.\r\n     * \r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#vertexCount\r\n     * @type {integer[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexCount = [];\n    /**\r\n     * The rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * This can be changed via the `setRenderOrder` method.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#_renderOrder\r\n     * @type {integer}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this._renderOrder = 0;\n    /**\r\n     * A temporary Transform Matrix, re-used internally during batching.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#_tempMatrix\r\n     * @private\r\n     * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n     * @since 3.14.0\r\n     */\n\n    this._tempMatrix = new TransformMatrix();\n    /**\r\n     * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n     *\r\n     * @name Phaser.Tilemaps.StaticTilemapLayer#gidMap\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.14.0\r\n     */\n\n    this.gidMap = [];\n    this.setTilesets(tileset);\n    this.setAlpha(this.layer.alpha);\n    this.setPosition(x, y);\n    this.setOrigin();\n    this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\n    this.updateVBOData();\n    this.initPipeline('TextureTintPipeline');\n\n    if (scene.sys.game.config.renderType === CONST.WEBGL) {\n      scene.sys.game.renderer.onContextRestored(function () {\n        this.updateVBOData();\n      }, this);\n    }\n  },\n\n  /**\r\n   * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setTilesets\r\n   * @private\r\n   * @since 3.14.0\r\n   * \r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   */\n  setTilesets: function setTilesets(tilesets) {\n    var gidMap = [];\n    var setList = [];\n    var map = this.tilemap;\n\n    if (!Array.isArray(tilesets)) {\n      tilesets = [tilesets];\n    }\n\n    for (var i = 0; i < tilesets.length; i++) {\n      var tileset = tilesets[i];\n\n      if (typeof tileset === 'string') {\n        tileset = map.getTileset(tileset);\n      }\n\n      if (tileset) {\n        setList.push(tileset);\n        var s = tileset.firstgid;\n\n        for (var t = 0; t < tileset.total; t++) {\n          gidMap[s + t] = tileset;\n        }\n      }\n    }\n\n    this.gidMap = gidMap;\n    this.tileset = setList;\n  },\n\n  /**\r\n   * Prepares the VBO data arrays for population by the `upload` method.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#updateVBOData\r\n   * @private\r\n   * @since 3.14.0\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  updateVBOData: function updateVBOData() {\n    for (var i = 0; i < this.tileset.length; i++) {\n      this.dirty[i] = true;\n      this.vertexCount[i] = 0;\n      this.vertexBuffer[i] = null;\n      this.bufferData[i] = null;\n      this.vertexViewF32[i] = null;\n      this.vertexViewU32[i] = null;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Upload the tile data to a VBO.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#upload\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to render to.\r\n   * @param {integer} tilesetIndex - The tileset index.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  upload: function upload(camera, tilesetIndex) {\n    var renderer = this.renderer;\n    var gl = renderer.gl;\n    var pipeline = renderer.pipelines.TextureTintPipeline;\n\n    if (this.dirty[tilesetIndex]) {\n      var tileset = this.tileset[tilesetIndex];\n      var mapWidth = this.layer.width;\n      var mapHeight = this.layer.height;\n      var width = tileset.image.source[0].width;\n      var height = tileset.image.source[0].height;\n      var mapData = this.layer.data;\n      var tile;\n      var row;\n      var col;\n      var renderOrder = this._renderOrder;\n      var minTileIndex = tileset.firstgid;\n      var maxTileIndex = tileset.firstgid + tileset.total;\n      var vertexBuffer = this.vertexBuffer[tilesetIndex];\n      var bufferData = this.bufferData[tilesetIndex];\n      var vOffset = -1;\n      var bufferSize = mapWidth * mapHeight * pipeline.vertexSize * 6;\n      this.vertexCount[tilesetIndex] = 0;\n\n      if (bufferData === null) {\n        bufferData = new ArrayBuffer(bufferSize);\n        this.bufferData[tilesetIndex] = bufferData;\n        this.vertexViewF32[tilesetIndex] = new Float32Array(bufferData);\n        this.vertexViewU32[tilesetIndex] = new Uint32Array(bufferData);\n      }\n\n      if (renderOrder === 0) {\n        //  right-down\n        for (row = 0; row < mapHeight; row++) {\n          for (col = 0; col < mapWidth; col++) {\n            tile = mapData[row][col];\n\n            if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible) {\n              continue;\n            }\n\n            vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\n          }\n        }\n      } else if (renderOrder === 1) {\n        //  left-down\n        for (row = 0; row < mapHeight; row++) {\n          for (col = mapWidth - 1; col >= 0; col--) {\n            tile = mapData[row][col];\n\n            if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible) {\n              continue;\n            }\n\n            vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\n          }\n        }\n      } else if (renderOrder === 2) {\n        //  right-up\n        for (row = mapHeight - 1; row >= 0; row--) {\n          for (col = 0; col < mapWidth; col++) {\n            tile = mapData[row][col];\n\n            if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible) {\n              continue;\n            }\n\n            vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\n          }\n        }\n      } else if (renderOrder === 3) {\n        //  left-up\n        for (row = mapHeight - 1; row >= 0; row--) {\n          for (col = mapWidth - 1; col >= 0; col--) {\n            tile = mapData[row][col];\n\n            if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible) {\n              continue;\n            }\n\n            vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\n          }\n        }\n      }\n\n      this.dirty[tilesetIndex] = false;\n\n      if (vertexBuffer === null) {\n        vertexBuffer = renderer.createVertexBuffer(bufferData, gl.STATIC_DRAW);\n        this.vertexBuffer[tilesetIndex] = vertexBuffer;\n      } else {\n        renderer.setVertexBuffer(vertexBuffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufferData);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a single tile into the batch.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#batchTile\r\n   * @private\r\n   * @since 3.12.0\r\n   *\r\n   * @param {integer} vOffset - The vertex offset.\r\n   * @param {any} tile - The tile being rendered.\r\n   * @param {any} tileset - The tileset being used for rendering.\r\n   * @param {integer} width - The width of the tileset image in pixels.\r\n   * @param {integer} height - The height of the tileset image in pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera the layer is being rendered with.\r\n   * @param {integer} tilesetIndex - The tileset index.\r\n   *\r\n   * @return {integer} The new vOffset value.\r\n   */\n  batchTile: function batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex) {\n    var texCoords = tileset.getTileTextureCoordinates(tile.index);\n\n    if (!texCoords) {\n      return vOffset;\n    }\n\n    var tileWidth = tileset.tileWidth;\n    var tileHeight = tileset.tileHeight;\n    var halfTileWidth = tileWidth / 2;\n    var halfTileHeight = tileHeight / 2;\n    var u0 = texCoords.x / width;\n    var v0 = texCoords.y / height;\n    var u1 = (texCoords.x + tileWidth) / width;\n    var v1 = (texCoords.y + tileHeight) / height;\n    var matrix = this._tempMatrix;\n    var x = -halfTileWidth;\n    var y = -halfTileHeight;\n\n    if (tile.flipX) {\n      tileWidth *= -1;\n      x += tileset.tileWidth;\n    }\n\n    if (tile.flipY) {\n      tileHeight *= -1;\n      y += tileset.tileHeight;\n    }\n\n    var xw = x + tileWidth;\n    var yh = y + tileHeight;\n    matrix.applyITRS(halfTileWidth + tile.pixelX, halfTileHeight + tile.pixelY, tile.rotation, 1, 1);\n    var tint = Utils.getTintAppendFloatAlpha(0xffffff, camera.alpha * this.alpha * tile.alpha);\n    var tx0 = matrix.getX(x, y);\n    var ty0 = matrix.getY(x, y);\n    var tx1 = matrix.getX(x, yh);\n    var ty1 = matrix.getY(x, yh);\n    var tx2 = matrix.getX(xw, yh);\n    var ty2 = matrix.getY(xw, yh);\n    var tx3 = matrix.getX(xw, y);\n    var ty3 = matrix.getY(xw, y);\n\n    if (camera.roundPixels) {\n      tx0 = Math.round(tx0);\n      ty0 = Math.round(ty0);\n      tx1 = Math.round(tx1);\n      ty1 = Math.round(ty1);\n      tx2 = Math.round(tx2);\n      ty2 = Math.round(ty2);\n      tx3 = Math.round(tx3);\n      ty3 = Math.round(ty3);\n    }\n\n    var vertexViewF32 = this.vertexViewF32[tilesetIndex];\n    var vertexViewU32 = this.vertexViewU32[tilesetIndex];\n    vertexViewF32[++vOffset] = tx0;\n    vertexViewF32[++vOffset] = ty0;\n    vertexViewF32[++vOffset] = u0;\n    vertexViewF32[++vOffset] = v0;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    vertexViewF32[++vOffset] = tx1;\n    vertexViewF32[++vOffset] = ty1;\n    vertexViewF32[++vOffset] = u0;\n    vertexViewF32[++vOffset] = v1;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    vertexViewF32[++vOffset] = tx2;\n    vertexViewF32[++vOffset] = ty2;\n    vertexViewF32[++vOffset] = u1;\n    vertexViewF32[++vOffset] = v1;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    vertexViewF32[++vOffset] = tx0;\n    vertexViewF32[++vOffset] = ty0;\n    vertexViewF32[++vOffset] = u0;\n    vertexViewF32[++vOffset] = v0;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    vertexViewF32[++vOffset] = tx2;\n    vertexViewF32[++vOffset] = ty2;\n    vertexViewF32[++vOffset] = u1;\n    vertexViewF32[++vOffset] = v1;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    vertexViewF32[++vOffset] = tx3;\n    vertexViewF32[++vOffset] = ty3;\n    vertexViewF32[++vOffset] = u1;\n    vertexViewF32[++vOffset] = v0;\n    vertexViewF32[++vOffset] = 0;\n    vertexViewU32[++vOffset] = tint;\n    this.vertexCount[tilesetIndex] += 6;\n    return vOffset;\n  },\n\n  /**\r\n   * Sets the rendering (draw) order of the tiles in this layer.\r\n   * \r\n   * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n   * drawing to the right and then moving down to the next row.\r\n   * \r\n   * The draw orders are:\r\n   * \r\n   * 0 = right-down\r\n   * 1 = left-down\r\n   * 2 = right-up\r\n   * 3 = left-up\r\n   * \r\n   * Setting the render order does not change the tiles or how they are stored in the layer,\r\n   * it purely impacts the order in which they are rendered.\r\n   * \r\n   * You can provide either an integer (0 to 3), or the string version of the order.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setRenderOrder\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setRenderOrder: function setRenderOrder(renderOrder) {\n    var orders = ['right-down', 'left-down', 'right-up', 'left-up'];\n\n    if (typeof renderOrder === 'string') {\n      renderOrder = orders.indexOf(renderOrder);\n    }\n\n    if (renderOrder >= 0 && renderOrder < 4) {\n      this._renderOrder = renderOrder;\n\n      for (var i = 0; i < this.tileset.length; i++) {\n        this.dirty[i] = true;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n   * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n   * internally to optimize recalculating faces when only one tile has been changed.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate.\r\n   * @param {integer} tileY - The y coordinate.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesAt: function calculateFacesAt(tileX, tileY) {\n    TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n   * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n   * is mostly used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesWithin: function calculateFacesWithin(tileX, tileY, width, height) {\n    TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n   * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n   * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n   * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#createFromTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n   * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n   * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n   * one-to-one mapping with the indexes array.\r\n   * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n   * scene.make.sprite).\r\n   * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n   */\n  createFromTiles: function createFromTiles(indexes, replacements, spriteConfig, scene, camera) {\n    return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\n  },\n\n  /**\r\n   * Returns the tiles in the given layer that are within the cameras viewport.\r\n   * This is used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#cull\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  cull: function cull(camera) {\n    return this.cullCallback(this.layer, camera, this.culledTiles);\n  },\n\n  /**\r\n   * Canvas only.\r\n   * \r\n   * You can control if the Cameras should cull tiles before rendering them or not.\r\n   * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n   *\r\n   * However, there are some instances when you may wish to disable this.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setSkipCull\r\n   * @since 3.12.0\r\n   *\r\n   * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setSkipCull: function setSkipCull(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.skipCull = value;\n    return this;\n  },\n\n  /**\r\n   * Canvas only.\r\n   * \r\n   * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n   * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n   * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n   * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n   * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCullPadding\r\n   * @since 3.12.0\r\n   *\r\n   * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n   * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setCullPadding: function setCullPadding(paddingX, paddingY) {\n    if (paddingX === undefined) {\n      paddingX = 1;\n    }\n\n    if (paddingY === undefined) {\n      paddingY = 1;\n    }\n\n    this.cullPaddingX = paddingX;\n    this.cullPaddingY = paddingY;\n    return this;\n  },\n\n  /**\r\n   * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n   * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n   * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n   * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n   * the top-left.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#findByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index value to search for.\r\n   * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n   * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n   * bottom-right. Otherwise it scans from the top-left.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  findByIndex: function findByIndex(findIndex, skip, reverse) {\n    return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\n  },\n\n  /**\r\n   * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n   * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n   * true. Similar to Array.prototype.find in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#findTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile}\r\n   */\n  findTile: function findTile(callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n   * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#filterTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n   * filter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  filterTiles: function filterTiles(callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#forEachTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  forEachTile: function forEachTile(callback, context, tileX, tileY, width, height, filteringOptions) {\n    TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Gets a tile at the given tile coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n   * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n   * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n   * object with an index of -1.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n   */\n  getTileAt: function getTileAt(tileX, tileY, nonNull) {\n    return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\n  },\n\n  /**\r\n   * Gets a tile at the given world coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - X position to get the tile from (given in pixels)\r\n   * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n   * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n   * object with an index of -1.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n   * were invalid.\r\n   */\n  getTileAtWorldXY: function getTileAtWorldXY(worldX, worldY, nonNull, camera) {\n    return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithin: function getTilesWithin(tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {number} worldY - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {number} width - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {number} height - How many tiles high from the `tileY` index the area will be.\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinWorldXY: function getTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n   * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n   * @param {FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinShape: function getTilesWithinShape(shape, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - X position to get the tile from in tile coordinates.\r\n   * @param {integer} tileY - Y position to get the tile from in tile coordinates.\r\n   *\r\n   * @return {boolean}\r\n   */\n  hasTileAt: function hasTileAt(tileX, tileY) {\n    return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The X coordinate of the world position.\r\n   * @param {number} worldY - The Y coordinate of the world position.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {boolean}\r\n   */\n  hasTileAtWorldXY: function hasTileAtWorldXY(worldX, worldY, camera) {\n    return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\n  },\n\n  /**\r\n   * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n   * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n   * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n   * wherever you want on the screen.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#renderDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n   * @param {StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  renderDebug: function renderDebug(graphics, styleConfig) {\n    TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n   * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n   * collision will be enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n   * collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n   * update.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollision: function setCollision(indexes, collides, recalculateFaces) {\n    TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n   * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n   * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n   * enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} start - The first index of the tile to be set for collision.\r\n   * @param {integer} stop - The last index of the tile to be set for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n   * collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n   * update.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionBetween: function setCollisionBetween(start, stop, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n   * that matches the given properties object, its collision flag will be set. The `collides`\r\n   * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n   * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n   * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n   * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n   * \"types\" property that matches any of those values, its collision flag will be updated.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByProperty\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} properties - An object with tile properties and corresponding values that should\r\n   * be checked.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n   * collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n   * update.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByProperty: function setCollisionByProperty(properties, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n   * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n   * disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByExclusion\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n   * collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n   * update.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByExclusion: function setCollisionByExclusion(indexes, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n   * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n   * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n   * at a specific location on the map then see setTileLocationCallback.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setTileIndexCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n   * collision callback set for.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} callbackContext - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileIndexCallback: function setTileIndexCallback(indexes, callback, callbackContext) {\n    TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n   * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n   * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n   * controls if collision will be enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionFromCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n   * collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n   * update.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionFromCollisionGroup: function setCollisionFromCollisionGroup(collides, recalculateFaces) {\n    TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n   * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n   * remove it.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#setTileLocationCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The leftmost tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} tileY - The topmost tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} [callbackContext] - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileLocationCallback: function setTileLocationCallback(tileX, tileY, width, height, callback, callbackContext) {\n    TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The X coordinate, in tile coordinates.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldX: function tileToWorldX(tileX, camera) {\n    return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileY - The Y coordinate, in tile coordinates.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldY: function tileToWorldY(tileY, camera) {\n    return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The X coordinate, in tile coordinates.\r\n   * @param {integer} tileY - The Y coordinate, in tile coordinates.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  tileToWorldXY: function tileToWorldXY(tileX, tileY, point, camera) {\n    return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The X coordinate, in world pixels.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n   * nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.]\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileX: function worldToTileX(worldX, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldY - The Y coordinate, in world pixels.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n   * nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileY: function worldToTileY(worldY, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The X coordinate, in world pixels.\r\n   * @param {number} worldY - The Y coordinate, in world pixels.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n   * nearest integer.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  worldToTileXY: function worldToTileXY(worldX, worldY, snapToFloor, point, camera) {\n    return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\n  },\n\n  /**\r\n   * Destroys this StaticTilemapLayer and removes its link to the associated LayerData.\r\n   *\r\n   * @method Phaser.Tilemaps.StaticTilemapLayer#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    // Uninstall this layer only if it is still installed on the LayerData object\n    if (this.layer.tilemapLayer === this) {\n      this.layer.tilemapLayer = undefined;\n    }\n\n    this.tilemap = undefined;\n    this.layer = undefined;\n    this.culledTiles.length = 0;\n    this.cullCallback = null;\n\n    for (var i = 0; i < this.tileset.length; i++) {\n      this.dirty[i] = true;\n      this.vertexCount[i] = 0;\n      this.vertexBuffer[i] = null;\n      this.bufferData[i] = null;\n      this.vertexViewF32[i] = null;\n      this.vertexViewU32[i] = null;\n    }\n\n    this.gidMap = [];\n    this.tileset = [];\n    GameObject.prototype.destroy.call(this);\n  }\n});\nmodule.exports = StaticTilemapLayer;","map":null,"metadata":{},"sourceType":"script"}