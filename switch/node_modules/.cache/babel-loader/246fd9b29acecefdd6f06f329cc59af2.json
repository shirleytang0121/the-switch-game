{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar Line = require('../line/Line');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)\r\n *\r\n * @class Rectangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The X coordinate of the top left corner of the Rectangle.\r\n * @param {number} [y=0] - The Y coordinate of the top left corner of the Rectangle.\r\n * @param {number} [width=0] - The width of the Rectangle.\r\n * @param {number} [height=0] - The height of the Rectangle.\r\n */\n\n\nvar Rectangle = new Class({\n  initialize: function Rectangle(x, y, width, height) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 0;\n    }\n\n    if (height === undefined) {\n      height = 0;\n    }\n    /**\r\n     * The X coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x = x;\n    /**\r\n     * The Y coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#width\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#height\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n  },\n\n  /**\r\n   * Checks if the given point is inside the Rectangle's bounds.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the point to check.\r\n   * @param {number} y - The Y coordinate of the point to check.\r\n   *\r\n   * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n   */\n  contains: function contains(x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\r\n   * \r\n   * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\r\n   * \r\n   * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - The normalized distance into the Rectangle's perimeter to return.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - An object to update with the `x` and `y` coordinates of the point.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} The updated `output` object, or a new Point if no `output` object was given.\r\n   */\n  getPoint: function getPoint(position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Returns an array of points from the perimeter of the Rectangle, each spaced out based on the quantity or step required.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The number of points to return. Set to `false` or 0 to return an arbitrary number of points (`perimeter / stepRate`) evenly spaced around the Rectangle based on the `stepRate`.\r\n   * @param {number} [stepRate] - If `quantity` is 0, determines the normalized distance between each returned point.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An array to which to append the points.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} The modified `output` array, or a new array if none was provided.\r\n   */\n  getPoints: function getPoints(quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a random point within the Rectangle's bounds.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {Phaser.Geom.Point} [point] - The object in which to store the `x` and `y` coordinates of the point.\r\n   *\r\n   * @return {Phaser.Geom.Point} The updated `point`, or a new Point if none was provided.\r\n   */\n  getRandomPoint: function getRandomPoint(point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets the position, width, and height of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n   * @param {number} y - The Y coordinate of the top left corner of the Rectangle.\r\n   * @param {number} width - The width of the Rectangle.\r\n   * @param {number} height - The height of the Rectangle.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setTo: function setTo(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Resets the position, width, and height of the Rectangle to 0.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setEmpty: function setEmpty() {\n    return this.setTo(0, 0, 0, 0);\n  },\n\n  /**\r\n   * Sets the position of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n   * @param {number} [y=x] - The Y coordinate of the top left corner of the Rectangle.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setPosition: function setPosition(x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the width and height of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width to set the Rectangle to.\r\n   * @param {number} [height=width] - The height to set the Rectangle to.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setSize: function setSize(width, height) {\n    if (height === undefined) {\n      height = width;\n    }\n\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Determines if the Rectangle is empty. A Rectangle is empty if its width or height is less than or equal to 0.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#isEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Rectangle is empty. A Rectangle object is empty if its width or height is less than or equal to 0.\r\n   */\n  isEmpty: function isEmpty() {\n    return this.width <= 0 || this.height <= 0;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the top of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the top of this Rectangle.\r\n   */\n  getLineA: function getLineA(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x, this.y, this.right, this.y);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the right of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the right of this Rectangle.\r\n   */\n  getLineB: function getLineB(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.right, this.y, this.right, this.bottom);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the bottom of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineC\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the bottom of this Rectangle.\r\n   */\n  getLineC: function getLineC(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.right, this.bottom, this.x, this.bottom);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the left of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineD\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the left of this Rectangle.\r\n   */\n  getLineD: function getLineD(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x, this.bottom, this.x, this.y);\n    return line;\n  },\n\n  /**\r\n   * The x coordinate of the left of the Rectangle.\r\n   * Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function get() {\n      return this.x;\n    },\n    set: function set(value) {\n      if (value >= this.right) {\n        this.width = 0;\n      } else {\n        this.width = this.right - value;\n      }\n\n      this.x = value;\n    }\n  },\n\n  /**\r\n   * The sum of the x and width properties.\r\n   * Changing the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function get() {\n      return this.x + this.width;\n    },\n    set: function set(value) {\n      if (value <= this.x) {\n        this.width = 0;\n      } else {\n        this.width = value - this.x;\n      }\n    }\n  },\n\n  /**\r\n   * The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\r\n   * However it does affect the height property, whereas changing the y value does not affect the height property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function get() {\n      return this.y;\n    },\n    set: function set(value) {\n      if (value >= this.bottom) {\n        this.height = 0;\n      } else {\n        this.height = this.bottom - value;\n      }\n\n      this.y = value;\n    }\n  },\n\n  /**\r\n   * The sum of the y and height properties.\r\n   * Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function get() {\n      return this.y + this.height;\n    },\n    set: function set(value) {\n      if (value <= this.y) {\n        this.height = 0;\n      } else {\n        this.height = value - this.y;\n      }\n    }\n  },\n\n  /**\r\n   * The x coordinate of the center of the Rectangle.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#centerX\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  centerX: {\n    get: function get() {\n      return this.x + this.width / 2;\n    },\n    set: function set(value) {\n      this.x = value - this.width / 2;\n    }\n  },\n\n  /**\r\n   * The y coordinate of the center of the Rectangle.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#centerY\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  centerY: {\n    get: function get() {\n      return this.y + this.height / 2;\n    },\n    set: function set(value) {\n      this.y = value - this.height / 2;\n    }\n  }\n});\nmodule.exports = Rectangle;","map":null,"metadata":{},"sourceType":"script"}