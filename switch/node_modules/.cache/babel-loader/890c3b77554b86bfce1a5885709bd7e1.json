{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../../gameobjects/components');\n\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\n\nvar GameObject = require('../../gameobjects/GameObject');\n\nvar TilemapComponents = require('../components');\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\n\n\nvar DynamicTilemapLayer = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.Flip, Components.GetBounds, Components.Origin, Components.Pipeline, Components.ScaleMode, Components.Transform, Components.Visible, Components.ScrollFactor, DynamicTilemapLayerRender],\n  initialize: function DynamicTilemapLayer(scene, tilemap, layerIndex, tileset, x, y) {\n    GameObject.call(this, scene, 'DynamicTilemapLayer');\n    /**\r\n     * Used internally by physics system to perform fast type checks.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.isTilemap = true;\n    /**\r\n     * The Tilemap that this layer is a part of.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n     * @type {Phaser.Tilemaps.Tilemap}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilemap = tilemap;\n    /**\r\n     * The index of the LayerData associated with this layer.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.layerIndex = layerIndex;\n    /**\r\n     * The LayerData associated with this layer. LayerData can only be associated with one\r\n     * tilemap layer.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\n\n    this.layer = tilemap.layers[layerIndex]; // Link the LayerData with this static tilemap layer\n\n    this.layer.tilemapLayer = this;\n    /**\r\n     * The Tileset/s associated with this layer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileset = [];\n    /**\r\n     * Used internally with the canvas render. This holds the tiles that are visible within the\r\n     * camera.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.culledTiles = [];\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n     * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\n\n    this.skipCull = false;\n    /**\r\n     * The total number of tiles drawn by the renderer in the last frame.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.tilesDrawn = 0;\n    /**\r\n     * The total number of tiles in this layer. Updated every frame.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.tilesTotal = this.layer.width * this.layer.height;\n    /**\r\n     * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\n\n    this.cullPaddingX = 1;\n    /**\r\n     * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\n\n    this.cullPaddingY = 1;\n    /**\r\n     * The callback that is invoked when the tiles are culled.\r\n     *\r\n     * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n     *\r\n     * It will be sent 3 arguments:\r\n     *\r\n     * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n     * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n     * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n     *\r\n     * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n     * @type {function}\r\n     * @since 3.11.0\r\n     */\n\n    this.cullCallback = TilemapComponents.CullTiles;\n    /**\r\n     * The rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * This can be changed via the `setRenderOrder` method.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n     * @type {integer}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this._renderOrder = 0;\n    /**\r\n     * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.14.0\r\n     */\n\n    this.gidMap = [];\n    this.setTilesets(tileset);\n    this.setAlpha(this.layer.alpha);\n    this.setPosition(x, y);\n    this.setOrigin();\n    this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\n    this.initPipeline('TextureTintPipeline');\n  },\n\n  /**\r\n   * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n   * @private\r\n   * @since 3.14.0\r\n   * \r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   */\n  setTilesets: function setTilesets(tilesets) {\n    var gidMap = [];\n    var setList = [];\n    var map = this.tilemap;\n\n    if (!Array.isArray(tilesets)) {\n      tilesets = [tilesets];\n    }\n\n    for (var i = 0; i < tilesets.length; i++) {\n      var tileset = tilesets[i];\n\n      if (typeof tileset === 'string') {\n        tileset = map.getTileset(tileset);\n      }\n\n      if (tileset) {\n        setList.push(tileset);\n        var s = tileset.firstgid;\n\n        for (var t = 0; t < tileset.total; t++) {\n          gidMap[s + t] = tileset;\n        }\n      }\n    }\n\n    this.gidMap = gidMap;\n    this.tileset = setList;\n  },\n\n  /**\r\n   * Sets the rendering (draw) order of the tiles in this layer.\r\n   * \r\n   * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n   * drawing to the right and then moving down to the next row.\r\n   * \r\n   * The draw orders are:\r\n   * \r\n   * 0 = right-down\r\n   * 1 = left-down\r\n   * 2 = right-up\r\n   * 3 = left-up\r\n   * \r\n   * Setting the render order does not change the tiles or how they are stored in the layer,\r\n   * it purely impacts the order in which they are rendered.\r\n   * \r\n   * You can provide either an integer (0 to 3), or the string version of the order.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setRenderOrder: function setRenderOrder(renderOrder) {\n    var orders = ['right-down', 'left-down', 'right-up', 'left-up'];\n\n    if (typeof renderOrder === 'string') {\n      renderOrder = orders.indexOf(renderOrder);\n    }\n\n    if (renderOrder >= 0 && renderOrder < 4) {\n      this._renderOrder = renderOrder;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n   * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n   * internally to optimize recalculating faces when only one tile has been changed.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate.\r\n   * @param {integer} tileY - The y coordinate.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesAt: function calculateFacesAt(tileX, tileY) {\n    TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n   * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n   * is mostly used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesWithin: function calculateFacesWithin(tileX, tileY, width, height) {\n    TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n   * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n   * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n   * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n   * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n   * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n   * one-to-one mapping with the indexes array.\r\n   * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n   * scene.make.sprite).\r\n   * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n   */\n  createFromTiles: function createFromTiles(indexes, replacements, spriteConfig, scene, camera) {\n    return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\n  },\n\n  /**\r\n   * Returns the tiles in the given layer that are within the cameras viewport.\r\n   * This is used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  cull: function cull(camera) {\n    return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\n  },\n\n  /**\r\n   * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n   * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n   * information in the destination region.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n   * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n   * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  copy: function copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces) {\n    TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    // Uninstall this layer only if it is still installed on the LayerData object\n    if (this.layer.tilemapLayer === this) {\n      this.layer.tilemapLayer = undefined;\n    }\n\n    this.tilemap = undefined;\n    this.layer = undefined;\n    this.culledTiles.length = 0;\n    this.cullCallback = null;\n    this.gidMap = [];\n    this.tileset = [];\n    GameObject.prototype.destroy.call(this);\n  },\n\n  /**\r\n   * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n   * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n   * Collision information in the region will be recalculated.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index to fill the area with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  fill: function fill(index, tileX, tileY, width, height, recalculateFaces) {\n    TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n   * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n   * filter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  filterTiles: function filterTiles(callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n   * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n   * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n   * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n   * the top-left.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index value to search for.\r\n   * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n   * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n   * bottom-right. Otherwise it scans from the top-left.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  findByIndex: function findByIndex(findIndex, skip, reverse) {\n    return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\n  },\n\n  /**\r\n   * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n   * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n   * true. Similar to Array.prototype.find in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile}\r\n   */\n  findTile: function findTile(callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  forEachTile: function forEachTile(callback, context, tileX, tileY, width, height, filteringOptions) {\n    TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Gets a tile at the given tile coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n   * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n   * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n   */\n  getTileAt: function getTileAt(tileX, tileY, nonNull) {\n    return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\n  },\n\n  /**\r\n   * Gets a tile at the given world coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - X position to get the tile from (given in pixels)\r\n   * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n   * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n   * were invalid.\r\n   */\n  getTileAtWorldXY: function getTileAtWorldXY(worldX, worldY, nonNull, camera) {\n    return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithin: function getTilesWithin(tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n   * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinShape: function getTilesWithinShape(shape, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n   * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n   * @param {number} width - The width of the area.\r\n   * @param {number} height - The height of the area.\r\n   * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinWorldXY: function getTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   *\r\n   * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n   */\n  hasTileAt: function hasTileAt(tileX, tileY) {\n    return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n   */\n  hasTileAtWorldXY: function hasTileAtWorldXY(worldX, worldY, camera) {\n    return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\n  },\n\n  /**\r\n   * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n   * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n   * location. If you pass in an index, only the index at the specified location will be changed.\r\n   * Collision information will be recalculated at the specified location.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  putTileAt: function putTileAt(tile, tileX, tileY, recalculateFaces) {\n    return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\n  },\n\n  /**\r\n   * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n   * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n   * specified location. If you pass in an index, only the index at the specified location will be\r\n   * changed. Collision information will be recalculated at the specified location.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  putTileAtWorldXY: function putTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera) {\n    return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\n  },\n\n  /**\r\n   * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n   * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n   * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n   * index at the specified location will be changed. Collision information will be recalculated\r\n   * within the region tiles were changed.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  putTilesAt: function putTilesAt(tilesArray, tileX, tileY, recalculateFaces) {\n    TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n   * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n   * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n   * indexes. This method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  randomize: function randomize(tileX, tileY, width, height, indexes) {\n    TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  removeTileAt: function removeTileAt(tileX, tileY, replaceWithNull, recalculateFaces) {\n    return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\n  },\n\n  /**\r\n   * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  removeTileAtWorldXY: function removeTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera) {\n    return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\n  },\n\n  /**\r\n   * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n   * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n   * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n   * wherever you want on the screen.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n   * @param {StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  renderDebug: function renderDebug(graphics, styleConfig) {\n    TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n   * not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} findIndex - The index of the tile to search for.\r\n   * @param {integer} newIndex - The index of the tile to replace it with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  replaceByIndex: function replaceByIndex(findIndex, newIndex, tileX, tileY, width, height) {\n    TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * You can control if the Cameras should cull tiles before rendering them or not.\r\n   * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n   *\r\n   * However, there are some instances when you may wish to disable this.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n   * @since 3.11.0\r\n   *\r\n   * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setSkipCull: function setSkipCull(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.skipCull = value;\n    return this;\n  },\n\n  /**\r\n   * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n   * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n   * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n   * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n   * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n   * @since 3.11.0\r\n   *\r\n   * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n   * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setCullPadding: function setCullPadding(paddingX, paddingY) {\n    if (paddingX === undefined) {\n      paddingX = 1;\n    }\n\n    if (paddingY === undefined) {\n      paddingY = 1;\n    }\n\n    this.cullPaddingX = paddingX;\n    this.cullPaddingY = paddingY;\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n   * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n   * collision will be enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollision: function setCollision(indexes, collides, recalculateFaces) {\n    TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n   * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n   * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n   * enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} start - The first index of the tile to be set for collision.\r\n   * @param {integer} stop - The last index of the tile to be set for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionBetween: function setCollisionBetween(start, stop, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n   * that matches the given properties object, its collision flag will be set. The `collides`\r\n   * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n   * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n   * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n   * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n   * \"types\" property that matches any of those values, its collision flag will be updated.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByProperty: function setCollisionByProperty(properties, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n   * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n   * disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByExclusion: function setCollisionByExclusion(indexes, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n   * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n   * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n   * controls if collision will be enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionFromCollisionGroup: function setCollisionFromCollisionGroup(collides, recalculateFaces) {\n    TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n   * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n   * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n   * at a specific location on the map then see setTileLocationCallback.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|integer[])} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} callbackContext - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileIndexCallback: function setTileIndexCallback(indexes, callback, callbackContext) {\n    TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n   * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n   * remove it.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {function} [callback] - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} [callbackContext] - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileLocationCallback: function setTileLocationCallback(tileX, tileY, width, height, callback, callbackContext) {\n    TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n   * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n   * appear to have changed! This method only modifies tile indexes and does not change collision\r\n   * information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  shuffle: function shuffle(tileX, tileY, width, height) {\n    TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n   * information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileA - First tile index.\r\n   * @param {integer} tileB - Second tile index.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  swapByIndex: function swapByIndex(indexA, indexB, tileX, tileY, width, height) {\n    TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldX: function tileToWorldX(tileX, camera) {\n    return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldY: function tileToWorldY(tileY, camera) {\n    return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  tileToWorldXY: function tileToWorldXY(tileX, tileY, point, camera) {\n    return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\r\n   * weightedIndexes array. An example weighted array:\r\n   *\r\n   * [\r\n   *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n   *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n   *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n   *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n   * ]\r\n   *\r\n   * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n   * method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n   * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n   * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  weightedRandomize: function weightedRandomize(tileX, tileY, width, height, weightedIndexes) {\n    TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileX: function worldToTileX(worldX, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileY: function worldToTileY(worldY, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  worldToTileXY: function worldToTileXY(worldX, worldY, snapToFloor, point, camera) {\n    return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\n  }\n});\nmodule.exports = DynamicTilemapLayer;","map":null,"metadata":{},"sourceType":"script"}