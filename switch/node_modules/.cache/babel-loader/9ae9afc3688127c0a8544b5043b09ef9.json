{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.HTMLTextureFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [url] - The absolute or relative URL to load the file from.\r\n * @property {string} [extension='html'] - The default file extension to use if no url is provided.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @property {integer} [width=512] - The width of the texture the HTML will be rendered to.\r\n * @property {integer} [height=512] - The height of the texture the HTML will be rendered to.\r\n */\n\n/**\r\n * @classdesc\r\n * A single HTML File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#htmlTexture method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#htmlTexture.\r\n *\r\n * @class HTMLTextureFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.12.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.HTMLTextureFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {integer} [width] - The width of the texture the HTML will be rendered to.\r\n * @param {integer} [height] - The height of the texture the HTML will be rendered to.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar HTMLTextureFile = new Class({\n  Extends: File,\n  initialize: function HTMLTextureFile(loader, key, url, width, height, xhrSettings) {\n    if (width === undefined) {\n      width = 512;\n    }\n\n    if (height === undefined) {\n      height = 512;\n    }\n\n    var extension = 'html';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n      width = GetFastValue(config, 'width', width);\n      height = GetFastValue(config, 'height', height);\n    }\n\n    var fileConfig = {\n      type: 'html',\n      cache: loader.textureManager,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings,\n      config: {\n        width: width,\n        height: height\n      }\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTMLTextureFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function onProcess() {\n    this.state = CONST.FILE_PROCESSING;\n    var w = this.config.width;\n    var h = this.config.height;\n    var data = [];\n    data.push('<svg width=\"' + w + 'px\" height=\"' + h + 'px\" viewBox=\"0 0 ' + w + ' ' + h + '\" xmlns=\"http://www.w3.org/2000/svg\">');\n    data.push('<foreignObject width=\"100%\" height=\"100%\">');\n    data.push('<body xmlns=\"http://www.w3.org/1999/xhtml\">');\n    data.push(this.xhrLoader.responseText);\n    data.push('</body>');\n    data.push('</foreignObject>');\n    data.push('</svg>');\n    var svg = [data.join('\\n')];\n\n    var _this = this;\n\n    try {\n      var blob = new window.Blob(svg, {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n    } catch (e) {\n      _this.state = CONST.FILE_ERRORED;\n\n      _this.onProcessComplete();\n\n      return;\n    }\n\n    this.data = new Image();\n    this.data.crossOrigin = this.crossOrigin;\n\n    this.data.onload = function () {\n      File.revokeObjectURL(_this.data);\n\n      _this.onProcessComplete();\n    };\n\n    this.data.onerror = function () {\n      File.revokeObjectURL(_this.data);\n\n      _this.onProcessError();\n    };\n\n    File.createObjectURL(this.data, blob, 'image/svg+xml');\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTMLTextureFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function addToCache() {\n    var texture = this.cache.addImage(this.key, this.data);\n    this.pendingDestroy(texture);\n  }\n});\n/**\r\n * Adds an HTML File, or array of HTML Files, to the current load queue. When the files are loaded they\r\n * will be rendered to textures and stored in the Texture Manager.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.htmlTexture({\r\n *     key: 'instructions',\r\n *     url: 'content/intro.html',\r\n *     width: 256,\r\n *     height: 512\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.HTMLTextureFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'instructions');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * The width and height are the size of the texture to which the HTML will be rendered. It's not possible to determine these\r\n * automatically, so you will need to provide them, either as arguments or in the file config object.\r\n * When the HTML file has loaded a new SVG element is created with a size and viewbox set to the width and height given.\r\n * The SVG file has a body tag added to it, with the HTML file contents included. It then calls `window.Blob` on the SVG,\r\n * and if successful is added to the Texture Manager, otherwise it fails processing. The overall quality of the rendered\r\n * HTML depends on your browser, and some of them may not even support the svg / blob process used. Be aware that there are\r\n * limitations on what HTML can be inside an SVG. You can find out more details in this\r\n * [Mozilla MDN entry](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas).\r\n *\r\n * Note: The ability to load this type of file will only be available if the HTMLTextureFile File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#htmlTexture\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.12.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.HTMLTextureFileConfig|Phaser.Loader.FileTypes.HTMLTextureFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.html`, i.e. if `key` was \"alien\" then the URL will be \"alien.html\".\r\n * @param {integer} [width=512] - The width of the texture the HTML will be rendered to.\r\n * @param {integer} [height=512] - The height of the texture the HTML will be rendered to.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('htmlTexture', function (key, url, width, height, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new HTMLTextureFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new HTMLTextureFile(this, key, url, width, height, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = HTMLTextureFile;","map":null,"metadata":{},"sourceType":"script"}