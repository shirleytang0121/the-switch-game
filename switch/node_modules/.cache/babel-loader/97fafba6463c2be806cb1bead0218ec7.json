{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CONST = require('../../const');\n\nvar Smoothing = require('./Smoothing'); // The pool into which the canvas elements are placed.\n\n\nvar pool = []; //  Automatically apply smoothing(false) to created Canvas elements\n\nvar _disableContextSmoothing = false;\n/**\r\n * The CanvasPool is a global static object, that allows Phaser to recycle and pool 2D Context Canvas DOM elements.\r\n * It does not pool WebGL Contexts, because once the context options are set they cannot be modified again, \r\n * which is useless for some of the Phaser pipelines / renderer.\r\n *\r\n * This singleton is instantiated as soon as Phaser loads, before a Phaser.Game instance has even been created.\r\n * Which means all instances of Phaser Games on the same page can share the one single pool.\r\n *\r\n * @namespace Phaser.Display.Canvas.CanvasPool\r\n * @since 3.0.0\r\n */\n\nvar CanvasPool = function CanvasPool() {\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n   * @param {boolean} [selfParent=false] - Use the generated Canvas element as the parent?\r\n   *\r\n   * @return {HTMLCanvasElement} The canvas element that was created or pulled from the pool\r\n   */\n  var create = function create(parent, width, height, canvasType, selfParent) {\n    if (width === undefined) {\n      width = 1;\n    }\n\n    if (height === undefined) {\n      height = 1;\n    }\n\n    if (canvasType === undefined) {\n      canvasType = CONST.CANVAS;\n    }\n\n    if (selfParent === undefined) {\n      selfParent = false;\n    }\n\n    var canvas;\n    var container = first(canvasType);\n\n    if (container === null) {\n      container = {\n        parent: parent,\n        canvas: document.createElement('canvas'),\n        type: canvasType\n      };\n\n      if (canvasType === CONST.CANVAS) {\n        pool.push(container);\n      }\n\n      canvas = container.canvas;\n    } else {\n      container.parent = parent;\n      canvas = container.canvas;\n    }\n\n    if (selfParent) {\n      container.parent = canvas;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    if (_disableContextSmoothing && canvasType === CONST.CANVAS) {\n      Smoothing.disable(canvas.getContext('2d'));\n    }\n\n    return canvas;\n  };\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.create2D\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   *\r\n   * @return {HTMLCanvasElement} The created canvas.\r\n   */\n\n\n  var create2D = function create2D(parent, width, height) {\n    return create(parent, width, height, CONST.CANVAS);\n  };\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.createWebGL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   *\r\n   * @return {HTMLCanvasElement} The created WebGL canvas.\r\n   */\n\n\n  var createWebGL = function createWebGL(parent, width, height) {\n    return create(parent, width, height, CONST.WEBGL);\n  };\n  /**\r\n   * Gets the first free canvas index from the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.first\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n   *\r\n   * @return {HTMLCanvasElement} The first free canvas, or `null` if a WebGL canvas was requested or if the pool doesn't have free canvases.\r\n   */\n\n\n  var first = function first(canvasType) {\n    if (canvasType === undefined) {\n      canvasType = CONST.CANVAS;\n    }\n\n    if (canvasType === CONST.WEBGL) {\n      return null;\n    }\n\n    for (var i = 0; i < pool.length; i++) {\n      var container = pool[i];\n\n      if (!container.parent && container.type === canvasType) {\n        return container;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Looks up a canvas based on its parent, and if found puts it back in the pool, freeing it up for re-use.\r\n   * The canvas has its width and height set to 1, and its parent attribute nulled.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The canvas or the parent of the canvas to free.\r\n   */\n\n\n  var remove = function remove(parent) {\n    //  Check to see if the parent is a canvas object\n    var isCanvas = parent instanceof HTMLCanvasElement;\n    pool.forEach(function (container) {\n      if (isCanvas && container.canvas === parent || !isCanvas && container.parent === parent) {\n        container.parent = null;\n        container.canvas.width = 1;\n        container.canvas.height = 1;\n      }\n    });\n  };\n  /**\r\n   * Gets the total number of used canvas elements in the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.total\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of used canvases.\r\n   */\n\n\n  var total = function total() {\n    var c = 0;\n    pool.forEach(function (container) {\n      if (container.parent) {\n        c++;\n      }\n    });\n    return c;\n  };\n  /**\r\n   * Gets the total number of free canvas elements in the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.free\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of free canvases.\r\n   */\n\n\n  var free = function free() {\n    return pool.length - total();\n  };\n  /**\r\n   * Disable context smoothing on any new Canvas element created.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.disableSmoothing\r\n   * @since 3.0.0\r\n   */\n\n\n  var disableSmoothing = function disableSmoothing() {\n    _disableContextSmoothing = true;\n  };\n  /**\r\n   * Enable context smoothing on any new Canvas element created.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.enableSmoothing\r\n   * @since 3.0.0\r\n   */\n\n\n  var enableSmoothing = function enableSmoothing() {\n    _disableContextSmoothing = false;\n  };\n\n  return {\n    create2D: create2D,\n    create: create,\n    createWebGL: createWebGL,\n    disableSmoothing: disableSmoothing,\n    enableSmoothing: enableSmoothing,\n    first: first,\n    free: free,\n    pool: pool,\n    remove: remove,\n    total: total\n  };\n}; //  If we export the called function here, it'll only be invoked once (not every time it's required).\n\n\nmodule.exports = CanvasPool();","map":null,"metadata":{},"sourceType":"script"}