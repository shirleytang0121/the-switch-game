{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Vector2 = require('./Vector2');\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\n\n\nvar TransformXY = function TransformXY(x, y, positionX, positionY, rotation, scaleX, scaleY, output) {\n  if (output === undefined) {\n    output = new Vector2();\n  }\n\n  var radianSin = Math.sin(rotation);\n  var radianCos = Math.cos(rotation); // Rotate and Scale\n\n  var a = radianCos * scaleX;\n  var b = radianSin * scaleX;\n  var c = -radianSin * scaleY;\n  var d = radianCos * scaleY; //  Invert\n\n  var id = 1 / (a * d + c * -b);\n  output.x = d * id * x + -c * id * y + (positionY * c - positionX * d) * id;\n  output.y = a * id * y + -b * id * x + (-positionY * a + positionX * b) * id;\n  return output;\n};\n\nmodule.exports = TransformXY;","map":null,"metadata":{},"sourceType":"script"}