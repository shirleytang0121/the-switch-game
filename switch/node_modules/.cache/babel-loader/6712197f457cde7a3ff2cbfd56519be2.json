{"ast":null,"code":"var AWS = require('../core');\n\nvar CognitoIdentity = require('../../clients/cognitoidentity');\n\nvar STS = require('../../clients/sts');\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation using\r\n * the Amazon Cognito Identity service.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\r\n * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\r\n * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\r\n * obtain an `IdentityId`. If the identity or identity pool is not configured in\r\n * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\r\n * then additionally a `RoleArn` is required containing the ARN of the IAM trust\r\n * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\r\n * is provided, then this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\r\n * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\r\n *\r\n * In addition, if this credential provider is used to provide authenticated\r\n * login, the `Logins` map may be set to the tokens provided by the respective\r\n * identity providers. See {constructor} for an example on creating a credentials\r\n * object with proper property values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.CognitoIdentity.getId},\r\n *     {AWS.CognitoIdentity.getOpenIdToken}, and\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n * @!attribute identityId\r\n *   @return [String] the Cognito ID returned by the last call to\r\n *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\r\n *     final resolved identity ID from Amazon Cognito.\r\n */\n\n\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * @api private\r\n   */\n  localStorageKey: {\n    id: 'aws.cognito.identity-id.',\n    providers: 'aws.cognito.identity-providers.'\n  },\n\n  /**\r\n   * Creates a new credentials object.\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n   *\r\n   *     // either IdentityPoolId or IdentityId is required\r\n   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\r\n   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\r\n   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\r\n   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\r\n   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\r\n   *\r\n   *     // optional, only necessary when the identity pool is not configured\r\n   *     // to use IAM roles in the Amazon Cognito Console\r\n   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\r\n   *\r\n   *     // optional tokens, used for authenticated login\r\n   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\r\n   *     Logins: {\r\n   *       'graph.facebook.com': 'FBTOKEN',\r\n   *       'www.amazon.com': 'AMAZONTOKEN',\r\n   *       'accounts.google.com': 'GOOGLETOKEN',\r\n   *       'api.twitter.com': 'TWITTERTOKEN',\r\n   *       'www.digits.com': 'DIGITSTOKEN'\r\n   *     },\r\n   *\r\n   *     // optional name, defaults to web-identity\r\n   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleSessionName: 'web',\r\n   *\r\n   *     // optional, only necessary when application runs in a browser\r\n   *     // and multiple users are signed in at once, used for caching\r\n   *     LoginId: 'example@gmail.com'\r\n   *\r\n   *   }, {\r\n   *      // optionally provide configuration to apply to the underlying service clients\r\n   *      // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *      // region should match the region your identity pool is located in\r\n   *      region: 'us-east-1',\r\n   *\r\n   *      // specify timeout options\r\n   *      httpOptions: {\r\n   *        timeout: 100\r\n   *      }\r\n   *   });\r\n   * @see AWS.CognitoIdentity.getId\r\n   * @see AWS.CognitoIdentity.getCredentialsForIdentity\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.CognitoIdentity.getOpenIdToken\r\n   * @see AWS.Config\r\n   * @note If a region is not provided in the global AWS.config, or\r\n   *   specified in the `clientConfig` to the CognitoIdentityCredentials\r\n   *   constructor, you may encounter a 'Missing credentials in config' error\r\n   *   when calling making a service call.\r\n   */\n  constructor: function CognitoIdentityCredentials(params, clientConfig) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n    this.data = null;\n    this._identityId = null;\n    this._clientConfig = AWS.util.copy(clientConfig || {});\n    this.loadCachedId();\n    var self = this;\n    Object.defineProperty(this, 'identityId', {\n      get: function get() {\n        self.loadCachedId();\n        return self._identityId || self.params.IdentityId;\n      },\n      set: function set(identityId) {\n        self._identityId = identityId;\n      }\n    });\n  },\n\n  /**\r\n   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\r\n   * or {AWS.STS.assumeRoleWithWebIdentity}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    self.createClients();\n    self.data = null;\n    self._identityId = null;\n    self.getId(function (err) {\n      if (!err) {\n        if (!self.params.RoleArn) {\n          self.getCredentialsForIdentity(callback);\n        } else {\n          self.getCredentialsFromSTS(callback);\n        }\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * Clears the cached Cognito ID associated with the currently configured\r\n   * identity pool ID. Use this to manually invalidate your cache if\r\n   * the identity pool ID was deleted.\r\n   */\n  clearCachedId: function clearCache() {\n    this._identityId = null;\n    delete this.params.IdentityId;\n    var poolId = this.params.IdentityPoolId;\n    var loginId = this.params.LoginId || '';\n    delete this.storage[this.localStorageKey.id + poolId + loginId];\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];\n  },\n\n  /**\r\n   * @api private\r\n   */\n  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\n    var self = this;\n\n    if (err.code == 'NotAuthorizedException') {\n      self.clearCachedId();\n    }\n  },\n\n  /**\r\n   * Retrieves a Cognito ID, loading from cache if it was already retrieved\r\n   * on this device.\r\n   *\r\n   * @callback callback function(err, identityId)\r\n   *   @param err [Error, null] an error object if the call failed or null if\r\n   *     it succeeded.\r\n   *   @param identityId [String, null] if successful, the callback will return\r\n   *     the Cognito ID.\r\n   * @note If not loaded explicitly, the Cognito ID is loaded and stored in\r\n   *   localStorage in the browser environment of a device.\r\n   * @api private\r\n   */\n  getId: function getId(callback) {\n    var self = this;\n\n    if (typeof self.params.IdentityId === 'string') {\n      return callback(null, self.params.IdentityId);\n    }\n\n    self.cognito.getId(function (err, data) {\n      if (!err && data.IdentityId) {\n        self.params.IdentityId = data.IdentityId;\n        callback(null, data.IdentityId);\n      } else {\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadCredentials: function loadCredentials(data, credentials) {\n    if (!data || !credentials) return;\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\n    var self = this;\n    self.cognito.getCredentialsForIdentity(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.data = data;\n        self.loadCredentials(self.data, self);\n      } else {\n        self.clearIdOnNotAuthorized(err);\n      }\n\n      callback(err);\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\n    var self = this;\n    self.cognito.getOpenIdToken(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.params.WebIdentityToken = data.Token;\n        self.webIdentityCredentials.refresh(function (webErr) {\n          if (!webErr) {\n            self.data = self.webIdentityCredentials.data;\n            self.sts.credentialsFrom(self.data, self);\n          }\n\n          callback(webErr);\n        });\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadCachedId: function loadCachedId() {\n    var self = this; // in the browser we source default IdentityId from localStorage\n\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {\n      var id = self.getStorage('id');\n\n      if (id && self.params.Logins) {\n        var actualProviders = Object.keys(self.params.Logins);\n        var cachedProviders = (self.getStorage('providers') || '').split(','); // only load ID if at least one provider used this ID before\n\n        var intersect = cachedProviders.filter(function (n) {\n          return actualProviders.indexOf(n) !== -1;\n        });\n\n        if (intersect.length !== 0) {\n          self.params.IdentityId = id;\n        }\n      } else if (id) {\n        self.params.IdentityId = id;\n      }\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  createClients: function createClients() {\n    var clientConfig = this._clientConfig;\n    this.webIdentityCredentials = this.webIdentityCredentials || new AWS.WebIdentityCredentials(this.params, clientConfig);\n\n    if (!this.cognito) {\n      var cognitoConfig = AWS.util.merge({}, clientConfig);\n      cognitoConfig.params = this.params;\n      this.cognito = new CognitoIdentity(cognitoConfig);\n    }\n\n    this.sts = this.sts || new STS(clientConfig);\n  },\n\n  /**\r\n   * @api private\r\n   */\n  cacheId: function cacheId(data) {\n    this._identityId = data.IdentityId;\n    this.params.IdentityId = this._identityId; // cache this IdentityId in browser localStorage if possible\n\n    if (AWS.util.isBrowser()) {\n      this.setStorage('id', data.IdentityId);\n\n      if (this.params.Logins) {\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));\n      }\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getStorage: function getStorage(key) {\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setStorage: function setStorage(key, val) {\n    try {\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\n    } catch (_) {}\n  },\n\n  /**\r\n   * @api private\r\n   */\n  storage: function () {\n    try {\n      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ? window.localStorage : {}; // Test set/remove which would throw an error in Safari's private browsing\n\n      storage['aws.test-storage'] = 'foobar';\n      delete storage['aws.test-storage'];\n      return storage;\n    } catch (_) {\n      return {};\n    }\n  }()\n});","map":null,"metadata":{},"sourceType":"script"}