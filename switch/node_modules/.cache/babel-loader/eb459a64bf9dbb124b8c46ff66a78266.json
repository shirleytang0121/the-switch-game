{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A Geometry Mask can be applied to a Game Object to hide any pixels of it which don't intersect\r\n * a visible pixel from the geometry mask. The mask is essentially a clipping path which can only\r\n * make a masked pixel fully visible or fully invisible without changing its alpha (opacity).\r\n *\r\n * A Geometry Mask uses a Graphics Game Object to determine which pixels of the masked Game Object(s)\r\n * should be clipped. For any given point of a masked Game Object's texture, the pixel will only be displayed\r\n * if the Graphics Game Object of the Geometry Mask has a visible pixel at the same position. The color and\r\n * alpha of the pixel from the Geometry Mask do not matter.\r\n *\r\n * The Geometry Mask's location matches the location of its Graphics object, not the location of the masked objects.\r\n * Moving or transforming the underlying Graphics object will change the mask (and affect the visibility\r\n * of any masked objects), whereas moving or transforming a masked object will not affect the mask.\r\n * You can think of the Geometry Mask (or rather, of the its Graphics object) as an invisible curtain placed\r\n * in front of all masked objects which has its own visual properties and, naturally, respects the camera's\r\n * visual properties, but isn't affected by and doesn't follow the masked objects by itself.\r\n *\r\n * @class GeometryMask\r\n * @memberof Phaser.Display.Masks\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - This parameter is not used.\r\n * @param {Phaser.GameObjects.Graphics} graphicsGeometry - The Graphics Game Object to use for the Geometry Mask. Doesn't have to be in the Display List.\r\n */\n\n\nvar GeometryMask = new Class({\n  initialize: function GeometryMask(scene, graphicsGeometry) {\n    /**\r\n     * The Graphics object which describes the Geometry Mask.\r\n     *\r\n     * @name Phaser.Display.Masks.GeometryMask#geometryMask\r\n     * @type {Phaser.GameObjects.Graphics}\r\n     * @since 3.0.0\r\n     */\n    this.geometryMask = graphicsGeometry;\n    /**\r\n     * Similar to the BitmapMasks invertAlpha setting this to true will then hide all pixels\r\n     * drawn to the Geometry Mask.\r\n     *\r\n     * @name Phaser.Display.Masks.GeometryMask#invertAlpha\r\n     * @type {boolean}\r\n     * @since 3.16.0\r\n     */\n\n    this.invertAlpha = false;\n  },\n\n  /**\r\n   * Sets a new Graphics object for the Geometry Mask.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#setShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphicsGeometry - The Graphics object which will be used for the Geometry Mask.\r\n   */\n  setShape: function setShape(graphicsGeometry) {\n    this.geometryMask = graphicsGeometry;\n  },\n\n  /**\r\n   * Renders the Geometry Mask's underlying Graphics object to the OpenGL stencil buffer and enables the stencil test, which clips rendered pixels according to the mask.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#preRenderWebGL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - The WebGL Renderer instance to draw to.\r\n   * @param {Phaser.GameObjects.GameObject} mask - The Game Object being rendered.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera the Game Object is being rendered through.\r\n   */\n  preRenderWebGL: function preRenderWebGL(renderer, mask, camera) {\n    var gl = renderer.gl;\n    var geometryMask = this.geometryMask; // Force flushing before drawing to stencil buffer\n\n    renderer.flush(); // Enable and setup GL state to write to stencil buffer\n\n    gl.enable(gl.STENCIL_TEST);\n    gl.clear(gl.STENCIL_BUFFER_BIT);\n    gl.colorMask(false, false, false, false);\n    gl.stencilFunc(gl.NOTEQUAL, 1, 1);\n    gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE); // Write stencil buffer\n\n    geometryMask.renderWebGL(renderer, geometryMask, 0, camera);\n    renderer.flush(); // Use stencil buffer to affect next rendering object\n\n    gl.colorMask(true, true, true, true);\n\n    if (this.invertAlpha) {\n      gl.stencilFunc(gl.NOTEQUAL, 1, 1);\n    } else {\n      gl.stencilFunc(gl.EQUAL, 1, 1);\n    }\n\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n  },\n\n  /**\r\n   * Flushes all rendered pixels and disables the stencil test of a WebGL context, thus disabling the mask for it.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#postRenderWebGL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - The WebGL Renderer instance to draw flush.\r\n   */\n  postRenderWebGL: function postRenderWebGL(renderer) {\n    var gl = renderer.gl; // Force flush before disabling stencil test\n\n    renderer.flush();\n    gl.disable(gl.STENCIL_TEST);\n  },\n\n  /**\r\n   * Sets the clipping path of a 2D canvas context to the Geometry Mask's underlying Graphics object.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#preRenderCanvas\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - The Canvas Renderer instance to set the clipping path on.\r\n   * @param {Phaser.GameObjects.GameObject} mask - The Game Object being rendered.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera the Game Object is being rendered through.\r\n   */\n  preRenderCanvas: function preRenderCanvas(renderer, mask, camera) {\n    var geometryMask = this.geometryMask;\n    renderer.currentContext.save();\n    geometryMask.renderCanvas(renderer, geometryMask, 0, camera, null, null, true);\n    renderer.currentContext.clip();\n  },\n\n  /**\r\n   * Restore the canvas context's previous clipping path, thus turning off the mask for it.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#postRenderCanvas\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - The Canvas Renderer instance being restored.\r\n   */\n  postRenderCanvas: function postRenderCanvas(renderer) {\n    renderer.currentContext.restore();\n  },\n\n  /**\r\n   * Destroys this GeometryMask and nulls any references it holds.\r\n   *\r\n   * Note that if a Game Object is currently using this mask it will _not_ automatically detect you have destroyed it,\r\n   * so be sure to call `clearMask` on any Game Object using it, before destroying it.\r\n   *\r\n   * @method Phaser.Display.Masks.GeometryMask#destroy\r\n   * @since 3.7.0\r\n   */\n  destroy: function destroy() {\n    this.geometryMask = null;\n  }\n});\nmodule.exports = GeometryMask;","map":null,"metadata":{},"sourceType":"script"}