{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoints = require('./GetPoints');\n/**\r\n * @classdesc\r\n * A Polygon object\r\n *\r\n\r\n * The polygon is a closed shape consists of a series of connected straight lines defined by list of ordered points.\r\n * Several formats are supported to define the list of points, check the setTo method for details. \r\n * This is a geometry object allowing you to define and inspect the shape.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Polygon you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Polygon\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Point[]} [points] - List of points defining the perimeter of this Polygon. Several formats are supported: \r\n * - A string containing paired x y values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n * - An array of objects with public x y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n */\n\n\nvar Polygon = new Class({\n  initialize: function Polygon(points) {\n    /**\r\n     * The area of this Polygon.\r\n     *\r\n     * @name Phaser.Geom.Polygon#area\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    this.area = 0;\n    /**\r\n     * An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]\r\n     *\r\n     * @name Phaser.Geom.Polygon#points\r\n     * @type {Phaser.Geom.Point[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.points = [];\n\n    if (points) {\n      this.setTo(points);\n    }\n  },\n\n  /**\r\n   * Check to see if the Polygon contains the given x / y coordinates.\r\n   *\r\n   * @method Phaser.Geom.Polygon#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check within the polygon.\r\n   * @param {number} y - The y coordinate to check within the polygon.\r\n   *\r\n   * @return {boolean} `true` if the coordinates are within the polygon, otherwise `false`.\r\n   */\n  contains: function contains(x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Sets this Polygon to the given points.\r\n   *\r\n   * The points can be set from a variety of formats:\r\n   *\r\n   * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n   * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n   * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n   * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n   * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n   *\r\n   * `setTo` may also be called without any arguments to remove all points.\r\n   *\r\n   * @method Phaser.Geom.Polygon#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} points - Points defining the perimeter of this polygon. Please check function description above for the different supported formats.\r\n   *\r\n   * @return {Phaser.Geom.Polygon} This Polygon object.\r\n   */\n  setTo: function setTo(points) {\n    this.area = 0;\n    this.points = [];\n\n    if (typeof points === 'string') {\n      points = points.split(' ');\n    }\n\n    if (!Array.isArray(points)) {\n      return this;\n    }\n\n    var p;\n    var y0 = Number.MAX_VALUE; //  The points argument is an array, so iterate through it\n\n    for (var i = 0; i < points.length; i++) {\n      p = {\n        x: 0,\n        y: 0\n      };\n\n      if (typeof points[i] === 'number' || typeof points[i] === 'string') {\n        p.x = parseFloat(points[i]);\n        p.y = parseFloat(points[i + 1]);\n        i++;\n      } else if (Array.isArray(points[i])) {\n        //  An array of arrays?\n        p.x = points[i][0];\n        p.y = points[i][1];\n      } else {\n        p.x = points[i].x;\n        p.y = points[i].y;\n      }\n\n      this.points.push(p); //  Lowest boundary\n\n      if (p.y < y0) {\n        y0 = p.y;\n      }\n    }\n\n    this.calculateArea(y0);\n    return this;\n  },\n\n  /**\r\n   * Calculates the area of the Polygon. This is available in the property Polygon.area\r\n   *\r\n   * @method Phaser.Geom.Polygon#calculateArea\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The area of the polygon.\r\n   */\n  calculateArea: function calculateArea() {\n    if (this.points.length < 3) {\n      this.area = 0;\n      return this.area;\n    }\n\n    var sum = 0;\n    var p1;\n    var p2;\n\n    for (var i = 0; i < this.points.length - 1; i++) {\n      p1 = this.points[i];\n      p2 = this.points[i + 1];\n      sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n\n    p1 = this.points[0];\n    p2 = this.points[this.points.length - 1];\n    sum += (p1.x - p2.x) * (p2.y + p1.y);\n    this.area = -sum * 0.5;\n    return this.area;\n  },\n\n  /**\r\n   * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n   * based on the given quantity or stepRate values.\r\n   *\r\n   * @method Phaser.Geom.Polygon#getPoints\r\n   * @since 3.12.0\r\n   *\r\n   * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n   * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n   * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n   *\r\n   * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n   */\n  getPoints: function getPoints(quantity, step, output) {\n    return GetPoints(this, quantity, step, output);\n  }\n});\nmodule.exports = Polygon;","map":null,"metadata":{},"sourceType":"script"}