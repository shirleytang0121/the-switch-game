{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetColor = require('./GetColor');\n\nvar GetColor32 = require('./GetColor32');\n\nvar HSVToRGB = require('./HSVToRGB');\n\nvar RGBToHSV = require('./RGBToHSV');\n/**\r\n * @namespace Phaser.Display.Color\r\n */\n\n/**\r\n * @classdesc\r\n * The Color class holds a single color value and allows for easy modification and reading of it.\r\n *\r\n * @class Color\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [red=0] - The red color value. A number between 0 and 255.\r\n * @param {integer} [green=0] - The green color value. A number between 0 and 255.\r\n * @param {integer} [blue=0] - The blue color value. A number between 0 and 255.\r\n * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n */\n\n\nvar Color = new Class({\n  initialize: function Color(red, green, blue, alpha) {\n    if (red === undefined) {\n      red = 0;\n    }\n\n    if (green === undefined) {\n      green = 0;\n    }\n\n    if (blue === undefined) {\n      blue = 0;\n    }\n\n    if (alpha === undefined) {\n      alpha = 255;\n    }\n    /**\r\n     * The internal red color value.\r\n     *\r\n     * @name Phaser.Display.Color#r\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.r = 0;\n    /**\r\n     * The internal green color value.\r\n     *\r\n     * @name Phaser.Display.Color#g\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.g = 0;\n    /**\r\n     * The internal blue color value.\r\n     *\r\n     * @name Phaser.Display.Color#b\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.b = 0;\n    /**\r\n     * The internal alpha color value.\r\n     *\r\n     * @name Phaser.Display.Color#a\r\n     * @type {number}\r\n     * @private\r\n     * @default 255\r\n     * @since 3.0.0\r\n     */\n\n    this.a = 255;\n    /**\r\n     * The hue color value. A number between 0 and 1.\r\n     * This is the base color.\r\n     *\r\n     * @name Phaser.Display.Color#_h\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._h = 0;\n    /**\r\n     * The saturation color value. A number between 0 and 1.\r\n     * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     *\r\n     * @name Phaser.Display.Color#_s\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._s = 0;\n    /**\r\n     * The lightness color value. A number between 0 and 1.\r\n     * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @name Phaser.Display.Color#_v\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._v = 0;\n    /**\r\n     * Is this color update locked?\r\n     *\r\n     * @name Phaser.Display.Color#_locked\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._locked = false;\n    /**\r\n     * An array containing the calculated color values for WebGL use.\r\n     *\r\n     * @name Phaser.Display.Color#gl\r\n     * @type {number[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.gl = [0, 0, 0, 1];\n    /**\r\n     * Pre-calculated internal color value.\r\n     *\r\n     * @name Phaser.Display.Color#_color\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._color = 0;\n    /**\r\n     * Pre-calculated internal color32 value.\r\n     *\r\n     * @name Phaser.Display.Color#_color32\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._color32 = 0;\n    /**\r\n     * Pre-calculated internal color rgb string value.\r\n     *\r\n     * @name Phaser.Display.Color#_rgba\r\n     * @type {string}\r\n     * @private\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this._rgba = '';\n    this.setTo(red, green, blue, alpha);\n  },\n\n  /**\r\n   * Sets this color to be transparent. Sets all values to zero.\r\n   *\r\n   * @method Phaser.Display.Color#transparent\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  transparent: function transparent() {\n    this._locked = true;\n    this.red = 0;\n    this.green = 0;\n    this.blue = 0;\n    this.alpha = 0;\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color of this Color component.\r\n   *\r\n   * @method Phaser.Display.Color#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} red - The red color value. A number between 0 and 255.\r\n   * @param {integer} green - The green color value. A number between 0 and 255.\r\n   * @param {integer} blue - The blue color value. A number between 0 and 255.\r\n   * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n   * @param {boolean} [updateHSV=true] - Update the HSV values after setting the RGB values?\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setTo: function setTo(red, green, blue, alpha, updateHSV) {\n    if (alpha === undefined) {\n      alpha = 255;\n    }\n\n    if (updateHSV === undefined) {\n      updateHSV = true;\n    }\n\n    this._locked = true;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = alpha;\n    this._locked = false;\n    return this.update(updateHSV);\n  },\n\n  /**\r\n   * Sets the red, green, blue and alpha GL values of this Color component.\r\n   *\r\n   * @method Phaser.Display.Color#setGLTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} red - The red color value. A number between 0 and 1.\r\n   * @param {number} green - The green color value. A number between 0 and 1.\r\n   * @param {number} blue - The blue color value. A number between 0 and 1.\r\n   * @param {number} [alpha=1] - The alpha value. A number between 0 and 1.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setGLTo: function setGLTo(red, green, blue, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this._locked = true;\n    this.redGL = red;\n    this.greenGL = green;\n    this.blueGL = blue;\n    this.alphaGL = alpha;\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color based on the color object given.\r\n   *\r\n   * @method Phaser.Display.Color#setFromRGB\r\n   * @since 3.0.0\r\n   *\r\n   * @param {InputColorObject} color - An object containing `r`, `g`, `b` and optionally `a` values in the range 0 to 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setFromRGB: function setFromRGB(color) {\n    this._locked = true;\n    this.red = color.r;\n    this.green = color.g;\n    this.blue = color.b;\n\n    if (color.hasOwnProperty('a')) {\n      this.alpha = color.a;\n    }\n\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color based on the hue, saturation and lightness values given.\r\n   *\r\n   * @method Phaser.Display.Color#setFromHSV\r\n   * @since 3.13.0\r\n   *\r\n   * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n   * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n   * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setFromHSV: function setFromHSV(h, s, v) {\n    return HSVToRGB(h, s, v, this);\n  },\n\n  /**\r\n   * Updates the internal cache values.\r\n   *\r\n   * @method Phaser.Display.Color#update\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  update: function update(updateHSV) {\n    if (updateHSV === undefined) {\n      updateHSV = false;\n    }\n\n    if (this._locked) {\n      return this;\n    }\n\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var a = this.a;\n    this._color = GetColor(r, g, b);\n    this._color32 = GetColor32(r, g, b, a);\n    this._rgba = 'rgba(' + r + ',' + g + ',' + b + ',' + a / 255 + ')';\n\n    if (updateHSV) {\n      RGBToHSV(r, g, b, this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Updates the internal hsv cache values.\r\n   *\r\n   * @method Phaser.Display.Color#updateHSV\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  updateHSV: function updateHSV() {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    RGBToHSV(r, g, b, this);\n    return this;\n  },\n\n  /**\r\n   * Returns a new Color component using the values from this one.\r\n   *\r\n   * @method Phaser.Display.Color#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} A new Color object.\r\n   */\n  clone: function clone() {\n    return new Color(this.r, this.g, this.b, this.a);\n  },\n\n  /**\r\n   * Sets this Color object to be grayscaled based on the shade value given.\r\n   *\r\n   * @method Phaser.Display.Color#gray\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} shade - A value between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  gray: function gray(shade) {\n    return this.setTo(shade, shade, shade);\n  },\n\n  /**\r\n   * Sets this Color object to be a random color between the `min` and `max` values given.\r\n   *\r\n   * @method Phaser.Display.Color#random\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n   * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  random: function random(min, max) {\n    if (min === undefined) {\n      min = 0;\n    }\n\n    if (max === undefined) {\n      max = 255;\n    }\n\n    var r = Math.floor(min + Math.random() * (max - min));\n    var g = Math.floor(min + Math.random() * (max - min));\n    var b = Math.floor(min + Math.random() * (max - min));\n    return this.setTo(r, g, b);\n  },\n\n  /**\r\n   * Sets this Color object to be a random grayscale color between the `min` and `max` values given.\r\n   *\r\n   * @method Phaser.Display.Color#randomGray\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n   * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  randomGray: function randomGray(min, max) {\n    if (min === undefined) {\n      min = 0;\n    }\n\n    if (max === undefined) {\n      max = 255;\n    }\n\n    var s = Math.floor(min + Math.random() * (max - min));\n    return this.setTo(s, s, s);\n  },\n\n  /**\r\n   * Increase the saturation of this Color by the percentage amount given.\r\n   * The saturation is the amount of the base color in the hue.\r\n   *\r\n   * @method Phaser.Display.Color#saturate\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  saturate: function saturate(amount) {\n    this.s += amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Decrease the saturation of this Color by the percentage amount given.\r\n   * The saturation is the amount of the base color in the hue.\r\n   *\r\n   * @method Phaser.Display.Color#desaturate\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  desaturate: function desaturate(amount) {\n    this.s -= amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Increase the lightness of this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#lighten\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  lighten: function lighten(amount) {\n    this.v += amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Decrease the lightness of this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#darken\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  darken: function darken(amount) {\n    this.v -= amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Brighten this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#brighten\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  brighten: function brighten(amount) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    r = Math.max(0, Math.min(255, r - Math.round(255 * -(amount / 100))));\n    g = Math.max(0, Math.min(255, g - Math.round(255 * -(amount / 100))));\n    b = Math.max(0, Math.min(255, b - Math.round(255 * -(amount / 100))));\n    return this.setTo(r, g, b);\n  },\n\n  /**\r\n   * The color of this Color component, not including the alpha channel.\r\n   *\r\n   * @name Phaser.Display.Color#color\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  color: {\n    get: function get() {\n      return this._color;\n    }\n  },\n\n  /**\r\n   * The color of this Color component, including the alpha channel.\r\n   *\r\n   * @name Phaser.Display.Color#color32\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  color32: {\n    get: function get() {\n      return this._color32;\n    }\n  },\n\n  /**\r\n   * The color of this Color component as a string which can be used in CSS color values.\r\n   *\r\n   * @name Phaser.Display.Color#rgba\r\n   * @type {string}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  rgba: {\n    get: function get() {\n      return this._rgba;\n    }\n  },\n\n  /**\r\n   * The red color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#redGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  redGL: {\n    get: function get() {\n      return this.gl[0];\n    },\n    set: function set(value) {\n      this.gl[0] = Math.min(Math.abs(value), 1);\n      this.r = Math.floor(this.gl[0] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The green color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#greenGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  greenGL: {\n    get: function get() {\n      return this.gl[1];\n    },\n    set: function set(value) {\n      this.gl[1] = Math.min(Math.abs(value), 1);\n      this.g = Math.floor(this.gl[1] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The blue color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#blueGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  blueGL: {\n    get: function get() {\n      return this.gl[2];\n    },\n    set: function set(value) {\n      this.gl[2] = Math.min(Math.abs(value), 1);\n      this.b = Math.floor(this.gl[2] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The alpha color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#alphaGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alphaGL: {\n    get: function get() {\n      return this.gl[3];\n    },\n    set: function set(value) {\n      this.gl[3] = Math.min(Math.abs(value), 1);\n      this.a = Math.floor(this.gl[3] * 255);\n      this.update();\n    }\n  },\n\n  /**\r\n   * The red color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#red\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  red: {\n    get: function get() {\n      return this.r;\n    },\n    set: function set(value) {\n      value = Math.floor(Math.abs(value));\n      this.r = Math.min(value, 255);\n      this.gl[0] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The green color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#green\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  green: {\n    get: function get() {\n      return this.g;\n    },\n    set: function set(value) {\n      value = Math.floor(Math.abs(value));\n      this.g = Math.min(value, 255);\n      this.gl[1] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The blue color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#blue\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  blue: {\n    get: function get() {\n      return this.b;\n    },\n    set: function set(value) {\n      value = Math.floor(Math.abs(value));\n      this.b = Math.min(value, 255);\n      this.gl[2] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The alpha color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function get() {\n      return this.a;\n    },\n    set: function set(value) {\n      value = Math.floor(Math.abs(value));\n      this.a = Math.min(value, 255);\n      this.gl[3] = value / 255;\n      this.update();\n    }\n  },\n\n  /**\r\n   * The hue color value. A number between 0 and 1.\r\n   * This is the base color.\r\n   *\r\n   * @name Phaser.Display.Color#h\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  h: {\n    get: function get() {\n      return this._h;\n    },\n    set: function set(value) {\n      this._h = value;\n      HSVToRGB(value, this._s, this._v, this);\n    }\n  },\n\n  /**\r\n   * The saturation color value. A number between 0 and 1.\r\n   * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n   *\r\n   * @name Phaser.Display.Color#s\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  s: {\n    get: function get() {\n      return this._s;\n    },\n    set: function set(value) {\n      this._s = value;\n      HSVToRGB(this._h, value, this._v, this);\n    }\n  },\n\n  /**\r\n   * The lightness color value. A number between 0 and 1.\r\n   * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n   *\r\n   * @name Phaser.Display.Color#v\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  v: {\n    get: function get() {\n      return this._v;\n    },\n    set: function set(value) {\n      this._v = value;\n      HSVToRGB(this._h, this._s, value, this);\n    }\n  }\n});\nmodule.exports = Color;","map":null,"metadata":{},"sourceType":"script"}