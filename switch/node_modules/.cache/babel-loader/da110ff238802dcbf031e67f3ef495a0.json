{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Determines the operating system of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.os` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.OS\r\n * @since 3.0.0\r\n *\r\n * @property {boolean} android - Is running on android?\r\n * @property {boolean} chromeOS - Is running on chromeOS?\r\n * @property {boolean} cocoonJS - Is the game running under CocoonJS?\r\n * @property {boolean} cocoonJSApp - Is this game running with CocoonJS.App?\r\n * @property {boolean} cordova - Is the game running under Apache Cordova?\r\n * @property {boolean} crosswalk - Is the game running under the Intel Crosswalk XDK?\r\n * @property {boolean} desktop - Is running on a desktop?\r\n * @property {boolean} ejecta - Is the game running under Ejecta?\r\n * @property {boolean} electron - Is the game running under GitHub Electron?\r\n * @property {boolean} iOS - Is running on iOS?\r\n * @property {boolean} iPad - Is running on iPad?\r\n * @property {boolean} iPhone - Is running on iPhone?\r\n * @property {boolean} kindle - Is running on an Amazon Kindle?\r\n * @property {boolean} linux - Is running on linux?\r\n * @property {boolean} macOS - Is running on macOS?\r\n * @property {boolean} node - Is the game running under Node.js?\r\n * @property {boolean} nodeWebkit - Is the game running under Node-Webkit?\r\n * @property {boolean} webApp - Set to true if running as a WebApp, i.e. within a WebView\r\n * @property {boolean} windows - Is running on windows?\r\n * @property {boolean} windowsPhone - Is running on a Windows Phone?\r\n * @property {number} iOSVersion - If running in iOS this will contain the major version number.\r\n * @property {number} pixelRatio - PixelRatio of the host device?\r\n */\nvar OS = {\n  android: false,\n  chromeOS: false,\n  cocoonJS: false,\n  cocoonJSApp: false,\n  cordova: false,\n  crosswalk: false,\n  desktop: false,\n  ejecta: false,\n  electron: false,\n  iOS: false,\n  iOSVersion: 0,\n  iPad: false,\n  iPhone: false,\n  kindle: false,\n  linux: false,\n  macOS: false,\n  node: false,\n  nodeWebkit: false,\n  pixelRatio: 1,\n  webApp: false,\n  windows: false,\n  windowsPhone: false\n};\n\nfunction init() {\n  var ua = navigator.userAgent;\n\n  if (/Windows/.test(ua)) {\n    OS.windows = true;\n  } else if (/Mac OS/.test(ua) && !/like Mac OS/.test(ua)) {\n    OS.macOS = true;\n  } else if (/Android/.test(ua)) {\n    OS.android = true;\n  } else if (/Linux/.test(ua)) {\n    OS.linux = true;\n  } else if (/iP[ao]d|iPhone/i.test(ua)) {\n    OS.iOS = true;\n    navigator.appVersion.match(/OS (\\d+)/);\n    OS.iOSVersion = parseInt(RegExp.$1, 10);\n    OS.iPhone = ua.toLowerCase().indexOf('iphone') !== -1;\n    OS.iPad = ua.toLowerCase().indexOf('ipad') !== -1;\n  } else if (/Kindle/.test(ua) || /\\bKF[A-Z][A-Z]+/.test(ua) || /Silk.*Mobile Safari/.test(ua)) {\n    OS.kindle = true; // This will NOT detect early generations of Kindle Fire, I think there is no reliable way...\n    // E.g. \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\n  } else if (/CrOS/.test(ua)) {\n    OS.chromeOS = true;\n  }\n\n  if (/Windows Phone/i.test(ua) || /IEMobile/i.test(ua)) {\n    OS.android = false;\n    OS.iOS = false;\n    OS.macOS = false;\n    OS.windows = true;\n    OS.windowsPhone = true;\n  }\n\n  var silk = /Silk/.test(ua);\n\n  if (OS.windows || OS.macOS || OS.linux && !silk || OS.chromeOS) {\n    OS.desktop = true;\n  } //  Windows Phone / Table reset\n\n\n  if (OS.windowsPhone || /Windows NT/i.test(ua) && /Touch/i.test(ua)) {\n    OS.desktop = false;\n  } //  WebApp mode in iOS\n\n\n  if (navigator.standalone) {\n    OS.webApp = true;\n  }\n\n  if (window.cordova !== undefined) {\n    OS.cordova = true;\n  }\n\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    OS.node = true;\n  }\n\n  if (OS.node && typeof process.versions === 'object') {\n    OS.nodeWebkit = !!process.versions['node-webkit'];\n    OS.electron = !!process.versions.electron;\n  }\n\n  if (navigator.isCocoonJS) {\n    OS.cocoonJS = true;\n\n    try {\n      OS.cocoonJSApp = typeof CocoonJS !== 'undefined';\n    } catch (error) {\n      OS.cocoonJSApp = false;\n    }\n  }\n\n  if (window.ejecta !== undefined) {\n    OS.ejecta = true;\n  }\n\n  if (/Crosswalk/.test(ua)) {\n    OS.crosswalk = true;\n  }\n\n  OS.pixelRatio = window['devicePixelRatio'] || 1;\n  return OS;\n}\n\nmodule.exports = init();","map":null,"metadata":{},"sourceType":"script"}