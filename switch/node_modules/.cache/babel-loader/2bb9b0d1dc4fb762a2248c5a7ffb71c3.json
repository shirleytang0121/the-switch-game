{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  http://www.blackpawn.com/texts/pointinpoly/\n\n/**\r\n * Checks if a point (as a pair of coordinates) is inside a Triangle's bounds.\r\n *\r\n * @function Phaser.Geom.Triangle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is inside the Triangle, otherwise `false`.\r\n */\nvar Contains = function Contains(triangle, x, y) {\n  var v0x = triangle.x3 - triangle.x1;\n  var v0y = triangle.y3 - triangle.y1;\n  var v1x = triangle.x2 - triangle.x1;\n  var v1y = triangle.y2 - triangle.y1;\n  var v2x = x - triangle.x1;\n  var v2y = y - triangle.y1;\n  var dot00 = v0x * v0x + v0y * v0y;\n  var dot01 = v0x * v1x + v0y * v1y;\n  var dot02 = v0x * v2x + v0y * v2y;\n  var dot11 = v1x * v1x + v1y * v1y;\n  var dot12 = v1x * v2x + v1y * v2y; // Compute barycentric coordinates\n\n  var b = dot00 * dot11 - dot01 * dot01;\n  var inv = b === 0 ? 0 : 1 / b;\n  var u = (dot11 * dot02 - dot01 * dot12) * inv;\n  var v = (dot00 * dot12 - dot01 * dot02) * inv;\n  return u >= 0 && v >= 0 && u + v < 1;\n};\n\nmodule.exports = Contains;","map":null,"metadata":{},"sourceType":"script"}