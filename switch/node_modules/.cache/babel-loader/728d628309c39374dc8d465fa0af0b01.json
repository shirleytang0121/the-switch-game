{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Curve = require('./Curve');\n\nvar QuadraticBezierInterpolation = require('../math/interpolation/QuadraticBezierInterpolation');\n\nvar Vector2 = require('../math/Vector2');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class QuadraticBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n */\n\n\nvar QuadraticBezier = new Class({\n  Extends: Curve,\n  initialize: function QuadraticBezier(p0, p1, p2) {\n    Curve.call(this, 'QuadraticBezier');\n\n    if (Array.isArray(p0)) {\n      p2 = new Vector2(p0[4], p0[5]);\n      p1 = new Vector2(p0[2], p0[3]);\n      p0 = new Vector2(p0[0], p0[1]);\n    }\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p0\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n\n    this.p0 = p0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p1\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n    this.p1 = p1;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p2\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n    this.p2 = p2;\n  },\n\n  /**\r\n   * Gets the starting point on the curve.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getStartPoint\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getStartPoint: function getStartPoint(out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    return out.copy(this.p0);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getResolution\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} divisions - [description]\r\n   *\r\n   * @return {number} [description]\r\n   */\n  getResolution: function getResolution(divisions) {\n    return divisions;\n  },\n\n  /**\r\n   * Get point at relative position in curve according to length.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getPoint\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getPoint: function getPoint(t, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    var p0 = this.p0;\n    var p1 = this.p1;\n    var p2 = this.p2;\n    return out.set(QuadraticBezierInterpolation(t, p0.x, p1.x, p2.x), QuadraticBezierInterpolation(t, p0.y, p1.y, p2.y));\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#draw\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - `Graphics` object to draw onto.\r\n   * @param {integer} [pointsTotal=32] - Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} `Graphics` object that was drawn to.\r\n   */\n  draw: function draw(graphics, pointsTotal) {\n    if (pointsTotal === undefined) {\n      pointsTotal = 32;\n    }\n\n    var points = this.getPoints(pointsTotal);\n    graphics.beginPath();\n    graphics.moveTo(this.p0.x, this.p0.y);\n\n    for (var i = 1; i < points.length; i++) {\n      graphics.lineTo(points[i].x, points[i].y);\n    }\n\n    graphics.strokePath(); //  So you can chain graphics calls\n\n    return graphics;\n  },\n\n  /**\r\n   * Converts the curve into a JSON compatible object.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#toJSON\r\n   * @since 3.2.0\r\n   *\r\n   * @return {JSONCurve} The JSON object containing this curve data.\r\n   */\n  toJSON: function toJSON() {\n    return {\n      type: this.type,\n      points: [this.p0.x, this.p0.y, this.p1.x, this.p1.y, this.p2.x, this.p2.y]\n    };\n  }\n});\n/**\r\n * Creates a curve from a JSON object, e. g. created by `toJSON`.\r\n *\r\n * @function Phaser.Curves.QuadraticBezier.fromJSON\r\n * @since 3.2.0\r\n *\r\n * @param {JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.QuadraticBezier} The created curve instance.\r\n */\n\nQuadraticBezier.fromJSON = function (data) {\n  var points = data.points;\n  var p0 = new Vector2(points[0], points[1]);\n  var p1 = new Vector2(points[2], points[3]);\n  var p2 = new Vector2(points[4], points[5]);\n  return new QuadraticBezier(p0, p1, p2);\n};\n\nmodule.exports = QuadraticBezier;","map":null,"metadata":{},"sourceType":"script"}