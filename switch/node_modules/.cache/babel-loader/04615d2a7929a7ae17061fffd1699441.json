{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BlendModes = require('../renderer/BlendModes');\n\nvar GetAdvancedValue = require('../utils/object/GetAdvancedValue');\n\nvar ScaleModes = require('../renderer/ScaleModes');\n/**\r\n * @typedef {object} GameObjectConfig\r\n *\r\n * @property {number} [x=0] - The x position of the Game Object.\r\n * @property {number} [y=0] - The y position of the Game Object.\r\n * @property {number} [depth=0] - The depth of the GameObject.\r\n * @property {boolean} [flipX=false] - The horizontally flipped state of the Game Object.\r\n * @property {boolean} [flipY=false] - The vertically flipped state of the Game Object.\r\n * @property {?(number|object)} [scale=null] - The scale of the GameObject.\r\n * @property {?(number|object)} [scrollFactor=null] - The scroll factor of the GameObject.\r\n * @property {number} [rotation=0] - The rotation angle of the Game Object, in radians.\r\n * @property {?number} [angle=null] - The rotation angle of the Game Object, in degrees.\r\n * @property {number} [alpha=1] - The alpha (opacity) of the Game Object.\r\n * @property {?(number|object)} [origin=null] - The origin of the Game Object.\r\n * @property {number} [scaleMode=ScaleModes.DEFAULT] - The scale mode of the GameObject.\r\n * @property {number} [blendMode=BlendModes.DEFAULT] - The blend mode of the GameObject.\r\n * @property {boolean} [visible=true] - The visible state of the Game Object.\r\n * @property {boolean} [add=true] - Add the GameObject to the scene.\r\n */\n\n/**\r\n * Builds a Game Object using the provided configuration object.\r\n *\r\n * @function Phaser.GameObjects.BuildGameObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The initial GameObject.\r\n * @param {GameObjectConfig} config - The config to build the GameObject with.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The built Game Object.\r\n */\n\n\nvar BuildGameObject = function BuildGameObject(scene, gameObject, config) {\n  //  Position\n  gameObject.x = GetAdvancedValue(config, 'x', 0);\n  gameObject.y = GetAdvancedValue(config, 'y', 0);\n  gameObject.depth = GetAdvancedValue(config, 'depth', 0); //  Flip\n\n  gameObject.flipX = GetAdvancedValue(config, 'flipX', false);\n  gameObject.flipY = GetAdvancedValue(config, 'flipY', false); //  Scale\n  //  Either: { scale: 2 } or { scale: { x: 2, y: 2 }}\n\n  var scale = GetAdvancedValue(config, 'scale', null);\n\n  if (typeof scale === 'number') {\n    gameObject.setScale(scale);\n  } else if (scale !== null) {\n    gameObject.scaleX = GetAdvancedValue(scale, 'x', 1);\n    gameObject.scaleY = GetAdvancedValue(scale, 'y', 1);\n  } //  ScrollFactor\n  //  Either: { scrollFactor: 2 } or { scrollFactor: { x: 2, y: 2 }}\n\n\n  var scrollFactor = GetAdvancedValue(config, 'scrollFactor', null);\n\n  if (typeof scrollFactor === 'number') {\n    gameObject.setScrollFactor(scrollFactor);\n  } else if (scrollFactor !== null) {\n    gameObject.scrollFactorX = GetAdvancedValue(scrollFactor, 'x', 1);\n    gameObject.scrollFactorY = GetAdvancedValue(scrollFactor, 'y', 1);\n  } //  Rotation\n\n\n  gameObject.rotation = GetAdvancedValue(config, 'rotation', 0);\n  var angle = GetAdvancedValue(config, 'angle', null);\n\n  if (angle !== null) {\n    gameObject.angle = angle;\n  } //  Alpha\n\n\n  gameObject.alpha = GetAdvancedValue(config, 'alpha', 1); //  Origin\n  //  Either: { origin: 0.5 } or { origin: { x: 0.5, y: 0.5 }}\n\n  var origin = GetAdvancedValue(config, 'origin', null);\n\n  if (typeof origin === 'number') {\n    gameObject.setOrigin(origin);\n  } else if (origin !== null) {\n    var ox = GetAdvancedValue(origin, 'x', 0.5);\n    var oy = GetAdvancedValue(origin, 'y', 0.5);\n    gameObject.setOrigin(ox, oy);\n  } //  ScaleMode\n\n\n  gameObject.scaleMode = GetAdvancedValue(config, 'scaleMode', ScaleModes.DEFAULT); //  BlendMode\n\n  gameObject.blendMode = GetAdvancedValue(config, 'blendMode', BlendModes.NORMAL); //  Visible\n\n  gameObject.visible = GetAdvancedValue(config, 'visible', true); //  Add to Scene\n\n  var add = GetAdvancedValue(config, 'add', true);\n\n  if (add) {\n    scene.sys.displayList.add(gameObject);\n  }\n\n  if (gameObject.preUpdate) {\n    scene.sys.updateList.add(gameObject);\n  }\n\n  return gameObject;\n};\n\nmodule.exports = BuildGameObject;","map":null,"metadata":{},"sourceType":"script"}