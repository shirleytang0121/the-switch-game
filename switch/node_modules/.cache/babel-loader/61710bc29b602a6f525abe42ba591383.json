{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar BlitterWebGLRenderer = function BlitterWebGLRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var list = src.getRenderList();\n\n  if (list.length === 0) {\n    return;\n  }\n\n  var pipeline = this.pipeline;\n  renderer.setPipeline(pipeline, src);\n  var cameraScrollX = camera.scrollX * src.scrollFactorX;\n  var cameraScrollY = camera.scrollY * src.scrollFactorY;\n  var calcMatrix = pipeline._tempMatrix1;\n  calcMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    calcMatrix.multiplyWithOffset(parentMatrix, -cameraScrollX, -cameraScrollY);\n    cameraScrollX = 0;\n    cameraScrollY = 0;\n  }\n\n  var blitterX = src.x - cameraScrollX;\n  var blitterY = src.y - cameraScrollY;\n  var prevTextureSourceIndex = -1;\n  var tintEffect = false;\n  var alpha = camera.alpha * src.alpha;\n  var roundPixels = camera.roundPixels;\n\n  for (var index = 0; index < list.length; index++) {\n    var bob = list[index];\n    var frame = bob.frame;\n    var bobAlpha = bob.alpha * alpha;\n\n    if (bobAlpha === 0) {\n      continue;\n    }\n\n    var width = frame.width;\n    var height = frame.height;\n    var x = blitterX + bob.x + frame.x;\n    var y = blitterY + bob.y + frame.y;\n\n    if (bob.flipX) {\n      width *= -1;\n      x += frame.width;\n    }\n\n    if (bob.flipY) {\n      height *= -1;\n      y += frame.height;\n    }\n\n    var xw = x + width;\n    var yh = y + height;\n    var tx0 = calcMatrix.getX(x, y);\n    var ty0 = calcMatrix.getY(x, y);\n    var tx1 = calcMatrix.getX(xw, yh);\n    var ty1 = calcMatrix.getY(xw, yh);\n    var tint = Utils.getTintAppendFloatAlpha(0xffffff, bobAlpha); //  Bind texture only if the Texture Source is different from before\n\n    if (frame.sourceIndex !== prevTextureSourceIndex) {\n      pipeline.setTexture2D(frame.glTexture, 0);\n      prevTextureSourceIndex = frame.sourceIndex;\n    }\n\n    if (roundPixels) {\n      tx0 = Math.round(tx0);\n      ty0 = Math.round(ty0);\n      tx1 = Math.round(tx1);\n      ty1 = Math.round(ty1);\n    } //  TL x/y, BL x/y, BR x/y, TR x/y\n\n\n    if (pipeline.batchQuad(tx0, ty0, tx0, ty1, tx1, ty1, tx1, ty0, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect, frame.glTexture, 0)) {\n      prevTextureSourceIndex = -1;\n    }\n  }\n};\n\nmodule.exports = BlitterWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}