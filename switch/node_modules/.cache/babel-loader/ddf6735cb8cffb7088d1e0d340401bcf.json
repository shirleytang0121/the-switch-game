{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetValue = require('../object/GetValue');\n\nvar Shuffle = require('./Shuffle');\n\nvar BuildChunk = function BuildChunk(a, b, qty) {\n  var out = [];\n\n  for (var aIndex = 0; aIndex < a.length; aIndex++) {\n    for (var bIndex = 0; bIndex < b.length; bIndex++) {\n      for (var i = 0; i < qty; i++) {\n        out.push({\n          a: a[aIndex],\n          b: b[bIndex]\n        });\n      }\n    }\n  }\n\n  return out;\n};\n/**\r\n * Creates an array populated with a range of values, based on the given arguments and configuration object.\r\n *\r\n * Range ([a,b,c], [1,2,3]) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2,3], qty = 3) =\r\n * a1, a1, a1, a2, a2, a2, a3, a3, a3, b1, b1, b1, b2, b2, b2, b3, b3, b3\r\n * \r\n * Range ([a,b,c], [1,2,3], repeat x1) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3, a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2], repeat -1 = endless, max = 14) =\r\n * Maybe if max is set then repeat goes to -1 automatically?\r\n * a1, a2, b1, b2, a1, a2, b1, b2, a1, a2, b1, b2, a1, a2 (capped at 14 elements)\r\n * \r\n * Range ([a], [1,2,3,4,5], random = true) =\r\n * a4, a1, a5, a2, a3\r\n * \r\n * Range ([a, b], [1,2,3], random = true) =\r\n * b3, a2, a1, b1, a3, b2\r\n * \r\n * Range ([a, b, c], [1,2,3], randomB = true) =\r\n * a3, a1, a2, b2, b3, b1, c1, c3, c2\r\n * \r\n * Range ([a], [1,2,3,4,5], yoyo = true) =\r\n * a1, a2, a3, a4, a5, a5, a4, a3, a2, a1\r\n * \r\n * Range ([a, b], [1,2,3], yoyo = true) =\r\n * a1, a2, a3, b1, b2, b3, b3, b2, b1, a3, a2, a1\r\n *\r\n * @function Phaser.Utils.Array.Range\r\n * @since 3.0.0\r\n *\r\n * @param {array} a - The first array of range elements.\r\n * @param {array} b - The second array of range elements.\r\n * @param {object} [options] - A range configuration object. Can contain: repeat, random, randomB, yoyo, max, qty.\r\n *\r\n * @return {array} An array of arranged elements.\r\n */\n\n\nvar Range = function Range(a, b, options) {\n  var max = GetValue(options, 'max', 0);\n  var qty = GetValue(options, 'qty', 1);\n  var random = GetValue(options, 'random', false);\n  var randomB = GetValue(options, 'randomB', false);\n  var repeat = GetValue(options, 'repeat', 0);\n  var yoyo = GetValue(options, 'yoyo', false);\n  var out = [];\n\n  if (randomB) {\n    Shuffle(b);\n  } //  Endless repeat, so limit by max\n\n\n  if (repeat === -1) {\n    if (max === 0) {\n      repeat = 0;\n    } else {\n      //  Work out how many repeats we need\n      var total = a.length * b.length * qty;\n\n      if (yoyo) {\n        total *= 2;\n      }\n\n      repeat = Math.ceil(max / total);\n    }\n  }\n\n  for (var i = 0; i <= repeat; i++) {\n    var chunk = BuildChunk(a, b, qty);\n\n    if (random) {\n      Shuffle(chunk);\n    }\n\n    out = out.concat(chunk);\n\n    if (yoyo) {\n      chunk.reverse();\n      out = out.concat(chunk);\n    }\n  }\n\n  if (max) {\n    out.splice(max);\n  }\n\n  return out;\n};\n\nmodule.exports = Range;","map":null,"metadata":{},"sourceType":"script"}