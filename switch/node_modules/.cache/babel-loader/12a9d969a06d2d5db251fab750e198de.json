{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Formats = require('./Formats');\n\nvar MapData = require('./mapdata/MapData');\n\nvar Parse = require('./parsers/Parse');\n\nvar Tilemap = require('./Tilemap');\n/**\r\n * Create a Tilemap from the given key or data. If neither is given, make a blank Tilemap. When\r\n * loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing from\r\n * a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map data. For\r\n * an empty map, you should specify tileWidth, tileHeight, width & height.\r\n *\r\n * @function Phaser.Tilemaps.ParseToTilemap\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {string} [key] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @param {integer} [tileWidth=32] - The width of a tile in pixels.\r\n * @param {integer} [tileHeight=32] - The height of a tile in pixels.\r\n * @param {integer} [width=10] - The width of the map in tiles.\r\n * @param {integer} [height=10] - The height of the map in tiles.\r\n * @param {integer[][]} [data] - Instead of loading from the cache, you can also load directly from\r\n * a 2D array of tile indexes.\r\n * @param {boolean} [insertNull=false] - Controls how empty tiles, tiles with an index of -1, in the\r\n * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n * \r\n * @return {Phaser.Tilemaps.Tilemap}\r\n */\n\n\nvar ParseToTilemap = function ParseToTilemap(scene, key, tileWidth, tileHeight, width, height, data, insertNull) {\n  if (tileWidth === undefined) {\n    tileWidth = 32;\n  }\n\n  if (tileHeight === undefined) {\n    tileHeight = 32;\n  }\n\n  if (width === undefined) {\n    width = 10;\n  }\n\n  if (height === undefined) {\n    height = 10;\n  }\n\n  if (insertNull === undefined) {\n    insertNull = false;\n  }\n\n  var mapData = null;\n\n  if (Array.isArray(data)) {\n    var name = key !== undefined ? key : 'map';\n    mapData = Parse(name, Formats.ARRAY_2D, data, tileWidth, tileHeight, insertNull);\n  } else if (key !== undefined) {\n    var tilemapData = scene.cache.tilemap.get(key);\n\n    if (!tilemapData) {\n      console.warn('No map data found for key ' + key);\n    } else {\n      mapData = Parse(key, tilemapData.format, tilemapData.data, tileWidth, tileHeight, insertNull);\n    }\n  }\n\n  if (mapData === null) {\n    mapData = new MapData({\n      tileWidth: tileWidth,\n      tileHeight: tileHeight,\n      width: width,\n      height: height\n    });\n  }\n\n  return new Tilemap(scene, mapData);\n};\n\nmodule.exports = ParseToTilemap;","map":null,"metadata":{},"sourceType":"script"}