{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar dataMemory = {};\n/** @class */\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {}\n  /**\r\n   * This is used to set a specific item in storage\r\n   * @param {string} key - the key for the item\r\n   * @param {object} value - the value\r\n   * @returns {string} value that was set\r\n   */\n\n\n  MemoryStorage.setItem = function (key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  };\n  /**\r\n   * This is used to get a specific key from storage\r\n   * @param {string} key - the key for the item\r\n   * This is used to clear the storage\r\n   * @returns {string} the data item\r\n   */\n\n\n  MemoryStorage.getItem = function (key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  };\n  /**\r\n   * This is used to remove an item from storage\r\n   * @param {string} key - the key being set\r\n   * @returns {string} value - value that was deleted\r\n   */\n\n\n  MemoryStorage.removeItem = function (key) {\n    return delete dataMemory[key];\n  };\n  /**\r\n   * This is used to clear the storage\r\n   * @returns {string} nothing\r\n   */\n\n\n  MemoryStorage.clear = function () {\n    dataMemory = {};\n    return dataMemory;\n  };\n\n  return MemoryStorage;\n}();\n\nexports.MemoryStorage = MemoryStorage;\n\nvar StorageHelper =\n/** @class */\nfunction () {\n  /**\r\n   * This is used to get a storage object\r\n   * @returns {object} the storage\r\n   */\n  function StorageHelper() {\n    try {\n      this.storageWindow = window.localStorage;\n      this.storageWindow.setItem('aws.amplify.test-ls', 1);\n      this.storageWindow.removeItem('aws.amplify.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n  /**\r\n   * This is used to return the storage\r\n   * @returns {object} the storage\r\n   */\n\n\n  StorageHelper.prototype.getStorage = function () {\n    return this.storageWindow;\n  };\n\n  return StorageHelper;\n}();\n\nexports.default = StorageHelper;","map":null,"metadata":{},"sourceType":"script"}