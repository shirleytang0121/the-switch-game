{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.SwapByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileA - First tile index.\r\n * @param {integer} tileB - Second tile index.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SwapByIndex = function SwapByIndex(indexA, indexB, tileX, tileY, width, height, layer) {\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i]) {\n      if (tiles[i].index === indexA) {\n        tiles[i].index = indexB;\n      } else if (tiles[i].index === indexB) {\n        tiles[i].index = indexA;\n      }\n    }\n  }\n};\n\nmodule.exports = SwapByIndex;","map":null,"metadata":{},"sourceType":"script"}