{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar DeathZone = require('./zones/DeathZone');\n\nvar EdgeZone = require('./zones/EdgeZone');\n\nvar EmitterOp = require('./EmitterOp');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetRandom = require('../../utils/array/GetRandom');\n\nvar HasAny = require('../../utils/object/HasAny');\n\nvar HasValue = require('../../utils/object/HasValue');\n\nvar Particle = require('./Particle');\n\nvar RandomZone = require('./zones/RandomZone');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar StableSort = require('../../utils/array/StableSort');\n\nvar Vector2 = require('../../math/Vector2');\n\nvar Wrap = require('../../math/Wrap');\n/**\r\n * @callback ParticleEmitterCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle associated with the call.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - This particle emitter associated with the call.\r\n */\n\n/**\r\n * @callback ParticleDeathCallback\r\n *\r\n * @param {Phaser.GameObjects.Particles.Particle} particle - The particle that died.\r\n*/\n\n/**\r\n * @typedef {object} ParticleEmitterBounds\r\n *\r\n * @property {number} x - The left edge of the rectangle.\r\n * @property {number} y - The top edge of the rectangle.\r\n * @property {number} width - The width of the rectangle.\r\n * @property {number} height - The height of the rectangle.\r\n *\r\n * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterBoundsAlt\r\n *\r\n * @property {number} x - The left edge of the rectangle.\r\n * @property {number} y - The top edge of the rectangle.\r\n * @property {number} w - The width of the rectangle.\r\n * @property {number} h - The height of the rectangle.\r\n *\r\n * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterDeathZoneConfig\r\n *\r\n * @property {DeathZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.DeathZone#source}.\r\n * @property {string} [type='onEnter'] - 'onEnter' or 'onLeave'.\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterEdgeZoneConfig\r\n *\r\n * @property {EdgeZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.EdgeZone#source}.\r\n * @property {string} type - 'edge'.\r\n * @property {integer} quantity - The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.\r\n * @property {number} [stepRate] - The distance between each particle. When set, `quantity` is implied and should be set to 0.\r\n * @property {boolean} [yoyo=false] - Whether particles are placed from start to end and then end to start.\r\n * @property {boolean} [seamless=true] - Whether one endpoint will be removed if it's identical to the other.\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterRandomZoneConfig\r\n *\r\n * @property {RandomZoneSource} source - A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.RandomZone#source}.\r\n * @property {string} [type] - 'random'.\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterConfig\r\n *\r\n * @property {boolean} [active] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#active}.\r\n * @property {(Phaser.BlendModes|string)} [blendMode] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#blendMode}.\r\n * @property {*} [callbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope} and {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.\r\n * @property {boolean} [collideBottom] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideBottom}.\r\n * @property {boolean} [collideLeft] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideLeft}.\r\n * @property {boolean} [collideRight] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideRight}.\r\n * @property {boolean} [collideTop] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideTop}.\r\n * @property {boolean} [deathCallback] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n * @property {*} [deathCallbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope}.\r\n * @property {function} [emitCallback] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n * @property {*} [emitCallbackScope] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.\r\n * @property {Phaser.GameObjects.GameObject} [follow] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#follow}.\r\n * @property {number} [frequency] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}.\r\n * @property {number} [gravityX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityX}.\r\n * @property {number} [gravityY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityY}.\r\n * @property {integer} [maxParticles] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxParticles}.\r\n * @property {string} [name] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#name}.\r\n * @property {boolean} [on] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#on}.\r\n * @property {boolean} [particleBringToTop] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop}.\r\n * @property {Phaser.GameObjects.Particles.Particle} [particleClass] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleClass}.\r\n * @property {boolean} [radial] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#radial}.\r\n * @property {number} [timeScale] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#timeScale}.\r\n * @property {boolean} [trackVisible] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#trackVisible}.\r\n * @property {boolean} [visible] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#visible}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [accelerationX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [accelerationY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationY} (emit only).\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [alpha] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#alpha}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [angle] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#angle} (emit only)\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [bounce] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#bounce} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [delay] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#delay} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [lifespan] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#lifespan} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [maxVelocityX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [maxVelocityY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [moveToX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [moveToY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [quantity] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity} (emit only).\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [rotate] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#rotate}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scale] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setScale}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scaleX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleX}.\r\n * @property {number|number[]|EmitterOpOnUpdateCallback|object} [scaleY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleY}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speed] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setSpeed} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speedX] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedX} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [speedY] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedY} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [tint] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#tint}.\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [x] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#x} (emit only).\r\n * @property {number|number[]|EmitterOpOnEmitCallback|object} [y] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#y} (emit only).\r\n * @property {object} [emitZone] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone}.\r\n * @property {ParticleEmitterBounds|ParticleEmitterBoundsAlt} [bounds] - As {@link Phaser.GameObjects.Particles.ParticleEmitter#setBounds}.\r\n * @property {object} [followOffset] - Assigns to {@link Phaser.GameObjects.Particles.ParticleEmitter#followOffset}.\r\n * @property {number} [followOffset.x] - x-coordinate of the offset.\r\n * @property {number} [followOffset.y] - y-coordinate of the offset.\r\n * @property {number|number[]|string|string[]|Phaser.Textures.Frame|Phaser.Textures.Frame[]|ParticleEmitterFrameConfig} [frame] - Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n */\n\n/**\r\n * @typedef {object} ParticleEmitterFrameConfig\r\n *\r\n * @property {number|number[]|string|string[]|Phaser.Textures.Frame|Phaser.Textures.Frame[]} [frames] - One or more texture frames.\r\n * @property {boolean} [cycle] - Whether texture frames will be assigned consecutively (true) or at random (false).\r\n * @property {integer} [quantity] - The number of consecutive particles receiving each texture frame, when `cycle` is true.\r\n */\n\n/**\r\n * @classdesc\r\n * A particle emitter represents a single particle stream.\r\n * It controls a pool of {@link Phaser.GameObjects.Particles.Particle Particles} and is controlled by a {@link Phaser.GameObjects.Particles.ParticleEmitterManager Particle Emitter Manager}.\r\n *\r\n * @class ParticleEmitter\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} manager - The Emitter Manager this Emitter belongs to.\r\n * @param {ParticleEmitterConfig} config - Settings for this emitter.\r\n */\n\n\nvar ParticleEmitter = new Class({\n  Mixins: [Components.BlendMode, Components.Mask, Components.ScrollFactor, Components.Visible],\n  initialize: function ParticleEmitter(manager, config) {\n    /**\r\n     * The Emitter Manager this Emitter belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#manager\r\n     * @type {Phaser.GameObjects.Particles.ParticleEmitterManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = manager;\n    /**\r\n     * The texture assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = manager.texture;\n    /**\r\n     * The texture frames assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frames\r\n     * @type {Phaser.Textures.Frame[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.frames = [manager.defaultFrame];\n    /**\r\n     * The default texture frame assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#defaultFrame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFrame = manager.defaultFrame;\n    /**\r\n     * Names of simple configuration properties.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#configFastMap\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.configFastMap = ['active', 'blendMode', 'collideBottom', 'collideLeft', 'collideRight', 'collideTop', 'deathCallback', 'deathCallbackScope', 'emitCallback', 'emitCallbackScope', 'follow', 'frequency', 'gravityX', 'gravityY', 'maxParticles', 'name', 'on', 'particleBringToTop', 'particleClass', 'radial', 'timeScale', 'trackVisible', 'visible'];\n    /**\r\n     * Names of complex configuration properties.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#configOpMap\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.configOpMap = ['accelerationX', 'accelerationY', 'angle', 'alpha', 'bounce', 'delay', 'lifespan', 'maxVelocityX', 'maxVelocityY', 'moveToX', 'moveToY', 'quantity', 'rotate', 'scaleX', 'scaleY', 'speedX', 'speedY', 'tint', 'x', 'y'];\n    /**\r\n     * The name of this Particle Emitter.\r\n     *\r\n     * Empty by default and never populated by Phaser, this is left for developers to use.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * The Particle Class which will be emitted by this Emitter.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#particleClass\r\n     * @type {Phaser.GameObjects.Particles.Particle}\r\n     * @default Phaser.GameObjects.Particles.Particle\r\n     * @since 3.0.0\r\n     */\n\n    this.particleClass = Particle;\n    /**\r\n     * The x-coordinate of the particle origin (where particles will be emitted).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#x\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     */\n\n    this.x = new EmitterOp(config, 'x', 0);\n    /**\r\n     * The y-coordinate of the particle origin (where particles will be emitted).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#y\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     */\n\n    this.y = new EmitterOp(config, 'y', 0);\n    /**\r\n     * A radial emitter will emit particles in all directions between angle min and max,\r\n     * using {@link Phaser.GameObjects.Particles.ParticleEmitter#speed} as the value. If set to false then this acts as a point Emitter.\r\n     * A point emitter will emit particles only in the direction derived from the speedX and speedY values.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#radial\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n     */\n\n    this.radial = true;\n    /**\r\n     * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     */\n\n    this.gravityX = 0;\n    /**\r\n     * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     */\n\n    this.gravityY = 0;\n    /**\r\n     * Whether accelerationX and accelerationY are non-zero. Set automatically during configuration.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#acceleration\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.acceleration = false;\n    /**\r\n     * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationX = new EmitterOp(config, 'accelerationX', 0, true);\n    /**\r\n     * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationY = new EmitterOp(config, 'accelerationY', 0, true);\n    /**\r\n     * The maximum horizontal velocity of emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityX = new EmitterOp(config, 'maxVelocityX', 10000, true);\n    /**\r\n     * The maximum vertical velocity of emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityY = new EmitterOp(config, 'maxVelocityY', 10000, true);\n    /**\r\n     * The initial horizontal speed of emitted particles, in pixels per second.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#speedX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n     */\n\n    this.speedX = new EmitterOp(config, 'speedX', 0, true);\n    /**\r\n     * The initial vertical speed of emitted particles, in pixels per second.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#speedY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n     */\n\n    this.speedY = new EmitterOp(config, 'speedY', 0, true);\n    /**\r\n     * Whether moveToX and moveToY are nonzero. Set automatically during configuration.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveTo\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.moveTo = false;\n    /**\r\n     * The x-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.moveToX = new EmitterOp(config, 'moveToX', 0, true);\n    /**\r\n     * The y-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.moveToY = new EmitterOp(config, 'moveToY', 0, true);\n    /**\r\n     * Whether particles will rebound when they meet the emitter bounds.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#bounce\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bounce = new EmitterOp(config, 'bounce', 0, true);\n    /**\r\n     * The horizontal scale of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n     */\n\n    this.scaleX = new EmitterOp(config, 'scaleX', 1);\n    /**\r\n     * The vertical scale of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n     */\n\n    this.scaleY = new EmitterOp(config, 'scaleY', 1);\n    /**\r\n     * Color tint applied to emitted particles. Any alpha component (0xAA000000) is ignored.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#tint\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0xffffffff\r\n     * @since 3.0.0\r\n     */\n\n    this.tint = new EmitterOp(config, 'tint', 0xffffffff);\n    /**\r\n     * The alpha (transparency) of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#alpha\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n     */\n\n    this.alpha = new EmitterOp(config, 'alpha', 1);\n    /**\r\n     * The lifespan of emitted particles, in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#lifespan\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n     */\n\n    this.lifespan = new EmitterOp(config, 'lifespan', 1000);\n    /**\r\n     * The angle of the initial velocity of emitted particles, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#angle\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default { min: 0, max: 360 }\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n     */\n\n    this.angle = new EmitterOp(config, 'angle', {\n      min: 0,\n      max: 360\n    });\n    /**\r\n     * The rotation of emitted particles, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#rotate\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rotate = new EmitterOp(config, 'rotate', 0);\n    /**\r\n     * A function to call when a particle is emitted.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallback\r\n     * @type {?ParticleEmitterCallback}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.emitCallback = null;\n    /**\r\n     * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope\r\n     * @type {?*}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.emitCallbackScope = null;\n    /**\r\n     * A function to call when a particle dies.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallback\r\n     * @type {?ParticleDeathCallback}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.deathCallback = null;\n    /**\r\n     * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope\r\n     * @type {?*}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.deathCallbackScope = null;\n    /**\r\n     * Set to hard limit the amount of particle objects this emitter is allowed to create.\r\n     * 0 means unlimited.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxParticles\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxParticles = 0;\n    /**\r\n     * How many particles are emitted each time particles are emitted (one explosion or one flow cycle).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#quantity\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n     */\n\n    this.quantity = new EmitterOp(config, 'quantity', 1, true);\n    /**\r\n     * How many ms to wait after emission before the particles start updating.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#delay\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delay = new EmitterOp(config, 'delay', 0, true);\n    /**\r\n     * For a flow emitter, the time interval (>= 0) between particle flow cycles in ms.\r\n     * A value of 0 means there is one particle flow cycle for each logic update (the maximum flow frequency). This is the default setting.\r\n     * For an exploding emitter, this value will be -1.\r\n     * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} also puts the emitter in flow mode (frequency >= 0).\r\n     * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} also puts the emitter in explode mode (frequency = -1).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frequency\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     */\n\n    this.frequency = 0;\n    /**\r\n     * Controls if the emitter is currently emitting a particle flow (when frequency >= 0).\r\n     * Already alive particles will continue to update until they expire.\r\n     * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#start} and {@link Phaser.GameObjects.Particles.ParticleEmitter#stop}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#on\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.on = true;\n    /**\r\n     * Newly emitted particles are added to the top of the particle list, i.e. rendered above those already alive.\r\n     * Set to false to send them to the back.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.particleBringToTop = true;\n    /**\r\n     * The time rate applied to active particles, affecting lifespan, movement, and tweens. Values larger than 1 are faster than normal.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * An object describing a shape to emit particles from.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitZone\r\n     * @type {?Phaser.GameObjects.Particles.Zones.EdgeZone|Phaser.GameObjects.Particles.Zones.RandomZone}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n     */\n\n    this.emitZone = null;\n    /**\r\n     * An object describing a shape that deactivates particles when they interact with it.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathZone\r\n     * @type {?Phaser.GameObjects.Particles.Zones.DeathZone}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n     */\n\n    this.deathZone = null;\n    /**\r\n     * A rectangular boundary constraining particle movement.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#bounds\r\n     * @type {?Phaser.Geom.Rectangle}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n     */\n\n    this.bounds = null;\n    /**\r\n     * Whether particles interact with the left edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideLeft\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideLeft = true;\n    /**\r\n     * Whether particles interact with the right edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideRight\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideRight = true;\n    /**\r\n     * Whether particles interact with the top edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideTop = true;\n    /**\r\n     * Whether particles interact with the bottom edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideBottom\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideBottom = true;\n    /**\r\n     * Whether this emitter updates itself and its particles.\r\n     *\r\n     * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#pause}\r\n     * and {@link Phaser.GameObjects.Particles.ParticleEmitter#resume}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#active\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.active = true;\n    /**\r\n     * Set this to false to hide any active particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#visible\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setVisible\r\n     */\n\n    this.visible = true;\n    /**\r\n     * The blend mode of this emitter's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#blendMode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setBlendMode\r\n     */\n\n    this.blendMode = BlendModes.NORMAL;\n    /**\r\n     * A Game Object whose position is used as the particle origin.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#follow\r\n     * @type {?Phaser.GameObjects.GameObject}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n     */\n\n    this.follow = null;\n    /**\r\n     * The offset of the particle origin from the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#followOffset\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     */\n\n    this.followOffset = new Vector2();\n    /**\r\n     * Whether the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#visible} state will track\r\n     * the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target's visibility state.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#trackVisible\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     */\n\n    this.trackVisible = false;\n    /**\r\n     * The current texture frame, as an index of {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#currentFrame\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.currentFrame = 0;\n    /**\r\n     * Whether texture {@link Phaser.GameObjects.Particles.ParticleEmitter#frames} are selected at random.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#randomFrame\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.randomFrame = true;\n    /**\r\n     * The number of consecutive particles that receive a single texture frame (per frame cycle).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.frameQuantity = 1;\n    /**\r\n     * Inactive particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#dead\r\n     * @type {Phaser.GameObjects.Particles.Particle[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.dead = [];\n    /**\r\n     * Active particles\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#alive\r\n     * @type {Phaser.GameObjects.Particles.Particle[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.alive = [];\n    /**\r\n     * The time until the next flow cycle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#_counter\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._counter = 0;\n    /**\r\n     * Counts up to {@link Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#_frameCounter\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._frameCounter = 0;\n\n    if (config) {\n      this.fromJSON(config);\n    }\n  },\n\n  /**\r\n   * Merges configuration settings into the emitter's current settings.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterConfig} config - Settings for this emitter.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  fromJSON: function fromJSON(config) {\n    if (!config) {\n      return this;\n    } //  Only update properties from their current state if they exist in the given config\n\n\n    var i = 0;\n    var key = '';\n\n    for (i = 0; i < this.configFastMap.length; i++) {\n      key = this.configFastMap[i];\n\n      if (HasValue(config, key)) {\n        this[key] = GetFastValue(config, key);\n      }\n    }\n\n    for (i = 0; i < this.configOpMap.length; i++) {\n      key = this.configOpMap[i];\n\n      if (HasValue(config, key)) {\n        this[key].loadConfig(config);\n      }\n    }\n\n    this.acceleration = this.accelerationX.propertyValue !== 0 || this.accelerationY.propertyValue !== 0;\n    this.moveTo = this.moveToX.propertyValue !== 0 || this.moveToY.propertyValue !== 0; //  Special 'speed' override\n\n    if (HasValue(config, 'speed')) {\n      this.speedX.loadConfig(config, 'speed');\n      this.speedY = null;\n    } //  If you specify speedX, speedY or moveTo then it changes the emitter from radial to a point emitter\n\n\n    if (HasAny(config, ['speedX', 'speedY']) || this.moveTo) {\n      this.radial = false;\n    } //  Special 'scale' override\n\n\n    if (HasValue(config, 'scale')) {\n      this.scaleX.loadConfig(config, 'scale');\n      this.scaleY = null;\n    }\n\n    if (HasValue(config, 'callbackScope')) {\n      var callbackScope = GetFastValue(config, 'callbackScope', null);\n      this.emitCallbackScope = callbackScope;\n      this.deathCallbackScope = callbackScope;\n    }\n\n    if (HasValue(config, 'emitZone')) {\n      this.setEmitZone(config.emitZone);\n    }\n\n    if (HasValue(config, 'deathZone')) {\n      this.setDeathZone(config.deathZone);\n    }\n\n    if (HasValue(config, 'bounds')) {\n      this.setBounds(config.bounds);\n    }\n\n    if (HasValue(config, 'followOffset')) {\n      this.followOffset.setFromObject(GetFastValue(config, 'followOffset', 0));\n    }\n\n    if (HasValue(config, 'frame')) {\n      this.setFrame(config.frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates a description of this emitter suitable for JSON serialization.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} [output] - An object to copy output into.\r\n   *\r\n   * @return {object} - The output object.\r\n   */\n  toJSON: function toJSON(output) {\n    if (output === undefined) {\n      output = {};\n    }\n\n    var i = 0;\n    var key = '';\n\n    for (i = 0; i < this.configFastMap.length; i++) {\n      key = this.configFastMap[i];\n      output[key] = this[key];\n    }\n\n    for (i = 0; i < this.configOpMap.length; i++) {\n      key = this.configOpMap[i];\n\n      if (this[key]) {\n        output[key] = this[key].toJSON();\n      }\n    } //  special handlers\n\n\n    if (!this.speedY) {\n      delete output.speedX;\n      output.speed = this.speedX.toJSON();\n    }\n\n    if (!this.scaleY) {\n      delete output.scaleX;\n      output.scale = this.scaleX.toJSON();\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Continuously moves the particle origin to follow a Game Object's position.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} target - The Game Object to follow.\r\n   * @param {number} [offsetX=0] - Horizontal offset of the particle origin from the Game Object.\r\n   * @param {number} [offsetY=0] - Vertical offset of the particle origin from the Game Object.\r\n   * @param {boolean} [trackVisible=false] - Whether the emitter's visible state will track the target's visible state.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  startFollow: function startFollow(target, offsetX, offsetY, trackVisible) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    if (trackVisible === undefined) {\n      trackVisible = false;\n    }\n\n    this.follow = target;\n    this.followOffset.set(offsetX, offsetY);\n    this.trackVisible = trackVisible;\n    return this;\n  },\n\n  /**\r\n   * Stops following a Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  stopFollow: function stopFollow() {\n    this.follow = null;\n    this.followOffset.set(0, 0);\n    this.trackVisible = false;\n    return this;\n  },\n\n  /**\r\n   * Chooses a texture frame from {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Textures.Frame} The texture frame.\r\n   */\n  getFrame: function getFrame() {\n    if (this.frames.length === 1) {\n      return this.defaultFrame;\n    } else if (this.randomFrame) {\n      return GetRandom(this.frames);\n    } else {\n      var frame = this.frames[this.currentFrame];\n      this._frameCounter++;\n\n      if (this._frameCounter === this.frameQuantity) {\n        this._frameCounter = 0;\n        this.currentFrame = Wrap(this.currentFrame + 1, 0, this._frameLength);\n      }\n\n      return frame;\n    }\n  },\n  // frame: 0\n  // frame: 'red'\n  // frame: [ 0, 1, 2, 3 ]\n  // frame: [ 'red', 'green', 'blue', 'pink', 'white' ]\n  // frame: { frames: [ 'red', 'green', 'blue', 'pink', 'white' ], [cycle: bool], [quantity: int] }\n\n  /**\r\n   * Sets a pattern for assigning texture frames to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|string|integer|ParticleEmitterFrameConfig)} frames - One or more texture frames, or a configuration object.\r\n   * @param {boolean} [pickRandom=true] - Whether frames should be assigned at random from `frames`.\r\n   * @param {integer} [quantity=1] - The number of consecutive particles that will receive each frame.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setFrame: function setFrame(frames, pickRandom, quantity) {\n    if (pickRandom === undefined) {\n      pickRandom = true;\n    }\n\n    if (quantity === undefined) {\n      quantity = 1;\n    }\n\n    this.randomFrame = pickRandom;\n    this.frameQuantity = quantity;\n    this.currentFrame = 0;\n    this._frameCounter = 0;\n    var t = typeof frames;\n\n    if (Array.isArray(frames) || t === 'string' || t === 'number') {\n      this.manager.setEmitterFrames(frames, this);\n    } else if (t === 'object') {\n      var frameConfig = frames;\n      frames = GetFastValue(frameConfig, 'frames', null);\n\n      if (frames) {\n        this.manager.setEmitterFrames(frames, this);\n      }\n\n      var isCycle = GetFastValue(frameConfig, 'cycle', false);\n      this.randomFrame = isCycle ? false : true;\n      this.frameQuantity = GetFastValue(frameConfig, 'quantity', quantity);\n    }\n\n    this._frameLength = this.frames.length;\n\n    if (this._frameLength === 1) {\n      this.frameQuantity = 1;\n      this.randomFrame = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle movement on or off.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [value=true] - Radial mode (true) or point mode (true).\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setRadial: function setRadial(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.radial = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of the emitter's particle origin.\r\n   * New particles will be emitted here.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} x - The x-coordinate of the particle origin.\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} y - The y-coordinate of the particle origin.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setPosition: function setPosition(x, y) {\n    this.x.onChange(x);\n    this.y.onChange(y);\n    return this;\n  },\n\n  /**\r\n   * Sets or modifies a rectangular boundary constraining the particles.\r\n   *\r\n   * To remove the boundary, set {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds} to null.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|ParticleEmitterBounds|ParticleEmitterBoundsAlt)} x - The x-coordinate of the left edge of the boundary, or an object representing a rectangle.\r\n   * @param {number} y - The y-coordinate of the top edge of the boundary.\r\n   * @param {number} width - The width of the boundary.\r\n   * @param {number} height - The height of the boundary.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setBounds: function setBounds(x, y, width, height) {\n    if (typeof x === 'object') {\n      var obj = x;\n      x = obj.x;\n      y = obj.y;\n      width = HasValue(obj, 'w') ? obj.w : obj.width;\n      height = HasValue(obj, 'h') ? obj.h : obj.height;\n    }\n\n    if (this.bounds) {\n      this.bounds.setTo(x, y, width, height);\n    } else {\n      this.bounds = new Rectangle(x, y, width, height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the initial horizontal speed of emitted particles.\r\n   * Changes the emitter to point mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeedX: function setSpeedX(value) {\n    this.speedX.onChange(value); //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n    this.radial = false;\n    return this;\n  },\n\n  /**\r\n   * Sets the initial vertical speed of emitted particles.\r\n   * Changes the emitter to point mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeedY: function setSpeedY(value) {\n    if (this.speedY) {\n      this.speedY.onChange(value); //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n      this.radial = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the initial radial speed of emitted particles.\r\n   * Changes the emitter to radial mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeed\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeed: function setSpeed(value) {\n    this.speedX.onChange(value);\n    this.speedY = null; //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n    this.radial = true;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScaleX: function setScaleX(value) {\n    this.scaleX.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScaleY: function setScaleY(value) {\n    this.scaleY.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScale: function setScale(value) {\n    this.scaleX.onChange(value);\n    this.scaleY = null;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravityX: function setGravityX(value) {\n    this.gravityX = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravityY: function setGravityY(value) {\n    this.gravityY = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - Horizontal acceleration due to gravity, in pixels per second squared.\r\n   * @param {number} y - Vertical acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravity: function setGravity(x, y) {\n    this.gravityX = x;\n    this.gravityY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the opacity of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnUpdateCallback|object} value - A value between 0 (transparent) and 1 (opaque).\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setAlpha: function setAlpha(value) {\n    this.alpha.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitterAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The angle of the initial velocity of emitted particles.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setEmitterAngle: function setEmitterAngle(value) {\n    this.angle.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The angle of the initial velocity of emitted particles.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setAngle: function setAngle(value) {\n    this.angle.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the lifespan of newly emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} value - The particle lifespan, in ms.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setLifespan: function setLifespan(value) {\n    this.lifespan.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the number of particles released at each flow cycle or explosion.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} quantity - The number of particles to release at each flow cycle or explosion.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setQuantity: function setQuantity(quantity) {\n    this.quantity.onChange(quantity);\n    return this;\n  },\n\n  /**\r\n   * Sets the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}\r\n   * and {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms; or -1 to put the emitter in explosion mode.\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} [quantity] - The number of particles to release at each flow cycle or explosion.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setFrequency: function setFrequency(frequency, quantity) {\n    this.frequency = frequency;\n    this._counter = 0;\n\n    if (quantity) {\n      this.quantity.onChange(quantity);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#emitZone}.\r\n   *\r\n   * An {@link ParticleEmitterEdgeZoneConfig EdgeZone} places particles on its edges. Its {@link EdgeZoneSource source} can be a Curve, Path, Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link EdgeZoneSourceCallback getPoints} method.\r\n   *\r\n   * A {@link ParticleEmitterRandomZoneConfig RandomZone} places randomly within its interior. Its {@link RandomZoneSource source} can be a Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link RandomZoneSourceCallback getRandomPoint} method.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterEdgeZoneConfig|ParticleEmitterRandomZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current emit zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setEmitZone: function setEmitZone(zoneConfig) {\n    if (zoneConfig === undefined) {\n      this.emitZone = null;\n    } else {\n      //  Where source = Geom like Circle, or a Path or Curve\n      //  emitZone: { type: 'random', source: X }\n      //  emitZone: { type: 'edge', source: X, quantity: 32, [stepRate=0], [yoyo=false], [seamless=true] }\n      var type = GetFastValue(zoneConfig, 'type', 'random');\n      var source = GetFastValue(zoneConfig, 'source', null);\n\n      switch (type) {\n        case 'random':\n          this.emitZone = new RandomZone(source);\n          break;\n\n        case 'edge':\n          var quantity = GetFastValue(zoneConfig, 'quantity', 1);\n          var stepRate = GetFastValue(zoneConfig, 'stepRate', 0);\n          var yoyo = GetFastValue(zoneConfig, 'yoyo', false);\n          var seamless = GetFastValue(zoneConfig, 'seamless', true);\n          this.emitZone = new EdgeZone(source, quantity, stepRate, yoyo, seamless);\n          break;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#deathZone}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterDeathZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current death zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setDeathZone: function setDeathZone(zoneConfig) {\n    if (zoneConfig === undefined) {\n      this.deathZone = null;\n    } else {\n      //  Where source = Geom like Circle or Rect that supports a 'contains' function\n      //  deathZone: { type: 'onEnter', source: X }\n      //  deathZone: { type: 'onLeave', source: X }\n      var type = GetFastValue(zoneConfig, 'type', 'onEnter');\n      var source = GetFastValue(zoneConfig, 'source', null);\n\n      if (source && typeof source.contains === 'function') {\n        var killOnEnter = type === 'onEnter' ? true : false;\n        this.deathZone = new DeathZone(source, killOnEnter);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates inactive particles and adds them to this emitter's pool.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#reserve\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} particleCount - The number of particles to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  reserve: function reserve(particleCount) {\n    var dead = this.dead;\n\n    for (var i = 0; i < particleCount; i++) {\n      dead.push(new this.particleClass(this));\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Gets the number of active (in-use) particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getAliveParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles with `active=true`.\r\n   */\n  getAliveParticleCount: function getAliveParticleCount() {\n    return this.alive.length;\n  },\n\n  /**\r\n   * Gets the number of inactive (available) particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getDeadParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles with `active=false`.\r\n   */\n  getDeadParticleCount: function getDeadParticleCount() {\n    return this.dead.length;\n  },\n\n  /**\r\n   * Gets the total number of particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles, including both alive and dead.\r\n   */\n  getParticleCount: function getParticleCount() {\n    return this.getAliveParticleCount() + this.getDeadParticleCount();\n  },\n\n  /**\r\n   * Whether this emitter is at its limit (if set).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#atLimit\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Returns `true` if this Emitter is at its limit, or `false` if no limit, or below the `maxParticles` level.\r\n   */\n  atLimit: function atLimit() {\n    return this.maxParticles > 0 && this.getParticleCount() === this.maxParticles;\n  },\n\n  /**\r\n   * Sets a function to call for each newly emitted particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleEmit\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterCallback} callback - The function.\r\n   * @param {*} [context] - The calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  onParticleEmit: function onParticleEmit(callback, context) {\n    if (callback === undefined) {\n      //  Clear any previously set callback\n      this.emitCallback = null;\n      this.emitCallbackScope = null;\n    } else if (typeof callback === 'function') {\n      this.emitCallback = callback;\n\n      if (context) {\n        this.emitCallbackScope = context;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets a function to call for each particle death.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleDeath\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleDeathCallback} callback - The function.\r\n   * @param {*} [context] - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  onParticleDeath: function onParticleDeath(callback, context) {\n    if (callback === undefined) {\n      //  Clear any previously set callback\n      this.deathCallback = null;\n      this.deathCallbackScope = null;\n    } else if (typeof callback === 'function') {\n      this.deathCallback = callback;\n\n      if (context) {\n        this.deathCallbackScope = context;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Deactivates every particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#killAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  killAll: function killAll() {\n    var dead = this.dead;\n    var alive = this.alive;\n\n    while (alive.length > 0) {\n      dead.push(alive.pop());\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calls a function for each active particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachAlive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterCallback} callback - The function.\r\n   * @param {*} context - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  forEachAlive: function forEachAlive(callback, context) {\n    var alive = this.alive;\n    var length = alive.length;\n\n    for (var index = 0; index < length; ++index) {\n      //  Sends the Particle and the Emitter\n      callback.call(context, alive[index], this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calls a function for each inactive particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachDead\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterCallback} callback - The function.\r\n   * @param {*} context - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  forEachDead: function forEachDead(callback, context) {\n    var dead = this.dead;\n    var length = dead.length;\n\n    for (var index = 0; index < length; ++index) {\n      //  Sends the Particle and the Emitter\n      callback.call(context, dead[index], this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on} the emitter and resets the flow counter.\r\n   *\r\n   * If this emitter is in flow mode (frequency >= 0; the default), the particle flow will start (or restart).\r\n   *\r\n   * If this emitter is in explode mode (frequency = -1), nothing will happen.\r\n   * Use {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} or {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} instead.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#start\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  start: function start() {\n    this.on = true;\n    this._counter = 0;\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on off} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#stop\r\n   * @since 3.11.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  stop: function stop() {\n    this.on = false;\n    return this;\n  },\n\n  /**\r\n   * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Deactivates} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  pause: function pause() {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Activates} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  resume: function resume() {\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Sorts active particles with {@link Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSort\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  depthSort: function depthSort() {\n    StableSort.inplace(this.alive, this.depthSortCallback);\n    return this;\n  },\n\n  /**\r\n   * Puts the emitter in flow mode (frequency >= 0) and starts (or restarts) a particle flow.\r\n   *\r\n   * To resume a flow at the current frequency and quantity, use {@link Phaser.GameObjects.Particles.ParticleEmitter#start} instead.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#flow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms.\r\n   * @param {number|float[]|EmitterOpOnEmitCallback|object} [count=1] - The number of particles to emit at each flow cycle.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  flow: function flow(frequency, count) {\n    if (count === undefined) {\n      count = 1;\n    }\n\n    this.frequency = frequency;\n    this.quantity.onChange(count);\n    return this.start();\n  },\n\n  /**\r\n   * Puts the emitter in explode mode (frequency = -1), stopping any current particle flow, and emits several particles all at once.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#explode\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} count - The amount of Particles to emit.\r\n   * @param {number} x - The x coordinate to emit the Particles from.\r\n   * @param {number} y - The y coordinate to emit the Particles from.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   */\n  explode: function explode(count, x, y) {\n    this.frequency = -1;\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Emits particles at a given position (or the emitter's current position).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticleAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n   * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n   * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   */\n  emitParticleAt: function emitParticleAt(x, y, count) {\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Emits particles at a given position (or the emitter's current position).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n   * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n   * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   *\r\n   * @see Phaser.GameObjects.Particles.Particle#fire\r\n   */\n  emitParticle: function emitParticle(count, x, y) {\n    if (this.atLimit()) {\n      return;\n    }\n\n    if (count === undefined) {\n      count = this.quantity.onEmit();\n    }\n\n    var dead = this.dead;\n\n    for (var i = 0; i < count; i++) {\n      var particle = dead.pop();\n\n      if (!particle) {\n        particle = new this.particleClass(this);\n      }\n\n      particle.fire(x, y);\n\n      if (this.particleBringToTop) {\n        this.alive.push(particle);\n      } else {\n        this.alive.unshift(particle);\n      }\n\n      if (this.emitCallback) {\n        this.emitCallback.call(this.emitCallbackScope, particle, this);\n      }\n\n      if (this.atLimit()) {\n        break;\n      }\n    }\n\n    return particle;\n  },\n\n  /**\r\n   * Updates this emitter and its particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#preUpdate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  preUpdate: function preUpdate(time, delta) {\n    //  Scale the delta\n    delta *= this.timeScale;\n    var step = delta / 1000;\n\n    if (this.trackVisible) {\n      this.visible = this.follow.visible;\n    } //  Any particle processors?\n\n\n    var processors = this.manager.getProcessors();\n    var particles = this.alive;\n    var dead = this.dead;\n    var i = 0;\n    var rip = [];\n    var length = particles.length;\n\n    for (i = 0; i < length; i++) {\n      var particle = particles[i]; //  update returns `true` if the particle is now dead (lifeCurrent <= 0)\n\n      if (particle.update(delta, step, processors)) {\n        rip.push({\n          index: i,\n          particle: particle\n        });\n      }\n    } //  Move dead particles to the dead array\n\n\n    length = rip.length;\n\n    if (length > 0) {\n      var deathCallback = this.deathCallback;\n      var deathCallbackScope = this.deathCallbackScope;\n\n      for (i = length - 1; i >= 0; i--) {\n        var entry = rip[i]; //  Remove from particles array\n\n        particles.splice(entry.index, 1); //  Add to dead array\n\n        dead.push(entry.particle); //  Callback\n\n        if (deathCallback) {\n          deathCallback.call(deathCallbackScope, entry.particle);\n        }\n\n        entry.particle.resetPosition();\n      }\n    }\n\n    if (!this.on) {\n      return;\n    }\n\n    if (this.frequency === 0) {\n      this.emitParticle();\n    } else if (this.frequency > 0) {\n      this._counter -= delta;\n\n      if (this._counter <= 0) {\n        this.emitParticle(); //  counter = frequency - remained from previous delta\n\n        this._counter = this.frequency - Math.abs(this._counter);\n      }\n    }\n  },\n\n  /**\r\n   * Calculates the difference of two particles, for sorting them by depth.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} a - The first particle.\r\n   * @param {object} b - The second particle.\r\n   *\r\n   * @return {integer} The difference of a and b's y coordinates.\r\n   */\n  depthSortCallback: function depthSortCallback(a, b) {\n    return a.y - b.y;\n  }\n});\nmodule.exports = ParticleEmitter;","map":null,"metadata":{},"sourceType":"script"}