{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar MATH_CONST = require('../../math/const');\n\nvar TransformMatrix = require('./TransformMatrix');\n\nvar WrapAngle = require('../../math/angle/Wrap');\n\nvar WrapAngleDegrees = require('../../math/angle/WrapDegrees'); //  global bitmask flag for GameObject.renderMask (used by Scale)\n\n\nvar _FLAG = 4; // 0100\n\n/**\r\n * Provides methods used for getting and setting the position, scale and rotation of a Game Object.\r\n *\r\n * @name Phaser.GameObjects.Components.Transform\r\n * @since 3.0.0\r\n */\n\nvar Transform = {\n  /**\r\n   * Private internal value. Holds the horizontal scale value.\r\n   * \r\n   * @name Phaser.GameObjects.Components.Transform#_scaleX\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _scaleX: 1,\n\n  /**\r\n   * Private internal value. Holds the vertical scale value.\r\n   * \r\n   * @name Phaser.GameObjects.Components.Transform#_scaleY\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _scaleY: 1,\n\n  /**\r\n   * Private internal value. Holds the rotation value in radians.\r\n   * \r\n   * @name Phaser.GameObjects.Components.Transform#_rotation\r\n   * @type {number}\r\n   * @private\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  _rotation: 0,\n\n  /**\r\n   * The x position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#x\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  x: 0,\n\n  /**\r\n   * The y position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#y\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  y: 0,\n\n  /**\r\n   * The z position of this Game Object.\r\n   * Note: Do not use this value to set the z-index, instead see the `depth` property.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#z\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  z: 0,\n\n  /**\r\n   * The w position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#w\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  w: 0,\n\n  /**\r\n   * The horizontal scale of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#scaleX\r\n   * @type {number}\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  scaleX: {\n    get: function get() {\n      return this._scaleX;\n    },\n    set: function set(value) {\n      this._scaleX = value;\n\n      if (this._scaleX === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The vertical scale of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#scaleY\r\n   * @type {number}\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  scaleY: {\n    get: function get() {\n      return this._scaleY;\n    },\n    set: function set(value) {\n      this._scaleY = value;\n\n      if (this._scaleY === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The angle of this Game Object as expressed in degrees.\r\n   *\r\n   * Where 0 is to the right, 90 is down, 180 is left.\r\n   *\r\n   * If you prefer to work in radians, see the `rotation` property instead.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#angle\r\n   * @type {integer}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  angle: {\n    get: function get() {\n      return WrapAngleDegrees(this._rotation * MATH_CONST.RAD_TO_DEG);\n    },\n    set: function set(value) {\n      //  value is in degrees\n      this.rotation = WrapAngleDegrees(value) * MATH_CONST.DEG_TO_RAD;\n    }\n  },\n\n  /**\r\n   * The angle of this Game Object in radians.\r\n   *\r\n   * If you prefer to work in degrees, see the `angle` property instead.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Transform#rotation\r\n   * @type {number}\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  rotation: {\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value) {\n      //  value is in radians\n      this._rotation = WrapAngle(value);\n    }\n  },\n\n  /**\r\n   * Sets the position of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The x position of this Game Object.\r\n   * @param {number} [y=x] - The y position of this Game Object. If not set it will use the `x` value.\r\n   * @param {number} [z=0] - The z position of this Game Object.\r\n   * @param {number} [w=0] - The w position of this Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setPosition: function setPosition(x, y, z, w) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    if (z === undefined) {\n      z = 0;\n    }\n\n    if (w === undefined) {\n      w = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of this Game Object to be a random position within the confines of\r\n   * the given area.\r\n   * \r\n   * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\r\n   *\r\n   * The position does not factor in the size of this Game Object, meaning that only the origin is\r\n   * guaranteed to be within the area.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setRandomPosition\r\n   * @since 3.8.0\r\n   *\r\n   * @param {number} [x=0] - The x position of the top-left of the random area.\r\n   * @param {number} [y=0] - The y position of the top-left of the random area.\r\n   * @param {number} [width] - The width of the random area.\r\n   * @param {number} [height] - The height of the random area.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setRandomPosition: function setRandomPosition(x, y, width, height) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = this.scene.sys.scale.width;\n    }\n\n    if (height === undefined) {\n      height = this.scene.sys.scale.height;\n    }\n\n    this.x = x + Math.random() * width;\n    this.y = y + Math.random() * height;\n    return this;\n  },\n\n  /**\r\n   * Sets the rotation of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setRotation\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [radians=0] - The rotation of this Game Object, in radians.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setRotation: function setRotation(radians) {\n    if (radians === undefined) {\n      radians = 0;\n    }\n\n    this.rotation = radians;\n    return this;\n  },\n\n  /**\r\n   * Sets the angle of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [degrees=0] - The rotation of this Game Object, in degrees.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setAngle: function setAngle(degrees) {\n    if (degrees === undefined) {\n      degrees = 0;\n    }\n\n    this.angle = degrees;\n    return this;\n  },\n\n  /**\r\n   * Sets the scale of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal scale of this Game Object.\r\n   * @param {number} [y=x] - The vertical scale of this Game Object. If not set it will use the `x` value.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setScale: function setScale(x, y) {\n    if (x === undefined) {\n      x = 1;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.scaleX = x;\n    this.scaleY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the x position of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=0] - The x position of this Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setX: function setX(value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this.x = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the y position of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=0] - The y position of this Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setY: function setY(value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this.y = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the z position of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=0] - The z position of this Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setZ: function setZ(value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this.z = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the w position of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#setW\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=0] - The w position of this Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setW: function setW(value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this.w = value;\n    return this;\n  },\n\n  /**\r\n   * Gets the local transform matrix for this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#getLocalTransformMatrix\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} [tempMatrix] - The matrix to populate with the values from this Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Components.TransformMatrix} The populated Transform Matrix.\r\n   */\n  getLocalTransformMatrix: function getLocalTransformMatrix(tempMatrix) {\n    if (tempMatrix === undefined) {\n      tempMatrix = new TransformMatrix();\n    }\n\n    return tempMatrix.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY);\n  },\n\n  /**\r\n   * Gets the world transform matrix for this Game Object, factoring in any parent Containers.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Transform#getWorldTransformMatrix\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} [tempMatrix] - The matrix to populate with the values from this Game Object.\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} [parentMatrix] - A temporary matrix to hold parent values during the calculations.\r\n   *\r\n   * @return {Phaser.GameObjects.Components.TransformMatrix} The populated Transform Matrix.\r\n   */\n  getWorldTransformMatrix: function getWorldTransformMatrix(tempMatrix, parentMatrix) {\n    if (tempMatrix === undefined) {\n      tempMatrix = new TransformMatrix();\n    }\n\n    if (parentMatrix === undefined) {\n      parentMatrix = new TransformMatrix();\n    }\n\n    var parent = this.parentContainer;\n\n    if (!parent) {\n      return this.getLocalTransformMatrix(tempMatrix);\n    }\n\n    tempMatrix.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY);\n\n    while (parent) {\n      parentMatrix.applyITRS(parent.x, parent.y, parent._rotation, parent._scaleX, parent._scaleY);\n      parentMatrix.multiply(tempMatrix, tempMatrix);\n      parent = parent.parentContainer;\n    }\n\n    return tempMatrix;\n  }\n};\nmodule.exports = Transform;","map":null,"metadata":{},"sourceType":"script"}