{"ast":null,"code":"/**\r\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\r\n*\r\n* @class Bounds\r\n*/\nvar Bounds = {};\nmodule.exports = Bounds;\n\n(function () {\n  /**\r\n   * Creates a new axis-aligned bounding box (AABB) for the given vertices.\r\n   * @method create\r\n   * @param {vertices} vertices\r\n   * @return {bounds} A new bounds object\r\n   */\n  Bounds.create = function (vertices) {\n    var bounds = {\n      min: {\n        x: 0,\n        y: 0\n      },\n      max: {\n        x: 0,\n        y: 0\n      }\n    };\n    if (vertices) Bounds.update(bounds, vertices);\n    return bounds;\n  };\n  /**\r\n   * Updates bounds using the given vertices and extends the bounds given a velocity.\r\n   * @method update\r\n   * @param {bounds} bounds\r\n   * @param {vertices} vertices\r\n   * @param {vector} velocity\r\n   */\n\n\n  Bounds.update = function (bounds, vertices, velocity) {\n    bounds.min.x = Infinity;\n    bounds.max.x = -Infinity;\n    bounds.min.y = Infinity;\n    bounds.max.y = -Infinity;\n\n    for (var i = 0; i < vertices.length; i++) {\n      var vertex = vertices[i];\n      if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n      if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n      if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n      if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n    }\n\n    if (velocity) {\n      if (velocity.x > 0) {\n        bounds.max.x += velocity.x;\n      } else {\n        bounds.min.x += velocity.x;\n      }\n\n      if (velocity.y > 0) {\n        bounds.max.y += velocity.y;\n      } else {\n        bounds.min.y += velocity.y;\n      }\n    }\n  };\n  /**\r\n   * Returns true if the bounds contains the given point.\r\n   * @method contains\r\n   * @param {bounds} bounds\r\n   * @param {vector} point\r\n   * @return {boolean} True if the bounds contain the point, otherwise false\r\n   */\n\n\n  Bounds.contains = function (bounds, point) {\n    return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n  };\n  /**\r\n   * Returns true if the two bounds intersect.\r\n   * @method overlaps\r\n   * @param {bounds} boundsA\r\n   * @param {bounds} boundsB\r\n   * @return {boolean} True if the bounds overlap, otherwise false\r\n   */\n\n\n  Bounds.overlaps = function (boundsA, boundsB) {\n    return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n  };\n  /**\r\n   * Translates the bounds by the given vector.\r\n   * @method translate\r\n   * @param {bounds} bounds\r\n   * @param {vector} vector\r\n   */\n\n\n  Bounds.translate = function (bounds, vector) {\n    bounds.min.x += vector.x;\n    bounds.max.x += vector.x;\n    bounds.min.y += vector.y;\n    bounds.max.y += vector.y;\n  };\n  /**\r\n   * Shifts the bounds to the given position.\r\n   * @method shift\r\n   * @param {bounds} bounds\r\n   * @param {vector} position\r\n   */\n\n\n  Bounds.shift = function (bounds, position) {\n    var deltaX = bounds.max.x - bounds.min.x,\n        deltaY = bounds.max.y - bounds.min.y;\n    bounds.min.x = position.x;\n    bounds.max.x = position.x + deltaX;\n    bounds.min.y = position.y;\n    bounds.max.y = position.y + deltaY;\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}