{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n * layer's position, scale and scroll.\r\n *\r\n * @function Phaser.Tilemaps.Components.WorldToTileY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {number} The Y location in tile units.\r\n */\nvar WorldToTileY = function WorldToTileY(worldY, snapToFloor, camera, layer) {\n  if (snapToFloor === undefined) {\n    snapToFloor = true;\n  }\n\n  var tileHeight = layer.baseTileHeight;\n  var tilemapLayer = layer.tilemapLayer;\n\n  if (tilemapLayer) {\n    if (camera === undefined) {\n      camera = tilemapLayer.scene.cameras.main;\n    } // Find the world position relative to the static or dynamic layer's top left origin,\n    // factoring in the camera's vertical scroll\n\n\n    worldY = worldY - (tilemapLayer.y + camera.scrollY * (1 - tilemapLayer.scrollFactorY));\n    tileHeight *= tilemapLayer.scaleY;\n  }\n\n  return snapToFloor ? Math.floor(worldY / tileHeight) : worldY / tileHeight;\n};\n\nmodule.exports = WorldToTileY;","map":null,"metadata":{},"sourceType":"script"}