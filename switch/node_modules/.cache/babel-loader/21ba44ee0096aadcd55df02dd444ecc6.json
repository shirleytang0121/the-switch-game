{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Get the nearest point on a line perpendicular to the given point.\r\n *\r\n * @function Phaser.Geom.Line.GetNearestPoint\r\n * @since 3.16.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to get the nearest point on.\r\n * @param {(Phaser.Geom.Point|object)} point - The point to get the nearest point to.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional point, or point-like object, to store the coordinates of the nearest point on the line.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The nearest point on the line.\r\n */\n\n\nvar GetNearestPoint = function GetNearestPoint(line, point, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var L2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n  if (L2 === 0) {\n    return out;\n  }\n\n  var r = ((point.x - x1) * (x2 - x1) + (point.y - y1) * (y2 - y1)) / L2;\n  out.x = x1 + r * (x2 - x1);\n  out.y = y1 + r * (y2 - y1);\n  return out;\n};\n\nmodule.exports = GetNearestPoint;","map":null,"metadata":{},"sourceType":"script"}