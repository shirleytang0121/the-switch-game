{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\r\n * the loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\r\n * \r\n * You shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class MultiFile\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {string} type - The file type string for sorting within the Loader.\r\n * @param {string} key - The key of the file within the loader.\r\n * @param {Phaser.Loader.File[]} files - An array of Files that make-up this MultiFile.\r\n */\n\n\nvar MultiFile = new Class({\n  initialize: function MultiFile(loader, type, key, files) {\n    /**\r\n     * A reference to the Loader that is going to load this file.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#loader\r\n     * @type {Phaser.Loader.LoaderPlugin}\r\n     * @since 3.7.0\r\n     */\n    this.loader = loader;\n    /**\r\n     * The file type string for sorting within the Loader.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#type\r\n     * @type {string}\r\n     * @since 3.7.0\r\n     */\n\n    this.type = type;\n    /**\r\n     * Unique cache key (unique within its file type)\r\n     *\r\n     * @name Phaser.Loader.MultiFile#key\r\n     * @type {string}\r\n     * @since 3.7.0\r\n     */\n\n    this.key = key;\n    /**\r\n     * Array of files that make up this MultiFile.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#files\r\n     * @type {Phaser.Loader.File[]}\r\n     * @since 3.7.0\r\n     */\n\n    this.files = files;\n    /**\r\n     * The completion status of this MultiFile.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#complete\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.7.0\r\n     */\n\n    this.complete = false;\n    /**\r\n     * The number of files to load.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#pending\r\n     * @type {integer}\r\n     * @since 3.7.0\r\n     */\n\n    this.pending = files.length;\n    /**\r\n     * The number of files that failed to load.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#failed\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.failed = 0;\n    /**\r\n     * A storage container for transient data that the loading files need.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#config\r\n     * @type {any}\r\n     * @since 3.7.0\r\n     */\n\n    this.config = {}; //  Link the files\n\n    for (var i = 0; i < files.length; i++) {\n      files[i].multiFile = this;\n    }\n  },\n\n  /**\r\n   * Checks if this MultiFile is ready to process its children or not.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#isReadyToProcess\r\n   * @since 3.7.0\r\n   *\r\n   * @return {boolean} `true` if all children of this MultiFile have loaded, otherwise `false`.\r\n   */\n  isReadyToProcess: function isReadyToProcess() {\n    return this.pending === 0 && this.failed === 0 && !this.complete;\n  },\n\n  /**\r\n   * Adds another child to this MultiFile, increases the pending count and resets the completion status.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#addToMultiFile\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} files - The File to add to this MultiFile.\r\n   *\r\n   * @return {Phaser.Loader.MultiFile} This MultiFile instance.\r\n   */\n  addToMultiFile: function addToMultiFile(file) {\n    this.files.push(file);\n    file.multiFile = this;\n    this.pending++;\n    this.complete = false;\n    return this;\n  },\n\n  /**\r\n   * Called by each File when it finishes loading.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#onFileComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n   */\n  onFileComplete: function onFileComplete(file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n    }\n  },\n\n  /**\r\n   * Called by each File that fails to load.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#onFileFailed\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has failed to load.\r\n   */\n  onFileFailed: function onFileFailed(file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.failed++;\n    }\n  }\n});\nmodule.exports = MultiFile;","map":null,"metadata":{},"sourceType":"script"}