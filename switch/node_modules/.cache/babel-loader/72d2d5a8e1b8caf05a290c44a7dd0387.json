{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar AdvanceKeyCombo = require('./AdvanceKeyCombo');\n/**\r\n * Used internally by the KeyCombo class.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.ProcessKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to be processed.\r\n *\r\n * @return {boolean} `true` if the combo was matched, otherwise `false`.\r\n */\n\n\nvar ProcessKeyCombo = function ProcessKeyCombo(event, combo) {\n  if (combo.matched) {\n    return true;\n  }\n\n  var comboMatched = false;\n  var keyMatched = false;\n\n  if (event.keyCode === combo.current) {\n    //  Key was correct\n    if (combo.index > 0 && combo.maxKeyDelay > 0) {\n      //  We have to check to see if the delay between\n      //  the new key and the old one was too long (if enabled)\n      var timeLimit = combo.timeLastMatched + combo.maxKeyDelay; //  Check if they pressed it in time or not\n\n      if (event.timeStamp <= timeLimit) {\n        keyMatched = true;\n        comboMatched = AdvanceKeyCombo(event, combo);\n      }\n    } else {\n      keyMatched = true; //  We don't check the time for the first key pressed, so just advance it\n\n      comboMatched = AdvanceKeyCombo(event, combo);\n    }\n  }\n\n  if (!keyMatched && combo.resetOnWrongKey) {\n    //  Wrong key was pressed\n    combo.index = 0;\n    combo.current = combo.keyCodes[0];\n  }\n\n  if (comboMatched) {\n    combo.timeLastMatched = event.timeStamp;\n    combo.matched = true;\n    combo.timeMatched = event.timeStamp;\n  }\n\n  return comboMatched;\n};\n\nmodule.exports = ProcessKeyCombo;","map":null,"metadata":{},"sourceType":"script"}