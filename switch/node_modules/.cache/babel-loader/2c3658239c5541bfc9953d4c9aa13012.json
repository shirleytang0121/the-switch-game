{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * An Arcade Physics Collider will automatically check for collision, or overlaps, between two objects\r\n * every step. If a collision, or overlap, occurs it will invoke the given callbacks.\r\n *\r\n * @class Collider\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade physics World that will manage the collisions.\r\n * @param {boolean} overlapOnly - Whether to check for collisions or overlap.\r\n * @param {ArcadeColliderType} object1 - The first object to check for collision.\r\n * @param {ArcadeColliderType} object2 - The second object to check for collision.\r\n * @param {ArcadePhysicsCallback} collideCallback - The callback to invoke when the two objects collide.\r\n * @param {ArcadePhysicsCallback} processCallback - The callback to invoke when the two objects collide. Must return a boolean.\r\n * @param {any} callbackContext - The scope in which to call the callbacks.\r\n */\n\n\nvar Collider = new Class({\n  initialize: function Collider(world, overlapOnly, object1, object2, collideCallback, processCallback, callbackContext) {\n    /**\r\n     * The world in which the bodies will collide.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n    this.world = world;\n    /**\r\n     * The name of the collider (unused by Phaser).\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#name\r\n     * @type {string}\r\n     * @since 3.1.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * Whether the collider is active.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#active\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.active = true;\n    /**\r\n     * Whether to check for collisions or overlaps.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#overlapOnly\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.overlapOnly = overlapOnly;\n    /**\r\n     * The first object to check for collision.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#object1\r\n     * @type {ArcadeColliderType}\r\n     * @since 3.0.0\r\n     */\n\n    this.object1 = object1;\n    /**\r\n     * The second object to check for collision.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#object2\r\n     * @type {ArcadeColliderType}\r\n     * @since 3.0.0\r\n     */\n\n    this.object2 = object2;\n    /**\r\n     * The callback to invoke when the two objects collide.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#collideCallback\r\n     * @type {ArcadePhysicsCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.collideCallback = collideCallback;\n    /**\r\n     * If a processCallback exists it must return true or collision checking will be skipped.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#processCallback\r\n     * @type {ArcadePhysicsCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.processCallback = processCallback;\n    /**\r\n     * The context the collideCallback and processCallback will run in.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Collider#callbackContext\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.callbackContext = callbackContext;\n  },\n\n  /**\r\n   * A name for the Collider.\r\n   * \r\n   * Phaser does not use this value, it's for your own reference.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Collider#setName\r\n   * @since 3.1.0\r\n   *\r\n   * @param {string} name - The name to assign to the Collider.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Collider} This Collider instance.\r\n   */\n  setName: function setName(name) {\n    this.name = name;\n    return this;\n  },\n\n  /**\r\n   * Called by World as part of its step processing, initial operation of collision checking.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Collider#update\r\n   * @since 3.0.0\r\n   */\n  update: function update() {\n    this.world.collideObjects(this.object1, this.object2, this.collideCallback, this.processCallback, this.callbackContext, this.overlapOnly);\n  },\n\n  /**\r\n   * Removes Collider from World and disposes of its resources.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Collider#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.world.removeCollider(this);\n    this.active = false;\n    this.world = null;\n    this.object1 = null;\n    this.object2 = null;\n    this.collideCallback = null;\n    this.processCallback = null;\n    this.callbackContext = null;\n  }\n});\nmodule.exports = Collider;","map":null,"metadata":{},"sourceType":"script"}