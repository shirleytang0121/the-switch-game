{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar HTML5AudioFile = require('./HTML5AudioFile');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.AudioFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within the Loader and Audio Cache.\r\n * @property {string} [urlConfig] - The absolute or relative URL to load the file from.\r\n * @property {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @property {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\n\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\n\n\nvar AudioFile = new Class({\n  Extends: File,\n  initialize: //  URL is an object created by AudioFile.findAudioURL\n  function AudioFile(loader, key, urlConfig, xhrSettings, audioContext) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      audioContext = GetFastValue(config, 'context', audioContext);\n    }\n\n    var fileConfig = {\n      type: 'audio',\n      cache: loader.cacheManager.audio,\n      extension: urlConfig.type,\n      responseType: 'arraybuffer',\n      key: key,\n      url: urlConfig.url,\n      xhrSettings: xhrSettings,\n      config: {\n        context: audioContext\n      }\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.AudioFile#onProcess\r\n   * @since 3.0.0\r\n   */\n  onProcess: function onProcess() {\n    this.state = CONST.FILE_PROCESSING;\n\n    var _this = this; // interesting read https://github.com/WebAudio/web-audio-api/issues/1305\n\n\n    this.config.context.decodeAudioData(this.xhrLoader.response, function (audioBuffer) {\n      _this.data = audioBuffer;\n\n      _this.onProcessComplete();\n    }, function (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error decoding audio: ' + this.key + ' - ', e ? e.message : null);\n\n      _this.onProcessError();\n    });\n    this.config.context = null;\n  }\n});\n\nAudioFile.create = function (loader, key, urls, config, xhrSettings) {\n  var game = loader.systems.game;\n  var audioConfig = game.config.audio;\n  var deviceAudio = game.device.audio; //  url may be inside key, which may be an object\n\n  if (IsPlainObject(key)) {\n    urls = GetFastValue(key, 'url', []);\n    config = GetFastValue(key, 'config', {});\n  }\n\n  var urlConfig = AudioFile.getAudioURL(game, urls);\n\n  if (!urlConfig) {\n    return null;\n  } // https://developers.google.com/web/updates/2012/02/HTML5-audio-and-the-Web-Audio-API-are-BFFs\n  // var stream = GetFastValue(config, 'stream', false);\n\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    return new AudioFile(loader, key, urlConfig, xhrSettings, game.sound.context);\n  } else {\n    return new HTML5AudioFile(loader, key, urlConfig, config);\n  }\n};\n\nAudioFile.getAudioURL = function (game, urls) {\n  if (!Array.isArray(urls)) {\n    urls = [urls];\n  }\n\n  for (var i = 0; i < urls.length; i++) {\n    var url = GetFastValue(urls[i], 'url', urls[i]);\n\n    if (url.indexOf('blob:') === 0 || url.indexOf('data:') === 0) {\n      return url;\n    }\n\n    var audioType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\n    audioType = GetFastValue(urls[i], 'type', audioType ? audioType[1] : '').toLowerCase();\n\n    if (game.device.audio[audioType]) {\n      return {\n        url: url,\n        type: audioType\n      };\n    }\n  }\n\n  return null;\n};\n/**\r\n * Adds an Audio or HTML5Audio file, or array of audio files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audio('title', [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audio({\r\n *     key: 'title',\r\n *     url: [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.AudioFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Audio File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audio\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig|Phaser.Loader.FileTypes.AudioFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the audio files from.\r\n * @param {any} [config] - An object containing an `instances` property for HTML5Audio. Defaults to 1.\r\n * @param {XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\n\nFileTypesManager.register('audio', function (key, urls, config, xhrSettings) {\n  var game = this.systems.game;\n  var audioConfig = game.config.audio;\n  var deviceAudio = game.device.audio;\n\n  if (audioConfig && audioConfig.noAudio || !deviceAudio.webAudio && !deviceAudio.audioData) {\n    //  Sounds are disabled, so skip loading audio\n    return this;\n  }\n\n  var audioFile;\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      audioFile = AudioFile.create(this, key[i]);\n\n      if (audioFile) {\n        this.addFile(audioFile);\n      }\n    }\n  } else {\n    audioFile = AudioFile.create(this, key, urls, config, xhrSettings);\n\n    if (audioFile) {\n      this.addFile(audioFile);\n    }\n  }\n\n  return this;\n});\nmodule.exports = AudioFile;","map":null,"metadata":{},"sourceType":"script"}