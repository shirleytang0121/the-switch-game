{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar WebAudioSound = require('./WebAudioSound');\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the sound manager.\r\n *\r\n * @class WebAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar WebAudioSoundManager = new Class({\n  Extends: BaseSoundManager,\n  initialize: function WebAudioSoundManager(game) {\n    /**\r\n     * The AudioContext being used for playback.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#context\r\n     * @type {AudioContext}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n    this.context = this.createAudioContext(game);\n    /**\r\n     * Gain node responsible for controlling global muting.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#masterMuteNode\r\n     * @type {GainNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.masterMuteNode = this.context.createGain();\n    /**\r\n     * Gain node responsible for controlling global volume.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#masterVolumeNode\r\n     * @type {GainNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.masterVolumeNode = this.context.createGain();\n    this.masterMuteNode.connect(this.masterVolumeNode);\n    this.masterVolumeNode.connect(this.context.destination);\n    /**\r\n     * Destination node for connecting individual sounds to.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#destination\r\n     * @type {AudioNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.destination = this.masterMuteNode;\n    this.locked = this.context.state === 'suspended' && ('ontouchstart' in window || 'onclick' in window);\n    BaseSoundManager.call(this, game);\n\n    if (this.locked) {\n      this.unlock();\n    }\n  },\n\n  /**\r\n   * Method responsible for instantiating and returning AudioContext instance.\r\n   * If an instance of an AudioContext class was provided through the game config,\r\n   * that instance will be returned instead. This can come in handy if you are reloading\r\n   * a Phaser game on a page that never properly refreshes (such as in an SPA project)\r\n   * and you want to reuse already instantiated AudioContext.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#createAudioContext\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Game} game - Reference to the current game instance.\r\n   *\r\n   * @return {AudioContext} The AudioContext instance to be used for playback.\r\n   */\n  createAudioContext: function createAudioContext(game) {\n    var audioConfig = game.config.audio;\n\n    if (audioConfig && audioConfig.context) {\n      audioConfig.context.resume();\n      return audioConfig.context;\n    }\n\n    return new AudioContext();\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSound} The new sound instance.\r\n   */\n  add: function add(key, config) {\n    var sound = new WebAudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n\n  /**\r\n   * Unlocks Web Audio API on the initial input event.\r\n   *\r\n   * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#unlock\r\n   * @since 3.0.0\r\n   */\n  unlock: function unlock() {\n    var _this = this;\n\n    var unlockHandler = function unlockHandler() {\n      if (_this.context) {\n        _this.context.resume().then(function () {\n          document.body.removeEventListener('touchstart', unlockHandler);\n          document.body.removeEventListener('touchend', unlockHandler);\n          document.body.removeEventListener('click', unlockHandler);\n          _this.unlocked = true;\n        });\n      }\n    };\n\n    if (document.body) {\n      document.body.addEventListener('touchstart', unlockHandler, false);\n      document.body.addEventListener('touchend', unlockHandler, false);\n      document.body.addEventListener('click', unlockHandler, false);\n    }\n  },\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#onBlur\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: function onBlur() {\n    if (!this.locked) {\n      this.context.suspend();\n    }\n  },\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#onFocus\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: function onFocus() {\n    if (!this.locked) {\n      this.context.resume();\n    }\n  },\n\n  /**\r\n   * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n   * and cleans up all Web Audio API related stuff.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.destination = null;\n    this.masterVolumeNode.disconnect();\n    this.masterVolumeNode = null;\n    this.masterMuteNode.disconnect();\n    this.masterMuteNode = null;\n\n    if (this.game.config.audio && this.game.config.audio.context) {\n      this.context.suspend();\n    } else {\n      var _this = this;\n\n      this.context.close().then(function () {\n        _this.context = null;\n      });\n    }\n\n    BaseSoundManager.prototype.destroy.call(this);\n  },\n\n  /**\r\n   * Sets the muted state of all this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#setMute\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n   */\n  setMute: function setMute(value) {\n    this.mute = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.WebAudioSoundManager#mute\r\n   * @type {boolean}\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.0.0\r\n   */\n  mute: {\n    get: function get() {\n      return this.masterMuteNode.gain.value === 0;\n    },\n    set: function set(value) {\n      this.masterMuteNode.gain.setValueAtTime(value ? 0 : 1, 0);\n      this.emit(Events.GLOBAL_MUTE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the volume of this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#setVolume\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The global volume of this Sound Manager.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n   */\n  setVolume: function setVolume(value) {\n    this.volume = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.WebAudioSoundManager#volume\r\n   * @type {number}\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.0.0\r\n   */\n  volume: {\n    get: function get() {\n      return this.masterVolumeNode.gain.value;\n    },\n    set: function set(value) {\n      this.masterVolumeNode.gain.setValueAtTime(value, 0);\n      this.emit(Events.GLOBAL_VOLUME, this, value);\n    }\n  }\n});\nmodule.exports = WebAudioSoundManager;","map":null,"metadata":{},"sourceType":"script"}