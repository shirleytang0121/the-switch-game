{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Components = require('../gameobjects/components');\n\nvar Rectangle = require('../geom/rectangle');\n/**\r\n * @classdesc\r\n * A Tile is a representation of a single tile within the Tilemap. This is a lightweight data\r\n * representation, so its position information is stored without factoring in scroll, layer\r\n * scale or layer position.\r\n *\r\n * @class Tile\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Tilemaps.LayerData} layer - The LayerData object in the Tilemap that this tile belongs to.\r\n * @param {integer} index - The unique index of this tile within the map.\r\n * @param {integer} x - The x coordinate of this tile in tile coordinates.\r\n * @param {integer} y - The y coordinate of this tile in tile coordinates.\r\n * @param {integer} width - Width of the tile in pixels.\r\n * @param {integer} height - Height of the tile in pixels.\r\n * @param {integer} baseWidth - The base width a tile in the map (in pixels). Tiled maps support\r\n * multiple tileset sizes within one map, but they are still placed at intervals of the base\r\n * tile width.\r\n * @param {integer} baseHeight - The base height of the tile in pixels (in pixels). Tiled maps\r\n * support multiple tileset sizes within one map, but they are still placed at intervals of the\r\n * base tile height.\r\n */\n\n\nvar Tile = new Class({\n  Mixins: [Components.Alpha, Components.Flip, Components.Visible],\n  initialize: function Tile(layer, index, x, y, width, height, baseWidth, baseHeight) {\n    /**\r\n     * The LayerData in the Tilemap data that this tile belongs to.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\n    this.layer = layer;\n    /**\r\n     * The index of this tile within the map data corresponding to the tileset, or -1 if this\r\n     * represents a blank tile.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#index\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.index = index;\n    /**\r\n     * The x map coordinate of this tile in tile units.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#x\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The y map coordinate of this tile in tile units.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#y\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The width of the tile in pixels.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#width\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the tile in pixels.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#height\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n    /**\r\n     * The map's base width of a tile in pixels. Tiled maps support multiple tileset sizes\r\n     * within one map, but they are still placed at intervals of the base tile size.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#baseWidth\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.baseWidth = baseWidth !== undefined ? baseWidth : width;\n    /**\r\n     * The map's base height of a tile in pixels. Tiled maps support multiple tileset sizes\r\n     * within one map, but they are still placed at intervals of the base tile size.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#baseHeight\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.baseHeight = baseHeight !== undefined ? baseHeight : height;\n    /**\r\n     * The x coordinate of the top left of this tile in pixels. This is relative to the top left\r\n     * of the layer this tile is being rendered within. This property does NOT factor in camera\r\n     * scroll, layer scale or layer position.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#pixelX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.pixelX = 0;\n    /**\r\n     * The y coordinate of the top left of this tile in pixels. This is relative to the top left\r\n     * of the layer this tile is being rendered within. This property does NOT factor in camera\r\n     * scroll, layer scale or layer position.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#pixelY\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.pixelY = 0;\n    this.updatePixelXY();\n    /**\r\n     * Tile specific properties. These usually come from Tiled.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = {};\n    /**\r\n     * The rotation angle of this tile.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#rotation\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.rotation = 0;\n    /**\r\n     * Whether the tile should collide with any object on the left side.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collideLeft\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.collideLeft = false;\n    /**\r\n     * Whether the tile should collide with any object on the right side.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collideRight\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.collideRight = false;\n    /**\r\n     * Whether the tile should collide with any object on the top side.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collideUp\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.collideUp = false;\n    /**\r\n     * Whether the tile should collide with any object on the bottom side.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collideDown\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.collideDown = false;\n    /**\r\n     * Whether the tile's left edge is interesting for collisions.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#faceLeft\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.faceLeft = false;\n    /**\r\n     * Whether the tile's right edge is interesting for collisions.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#faceRight\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.faceRight = false;\n    /**\r\n     * Whether the tile's top edge is interesting for collisions.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#faceTop\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.faceTop = false;\n    /**\r\n     * Whether the tile's bottom edge is interesting for collisions.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#faceBottom\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.faceBottom = false;\n    /**\r\n     * Tile collision callback.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collisionCallback\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.collisionCallback = null;\n    /**\r\n     * The context in which the collision callback will be called.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#collisionCallbackContext\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.collisionCallbackContext = this;\n    /**\r\n     * The tint to apply to this tile. Note: tint is currently a single color value instead of\r\n     * the 4 corner tint component on other GameObjects.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#tint\r\n     * @type {number}\r\n     * @default\r\n     * @since 3.0.0\r\n     */\n\n    this.tint = 0xffffff;\n    /**\r\n     * An empty object where physics-engine specific information (e.g. bodies) may be stored.\r\n     *\r\n     * @name Phaser.Tilemaps.Tile#physics\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.physics = {};\n  },\n\n  /**\r\n   * Check if the given x and y world coordinates are within this Tile. This does not factor in\r\n   * camera scroll, layer scale or layer position.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#containsPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to test.\r\n   * @param {number} y - The y coordinate to test.\r\n   *\r\n   * @return {boolean} True if the coordinates are within this Tile, otherwise false.\r\n   */\n  containsPoint: function containsPoint(x, y) {\n    return !(x < this.pixelX || y < this.pixelY || x > this.right || y > this.bottom);\n  },\n\n  /**\r\n   * Copies the tile data & properties from the given tile to this tile. This copies everything\r\n   * except for position and interesting faces.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tilemaps.Tile} tile - The tile to copy from.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  copy: function copy(tile) {\n    this.index = tile.index;\n    this.alpha = tile.alpha;\n    this.properties = tile.properties;\n    this.visible = tile.visible;\n    this.setFlip(tile.flipX, tile.flipY);\n    this.tint = tile.tint;\n    this.rotation = tile.rotation;\n    this.collideUp = tile.collideUp;\n    this.collideDown = tile.collideDown;\n    this.collideLeft = tile.collideLeft;\n    this.collideRight = tile.collideRight;\n    this.collisionCallback = tile.collisionCallback;\n    this.collisionCallbackContext = tile.collisionCallbackContext;\n    return this;\n  },\n\n  /**\r\n   * The collision group for this Tile, defined within the Tileset. This returns a reference to\r\n   * the collision group stored within the Tileset, so any modification of the returned object\r\n   * will impact all tiles that have the same index as this tile.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @return {?object} tileset\r\n   */\n  getCollisionGroup: function getCollisionGroup() {\n    return this.tileset ? this.tileset.getTileCollisionGroup(this.index) : null;\n  },\n\n  /**\r\n   * The tile data for this Tile, defined within the Tileset. This typically contains Tiled\r\n   * collision data, tile animations and terrain information. This returns a reference to the tile\r\n   * data stored within the Tileset, so any modification of the returned object will impact all\r\n   * tiles that have the same index as this tile.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getTileData\r\n   * @since 3.0.0\r\n   *\r\n   * @return {?object} tileset\r\n   */\n  getTileData: function getTileData() {\n    return this.tileset ? this.tileset.getTileData(this.index) : null;\n  },\n\n  /**\r\n   * Gets the world X position of the left side of the tile, factoring in the layers position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getLeft\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getLeft: function getLeft(camera) {\n    var tilemapLayer = this.tilemapLayer;\n    return tilemapLayer ? tilemapLayer.tileToWorldX(this.x, camera) : this.x * this.baseWidth;\n  },\n\n  /**\r\n   * Gets the world X position of the right side of the tile, factoring in the layer's position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getRight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getRight: function getRight(camera) {\n    var tilemapLayer = this.tilemapLayer;\n    return tilemapLayer ? this.getLeft(camera) + this.width * tilemapLayer.scaleX : this.getLeft(camera) + this.width;\n  },\n\n  /**\r\n   * Gets the world Y position of the top side of the tile, factoring in the layer's position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getTop\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getTop: function getTop(camera) {\n    var tilemapLayer = this.tilemapLayer; // Tiled places tiles on a grid of baseWidth x baseHeight. The origin for a tile in grid\n    // units is the bottom left, so the y coordinate needs to be adjusted by the difference\n    // between the base size and this tile's size.\n\n    return tilemapLayer ? tilemapLayer.tileToWorldY(this.y, camera) - (this.height - this.baseHeight) * tilemapLayer.scaleY : this.y * this.baseHeight - (this.height - this.baseHeight);\n  },\n\n  /**\r\n   * Gets the world Y position of the bottom side of the tile, factoring in the layer's position,\r\n   * scale and scroll.\r\n     * @method Phaser.Tilemaps.Tile#getBottom\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getBottom: function getBottom(camera) {\n    var tilemapLayer = this.tilemapLayer;\n    return tilemapLayer ? this.getTop(camera) + this.height * tilemapLayer.scaleY : this.getTop(camera) + this.height;\n  },\n\n  /**\r\n   * Gets the world rectangle bounding box for the tile, factoring in the layers position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   * @param {object} [output] - [description]\r\n   *\r\n   * @return {(Phaser.Geom.Rectangle|object)}\r\n   */\n  getBounds: function getBounds(camera, output) {\n    if (output === undefined) {\n      output = new Rectangle();\n    }\n\n    output.x = this.getLeft();\n    output.y = this.getTop();\n    output.width = this.getRight() - output.x;\n    output.height = this.getBottom() - output.y;\n    return output;\n  },\n\n  /**\r\n   * Gets the world X position of the center of the tile, factoring in the layer's position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getCenterX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getCenterX: function getCenterX(camera) {\n    return this.getLeft(camera) + this.width / 2;\n  },\n\n  /**\r\n   * Gets the world Y position of the center of the tile, factoring in the layer's position,\r\n   * scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#getCenterY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to use to perform the check.\r\n   *\r\n   * @return {number}\r\n   */\n  getCenterY: function getCenterY(camera) {\n    return this.getTop(camera) + this.height / 2;\n  },\n\n  /**\r\n   * Clean up memory.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.collisionCallback = undefined;\n    this.collisionCallbackContext = undefined;\n    this.properties = undefined;\n  },\n\n  /**\r\n   * Check for intersection with this tile. This does not factor in camera scroll, layer scale or\r\n   * layer position.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#intersects\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x axis in pixels.\r\n   * @param {number} y - The y axis in pixels.\r\n   * @param {number} right - The right point.\r\n   * @param {number} bottom - The bottom point.\r\n   *\r\n   * @return {boolean}\r\n   */\n  intersects: function intersects(x, y, right, bottom) {\n    return !(right <= this.pixelX || bottom <= this.pixelY || x >= this.right || y >= this.bottom);\n  },\n\n  /**\r\n   * Checks if the tile is interesting.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#isInteresting\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} collides - If true, will consider the tile interesting if it collides on any side.\r\n   * @param {boolean} faces - If true, will consider the tile interesting if it has an interesting face.\r\n   *\r\n   * @return {boolean} True if the Tile is interesting, otherwise false.\r\n   */\n  isInteresting: function isInteresting(collides, faces) {\n    if (collides && faces) {\n      return this.canCollide || this.hasInterestingFace;\n    } else if (collides) {\n      return this.collides;\n    } else if (faces) {\n      return this.hasInterestingFace;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Reset collision status flags.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#resetCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate interesting faces for this tile and its neighbors.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  resetCollision: function resetCollision(recalculateFaces) {\n    if (recalculateFaces === undefined) {\n      recalculateFaces = true;\n    }\n\n    this.collideLeft = false;\n    this.collideRight = false;\n    this.collideUp = false;\n    this.collideDown = false;\n    this.faceTop = false;\n    this.faceBottom = false;\n    this.faceLeft = false;\n    this.faceRight = false;\n\n    if (recalculateFaces) {\n      var tilemapLayer = this.tilemapLayer;\n\n      if (tilemapLayer) {\n        this.tilemapLayer.calculateFacesAt(this.x, this.y);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Reset faces.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#resetFaces\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  resetFaces: function resetFaces() {\n    this.faceTop = false;\n    this.faceBottom = false;\n    this.faceLeft = false;\n    this.faceRight = false;\n    return this;\n  },\n\n  /**\r\n   * Sets the collision flags for each side of this tile and updates the interesting faces list.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#setCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} left - Indicating collide with any object on the left.\r\n   * @param {boolean} [right] - Indicating collide with any object on the right.\r\n   * @param {boolean} [up] - Indicating collide with any object on the top.\r\n   * @param {boolean} [down] - Indicating collide with any object on the bottom.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate interesting faces\r\n   * for this tile and its neighbors.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  setCollision: function setCollision(left, right, up, down, recalculateFaces) {\n    if (right === undefined) {\n      right = left;\n    }\n\n    if (up === undefined) {\n      up = left;\n    }\n\n    if (down === undefined) {\n      down = left;\n    }\n\n    if (recalculateFaces === undefined) {\n      recalculateFaces = true;\n    }\n\n    this.collideLeft = left;\n    this.collideRight = right;\n    this.collideUp = up;\n    this.collideDown = down;\n    this.faceLeft = left;\n    this.faceRight = right;\n    this.faceTop = up;\n    this.faceBottom = down;\n\n    if (recalculateFaces) {\n      var tilemapLayer = this.tilemapLayer;\n\n      if (tilemapLayer) {\n        this.tilemapLayer.calculateFacesAt(this.x, this.y);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set a callback to be called when this tile is hit by an object. The callback must true for\r\n   * collision processing to take place.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#setCollisionCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - Callback function.\r\n   * @param {object} context - Callback will be called within this context.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  setCollisionCallback: function setCollisionCallback(callback, context) {\n    if (callback === null) {\n      this.collisionCallback = undefined;\n      this.collisionCallbackContext = undefined;\n    } else {\n      this.collisionCallback = callback;\n      this.collisionCallbackContext = context;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the size of the tile and updates its pixelX and pixelY.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileWidth - The width of the tile in pixels.\r\n   * @param {integer} tileHeight - The height of the tile in pixels.\r\n   * @param {integer} baseWidth - The base width a tile in the map (in pixels).\r\n   * @param {integer} baseHeight - The base height of the tile in pixels (in pixels).\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  setSize: function setSize(tileWidth, tileHeight, baseWidth, baseHeight) {\n    if (tileWidth !== undefined) {\n      this.width = tileWidth;\n    }\n\n    if (tileHeight !== undefined) {\n      this.height = tileHeight;\n    }\n\n    if (baseWidth !== undefined) {\n      this.baseWidth = baseWidth;\n    }\n\n    if (baseHeight !== undefined) {\n      this.baseHeight = baseHeight;\n    }\n\n    this.updatePixelXY();\n    return this;\n  },\n\n  /**\r\n   * Used internally. Updates the tile's world XY position based on the current tile size.\r\n   *\r\n   * @method Phaser.Tilemaps.Tile#updatePixelXY\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} This Tile object.\r\n   */\n  updatePixelXY: function updatePixelXY() {\n    // Tiled places tiles on a grid of baseWidth x baseHeight. The origin for a tile is the\n    // bottom left, while the Phaser renderer assumes the origin is the top left. The y\n    // coordinate needs to be adjusted by the difference.\n    this.pixelX = this.x * this.baseWidth;\n    this.pixelY = this.y * this.baseHeight; // this.pixelY = this.y * this.baseHeight - (this.height - this.baseHeight);\n\n    return this;\n  },\n\n  /**\r\n   * True if this tile can collide on any of its faces or has a collision callback set.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#canCollide\r\n   * @type {boolean}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  canCollide: {\n    get: function get() {\n      return this.collideLeft || this.collideRight || this.collideUp || this.collideDown || this.collisionCallback;\n    }\n  },\n\n  /**\r\n   * True if this tile can collide on any of its faces.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#collides\r\n   * @type {boolean}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  collides: {\n    get: function get() {\n      return this.collideLeft || this.collideRight || this.collideUp || this.collideDown;\n    }\n  },\n\n  /**\r\n   * True if this tile has any interesting faces.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#hasInterestingFace\r\n   * @type {boolean}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  hasInterestingFace: {\n    get: function get() {\n      return this.faceTop || this.faceBottom || this.faceLeft || this.faceRight;\n    }\n  },\n\n  /**\r\n   * The tileset that contains this Tile. This is null if accessed from a LayerData instance\r\n   * before the tile is placed in a StaticTilemapLayer or DynamicTilemapLayer, or if the tile has\r\n   * an index that doesn't correspond to any of the map's tilesets.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#tileset\r\n   * @type {?Phaser.Tilemaps.Tileset}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  tileset: {\n    get: function get() {\n      var tilemapLayer = this.layer.tilemapLayer;\n\n      if (tilemapLayer) {\n        var tileset = tilemapLayer.gidMap[this.index];\n\n        if (tileset) {\n          return tileset;\n        }\n      }\n\n      return null;\n    }\n  },\n\n  /**\r\n   * The tilemap layer that contains this Tile. This will only return null if accessed from a\r\n   * LayerData instance before the tile is placed within a StaticTilemapLayer or\r\n   * DynamicTilemapLayer.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#tilemapLayer\r\n   * @type {?Phaser.Tilemaps.StaticTilemapLayer|Phaser.Tilemaps.DynamicTilemapLayer}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  tilemapLayer: {\n    get: function get() {\n      return this.layer.tilemapLayer;\n    }\n  },\n\n  /**\r\n   * The tilemap that contains this Tile. This will only return null if accessed from a LayerData\r\n   * instance before the tile is placed within a StaticTilemapLayer or DynamicTilemapLayer.\r\n   *\r\n   * @name Phaser.Tilemaps.Tile#tilemap\r\n   * @type {?Phaser.Tilemaps.Tilemap}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  tilemap: {\n    get: function get() {\n      var tilemapLayer = this.tilemapLayer;\n      return tilemapLayer ? tilemapLayer.tilemap : null;\n    }\n  }\n});\nmodule.exports = Tile;","map":null,"metadata":{},"sourceType":"script"}