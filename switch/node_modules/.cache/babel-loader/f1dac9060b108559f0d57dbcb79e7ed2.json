{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture.\r\n * \r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheet\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {integer} x - [description]\r\n * @param {integer} y - [description]\r\n * @param {integer} width - [description]\r\n * @param {integer} height - [description]\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - [description]\r\n * @param {number} [config.endFrame=-1] - [description]\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\n\n\nvar SpriteSheet = function SpriteSheet(texture, sourceIndex, x, y, width, height, config) {\n  var frameWidth = GetFastValue(config, 'frameWidth', null);\n  var frameHeight = GetFastValue(config, 'frameHeight', frameWidth); //  If missing we can't proceed\n\n  if (frameWidth === null) {\n    throw new Error('TextureManager.SpriteSheet: Invalid frameWidth given.');\n  } //  Add in a __BASE entry (for the entire atlas)\n\n\n  var source = texture.source[sourceIndex];\n  texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\n  var startFrame = GetFastValue(config, 'startFrame', 0);\n  var endFrame = GetFastValue(config, 'endFrame', -1);\n  var margin = GetFastValue(config, 'margin', 0);\n  var spacing = GetFastValue(config, 'spacing', 0);\n  var row = Math.floor((width - margin + spacing) / (frameWidth + spacing));\n  var column = Math.floor((height - margin + spacing) / (frameHeight + spacing));\n  var total = row * column;\n\n  if (total === 0) {\n    console.warn('SpriteSheet frame dimensions will result in zero frames.');\n  }\n\n  if (startFrame > total || startFrame < -total) {\n    startFrame = 0;\n  }\n\n  if (startFrame < 0) {\n    //  Allow negative skipframes.\n    startFrame = total + startFrame;\n  }\n\n  if (endFrame !== -1) {\n    total = startFrame + (endFrame + 1);\n  }\n\n  var fx = margin;\n  var fy = margin;\n  var ax = 0;\n  var ay = 0;\n\n  for (var i = 0; i < total; i++) {\n    ax = 0;\n    ay = 0;\n    var w = fx + frameWidth;\n    var h = fy + frameHeight;\n\n    if (w > width) {\n      ax = w - width;\n    }\n\n    if (h > height) {\n      ay = h - height;\n    }\n\n    texture.add(i, sourceIndex, x + fx, y + fy, frameWidth - ax, frameHeight - ay);\n    fx += frameWidth + spacing;\n\n    if (fx + frameWidth > width) {\n      fx = margin;\n      fy += frameHeight + spacing;\n    }\n  }\n\n  return texture;\n};\n\nmodule.exports = SpriteSheet;","map":null,"metadata":{},"sourceType":"script"}