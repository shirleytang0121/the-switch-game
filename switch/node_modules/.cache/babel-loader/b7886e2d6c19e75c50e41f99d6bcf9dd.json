{"ast":null,"code":"/**\r\n* @author       Richard Davey <rich@photonstorm.com>\r\n* @copyright    2019 Photon Storm Ltd.\r\n* @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n*/\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A Global Plugin is installed just once into the Game owned Plugin Manager.\r\n * It can listen for Game events and respond to them.\r\n *\r\n * @class BasePlugin\r\n * @memberof Phaser.Plugins\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the Plugin Manager.\r\n */\n\n\nvar BasePlugin = new Class({\n  initialize: function BasePlugin(pluginManager) {\n    /**\r\n     * A handy reference to the Plugin Manager that is responsible for this plugin.\r\n     * Can be used as a route to gain access to game systems and  events.\r\n     *\r\n     * @name Phaser.Plugins.BasePlugin#pluginManager\r\n     * @type {Phaser.Plugins.PluginManager}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n    this.pluginManager = pluginManager;\n    /**\r\n     * A reference to the Game instance this plugin is running under.\r\n     *\r\n     * @name Phaser.Plugins.BasePlugin#game\r\n     * @type {Phaser.Game}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n\n    this.game = pluginManager.game;\n    /**\r\n     * A reference to the Scene that has installed this plugin.\r\n     * Only set if it's a Scene Plugin, otherwise `null`.\r\n     * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n     * You cannot use it during the `init` method, but you can during the `boot` method.\r\n     *\r\n     * @name Phaser.Plugins.BasePlugin#scene\r\n     * @type {?Phaser.Scene}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n\n    this.scene;\n    /**\r\n     * A reference to the Scene Systems of the Scene that has installed this plugin.\r\n     * Only set if it's a Scene Plugin, otherwise `null`.\r\n     * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n     * You cannot use it during the `init` method, but you can during the `boot` method.\r\n     *\r\n     * @name Phaser.Plugins.BasePlugin#systems\r\n     * @type {?Phaser.Scenes.Systems}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n\n    this.systems;\n  },\n\n  /**\r\n   * Called by the PluginManager when this plugin is first instantiated.\r\n   * It will never be called again on this instance.\r\n   * In here you can set-up whatever you need for this plugin to run.\r\n   * If a plugin is set to automatically start then `BasePlugin.start` will be called immediately after this.\r\n   *\r\n   * @method Phaser.Plugins.BasePlugin#init\r\n   * @since 3.8.0\r\n   *\r\n   * @param {?any} [data] - A value specified by the user, if any, from the `data` property of the plugin's configuration object (if started at game boot) or passed in the PluginManager's `install` method (if started manually).\r\n   */\n  init: function init() {},\n\n  /**\r\n   * Called by the PluginManager when this plugin is started.\r\n   * If a plugin is stopped, and then started again, this will get called again.\r\n   * Typically called immediately after `BasePlugin.init`.\r\n   *\r\n   * @method Phaser.Plugins.BasePlugin#start\r\n   * @since 3.8.0\r\n   */\n  start: function start() {//  Here are the game-level events you can listen to.\n    //  At the very least you should offer a destroy handler for when the game closes down.\n    // var eventEmitter = this.game.events;\n    // eventEmitter.once('destroy', this.gameDestroy, this);\n    // eventEmitter.on('pause', this.gamePause, this);\n    // eventEmitter.on('resume', this.gameResume, this);\n    // eventEmitter.on('resize', this.gameResize, this);\n    // eventEmitter.on('prestep', this.gamePreStep, this);\n    // eventEmitter.on('step', this.gameStep, this);\n    // eventEmitter.on('poststep', this.gamePostStep, this);\n    // eventEmitter.on('prerender', this.gamePreRender, this);\n    // eventEmitter.on('postrender', this.gamePostRender, this);\n  },\n\n  /**\r\n   * Called by the PluginManager when this plugin is stopped.\r\n   * The game code has requested that your plugin stop doing whatever it does.\r\n   * It is now considered as 'inactive' by the PluginManager.\r\n   * Handle that process here (i.e. stop listening for events, etc)\r\n   * If the plugin is started again then `BasePlugin.start` will be called again.\r\n   *\r\n   * @method Phaser.Plugins.BasePlugin#stop\r\n   * @since 3.8.0\r\n   */\n  stop: function stop() {},\n\n  /**\r\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\r\n   * By this point the plugin properties `scene` and `systems` will have already been set.\r\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\r\n   *\r\n   * @method Phaser.Plugins.BasePlugin#boot\r\n   * @since 3.8.0\r\n   */\n  boot: function boot() {//  Here are the Scene events you can listen to.\n    //  At the very least you should offer a destroy handler for when the Scene closes down.\n    // var eventEmitter = this.systems.events;\n    // eventEmitter.once('destroy', this.sceneDestroy, this);\n    // eventEmitter.on('start', this.sceneStart, this);\n    // eventEmitter.on('preupdate', this.scenePreUpdate, this);\n    // eventEmitter.on('update', this.sceneUpdate, this);\n    // eventEmitter.on('postupdate', this.scenePostUpdate, this);\n    // eventEmitter.on('pause', this.scenePause, this);\n    // eventEmitter.on('resume', this.sceneResume, this);\n    // eventEmitter.on('sleep', this.sceneSleep, this);\n    // eventEmitter.on('wake', this.sceneWake, this);\n    // eventEmitter.on('shutdown', this.sceneShutdown, this);\n    // eventEmitter.on('destroy', this.sceneDestroy, this);\n  },\n\n  /**\r\n   * Game instance has been destroyed.\r\n   * You must release everything in here, all references, all objects, free it all up.\r\n   *\r\n   * @method Phaser.Plugins.BasePlugin#destroy\r\n   * @since 3.8.0\r\n   */\n  destroy: function destroy() {\n    this.pluginManager = null;\n    this.game = null;\n    this.scene = null;\n    this.systems = null;\n  }\n});\nmodule.exports = BasePlugin;","map":null,"metadata":{},"sourceType":"script"}