{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * An Image Collection is a special Tile Set containing multiple images, with no slicing into each image.\r\n *\r\n * Image Collections are normally created automatically when Tiled data is loaded.\r\n *\r\n * @class ImageCollection\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @param {string} name - The name of the image collection in the map data.\r\n * @param {integer} firstgid - The first image index this image collection contains.\r\n * @param {integer} [width=32] - Width of widest image (in pixels).\r\n * @param {integer} [height=32] - Height of tallest image (in pixels).\r\n * @param {integer} [margin=0] - The margin around all images in the collection (in pixels).\r\n * @param {integer} [spacing=0] - The spacing between each image in the collection (in pixels).\r\n * @param {object} [properties={}] - Custom Image Collection properties.\r\n */\n\n\nvar ImageCollection = new Class({\n  initialize: function ImageCollection(name, firstgid, width, height, margin, spacing, properties) {\n    if (width === undefined || width <= 0) {\n      width = 32;\n    }\n\n    if (height === undefined || height <= 0) {\n      height = 32;\n    }\n\n    if (margin === undefined) {\n      margin = 0;\n    }\n\n    if (spacing === undefined) {\n      spacing = 0;\n    }\n    /**\r\n     * The name of the Image Collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n    */\n\n\n    this.name = name;\n    /**\r\n     * The Tiled firstgid value.\r\n     * This is the starting index of the first image index this Image Collection contains.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#firstgid\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.firstgid = firstgid | 0;\n    /**\r\n     * The width of the widest image (in pixels).\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageWidth\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageWidth = width | 0;\n    /**\r\n     * The height of the tallest image (in pixels).\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageHeight\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageHeight = height | 0;\n    /**\r\n     * The margin around the images in the collection (in pixels).\r\n     * Use `setSpacing` to change.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageMarge\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageMargin = margin | 0;\n    /**\r\n     * The spacing between each image in the collection (in pixels).\r\n     * Use `setSpacing` to change.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageSpacing\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageSpacing = spacing | 0;\n    /**\r\n     * Image Collection-specific properties that are typically defined in the Tiled editor.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = properties || {};\n    /**\r\n     * The cached images that are a part of this collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#images\r\n     * @type {array}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.images = [];\n    /**\r\n     * The total number of images in the image collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#total\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.total = 0;\n  },\n\n  /**\r\n   * Returns true if and only if this image collection contains the given image index.\r\n   *\r\n   * @method Phaser.Tilemaps.ImageCollection#containsImageIndex\r\n   * @since 3.0.0\r\n   * \r\n   * @param {integer} imageIndex - The image index to search for.\r\n   * \r\n   * @return {boolean} True if this Image Collection contains the given index.\r\n   */\n  containsImageIndex: function containsImageIndex(imageIndex) {\n    return imageIndex >= this.firstgid && imageIndex < this.firstgid + this.total;\n  },\n\n  /**\r\n   * Add an image to this Image Collection.\r\n   *\r\n   * @method Phaser.Tilemaps.ImageCollection#addImage\r\n   * @since 3.0.0\r\n   * \r\n   * @param {integer} gid - The gid of the image in the Image Collection.\r\n   * @param {string} image - The the key of the image in the Image Collection and in the cache.\r\n   *\r\n   * @return {Phaser.Tilemaps.ImageCollection} This ImageCollection object.\r\n   */\n  addImage: function addImage(gid, image) {\n    this.images.push({\n      gid: gid,\n      image: image\n    });\n    this.total++;\n    return this;\n  }\n});\nmodule.exports = ImageCollection;","map":null,"metadata":{},"sourceType":"script"}