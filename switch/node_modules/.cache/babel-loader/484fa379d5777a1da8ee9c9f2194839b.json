{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Commands = require('./Commands');\n\nvar SetTransform = require('../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Graphics#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Graphics} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n * @param {CanvasRenderingContext2D} [renderTargetCtx] - The target rendering context.\r\n * @param {boolean} allowClip - If `true` then path operations will be used instead of fill operations.\r\n */\n\n\nvar GraphicsCanvasRenderer = function GraphicsCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip) {\n  var commandBuffer = src.commandBuffer;\n  var commandBufferLength = commandBuffer.length;\n  var ctx = renderTargetCtx || renderer.currentContext;\n\n  if (commandBufferLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    return;\n  }\n\n  var lineAlpha = 1;\n  var fillAlpha = 1;\n  var lineColor = 0;\n  var fillColor = 0;\n  var lineWidth = 1;\n  var red = 0;\n  var green = 0;\n  var blue = 0; //  Reset any currently active paths\n\n  ctx.beginPath();\n\n  for (var index = 0; index < commandBufferLength; ++index) {\n    var commandID = commandBuffer[index];\n\n    switch (commandID) {\n      case Commands.ARC:\n        ctx.arc(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4], commandBuffer[index + 5], commandBuffer[index + 6]); //  +7 because overshoot is the 7th value, not used in Canvas\n\n        index += 7;\n        break;\n\n      case Commands.LINE_STYLE:\n        lineWidth = commandBuffer[index + 1];\n        lineColor = commandBuffer[index + 2];\n        lineAlpha = commandBuffer[index + 3];\n        red = (lineColor & 0xFF0000) >>> 16;\n        green = (lineColor & 0xFF00) >>> 8;\n        blue = lineColor & 0xFF;\n        ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + lineAlpha + ')';\n        ctx.lineWidth = lineWidth;\n        index += 3;\n        break;\n\n      case Commands.FILL_STYLE:\n        fillColor = commandBuffer[index + 1];\n        fillAlpha = commandBuffer[index + 2];\n        red = (fillColor & 0xFF0000) >>> 16;\n        green = (fillColor & 0xFF00) >>> 8;\n        blue = fillColor & 0xFF;\n        ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';\n        index += 2;\n        break;\n\n      case Commands.BEGIN_PATH:\n        ctx.beginPath();\n        break;\n\n      case Commands.CLOSE_PATH:\n        ctx.closePath();\n        break;\n\n      case Commands.FILL_PATH:\n        if (!allowClip) {\n          ctx.fill();\n        }\n\n        break;\n\n      case Commands.STROKE_PATH:\n        if (!allowClip) {\n          ctx.stroke();\n        }\n\n        break;\n\n      case Commands.FILL_RECT:\n        if (!allowClip) {\n          ctx.fillRect(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4]);\n        } else {\n          ctx.rect(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4]);\n        }\n\n        index += 4;\n        break;\n\n      case Commands.FILL_TRIANGLE:\n        ctx.beginPath();\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\n        ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\n        ctx.closePath();\n\n        if (!allowClip) {\n          ctx.fill();\n        }\n\n        index += 6;\n        break;\n\n      case Commands.STROKE_TRIANGLE:\n        ctx.beginPath();\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\n        ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\n        ctx.closePath();\n\n        if (!allowClip) {\n          ctx.stroke();\n        }\n\n        index += 6;\n        break;\n\n      case Commands.LINE_TO:\n        ctx.lineTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.MOVE_TO:\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.LINE_FX_TO:\n        ctx.lineTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 5;\n        break;\n\n      case Commands.MOVE_FX_TO:\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 5;\n        break;\n\n      case Commands.SAVE:\n        ctx.save();\n        break;\n\n      case Commands.RESTORE:\n        ctx.restore();\n        break;\n\n      case Commands.TRANSLATE:\n        ctx.translate(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.SCALE:\n        ctx.scale(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.ROTATE:\n        ctx.rotate(commandBuffer[index + 1]);\n        index += 1;\n        break;\n\n      case Commands.GRADIENT_FILL_STYLE:\n        index += 5;\n        break;\n\n      case Commands.GRADIENT_LINE_STYLE:\n        index += 6;\n        break;\n\n      case Commands.SET_TEXTURE:\n        index += 2;\n        break;\n    }\n  } //  Restore the context saved in SetTransform\n\n\n  ctx.restore();\n};\n\nmodule.exports = GraphicsCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}