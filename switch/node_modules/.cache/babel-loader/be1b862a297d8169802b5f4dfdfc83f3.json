{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar HasValue = require('../../utils/object/HasValue');\n/**\r\n * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n * that matches the given properties object, its collision flag will be set. The `collides`\r\n * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n * \"types\" property that matches any of those values, its collision flag will be updated.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByProperty\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SetCollisionByProperty = function SetCollisionByProperty(properties, collides, recalculateFaces, layer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  for (var ty = 0; ty < layer.height; ty++) {\n    for (var tx = 0; tx < layer.width; tx++) {\n      var tile = layer.data[ty][tx];\n\n      if (!tile) {\n        continue;\n      }\n\n      for (var property in properties) {\n        if (!HasValue(tile.properties, property)) {\n          continue;\n        }\n\n        var values = properties[property];\n\n        if (!Array.isArray(values)) {\n          values = [values];\n        }\n\n        for (var i = 0; i < values.length; i++) {\n          if (tile.properties[property] === values[i]) {\n            SetTileCollision(tile, collides);\n          }\n        }\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionByProperty;","map":null,"metadata":{},"sourceType":"script"}