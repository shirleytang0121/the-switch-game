{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Contains = require('../triangle/Contains');\n\nvar LineToLine = require('./LineToLine');\n/**\r\n * Checks if a Triangle and a Line intersect.\r\n * \r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n *\r\n * @return {boolean} `true` if the Triangle and the Line intersect, otherwise `false`.\r\n */\n\n\nvar TriangleToLine = function TriangleToLine(triangle, line) {\n  //  If the Triangle contains either the start or end point of the line, it intersects\n  if (Contains(triangle, line.getPointA()) || Contains(triangle, line.getPointB())) {\n    return true;\n  } //  Now check the line against each line of the Triangle\n\n\n  if (LineToLine(triangle.getLineA(), line)) {\n    return true;\n  }\n\n  if (LineToLine(triangle.getLineB(), line)) {\n    return true;\n  }\n\n  if (LineToLine(triangle.getLineC(), line)) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = TriangleToLine;","map":null,"metadata":{},"sourceType":"script"}