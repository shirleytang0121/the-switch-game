{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MeasureText = require('./MeasureText'); //  Key: [ Object Key, Default Value ]\n\n/**\r\n * A custom function that will be responsible for wrapping the text.\r\n * @callback TextStyleWordWrapCallback\r\n *\r\n * @param {string} text - The string to wrap.\r\n * @param {Phaser.GameObjects.Text} textObject - The Text instance.\r\n *\r\n * @return {(string|string[])} Should return the wrapped lines either as an array of lines or as a string with\r\n * newline characters in place to indicate where breaks should happen.\r\n */\n\n\nvar propertyMap = {\n  fontFamily: ['fontFamily', 'Courier'],\n  fontSize: ['fontSize', '16px'],\n  fontStyle: ['fontStyle', ''],\n  backgroundColor: ['backgroundColor', null],\n  color: ['color', '#fff'],\n  stroke: ['stroke', '#fff'],\n  strokeThickness: ['strokeThickness', 0],\n  shadowOffsetX: ['shadow.offsetX', 0],\n  shadowOffsetY: ['shadow.offsetY', 0],\n  shadowColor: ['shadow.color', '#000'],\n  shadowBlur: ['shadow.blur', 0],\n  shadowStroke: ['shadow.stroke', false],\n  shadowFill: ['shadow.fill', false],\n  align: ['align', 'left'],\n  maxLines: ['maxLines', 0],\n  fixedWidth: ['fixedWidth', 0],\n  fixedHeight: ['fixedHeight', 0],\n  resolution: ['resolution', 0],\n  rtl: ['rtl', false],\n  testString: ['testString', '|MÃ‰qgy'],\n  baselineX: ['baselineX', 1.2],\n  baselineY: ['baselineY', 1.4],\n  wordWrapWidth: ['wordWrap.width', null],\n  wordWrapCallback: ['wordWrap.callback', null],\n  wordWrapCallbackScope: ['wordWrap.callbackScope', null],\n  wordWrapUseAdvanced: ['wordWrap.useAdvancedWrap', false]\n};\n/**\r\n * Font metrics for a Text Style object.\r\n *\r\n * @typedef {object} BitmapTextMetrics\r\n *\r\n * @property {number} ascent - The ascent of the font.\r\n * @property {number} descent - The descent of the font.\r\n * @property {number} fontSize - The size of the font.\r\n */\n\n/**\r\n * @classdesc\r\n * A TextStyle class manages all of the style settings for a Text object.\r\n * \r\n * Text Game Objects create a TextStyle instance automatically, which is\r\n * accessed via the `Text.style` property. You do not normally need to\r\n * instantiate one yourself.\r\n *\r\n * @class TextStyle\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object that this TextStyle is styling.\r\n * @param {object} style - The style settings to set.\r\n */\n\nvar TextStyle = new Class({\n  initialize: function TextStyle(text, style) {\n    /**\r\n     * The Text object that this TextStyle is styling.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#parent\r\n     * @type {Phaser.GameObjects.Text}\r\n     * @since 3.0.0\r\n     */\n    this.parent = text;\n    /**\r\n     * The font family.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontFamily\r\n     * @type {string}\r\n     * @default 'Courier'\r\n     * @since 3.0.0\r\n     */\n\n    this.fontFamily;\n    /**\r\n     * The font size.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontSize\r\n     * @type {string}\r\n     * @default '16px'\r\n     * @since 3.0.0\r\n     */\n\n    this.fontSize;\n    /**\r\n     * The font style.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontStyle\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.fontStyle;\n    /**\r\n     * The background color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#backgroundColor\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.backgroundColor;\n    /**\r\n     * The text fill color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#color\r\n     * @type {string}\r\n     * @default '#fff'\r\n     * @since 3.0.0\r\n     */\n\n    this.color;\n    /**\r\n     * The text stroke color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#stroke\r\n     * @type {string}\r\n     * @default '#fff'\r\n     * @since 3.0.0\r\n     */\n\n    this.stroke;\n    /**\r\n     * The text stroke thickness.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#strokeThickness\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.strokeThickness;\n    /**\r\n     * The horizontal shadow offset.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowOffsetX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowOffsetX;\n    /**\r\n     * The vertical shadow offset.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowOffsetY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowOffsetY;\n    /**\r\n     * The shadow color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowColor\r\n     * @type {string}\r\n     * @default '#000'\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowColor;\n    /**\r\n     * The shadow blur radius.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowBlur\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowBlur;\n    /**\r\n     * Whether shadow stroke is enabled or not.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowStroke\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowStroke;\n    /**\r\n     * Whether shadow fill is enabled or not.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowFill\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowFill;\n    /**\r\n     * The text alignment.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#align\r\n     * @type {string}\r\n     * @default 'left'\r\n     * @since 3.0.0\r\n     */\n\n    this.align;\n    /**\r\n     * The maximum number of lines to draw.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#maxLines\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxLines;\n    /**\r\n     * The fixed width of the text.\r\n     *\r\n     * `0` means no fixed with.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fixedWidth\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.fixedWidth;\n    /**\r\n     * The fixed height of the text.\r\n     *\r\n     * `0` means no fixed height.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fixedHeight\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.fixedHeight;\n    /**\r\n     * The resolution the text is rendered to its internal canvas at.\r\n     * The default is 0, which means it will use the resolution set in the Game Config.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#resolution\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.12.0\r\n     */\n\n    this.resolution;\n    /**\r\n     * Whether the text should render right to left.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#rtl\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.rtl;\n    /**\r\n     * The test string to use when measuring the font.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#testString\r\n     * @type {string}\r\n     * @default '|MÉqgy'\r\n     * @since 3.0.0\r\n     */\n\n    this.testString;\n    /**\r\n     * The amount of horizontal padding adding to the width of the text when calculating the font metrics.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#baselineX\r\n     * @type {number}\r\n     * @default 1.2\r\n     * @since 3.3.0\r\n     */\n\n    this.baselineX;\n    /**\r\n     * The amount of vertical padding adding to the width of the text when calculating the font metrics.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#baselineY\r\n     * @type {number}\r\n     * @default 1.4\r\n     * @since 3.3.0\r\n     */\n\n    this.baselineY;\n    /**\r\n     * The font style, size and family.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#_font\r\n     * @type {string}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._font; //  Set to defaults + user style\n\n    this.setStyle(style, false, true);\n    var metrics = GetValue(style, 'metrics', false); //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning\n    //  Doing this is reset if you then change the font of this TextStyle after creation\n\n    if (metrics) {\n      this.metrics = {\n        ascent: GetValue(metrics, 'ascent', 0),\n        descent: GetValue(metrics, 'descent', 0),\n        fontSize: GetValue(metrics, 'fontSize', 0)\n      };\n    } else {\n      this.metrics = MeasureText(this);\n    }\n  },\n\n  /**\r\n   * Set the text style.\r\n   *\r\n   * @example\r\n   * text.setStyle({\r\n   *     fontSize: '64px',\r\n   *     fontFamily: 'Arial',\r\n   *     color: '#ffffff',\r\n   *     align: 'center',\r\n   *     backgroundColor: '#ff00ff'\r\n   * });\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} style - The style settings to set.\r\n   * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n   * @param {boolean} [setDefaults=false] - Use the default values is not set, or the local values.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setStyle: function setStyle(style, updateText, setDefaults) {\n    if (updateText === undefined) {\n      updateText = true;\n    }\n\n    if (setDefaults === undefined) {\n      setDefaults = false;\n    } //  Avoid type mutation\n\n\n    if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number') {\n      style.fontSize = style.fontSize.toString() + 'px';\n    }\n\n    for (var key in propertyMap) {\n      var value = setDefaults ? propertyMap[key][1] : this[key];\n\n      if (key === 'wordWrapCallback' || key === 'wordWrapCallbackScope') {\n        // Callback & scope should be set without processing the values\n        this[key] = GetValue(style, propertyMap[key][0], value);\n      } else {\n        this[key] = GetAdvancedValue(style, propertyMap[key][0], value);\n      }\n    } //  Allow for 'font' override\n\n\n    var font = GetValue(style, 'font', null);\n\n    if (font !== null) {\n      this.setFont(font, false);\n    }\n\n    this._font = [this.fontStyle, this.fontSize, this.fontFamily].join(' ').trim(); //  Allow for 'fill' to be used in place of 'color'\n\n    var fill = GetValue(style, 'fill', null);\n\n    if (fill !== null) {\n      this.color = fill;\n    }\n\n    if (updateText) {\n      return this.update(true);\n    } else {\n      return this.parent;\n    }\n  },\n\n  /**\r\n   * Synchronize the font settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncFont\r\n   * @since 3.0.0\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   */\n  syncFont: function syncFont(canvas, context) {\n    context.font = this._font;\n  },\n\n  /**\r\n   * Synchronize the text style settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   */\n  syncStyle: function syncStyle(canvas, context) {\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = this.color;\n    context.strokeStyle = this.stroke;\n    context.lineWidth = this.strokeThickness;\n    context.lineCap = 'round';\n    context.lineJoin = 'round';\n  },\n\n  /**\r\n   * Synchronize the shadow settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncShadow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   * @param {boolean} enabled - Whether shadows are enabled or not.\r\n   */\n  syncShadow: function syncShadow(context, enabled) {\n    if (enabled) {\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n    } else {\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowColor = 0;\n      context.shadowBlur = 0;\n    }\n  },\n\n  /**\r\n   * Update the style settings for the parent Text object.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} recalculateMetrics - Whether to recalculate font and text metrics.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  update: function update(recalculateMetrics) {\n    if (recalculateMetrics) {\n      this._font = [this.fontStyle, this.fontSize, this.fontFamily].join(' ').trim();\n      this.metrics = MeasureText(this);\n    }\n\n    return this.parent.updateText();\n  },\n\n  /**\r\n   * Set the font.\r\n   *\r\n   * If a string is given, the font family is set.\r\n   *\r\n   * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n   * properties of that object are set.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFont\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|object)} font - The font family or font settings to set.\r\n   * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFont: function setFont(font, updateText) {\n    if (updateText === undefined) {\n      updateText = true;\n    }\n\n    var fontFamily = font;\n    var fontSize = '';\n    var fontStyle = '';\n\n    if (typeof font !== 'string') {\n      fontFamily = GetValue(font, 'fontFamily', 'Courier');\n      fontSize = GetValue(font, 'fontSize', '16px');\n      fontStyle = GetValue(font, 'fontStyle', '');\n    } else {\n      var fontSplit = font.split(' ');\n      var i = 0;\n      fontStyle = fontSplit.length > 2 ? fontSplit[i++] : '';\n      fontSize = fontSplit[i++] || '16px';\n      fontFamily = fontSplit[i++] || 'Courier';\n    }\n\n    if (fontFamily !== this.fontFamily || fontSize !== this.fontSize || fontStyle !== this.fontStyle) {\n      this.fontFamily = fontFamily;\n      this.fontSize = fontSize;\n      this.fontStyle = fontStyle;\n\n      if (updateText) {\n        this.update(true);\n      }\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font family.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontFamily\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} family - The font family.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontFamily: function setFontFamily(family) {\n    if (this.fontFamily !== family) {\n      this.fontFamily = family;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} style - The font style.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontStyle: function setFontStyle(style) {\n    if (this.fontStyle !== style) {\n      this.fontStyle = style;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font size.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|string)} size - The font size.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontSize: function setFontSize(size) {\n    if (typeof size === 'number') {\n      size = size.toString() + 'px';\n    }\n\n    if (this.fontSize !== size) {\n      this.fontSize = size;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the test string to use when measuring the font.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setTestString\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} string - The test string to use when measuring the font.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setTestString: function setTestString(string) {\n    this.testString = string;\n    return this.update(true);\n  },\n\n  /**\r\n   * Set a fixed width and height for the text.\r\n   *\r\n   * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFixedSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The fixed width to set.\r\n   * @param {number} height - The fixed height to set.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFixedSize: function setFixedSize(width, height) {\n    this.fixedWidth = width;\n    this.fixedHeight = height;\n\n    if (width) {\n      this.parent.width = width;\n    }\n\n    if (height) {\n      this.parent.height = height;\n    }\n\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the background color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setBackgroundColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The background color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setBackgroundColor: function setBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the text fill color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The text fill color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFill: function setFill(color) {\n    this.color = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the text fill color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The text fill color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setColor: function setColor(color) {\n    this.color = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the resolution used by the Text object.\r\n   *\r\n   * By default it will be set to match the resolution set in the Game Config,\r\n   * but you can override it via this method. It allows for much clearer text on High DPI devices,\r\n   * at the cost of memory because it uses larger internal Canvas textures for the Text.\r\n   * \r\n   * Please use with caution, as the more high res Text you have, the more memory it uses up.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setResolution\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} value - The resolution for this Text object to use.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setResolution: function setResolution(value) {\n    this.resolution = value;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the stroke settings.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setStroke\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The stroke color.\r\n   * @param {number} thickness - The stroke thickness.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setStroke: function setStroke(color, thickness) {\n    if (thickness === undefined) {\n      thickness = this.strokeThickness;\n    }\n\n    if (color === undefined && this.strokeThickness !== 0) {\n      //  Reset the stroke to zero (disabling it)\n      this.strokeThickness = 0;\n      this.update(true);\n    } else if (this.stroke !== color || this.strokeThickness !== thickness) {\n      this.stroke = color;\n      this.strokeThickness = thickness;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the shadow settings.\r\n   * \r\n   * Calling this method always re-measures the parent Text object,\r\n   * so only call it when you actually change the shadow settings.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal shadow offset.\r\n   * @param {number} [y=0] - The vertical shadow offset.\r\n   * @param {string} [color='#000'] - The shadow color.\r\n   * @param {number} [blur=0] - The shadow blur radius.\r\n   * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n   * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadow: function setShadow(x, y, color, blur, shadowStroke, shadowFill) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (color === undefined) {\n      color = '#000';\n    }\n\n    if (blur === undefined) {\n      blur = 0;\n    }\n\n    if (shadowStroke === undefined) {\n      shadowStroke = false;\n    }\n\n    if (shadowFill === undefined) {\n      shadowFill = true;\n    }\n\n    this.shadowOffsetX = x;\n    this.shadowOffsetY = y;\n    this.shadowColor = color;\n    this.shadowBlur = blur;\n    this.shadowStroke = shadowStroke;\n    this.shadowFill = shadowFill;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow offset.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowOffset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal shadow offset.\r\n   * @param {number} [y=0] - The vertical shadow offset.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowOffset: function setShadowOffset(x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.shadowOffsetX = x;\n    this.shadowOffsetY = y;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [color='#000'] - The shadow color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowColor: function setShadowColor(color) {\n    if (color === undefined) {\n      color = '#000';\n    }\n\n    this.shadowColor = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow blur radius.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowBlur\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [blur=0] - The shadow blur radius.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowBlur: function setShadowBlur(blur) {\n    if (blur === undefined) {\n      blur = 0;\n    }\n\n    this.shadowBlur = blur;\n    return this.update(false);\n  },\n\n  /**\r\n   * Enable or disable shadow stroke.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowStroke\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowStroke: function setShadowStroke(enabled) {\n    this.shadowStroke = enabled;\n    return this.update(false);\n  },\n\n  /**\r\n   * Enable or disable shadow fill.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowFill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowFill: function setShadowFill(enabled) {\n    this.shadowFill = enabled;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the width (in pixels) to use for wrapping lines.\r\n   *\r\n   * Pass in null to remove wrapping by width.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setWordWrapWidth\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n   * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n   * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n   * spaces and whitespace are left as is.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setWordWrapWidth: function setWordWrapWidth(width, useAdvancedWrap) {\n    if (useAdvancedWrap === undefined) {\n      useAdvancedWrap = false;\n    }\n\n    this.wordWrapWidth = width;\n    this.wordWrapUseAdvanced = useAdvancedWrap;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set a custom callback for wrapping lines.\r\n   *\r\n   * Pass in null to remove wrapping by callback.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setWordWrapCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n   * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n   * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n   * newline characters in place to indicate where breaks should happen.\r\n   * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setWordWrapCallback: function setWordWrapCallback(callback, scope) {\n    if (scope === undefined) {\n      scope = null;\n    }\n\n    this.wordWrapCallback = callback;\n    this.wordWrapCallbackScope = scope;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setAlign\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} align - The text alignment.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setAlign: function setAlign(align) {\n    if (align === undefined) {\n      align = 'left';\n    }\n\n    this.align = align;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the maximum number of lines to draw.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setMaxLines\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [max=0] - The maximum number of lines to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setMaxLines: function setMaxLines(max) {\n    if (max === undefined) {\n      max = 0;\n    }\n\n    this.maxLines = max;\n    return this.update(false);\n  },\n\n  /**\r\n   * Get the current text metrics.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#getTextMetrics\r\n   * @since 3.0.0\r\n   *\r\n   * @return {BitmapTextMetrics} The text metrics.\r\n   */\n  getTextMetrics: function getTextMetrics() {\n    var metrics = this.metrics;\n    return {\n      ascent: metrics.ascent,\n      descent: metrics.descent,\n      fontSize: metrics.fontSize\n    };\n  },\n\n  /**\r\n   * Build a JSON representation of this Text Style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} A JSON representation of this Text Style.\r\n   */\n  toJSON: function toJSON() {\n    var output = {};\n\n    for (var key in propertyMap) {\n      output[key] = this[key];\n    }\n\n    output.metrics = this.getTextMetrics();\n    return output;\n  },\n\n  /**\r\n   * Destroy this Text Style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.parent = undefined;\n  }\n});\nmodule.exports = TextStyle;","map":null,"metadata":{},"sourceType":"script"}