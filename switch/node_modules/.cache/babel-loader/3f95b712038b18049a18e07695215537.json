{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseCamera = require('./BaseCamera');\n\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar CenterOn = require('../../geom/rectangle/CenterOn');\n\nvar Clamp = require('../../math/Clamp');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../../gameobjects/components');\n\nvar Effects = require('./effects');\n\nvar Linear = require('../../math/Linear');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash and Camera Shake.\r\n *\r\n * @class Camera\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @extends Phaser.Cameras.Scene2D.BaseCamera\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.Tint\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\n\n\nvar Camera = new Class({\n  Extends: BaseCamera,\n  Mixins: [Components.Flip, Components.Tint],\n  initialize: function Camera(x, y, width, height) {\n    BaseCamera.call(this, x, y, width, height);\n    /**\r\n     * Does this Camera allow the Game Objects it renders to receive input events?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#inputEnabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.inputEnabled = true;\n    /**\r\n     * The Camera Fade effect handler.\r\n     * To fade this camera see the `Camera.fade` methods.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#fadeEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Fade}\r\n     * @since 3.5.0\r\n     */\n\n    this.fadeEffect = new Effects.Fade(this);\n    /**\r\n     * The Camera Flash effect handler.\r\n     * To flash this camera see the `Camera.flash` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#flashEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Flash}\r\n     * @since 3.5.0\r\n     */\n\n    this.flashEffect = new Effects.Flash(this);\n    /**\r\n     * The Camera Shake effect handler.\r\n     * To shake this camera see the `Camera.shake` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#shakeEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Shake}\r\n     * @since 3.5.0\r\n     */\n\n    this.shakeEffect = new Effects.Shake(this);\n    /**\r\n     * The Camera Pan effect handler.\r\n     * To pan this camera see the `Camera.pan` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#panEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Pan}\r\n     * @since 3.11.0\r\n     */\n\n    this.panEffect = new Effects.Pan(this);\n    /**\r\n     * The Camera Zoom effect handler.\r\n     * To zoom this camera see the `Camera.zoom` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#zoomEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Zoom}\r\n     * @since 3.11.0\r\n     */\n\n    this.zoomEffect = new Effects.Zoom(this);\n    /**\r\n     * The linear interpolation value to use when following a target.\r\n     *\r\n     * Can also be set via `setLerp` or as part of the `startFollow` call.\r\n     *\r\n     * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n     * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n     * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n     * adjust this value in real-time during your game.\r\n     *\r\n     * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#lerp\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.9.0\r\n     */\n\n    this.lerp = new Vector2(1, 1);\n    /**\r\n     * The values stored in this property are subtracted from the Camera targets position, allowing you to\r\n     * offset the camera from the actual target x/y coordinates by this amount.\r\n     * Can also be set via `setFollowOffset` or as part of the `startFollow` call.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#followOffset\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.9.0\r\n     */\n\n    this.followOffset = new Vector2();\n    /**\r\n     * The Camera dead zone.\r\n     *\r\n     * The deadzone is only used when the camera is following a target.\r\n     *\r\n     * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n     * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n     *\r\n     * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n     *\r\n     * You can directly set this property to be an instance of a Rectangle. Or, you can use the\r\n     * `setDeadzone` method for a chainable approach.\r\n     *\r\n     * The rectangle you provide can have its dimensions adjusted dynamically, however, please\r\n     * note that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\r\n     *\r\n     * Calling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\r\n     * to `null`.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#deadzone\r\n     * @type {?Phaser.Geom.Rectangle}\r\n     * @since 3.11.0\r\n     */\n\n    this.deadzone = null;\n    /**\r\n     * Internal follow target reference.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#_follow\r\n     * @type {?any}\r\n     * @private\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this._follow = null;\n    /**\r\n     * Is this Camera rendering directly to the canvas or to a texture?\r\n     * \r\n     * Enable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\r\n     * \r\n     * Once enabled you can toggle it by switching this property.\r\n     * \r\n     * To properly remove a render texture you should call the `clearRenderToTexture()` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#renderToTexture\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.13.0\r\n     */\n\n    this.renderToTexture = false;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the HTML Canvas Element that the Camera is drawing to.\r\n     * \r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     * \r\n     * This is only populated if Phaser is running with the Canvas Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#canvas\r\n     * @type {HTMLCanvasElement}\r\n     * @since 3.13.0\r\n     */\n\n    this.canvas = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the Rendering Context belonging to the Canvas element the Camera is drawing to.\r\n     * \r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     * \r\n     * This is only populated if Phaser is running with the Canvas Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#context\r\n     * @type {CanvasRenderingContext2D}\r\n     * @since 3.13.0\r\n     */\n\n    this.context = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the GL Texture belonging the Camera is drawing to.\r\n     * \r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     * \r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @since 3.13.0\r\n     */\n\n    this.glTexture = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the GL Frame Buffer belonging the Camera is drawing to.\r\n     * \r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     * \r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#framebuffer\r\n     * @type {?WebGLFramebuffer}\r\n     * @since 3.13.0\r\n     */\n\n    this.framebuffer = null;\n    /**\r\n     * If this Camera has been set to render to a texture and to use a custom pipeline,\r\n     * then this holds a reference to the pipeline the Camera is drawing with.\r\n     * \r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     * \r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#pipeline\r\n     * @type {any}\r\n     * @since 3.13.0\r\n     */\n\n    this.pipeline = null;\n  },\n\n  /**\r\n   * Sets the Camera to render to a texture instead of to the main canvas.\r\n   * \r\n   * The Camera will redirect all Game Objects it's asked to render to this texture.\r\n   * \r\n   * During the render sequence, the texture itself will then be rendered to the main canvas.\r\n   * \r\n   * Doing this gives you the ability to modify the texture before this happens,\r\n   * allowing for special effects such as Camera specific shaders, or post-processing\r\n   * on the texture.\r\n   * \r\n   * If running under Canvas the Camera will render to its `canvas` property.\r\n   * \r\n   * If running under WebGL the Camera will create a frame buffer, which is stored in its `framebuffer` and `glTexture` properties.\r\n   * \r\n   * If you set a camera to render to a texture then it will emit 2 events during the render loop:\r\n   * \r\n   * First, it will emit the event `prerender`. This happens right before any Game Object's are drawn to the Camera texture.\r\n   * \r\n   * Then, it will emit the event `postrender`. This happens after all Game Object's have been drawn, but right before the\r\n   * Camera texture is rendered to the main game canvas. It's the final point at which you can manipulate the texture before\r\n   * it appears in-game.\r\n   * \r\n   * You should not enable this unless you plan on actually using the texture it creates\r\n   * somehow, otherwise you're just doubling the work required to render your game.\r\n   * \r\n   * To temporarily disable rendering to a texture, toggle the `renderToTexture` boolean.\r\n   * \r\n   * If you no longer require the Camera to render to a texture, call the `clearRenderToTexture` method,\r\n   * which will delete the respective textures and free-up resources.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setRenderToTexture\r\n   * @since 3.13.0\r\n   *\r\n   * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - An optional WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setRenderToTexture: function setRenderToTexture(pipeline) {\n    var renderer = this.scene.sys.game.renderer;\n\n    if (renderer.gl) {\n      this.glTexture = renderer.createTextureFromSource(null, this.width, this.height, 0);\n      this.framebuffer = renderer.createFramebuffer(this.width, this.height, this.glTexture, false);\n    } else {\n      this.canvas = CanvasPool.create2D(this, this.width, this.height);\n      this.context = this.canvas.getContext('2d');\n    }\n\n    this.renderToTexture = true;\n\n    if (pipeline) {\n      this.setPipeline(pipeline);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the WebGL pipeline this Camera is using when rendering to a texture.\r\n   * \r\n   * You can pass either the string-based name of the pipeline, or a reference to the pipeline itself.\r\n   * \r\n   * Call this method with no arguments to clear any previously set pipeline.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setPipeline\r\n   * @since 3.13.0\r\n   *\r\n   * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - The WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference. Or if left empty it will clear the pipeline.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setPipeline: function setPipeline(pipeline) {\n    if (typeof pipeline === 'string') {\n      var renderer = this.scene.sys.game.renderer;\n\n      if (renderer.gl && renderer.hasPipeline(pipeline)) {\n        this.pipeline = renderer.getPipeline(pipeline);\n      }\n    } else {\n      this.pipeline = pipeline;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * If this Camera was set to render to a texture, this will clear the resources it was using and\r\n   * redirect it to render back to the primary Canvas again.\r\n   * \r\n   * If you only wish to temporarily disable rendering to a texture then you can toggle the\r\n   * property `renderToTexture` instead.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#clearRenderToTexture\r\n   * @since 3.13.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  clearRenderToTexture: function clearRenderToTexture() {\n    var renderer = this.scene.sys.game.renderer;\n\n    if (renderer.gl) {\n      if (this.framebuffer) {\n        renderer.deleteFramebuffer(this.framebuffer);\n      }\n\n      if (this.glTexture) {\n        renderer.deleteTexture(this.glTexture);\n      }\n\n      this.framebuffer = null;\n      this.glTexture = null;\n      this.pipeline = null;\n    } else {\n      CanvasPool.remove(this);\n      this.canvas = null;\n      this.context = null;\n    }\n\n    this.renderToTexture = false;\n    return this;\n  },\n\n  /**\r\n   * Sets the Camera dead zone.\r\n   *\r\n   * The deadzone is only used when the camera is following a target.\r\n   *\r\n   * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n   * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n   *\r\n   * The deadzone rectangle is re-positioned every frame so that it is centered on the mid-point\r\n   * of the camera. This allows you to use the object for additional game related checks, such as\r\n   * testing if an object is within it or not via a Rectangle.contains call.\r\n   *\r\n   * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n   *\r\n   * Calling this method with no arguments will reset an active deadzone.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setDeadzone\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} [width] - The width of the deadzone rectangle in pixels. If not specified the deadzone is removed.\r\n   * @param {number} [height] - The height of the deadzone rectangle in pixels.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setDeadzone: function setDeadzone(width, height) {\n    if (width === undefined) {\n      this.deadzone = null;\n    } else {\n      if (this.deadzone) {\n        this.deadzone.width = width;\n        this.deadzone.height = height;\n      } else {\n        this.deadzone = new Rectangle(0, 0, width, height);\n      }\n\n      if (this._follow) {\n        var originX = this.width / 2;\n        var originY = this.height / 2;\n        var fx = this._follow.x - this.followOffset.x;\n        var fy = this._follow.y - this.followOffset.y;\n        this.midPoint.set(fx, fy);\n        this.scrollX = fx - originX;\n        this.scrollY = fy - originY;\n      }\n\n      CenterOn(this.deadzone, this.midPoint.x, this.midPoint.y);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Fades the Camera in from the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeIn\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeIn: function fadeIn(duration, red, green, blue, callback, context) {\n    return this.fadeEffect.start(false, duration, red, green, blue, true, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera out to the given color over the duration specified.\r\n   * This is an alias for Camera.fade that forces the fade to start, regardless of existing fades.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeOut\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeOut: function fadeOut(duration, red, green, blue, callback, context) {\n    return this.fadeEffect.start(true, duration, red, green, blue, true, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera from the given color to transparent over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeFrom\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeFrom: function fadeFrom(duration, red, green, blue, force, callback, context) {\n    return this.fadeEffect.start(false, duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera from transparent to the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fade\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fade: function fade(duration, red, green, blue, force, callback, context) {\n    return this.fadeEffect.start(true, duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Flashes the Camera by setting it to the given color immediately and then fading it away again quickly over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#flash\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  flash: function flash(duration, red, green, blue, force, callback, context) {\n    return this.flashEffect.start(duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Shakes the Camera by the given intensity over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#shake\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n   * @param {number} [intensity=0.05] - The intensity of the shake.\r\n   * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  shake: function shake(duration, intensity, force, callback, context) {\n    return this.shakeEffect.start(duration, intensity, force, callback, context);\n  },\n\n  /**\r\n   * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n   * over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#pan\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n   * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  pan: function pan(x, y, duration, ease, force, callback, context) {\n    return this.panEffect.start(x, y, duration, ease, force, callback, context);\n  },\n\n  /**\r\n   * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#zoomTo\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} zoom - The target Camera zoom value.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  zoomTo: function zoomTo(zoom, duration, ease, force, callback, context) {\n    return this.zoomEffect.start(zoom, duration, ease, force, callback, context);\n  },\n\n  /**\r\n   * Internal preRender step.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#preRender\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} resolution - The game resolution, as set in the Scale Manager.\r\n   */\n  preRender: function preRender(resolution) {\n    var width = this.width;\n    var height = this.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    var zoom = this.zoom * resolution;\n    var matrix = this.matrix;\n    var originX = width * this.originX;\n    var originY = height * this.originY;\n    var follow = this._follow;\n    var deadzone = this.deadzone;\n    var sx = this.scrollX;\n    var sy = this.scrollY;\n\n    if (deadzone) {\n      CenterOn(deadzone, this.midPoint.x, this.midPoint.y);\n    }\n\n    if (follow) {\n      var fx = follow.x - this.followOffset.x;\n      var fy = follow.y - this.followOffset.y;\n\n      if (deadzone) {\n        if (fx < deadzone.x) {\n          sx = Linear(sx, sx - (deadzone.x - fx), this.lerp.x);\n        } else if (fx > deadzone.right) {\n          sx = Linear(sx, sx + (fx - deadzone.right), this.lerp.x);\n        }\n\n        if (fy < deadzone.y) {\n          sy = Linear(sy, sy - (deadzone.y - fy), this.lerp.y);\n        } else if (fy > deadzone.bottom) {\n          sy = Linear(sy, sy + (fy - deadzone.bottom), this.lerp.y);\n        }\n      } else {\n        sx = Linear(sx, fx - originX, this.lerp.x);\n        sy = Linear(sy, fy - originY, this.lerp.y);\n      }\n    }\n\n    if (this.useBounds) {\n      sx = this.clampX(sx);\n      sy = this.clampY(sy);\n    }\n\n    if (this.roundPixels) {\n      originX = Math.round(originX);\n      originY = Math.round(originY);\n    } //  Values are in pixels and not impacted by zooming the Camera\n\n\n    this.scrollX = sx;\n    this.scrollY = sy;\n    var midX = sx + halfWidth;\n    var midY = sy + halfHeight; //  The center of the camera, in world space, so taking zoom into account\n    //  Basically the pixel value of what it's looking at in the middle of the cam\n\n    this.midPoint.set(midX, midY);\n    var displayWidth = width / zoom;\n    var displayHeight = height / zoom;\n    this.worldView.setTo(midX - displayWidth / 2, midY - displayHeight / 2, displayWidth, displayHeight);\n    matrix.applyITRS(this.x + originX, this.y + originY, this.rotation, zoom, zoom);\n    matrix.translate(-originX, -originY);\n    this.shakeEffect.preRender();\n  },\n\n  /**\r\n   * Sets the linear interpolation value to use when following a target.\r\n   *\r\n   * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n   * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n   * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n   * adjust this value in real-time during your game.\r\n   *\r\n   * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setLerp\r\n   * @since 3.9.0\r\n   *\r\n   * @param {number} [x=1] - The amount added to the horizontal linear interpolation of the follow target.\r\n   * @param {number} [y=1] - The amount added to the vertical linear interpolation of the follow target.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  setLerp: function setLerp(x, y) {\n    if (x === undefined) {\n      x = 1;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.lerp.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal and vertical offset of the camera from its follow target.\r\n   * The values are subtracted from the targets position during the Cameras update step.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setFollowOffset\r\n   * @since 3.9.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal offset from the camera follow target.x position.\r\n   * @param {number} [y=0] - The vertical offset from the camera follow target.y position.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  setFollowOffset: function setFollowOffset(x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    this.followOffset.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the Camera to follow a Game Object.\r\n   *\r\n   * When enabled the Camera will automatically adjust its scroll position to keep the target Game Object\r\n   * in its center.\r\n   *\r\n   * You can set the linear interpolation value used in the follow code.\r\n   * Use low lerp values (such as 0.1) to automatically smooth the camera motion.\r\n   *\r\n   * If you find you're getting a slight \"jitter\" effect when following an object it's probably to do with sub-pixel\r\n   * rendering of the targets position. This can be rounded by setting the `roundPixels` argument to `true` to\r\n   * force full pixel rounding rendering. Note that this can still be broken if you have specified a non-integer zoom\r\n   * value on the camera. So be sure to keep the camera zoom to integers.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#startFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|object)} target - The target for the Camera to follow.\r\n   * @param {boolean} [roundPixels=false] - Round the camera position to whole integers to avoid sub-pixel rendering?\r\n   * @param {number} [lerpX=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when horizontally tracking the target. The closer the value to 1, the faster the camera will track.\r\n   * @param {number} [lerpY=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when vertically tracking the target. The closer the value to 1, the faster the camera will track.\r\n   * @param {number} [offsetX=0] - The horizontal offset from the camera follow target.x position.\r\n   * @param {number} [offsetY=0] - The vertical offset from the camera follow target.y position.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  startFollow: function startFollow(target, roundPixels, lerpX, lerpY, offsetX, offsetY) {\n    if (roundPixels === undefined) {\n      roundPixels = false;\n    }\n\n    if (lerpX === undefined) {\n      lerpX = 1;\n    }\n\n    if (lerpY === undefined) {\n      lerpY = lerpX;\n    }\n\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = offsetX;\n    }\n\n    this._follow = target;\n    this.roundPixels = roundPixels;\n    lerpX = Clamp(lerpX, 0, 1);\n    lerpY = Clamp(lerpY, 0, 1);\n    this.lerp.set(lerpX, lerpY);\n    this.followOffset.set(offsetX, offsetY);\n    var originX = this.width / 2;\n    var originY = this.height / 2;\n    var fx = target.x - offsetX;\n    var fy = target.y - offsetY;\n    this.midPoint.set(fx, fy);\n    this.scrollX = fx - originX;\n    this.scrollY = fy - originY;\n    return this;\n  },\n\n  /**\r\n   * Stops a Camera from following a Game Object, if previously set via `Camera.startFollow`.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#stopFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  stopFollow: function stopFollow() {\n    this._follow = null;\n    return this;\n  },\n\n  /**\r\n   * Resets any active FX, such as a fade, flash or shake. Useful to call after a fade in order to\r\n   * remove the fade.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#resetFX\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  resetFX: function resetFX() {\n    this.panEffect.reset();\n    this.shakeEffect.reset();\n    this.flashEffect.reset();\n    this.fadeEffect.reset();\n    return this;\n  },\n\n  /**\r\n   * Internal method called automatically by the Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#update\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (this.visible) {\n      this.panEffect.update(time, delta);\n      this.zoomEffect.update(time, delta);\n      this.shakeEffect.update(time, delta);\n      this.flashEffect.update(time, delta);\n      this.fadeEffect.update(time, delta);\n    }\n  },\n\n  /**\r\n   * Destroys this Camera instance. You rarely need to call this directly.\r\n   *\r\n   * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\r\n   * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#destroy\r\n   * @fires CameraDestroyEvent\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.clearRenderToTexture();\n    this.resetFX();\n    BaseCamera.prototype.destroy.call(this);\n    this._follow = null;\n    this.deadzone = null;\n  }\n});\nmodule.exports = Camera;","map":null,"metadata":{},"sourceType":"script"}