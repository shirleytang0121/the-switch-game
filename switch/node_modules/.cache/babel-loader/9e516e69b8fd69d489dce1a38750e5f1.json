{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Checks for intersection between a circle and a rectangle.\r\n *\r\n * @function Phaser.Geom.Intersects.CircleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The circle to be checked.\r\n * @param {Phaser.Geom.Rectangle} rect - The rectangle to be checked.\r\n *\r\n * @return {boolean} `true` if the two objects intersect, otherwise `false`.\r\n */\nvar CircleToRectangle = function CircleToRectangle(circle, rect) {\n  var halfWidth = rect.width / 2;\n  var halfHeight = rect.height / 2;\n  var cx = Math.abs(circle.x - rect.x - halfWidth);\n  var cy = Math.abs(circle.y - rect.y - halfHeight);\n  var xDist = halfWidth + circle.radius;\n  var yDist = halfHeight + circle.radius;\n\n  if (cx > xDist || cy > yDist) {\n    return false;\n  } else if (cx <= halfWidth || cy <= halfHeight) {\n    return true;\n  } else {\n    var xCornerDist = cx - halfWidth;\n    var yCornerDist = cy - halfHeight;\n    var xCornerDistSq = xCornerDist * xCornerDist;\n    var yCornerDistSq = yCornerDist * yCornerDist;\n    var maxCornerDistSq = circle.radius * circle.radius;\n    return xCornerDistSq + yCornerDistSq <= maxCornerDistSq;\n  }\n};\n\nmodule.exports = CircleToRectangle;","map":null,"metadata":{},"sourceType":"script"}