{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar IsoTriangleRender = require('./IsoTriangleRender');\n\nvar Shape = require('../Shape');\n/**\r\n * @classdesc\r\n * The IsoTriangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoTriangle is an 'isometric' triangle. Think of it like a pyramid. Each face has a different\r\n * fill color. You can set the color of the top, left and right faces of the triangle respectively\r\n * You can also choose which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoTriangle from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property. The `reversed` property controls if the IsoTriangle is rendered upside\r\n * down or not.\r\n *\r\n * @class IsoTriangle\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso triangle in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso triangle. The left and right faces will be this tall. The overall height of the iso triangle will be this value plus half the `size` value.\r\n * @param {boolean} [reversed=false] - Is the iso triangle upside down?\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso triangle.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso triangle.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso triangle.\r\n */\n\n\nvar IsoTriangle = new Class({\n  Extends: Shape,\n  Mixins: [IsoTriangleRender],\n  initialize: function IsoTriangle(scene, x, y, size, height, reversed, fillTop, fillLeft, fillRight) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (size === undefined) {\n      size = 48;\n    }\n\n    if (height === undefined) {\n      height = 32;\n    }\n\n    if (reversed === undefined) {\n      reversed = false;\n    }\n\n    if (fillTop === undefined) {\n      fillTop = 0xeeeeee;\n    }\n\n    if (fillLeft === undefined) {\n      fillLeft = 0x999999;\n    }\n\n    if (fillRight === undefined) {\n      fillRight = 0xcccccc;\n    }\n\n    Shape.call(this, scene, 'IsoTriangle', null);\n    /**\r\n     * The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#projection\r\n     * @type {integer}\r\n     * @default 4\r\n     * @since 3.13.0\r\n     */\n\n    this.projection = 4;\n    /**\r\n     * The color used to fill in the top of the iso triangle. This is only used if the triangle is reversed.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#fillTop\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillTop = fillTop;\n    /**\r\n     * The color used to fill in the left-facing side of the iso triangle.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#fillLeft\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillLeft = fillLeft;\n    /**\r\n     * The color used to fill in the right-facing side of the iso triangle.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#fillRight\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillRight = fillRight;\n    /**\r\n     * Controls if the top-face of the iso triangle be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#showTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showTop = true;\n    /**\r\n     * Controls if the left-face of the iso triangle be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#showLeft\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showLeft = true;\n    /**\r\n     * Controls if the right-face of the iso triangle be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#showRight\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showRight = true;\n    /**\r\n     * Sets if the iso triangle will be rendered upside down or not.\r\n     *\r\n     * @name Phaser.GameObjects.IsoTriangle#isReversed\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.13.0\r\n     */\n\n    this.isReversed = reversed;\n    this.isFilled = true;\n    this.setPosition(x, y);\n    this.setSize(size, height);\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * Sets the projection level of the iso triangle. Change this to change the 'angle' at which you are looking at the pyramid.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoTriangle#setProjection\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the projection to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setProjection: function setProjection(value) {\n    this.projection = value;\n    return this;\n  },\n\n  /**\r\n   * Sets if the iso triangle will be rendered upside down or not.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoTriangle#setReversed\r\n   * @since 3.13.0\r\n   * \r\n   * @param {boolean} reversed - Sets if the iso triangle will be rendered upside down or not.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setReversed: function setReversed(reversed) {\n    this.isReversed = reversed;\n    return this;\n  },\n\n  /**\r\n   * Sets which faces of the iso triangle will be rendered.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoTriangle#setFaces\r\n   * @since 3.13.0\r\n   * \r\n   * @param {boolean} [showTop=true] - Show the top-face of the iso triangle (only if `reversed` is true)\r\n   * @param {boolean} [showLeft=true] - Show the left-face of the iso triangle.\r\n   * @param {boolean} [showRight=true] - Show the right-face of the iso triangle.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFaces: function setFaces(showTop, showLeft, showRight) {\n    if (showTop === undefined) {\n      showTop = true;\n    }\n\n    if (showLeft === undefined) {\n      showLeft = true;\n    }\n\n    if (showRight === undefined) {\n      showRight = true;\n    }\n\n    this.showTop = showTop;\n    this.showLeft = showLeft;\n    this.showRight = showRight;\n    return this;\n  },\n\n  /**\r\n   * Sets the fill colors for each face of the iso triangle.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoTriangle#setFillStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [fillTop] - The color used to fill the top of the iso triangle.\r\n   * @param {number} [fillLeft] - The color used to fill in the left-facing side of the iso triangle.\r\n   * @param {number} [fillRight] - The color used to fill in the right-facing side of the iso triangle.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFillStyle: function setFillStyle(fillTop, fillLeft, fillRight) {\n    this.fillTop = fillTop;\n    this.fillLeft = fillLeft;\n    this.fillRight = fillRight;\n    this.isFilled = true;\n    return this;\n  }\n});\nmodule.exports = IsoTriangle;","map":null,"metadata":{},"sourceType":"script"}