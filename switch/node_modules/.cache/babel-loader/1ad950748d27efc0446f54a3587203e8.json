{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Particles.EmitterManager#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} emitterManager - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar ParticleManagerWebGLRenderer = function ParticleManagerWebGLRenderer(renderer, emitterManager, interpolationPercentage, camera, parentMatrix) {\n  var emitters = emitterManager.emitters.list;\n  var emittersLength = emitters.length;\n\n  if (emittersLength === 0) {\n    return;\n  }\n\n  var pipeline = this.pipeline;\n\n  var camMatrix = pipeline._tempMatrix1.copyFrom(camera.matrix);\n\n  var calcMatrix = pipeline._tempMatrix2;\n  var particleMatrix = pipeline._tempMatrix3;\n\n  var managerMatrix = pipeline._tempMatrix4.applyITRS(emitterManager.x, emitterManager.y, emitterManager.rotation, emitterManager.scaleX, emitterManager.scaleY);\n\n  camMatrix.multiply(managerMatrix);\n  renderer.setPipeline(pipeline);\n  var roundPixels = camera.roundPixels;\n  var texture = emitterManager.defaultFrame.glTexture;\n  var getTint = Utils.getTintAppendFloatAlphaAndSwap;\n  pipeline.setTexture2D(texture, 0);\n\n  for (var e = 0; e < emittersLength; e++) {\n    var emitter = emitters[e];\n    var particles = emitter.alive;\n    var particleCount = particles.length;\n\n    if (!emitter.visible || particleCount === 0) {\n      continue;\n    }\n\n    var scrollX = camera.scrollX * emitter.scrollFactorX;\n    var scrollY = camera.scrollY * emitter.scrollFactorY;\n\n    if (parentMatrix) {\n      //  Multiply the camera by the parent matrix\n      camMatrix.multiplyWithOffset(parentMatrix, -scrollX, -scrollY);\n      scrollX = 0;\n      scrollY = 0;\n    }\n\n    if (renderer.setBlendMode(emitter.blendMode)) {\n      //  Rebind the texture if we've flushed\n      pipeline.setTexture2D(texture, 0);\n    }\n\n    var tintEffect = 0;\n\n    for (var i = 0; i < particleCount; i++) {\n      var particle = particles[i];\n      var alpha = particle.alpha * camera.alpha;\n\n      if (alpha <= 0) {\n        continue;\n      }\n\n      var frame = particle.frame;\n      var x = -frame.halfWidth;\n      var y = -frame.halfHeight;\n      var xw = x + frame.width;\n      var yh = y + frame.height;\n      particleMatrix.applyITRS(0, 0, particle.rotation, particle.scaleX, particle.scaleY);\n      particleMatrix.e = particle.x - scrollX;\n      particleMatrix.f = particle.y - scrollY;\n      camMatrix.multiply(particleMatrix, calcMatrix);\n      var tx0 = calcMatrix.getX(x, y);\n      var ty0 = calcMatrix.getY(x, y);\n      var tx1 = calcMatrix.getX(x, yh);\n      var ty1 = calcMatrix.getY(x, yh);\n      var tx2 = calcMatrix.getX(xw, yh);\n      var ty2 = calcMatrix.getY(xw, yh);\n      var tx3 = calcMatrix.getX(xw, y);\n      var ty3 = calcMatrix.getY(xw, y);\n\n      if (roundPixels) {\n        tx0 = Math.round(tx0);\n        ty0 = Math.round(ty0);\n        tx1 = Math.round(tx1);\n        ty1 = Math.round(ty1);\n        tx2 = Math.round(tx2);\n        ty2 = Math.round(ty2);\n        tx3 = Math.round(tx3);\n        ty3 = Math.round(ty3);\n      }\n\n      var tint = getTint(particle.tint, alpha);\n      pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect, texture, 0);\n    }\n  }\n};\n\nmodule.exports = ParticleManagerWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}