{"ast":null,"code":"/**\r\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n* The stiffness of constraints can be modified to create springs or elastic.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Constraint\r\n*/\nvar Constraint = {};\nmodule.exports = Constraint;\n\nvar Vertices = require('../geometry/Vertices');\n\nvar Vector = require('../geometry/Vector');\n\nvar Sleeping = require('../core/Sleeping');\n\nvar Bounds = require('../geometry/Bounds');\n\nvar Axes = require('../geometry/Axes');\n\nvar Common = require('../core/Common');\n\n(function () {\n  Constraint._warming = 0.4;\n  Constraint._torqueDampen = 1;\n  Constraint._minLength = 0.000001;\n  /**\r\n   * Creates a new constraint.\r\n   * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n   * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\r\n   * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\r\n   * For compound bodies, constraints must be applied to the parent body (not one of its parts).\r\n   * See the properties section below for detailed information on what you can pass via the `options` object.\r\n   * @method create\r\n   * @param {} options\r\n   * @return {constraint} constraint\r\n   */\n\n  Constraint.create = function (options) {\n    var constraint = options; // if bodies defined but no points, use body centre\n\n    if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n      x: 0,\n      y: 0\n    };\n    if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n      x: 0,\n      y: 0\n    }; // calculate static length using initial world space points\n\n    var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n        initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n        length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n    constraint.id = constraint.id || Common.nextId();\n    constraint.label = constraint.label || 'Constraint';\n    constraint.type = 'constraint';\n    constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n    constraint.damping = constraint.damping || 0;\n    constraint.angularStiffness = constraint.angularStiffness || 0;\n    constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n    constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n    constraint.plugin = {}; // render\n\n    var render = {\n      visible: true,\n      lineWidth: 2,\n      strokeStyle: '#ffffff',\n      type: 'line',\n      anchors: true\n    };\n\n    if (constraint.length === 0 && constraint.stiffness > 0.1) {\n      render.type = 'pin';\n      render.anchors = false;\n    } else if (constraint.stiffness < 0.9) {\n      render.type = 'spring';\n    }\n\n    constraint.render = Common.extend(render, constraint.render);\n    return constraint;\n  };\n  /**\r\n   * Prepares for solving by constraint warming.\r\n   * @private\r\n   * @method preSolveAll\r\n   * @param {body[]} bodies\r\n   */\n\n\n  Constraint.preSolveAll = function (bodies) {\n    for (var i = 0; i < bodies.length; i += 1) {\n      var body = bodies[i],\n          impulse = body.constraintImpulse;\n\n      if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n        continue;\n      }\n\n      body.position.x += impulse.x;\n      body.position.y += impulse.y;\n      body.angle += impulse.angle;\n    }\n  };\n  /**\r\n   * Solves all constraints in a list of collisions.\r\n   * @private\r\n   * @method solveAll\r\n   * @param {constraint[]} constraints\r\n   * @param {number} timeScale\r\n   */\n\n\n  Constraint.solveAll = function (constraints, timeScale) {\n    // Solve fixed constraints first.\n    for (var i = 0; i < constraints.length; i += 1) {\n      var constraint = constraints[i],\n          fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n          fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n      if (fixedA || fixedB) {\n        Constraint.solve(constraints[i], timeScale);\n      }\n    } // Solve free constraints last.\n\n\n    for (i = 0; i < constraints.length; i += 1) {\n      constraint = constraints[i];\n      fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n      fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n      if (!fixedA && !fixedB) {\n        Constraint.solve(constraints[i], timeScale);\n      }\n    }\n  };\n  /**\r\n   * Solves a distance constraint with Gauss-Siedel method.\r\n   * @private\r\n   * @method solve\r\n   * @param {constraint} constraint\r\n   * @param {number} timeScale\r\n   */\n\n\n  Constraint.solve = function (constraint, timeScale) {\n    var bodyA = constraint.bodyA,\n        bodyB = constraint.bodyB,\n        pointA = constraint.pointA,\n        pointB = constraint.pointB;\n    if (!bodyA && !bodyB) return; // update reference angle\n\n    if (bodyA && !bodyA.isStatic) {\n      Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n      constraint.angleA = bodyA.angle;\n    } // update reference angle\n\n\n    if (bodyB && !bodyB.isStatic) {\n      Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n      constraint.angleB = bodyB.angle;\n    }\n\n    var pointAWorld = pointA,\n        pointBWorld = pointB;\n    if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n    if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n    if (!pointAWorld || !pointBWorld) return;\n    var delta = Vector.sub(pointAWorld, pointBWorld),\n        currentLength = Vector.magnitude(delta); // prevent singularity\n\n    if (currentLength < Constraint._minLength) {\n      currentLength = Constraint._minLength;\n    } // solve distance constraint with Gauss-Siedel method\n\n\n    var difference = (currentLength - constraint.length) / currentLength,\n        stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n        force = Vector.mult(delta, difference * stiffness),\n        massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n        inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n        resistanceTotal = massTotal + inertiaTotal,\n        torque,\n        share,\n        normal,\n        normalVelocity,\n        relativeVelocity;\n\n    if (constraint.damping) {\n      var zero = Vector.create();\n      normal = Vector.div(delta, currentLength);\n      relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n      normalVelocity = Vector.dot(normal, relativeVelocity);\n    }\n\n    if (bodyA && !bodyA.isStatic) {\n      share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n      bodyA.constraintImpulse.x -= force.x * share;\n      bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n      bodyA.position.x -= force.x * share;\n      bodyA.position.y -= force.y * share; // apply damping\n\n      if (constraint.damping) {\n        bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n        bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n      } // apply torque\n\n\n      torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n      bodyA.constraintImpulse.angle -= torque;\n      bodyA.angle -= torque;\n    }\n\n    if (bodyB && !bodyB.isStatic) {\n      share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n      bodyB.constraintImpulse.x += force.x * share;\n      bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n      bodyB.position.x += force.x * share;\n      bodyB.position.y += force.y * share; // apply damping\n\n      if (constraint.damping) {\n        bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n        bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n      } // apply torque\n\n\n      torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n      bodyB.constraintImpulse.angle += torque;\n      bodyB.angle += torque;\n    }\n  };\n  /**\r\n   * Performs body updates required after solving constraints.\r\n   * @private\r\n   * @method postSolveAll\r\n   * @param {body[]} bodies\r\n   */\n\n\n  Constraint.postSolveAll = function (bodies) {\n    for (var i = 0; i < bodies.length; i++) {\n      var body = bodies[i],\n          impulse = body.constraintImpulse;\n\n      if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n        continue;\n      }\n\n      Sleeping.set(body, false); // update geometry and reset\n\n      for (var j = 0; j < body.parts.length; j++) {\n        var part = body.parts[j];\n        Vertices.translate(part.vertices, impulse);\n\n        if (j > 0) {\n          part.position.x += impulse.x;\n          part.position.y += impulse.y;\n        }\n\n        if (impulse.angle !== 0) {\n          Vertices.rotate(part.vertices, impulse.angle, body.position);\n          Axes.rotate(part.axes, impulse.angle);\n\n          if (j > 0) {\n            Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n          }\n        }\n\n        Bounds.update(part.bounds, part.vertices, body.velocity);\n      } // dampen the cached impulse for warming next step\n\n\n      impulse.angle *= Constraint._warming;\n      impulse.x *= Constraint._warming;\n      impulse.y *= Constraint._warming;\n    }\n  };\n  /*\r\n  *\r\n  *  Properties Documentation\r\n  *\r\n  */\n\n  /**\r\n   * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n   *\r\n   * @property id\r\n   * @type number\r\n   */\n\n  /**\r\n   * A `String` denoting the type of object.\r\n   *\r\n   * @property type\r\n   * @type string\r\n   * @default \"constraint\"\r\n   * @readOnly\r\n   */\n\n  /**\r\n   * An arbitrary `String` name to help the user identify and manage bodies.\r\n   *\r\n   * @property label\r\n   * @type string\r\n   * @default \"Constraint\"\r\n   */\n\n  /**\r\n   * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n   *\r\n   * @property render\r\n   * @type object\r\n   */\n\n  /**\r\n   * A flag that indicates if the constraint should be rendered.\r\n   *\r\n   * @property render.visible\r\n   * @type boolean\r\n   * @default true\r\n   */\n\n  /**\r\n   * A `Number` that defines the line width to use when rendering the constraint outline.\r\n   * A value of `0` means no outline will be rendered.\r\n   *\r\n   * @property render.lineWidth\r\n   * @type number\r\n   * @default 2\r\n   */\n\n  /**\r\n   * A `String` that defines the stroke style to use when rendering the constraint outline.\r\n   * It is the same as when using a canvas, so it accepts CSS style property values.\r\n   *\r\n   * @property render.strokeStyle\r\n   * @type string\r\n   * @default a random colour\r\n   */\n\n  /**\r\n   * A `String` that defines the constraint rendering type. \r\n   * The possible values are 'line', 'pin', 'spring'.\r\n   * An appropriate render type will be automatically chosen unless one is given in options.\r\n   *\r\n   * @property render.type\r\n   * @type string\r\n   * @default 'line'\r\n   */\n\n  /**\r\n   * A `Boolean` that defines if the constraint's anchor points should be rendered.\r\n   *\r\n   * @property render.anchors\r\n   * @type boolean\r\n   * @default true\r\n   */\n\n  /**\r\n   * The first possible `Body` that this constraint is attached to.\r\n   *\r\n   * @property bodyA\r\n   * @type body\r\n   * @default null\r\n   */\n\n  /**\r\n   * The second possible `Body` that this constraint is attached to.\r\n   *\r\n   * @property bodyB\r\n   * @type body\r\n   * @default null\r\n   */\n\n  /**\r\n   * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\r\n   *\r\n   * @property pointA\r\n   * @type vector\r\n   * @default { x: 0, y: 0 }\r\n   */\n\n  /**\r\n   * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\r\n   *\r\n   * @property pointB\r\n   * @type vector\r\n   * @default { x: 0, y: 0 }\r\n   */\n\n  /**\r\n   * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\r\n   * A value of `1` means the constraint should be very stiff.\r\n   * A value of `0.2` means the constraint acts like a soft spring.\r\n   *\r\n   * @property stiffness\r\n   * @type number\r\n   * @default 1\r\n   */\n\n  /**\r\n   * A `Number` that specifies the damping of the constraint, \r\n   * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\r\n   * Damping will only be apparent when the constraint also has a very low `stiffness`.\r\n   * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\r\n   * A value of `0` means the constraint will apply no damping.\r\n   *\r\n   * @property damping\r\n   * @type number\r\n   * @default 0\r\n   */\n\n  /**\r\n   * A `Number` that specifies the target resting length of the constraint. \r\n   * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\r\n   *\r\n   * @property length\r\n   * @type number\r\n   */\n\n  /**\r\n   * An object reserved for storing plugin-specific properties.\r\n   *\r\n   * @property plugin\r\n   * @type {}\r\n   */\n\n})();","map":null,"metadata":{},"sourceType":"script"}