{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * @callback SnapshotCallback\r\n *\r\n * @param {(Phaser.Display.Color|HTMLImageElement)} snapshot - Either a Color object if a single pixel is being grabbed, or a new Image which contains a snapshot of the canvas contents.\r\n */\n\n/**\r\n * @typedef {object} SnapshotState\r\n *\r\n * @property {SnapshotCallback} callback - The function to call after the snapshot is taken.\r\n * @property {string} [type='image/png'] - The format of the image to create, usually `image/png` or `image/jpeg`.\r\n * @property {number} [encoderOptions=0.92] - The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`.\r\n * @property {integer} [x=0] - The x coordinate to start the snapshot from.\r\n * @property {integer} [y=0] - The y coordinate to start the snapshot from.\r\n * @property {integer} [width] - The width of the snapshot.\r\n * @property {integer} [height] - The height of the snapshot.\r\n * @property {boolean} [getPixel=false] - Is this a snapshot to get a single pixel, or an area?\r\n */\n\n/**\r\n * @namespace Phaser.Renderer.Snapshot\r\n */\nmodule.exports = {\n  Canvas: require('./CanvasSnapshot'),\n  WebGL: require('./WebGLSnapshot')\n};","map":null,"metadata":{},"sourceType":"script"}