{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseCamera = require('../../cameras/2d/BaseCamera.js');\n\nvar Class = require('../../utils/Class');\n\nvar Commands = require('./Commands');\n\nvar ComponentsAlpha = require('../components/Alpha');\n\nvar ComponentsBlendMode = require('../components/BlendMode');\n\nvar ComponentsDepth = require('../components/Depth');\n\nvar ComponentsMask = require('../components/Mask');\n\nvar ComponentsPipeline = require('../components/Pipeline');\n\nvar ComponentsTransform = require('../components/Transform');\n\nvar ComponentsVisible = require('../components/Visible');\n\nvar ComponentsScrollFactor = require('../components/ScrollFactor');\n\nvar Ellipse = require('../../geom/ellipse/Ellipse');\n\nvar GameObject = require('../GameObject');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MATH_CONST = require('../../math/const');\n\nvar Render = require('./GraphicsRender');\n/**\r\n * Graphics line style (or stroke style) settings.\r\n *\r\n * @typedef {object} GraphicsLineStyle\r\n *\r\n * @property {number} [width] - The stroke width.\r\n * @property {number} [color] - The stroke color.\r\n * @property {number} [alpha] - The stroke alpha.\r\n */\n\n/**\r\n * Graphics fill style settings.\r\n *\r\n * @typedef {object} GraphicsFillStyle\r\n *\r\n * @property {number} [color] - The fill color.\r\n * @property {number} [alpha] - The fill alpha.\r\n */\n\n/**\r\n * Graphics style settings.\r\n *\r\n * @typedef {object} GraphicsStyles\r\n *\r\n * @property {GraphicsLineStyle} [lineStyle] - The style applied to shape outlines.\r\n * @property {GraphicsFillStyle} [fillStyle] - The style applied to shape areas.\r\n */\n\n/**\r\n * Options for the Graphics game Object.\r\n *\r\n * @typedef {object} GraphicsOptions\r\n * @extends GraphicsStyles\r\n *\r\n * @property {number} [x] - The x coordinate of the Graphics.\r\n * @property {number} [y] - The y coordinate of the Graphics.\r\n */\n\n/**\r\n * @classdesc\r\n * A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\r\n * Rectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\r\n * object it will be empty.\r\n *\r\n * To draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\r\n * fill or stroke them. For example:\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.beginPath();\r\n * graphics.moveTo(100, 100);\r\n * graphics.lineTo(200, 200);\r\n * graphics.closePath();\r\n * graphics.strokePath();\r\n * ```\r\n *\r\n * There are also many helpful methods that draw and fill/stroke common shapes for you.\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.fillStyle(0xFFFFFF, 1.0);\r\n * graphics.fillRect(50, 50, 400, 200);\r\n * graphics.strokeRect(50, 50, 400, 200);\r\n * ```\r\n *\r\n * When a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\r\n * Under Canvas it will use the HTML Canvas context drawing operations to draw the path.\r\n * Under WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\r\n * complex shapes.\r\n *\r\n * If your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\r\n * performance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\r\n * a Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\r\n * updates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\r\n * memory.\r\n *\r\n * As you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\r\n * in their complexity and quantity of them in your game.\r\n *\r\n * @class Graphics\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Graphics object belongs.\r\n * @param {GraphicsOptions} [options] - Options that set the position and default style of this Graphics object.\r\n */\n\n\nvar Graphics = new Class({\n  Extends: GameObject,\n  Mixins: [ComponentsAlpha, ComponentsBlendMode, ComponentsDepth, ComponentsMask, ComponentsPipeline, ComponentsTransform, ComponentsVisible, ComponentsScrollFactor, Render],\n  initialize: function Graphics(scene, options) {\n    var x = GetValue(options, 'x', 0);\n    var y = GetValue(options, 'y', 0);\n    GameObject.call(this, scene, 'Graphics');\n    this.setPosition(x, y);\n    this.initPipeline();\n    /**\r\n     * The horizontal display origin of the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#displayOriginX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.displayOriginX = 0;\n    /**\r\n     * The vertical display origin of the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#displayOriginY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.displayOriginY = 0;\n    /**\r\n     * The array of commands used to render the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#commandBuffer\r\n     * @type {array}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.commandBuffer = [];\n    /**\r\n     * The default fill color for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultFillColor\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFillColor = -1;\n    /**\r\n     * The default fill alpha for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultFillAlpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFillAlpha = 1;\n    /**\r\n     * The default stroke width for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeWidth\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeWidth = 1;\n    /**\r\n     * The default stroke color for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeColor\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeColor = -1;\n    /**\r\n     * The default stroke alpha for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeAlpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeAlpha = 1;\n    /**\r\n     * Internal property that keeps track of the line width style setting.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#_lineWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._lineWidth = 1.0;\n    this.setDefaultStyles(options);\n  },\n\n  /**\r\n   * Set the default style settings for this Graphics object.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#setDefaultStyles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {GraphicsStyles} options - The styles to set as defaults.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  setDefaultStyles: function setDefaultStyles(options) {\n    if (GetValue(options, 'lineStyle', null)) {\n      this.defaultStrokeWidth = GetValue(options, 'lineStyle.width', 1);\n      this.defaultStrokeColor = GetValue(options, 'lineStyle.color', 0xffffff);\n      this.defaultStrokeAlpha = GetValue(options, 'lineStyle.alpha', 1);\n      this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\n    }\n\n    if (GetValue(options, 'fillStyle', null)) {\n      this.defaultFillColor = GetValue(options, 'fillStyle.color', 0xffffff);\n      this.defaultFillAlpha = GetValue(options, 'fillStyle.alpha', 1);\n      this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set the current line style.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} lineWidth - The stroke width.\r\n   * @param {number} color - The stroke color.\r\n   * @param {number} [alpha=1] - The stroke alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineStyle: function lineStyle(lineWidth, color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.LINE_STYLE, lineWidth, color, alpha);\n    this._lineWidth = lineWidth;\n    return this;\n  },\n\n  /**\r\n   * Set the current fill style.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} color - The fill color.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillStyle: function fillStyle(color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.FILL_STYLE, color, alpha);\n    return this;\n  },\n\n  /**\r\n   * Sets a gradient fill style. This is a WebGL only feature.\r\n   *\r\n   * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n   * The gradient is used to color all filled shapes and paths drawn after calling this method.\r\n   * If you wish to turn a gradient off, call `fillStyle` and provide a new single fill color.\r\n   *\r\n   * When filling a triangle only the first 3 color values provided are used for the 3 points of a triangle.\r\n   *\r\n   * This feature is best used only on rectangles and triangles. All other shapes will give strange results.\r\n   *\r\n   * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n   * will be filled with a gradient on its own. There is no ability to gradient fill a shape or path as a single\r\n   * entity at this time.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillGradientStyle\r\n   * @webglOnly\r\n   * @since 3.12.0\r\n   *\r\n   * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n   * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n   * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n   * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillGradientStyle: function fillGradientStyle(topLeft, topRight, bottomLeft, bottomRight, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.GRADIENT_FILL_STYLE, alpha, topLeft, topRight, bottomLeft, bottomRight);\n    return this;\n  },\n\n  /**\r\n   * Sets a gradient line style. This is a WebGL only feature.\r\n   *\r\n   * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n   * The gradient is used to color all stroked shapes and paths drawn after calling this method.\r\n   * If you wish to turn a gradient off, call `lineStyle` and provide a new single line color.\r\n   *\r\n   * This feature is best used only on single lines. All other shapes will give strange results.\r\n   *\r\n   * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n   * will be filled with a gradient on its own. There is no ability to gradient stroke a shape or path as a single\r\n   * entity at this time.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineGradientStyle\r\n   * @webglOnly\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} lineWidth - The stroke width.\r\n   * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n   * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n   * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n   * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineGradientStyle: function lineGradientStyle(lineWidth, topLeft, topRight, bottomLeft, bottomRight, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.GRADIENT_LINE_STYLE, lineWidth, alpha, topLeft, topRight, bottomLeft, bottomRight);\n    return this;\n  },\n\n  /**\r\n   * Sets the texture frame this Graphics Object will use when drawing all shapes defined after calling this.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * Once set, all shapes will use this texture. Call this method with no arguments to clear it.\r\n   *\r\n   * The textures are not tiled. They are stretched to the dimensions of the shapes being rendered. For this reason,\r\n   * it works best with seamless / tileable textures.\r\n   *\r\n   * The mode argument controls how the textures are combined with the fill colors. The default value (0) will\r\n   * multiply the texture by the fill color. A value of 1 will use just the fill color, but the alpha data from the texture,\r\n   * and a value of 2 will use just the texture and no fill color at all.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#setTexture\r\n   * @since 3.12.0\r\n   * @webglOnly\r\n   *\r\n   * @param {string} [key] - The key of the texture to be used, as stored in the Texture Manager. Leave blank to clear a previously set texture.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   * @param {number} [mode=0] - The texture tint mode. 0 is multiply, 1 is alpha only and 2 is texture only.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setTexture: function setTexture(key, frame, mode) {\n    if (mode === undefined) {\n      mode = 0;\n    }\n\n    if (key === undefined) {\n      this.commandBuffer.push(Commands.CLEAR_TEXTURE);\n    } else {\n      var textureFrame = this.scene.sys.textures.getFrame(key, frame);\n\n      if (textureFrame) {\n        if (mode === 2) {\n          mode = 3;\n        }\n\n        this.commandBuffer.push(Commands.SET_TEXTURE, textureFrame, mode);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Start a new shape path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#beginPath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  beginPath: function beginPath() {\n    this.commandBuffer.push(Commands.BEGIN_PATH);\n    return this;\n  },\n\n  /**\r\n   * Close the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#closePath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  closePath: function closePath() {\n    this.commandBuffer.push(Commands.CLOSE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPath: function fillPath() {\n    this.commandBuffer.push(Commands.FILL_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the current path.\r\n   * \r\n   * This is an alias for `Graphics.fillPath` and does the same thing.\r\n   * It was added to match the CanvasRenderingContext 2D API.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fill\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fill: function fill() {\n    this.commandBuffer.push(Commands.FILL_PATH);\n    return this;\n  },\n\n  /**\r\n   * Stroke the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokePath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokePath: function strokePath() {\n    this.commandBuffer.push(Commands.STROKE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Stroke the current path.\r\n   * \r\n   * This is an alias for `Graphics.strokePath` and does the same thing.\r\n   * It was added to match the CanvasRenderingContext 2D API.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#stroke\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  stroke: function stroke() {\n    this.commandBuffer.push(Commands.STROKE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the given circle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillCircleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Circle} circle - The circle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillCircleShape: function fillCircleShape(circle) {\n    return this.fillCircle(circle.x, circle.y, circle.radius);\n  },\n\n  /**\r\n   * Stroke the given circle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeCircleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Circle} circle - The circle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeCircleShape: function strokeCircleShape(circle) {\n    return this.strokeCircle(circle.x, circle.y, circle.radius);\n  },\n\n  /**\r\n   * Fill a circle with the given position and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillCircle: function fillCircle(x, y, radius) {\n    this.beginPath();\n    this.arc(x, y, radius, 0, MATH_CONST.PI2);\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke a circle with the given position and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeCircle: function strokeCircle(x, y, radius) {\n    this.beginPath();\n    this.arc(x, y, radius, 0, MATH_CONST.PI2);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the given rectangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRectShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Rectangle} rect - The rectangle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRectShape: function fillRectShape(rect) {\n    return this.fillRect(rect.x, rect.y, rect.width, rect.height);\n  },\n\n  /**\r\n   * Stroke the given rectangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRectShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Rectangle} rect - The rectangle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRectShape: function strokeRectShape(rect) {\n    return this.strokeRect(rect.x, rect.y, rect.width, rect.height);\n  },\n\n  /**\r\n   * Fill a rectangle with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRect: function fillRect(x, y, width, height) {\n    this.commandBuffer.push(Commands.FILL_RECT, x, y, width, height);\n    return this;\n  },\n\n  /**\r\n   * Stroke a rectangle with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRect: function strokeRect(x, y, width, height) {\n    var lineWidthHalf = this._lineWidth / 2;\n    var minx = x - lineWidthHalf;\n    var maxx = x + lineWidthHalf;\n    this.beginPath();\n    this.moveTo(x, y);\n    this.lineTo(x, y + height);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(x + width, y);\n    this.lineTo(x + width, y + height);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(minx, y);\n    this.lineTo(maxx + width, y);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(minx, y + height);\n    this.lineTo(maxx + width, y + height);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * @typedef {object} RoundedRectRadius\r\n   * \r\n   * @property {number} [tl=20] - Top left\r\n   * @property {number} [tr=20] - Top right\r\n   * @property {number} [br=20] - Bottom right\r\n   * @property {number} [bl=20] - Bottom left\r\n   */\n\n  /**\r\n   * Fill a rounded rectangle with the given position, size and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRoundedRect\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   * @param {(RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRoundedRect: function fillRoundedRect(x, y, width, height, radius) {\n    if (radius === undefined) {\n      radius = 20;\n    }\n\n    var tl = radius;\n    var tr = radius;\n    var bl = radius;\n    var br = radius;\n\n    if (typeof radius !== 'number') {\n      tl = GetFastValue(radius, 'tl', 20);\n      tr = GetFastValue(radius, 'tr', 20);\n      bl = GetFastValue(radius, 'bl', 20);\n      br = GetFastValue(radius, 'br', 20);\n    }\n\n    this.beginPath();\n    this.moveTo(x + tl, y);\n    this.lineTo(x + width - tr, y);\n    this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\n    this.lineTo(x + width, y + height - br);\n    this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\n    this.lineTo(x + bl, y + height);\n    this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\n    this.lineTo(x, y + tl);\n    this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke a rounded rectangle with the given position, size and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRoundedRect\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   * @param {(RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRoundedRect: function strokeRoundedRect(x, y, width, height, radius) {\n    if (radius === undefined) {\n      radius = 20;\n    }\n\n    var tl = radius;\n    var tr = radius;\n    var bl = radius;\n    var br = radius;\n\n    if (typeof radius !== 'number') {\n      tl = GetFastValue(radius, 'tl', 20);\n      tr = GetFastValue(radius, 'tr', 20);\n      bl = GetFastValue(radius, 'bl', 20);\n      br = GetFastValue(radius, 'br', 20);\n    }\n\n    this.beginPath();\n    this.moveTo(x + tl, y);\n    this.lineTo(x + width - tr, y);\n    this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\n    this.lineTo(x + width, y + height - br);\n    this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\n    this.lineTo(x + bl, y + height);\n    this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\n    this.lineTo(x, y + tl);\n    this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the given point.\r\n   *\r\n   * Draws a square at the given position, 1 pixel in size by default.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPointShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The point to fill.\r\n   * @param {number} [size=1] - The size of the square to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPointShape: function fillPointShape(point, size) {\n    return this.fillPoint(point.x, point.y, size);\n  },\n\n  /**\r\n   * Fill a point at the given position.\r\n   *\r\n   * Draws a square at the given position, 1 pixel in size by default.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point.\r\n   * @param {number} y - The y coordinate of the point.\r\n   * @param {number} [size=1] - The size of the square to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPoint: function fillPoint(x, y, size) {\n    if (!size || size < 1) {\n      size = 1;\n    } else {\n      x -= size / 2;\n      y -= size / 2;\n    }\n\n    this.commandBuffer.push(Commands.FILL_RECT, x, y, size, size);\n    return this;\n  },\n\n  /**\r\n   * Fill the given triangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillTriangleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Triangle} triangle - The triangle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillTriangleShape: function fillTriangleShape(triangle) {\n    return this.fillTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\n  },\n\n  /**\r\n   * Stroke the given triangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeTriangleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Triangle} triangle - The triangle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeTriangleShape: function strokeTriangleShape(triangle) {\n    return this.strokeTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\n  },\n\n  /**\r\n   * Fill a triangle with the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillTriangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x0 - The x coordinate of the first point.\r\n   * @param {number} y0 - The y coordinate of the first point.\r\n   * @param {number} x1 - The x coordinate of the second point.\r\n   * @param {number} y1 - The y coordinate of the second point.\r\n   * @param {number} x2 - The x coordinate of the third point.\r\n   * @param {number} y2 - The y coordinate of the third point.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillTriangle: function fillTriangle(x0, y0, x1, y1, x2, y2) {\n    this.commandBuffer.push(Commands.FILL_TRIANGLE, x0, y0, x1, y1, x2, y2);\n    return this;\n  },\n\n  /**\r\n   * Stroke a triangle with the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeTriangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x0 - The x coordinate of the first point.\r\n   * @param {number} y0 - The y coordinate of the first point.\r\n   * @param {number} x1 - The x coordinate of the second point.\r\n   * @param {number} y1 - The y coordinate of the second point.\r\n   * @param {number} x2 - The x coordinate of the third point.\r\n   * @param {number} y2 - The y coordinate of the third point.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeTriangle: function strokeTriangle(x0, y0, x1, y1, x2, y2) {\n    this.commandBuffer.push(Commands.STROKE_TRIANGLE, x0, y0, x1, y1, x2, y2);\n    return this;\n  },\n\n  /**\r\n   * Draw the given line.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeLineShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Line} line - The line to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeLineShape: function strokeLineShape(line) {\n    return this.lineBetween(line.x1, line.y1, line.x2, line.y2);\n  },\n\n  /**\r\n   * Draw a line between the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x1 - The x coordinate of the start point of the line.\r\n   * @param {number} y1 - The y coordinate of the start point of the line.\r\n   * @param {number} x2 - The x coordinate of the end point of the line.\r\n   * @param {number} y2 - The y coordinate of the end point of the line.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineBetween: function lineBetween(x1, y1, x2, y2) {\n    this.beginPath();\n    this.moveTo(x1, y1);\n    this.lineTo(x2, y2);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Draw a line from the current drawing position to the given position.\r\n   *\r\n   * Moves the current drawing position to the given position.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to draw the line to.\r\n   * @param {number} y - The y coordinate to draw the line to.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineTo: function lineTo(x, y) {\n    this.commandBuffer.push(Commands.LINE_TO, x, y);\n    return this;\n  },\n\n  /**\r\n   * Move the current drawing position to the given position.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#moveTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to move to.\r\n   * @param {number} y - The y coordinate to move to.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  moveTo: function moveTo(x, y) {\n    this.commandBuffer.push(Commands.MOVE_TO, x, y);\n    return this;\n  },\n\n  /**\r\n   * Draw a line from the current drawing position to the given position with a specific width and color.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineFxTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to draw the line to.\r\n   * @param {number} y - The y coordinate to draw the line to.\r\n   * @param {number} width - The width of the stroke.\r\n   * @param {number} rgb - The color of the stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineFxTo: function lineFxTo(x, y, width, rgb) {\n    this.commandBuffer.push(Commands.LINE_FX_TO, x, y, width, rgb, 1);\n    return this;\n  },\n\n  /**\r\n   * Move the current drawing position to the given position and change the pen width and color.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#moveFxTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to move to.\r\n   * @param {number} y - The y coordinate to move to.\r\n   * @param {number} width - The new stroke width.\r\n   * @param {number} rgb - The new stroke color.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  moveFxTo: function moveFxTo(x, y, width, rgb) {\n    this.commandBuffer.push(Commands.MOVE_FX_TO, x, y, width, rgb, 1);\n    return this;\n  },\n\n  /**\r\n   * Stroke the shape represented by the given array of points.\r\n   *\r\n   * Pass `true` to `autoClose` to close the shape automatically.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokePoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|Phaser.Geom.Point[])} points - The points to stroke.\r\n   * @param {boolean} [autoClose=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n   * @param {integer} [endIndex] - The index of `points` to stop drawing at. Defaults to `points.length`.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokePoints: function strokePoints(points, autoClose, endIndex) {\n    if (autoClose === undefined) {\n      autoClose = false;\n    }\n\n    if (endIndex === undefined) {\n      endIndex = points.length;\n    }\n\n    this.beginPath();\n    this.moveTo(points[0].x, points[0].y);\n\n    for (var i = 1; i < endIndex; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n\n    if (autoClose) {\n      this.lineTo(points[0].x, points[0].y);\n    }\n\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the shape represented by the given array of points.\r\n   *\r\n   * Pass `true` to `autoClose` to close the shape automatically.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|Phaser.Geom.Point[])} points - The points to fill.\r\n   * @param {boolean} [autoClose=false] - Whether to automatically close the polygon.\r\n   * @param {integer} [endIndex] - The index of `points` to stop at. Defaults to `points.length`.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPoints: function fillPoints(points, autoClose, endIndex) {\n    if (autoClose === undefined) {\n      autoClose = false;\n    }\n\n    if (endIndex === undefined) {\n      endIndex = points.length;\n    }\n\n    this.beginPath();\n    this.moveTo(points[0].x, points[0].y);\n\n    for (var i = 1; i < endIndex; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n\n    if (autoClose) {\n      this.lineTo(points[0].x, points[0].y);\n    }\n\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke the given ellipse.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeEllipseShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to stroke.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeEllipseShape: function strokeEllipseShape(ellipse, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var points = ellipse.getPoints(smoothness);\n    return this.strokePoints(points, true);\n  },\n\n  /**\r\n   * Stroke an ellipse with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeEllipse\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the ellipse.\r\n   * @param {number} y - The y coordinate of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeEllipse: function strokeEllipse(x, y, width, height, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var ellipse = new Ellipse(x, y, width, height);\n    var points = ellipse.getPoints(smoothness);\n    return this.strokePoints(points, true);\n  },\n\n  /**\r\n   * Fill the given ellipse.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillEllipseShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to fill.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillEllipseShape: function fillEllipseShape(ellipse, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var points = ellipse.getPoints(smoothness);\n    return this.fillPoints(points, true);\n  },\n\n  /**\r\n   * Fill an ellipse with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillEllipse\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the ellipse.\r\n   * @param {number} y - The y coordinate of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillEllipse: function fillEllipse(x, y, width, height, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var ellipse = new Ellipse(x, y, width, height);\n    var points = ellipse.getPoints(smoothness);\n    return this.fillPoints(points, true);\n  },\n\n  /**\r\n   * Draw an arc.\r\n   *\r\n   * This method can be used to create circles, or parts of circles.\r\n   * \r\n   * Make sure you call `beginPath` before starting the arc unless you wish for the arc to automatically\r\n   * close when filled or stroked.\r\n   *\r\n   * Use the optional `overshoot` argument increase the number of iterations that take place when\r\n   * the arc is rendered in WebGL. This is useful if you're drawing an arc with an especially thick line,\r\n   * as it will allow the arc to fully join-up. Try small values at first, i.e. 0.01.\r\n   *\r\n   * Call {@link Phaser.GameObjects.Graphics#fillPath} or {@link Phaser.GameObjects.Graphics#strokePath} after calling\r\n   * this method to draw the arc.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#arc\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   * @param {number} startAngle - The starting angle, in radians.\r\n   * @param {number} endAngle - The ending angle, in radians.\r\n   * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n   * @param {number} [overshoot=0] - This value allows you to increase the segment iterations in WebGL rendering. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Use small numbers such as 0.01 to start with and increase as needed.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise, overshoot) {\n    if (anticlockwise === undefined) {\n      anticlockwise = false;\n    }\n\n    if (overshoot === undefined) {\n      overshoot = 0;\n    }\n\n    this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n    return this;\n  },\n\n  /**\r\n   * Creates a pie-chart slice shape centered at `x`, `y` with the given radius.\r\n   * You must define the start and end angle of the slice.\r\n   *\r\n   * Setting the `anticlockwise` argument to `true` creates a shape similar to Pacman.\r\n   * Setting it to `false` creates a shape like a slice of pie.\r\n   *\r\n   * This method will begin a new path and close the path at the end of it.\r\n   * To display the actual slice you need to call either `strokePath` or `fillPath` after it.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#slice\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} x - The horizontal center of the slice.\r\n   * @param {number} y - The vertical center of the slice.\r\n   * @param {number} radius - The radius of the slice.\r\n   * @param {number} startAngle - The start angle of the slice, given in radians.\r\n   * @param {number} endAngle - The end angle of the slice, given in radians.\r\n   * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n   * @param {number} [overshoot=0] - This value allows you to overshoot the endAngle by this amount. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  slice: function slice(x, y, radius, startAngle, endAngle, anticlockwise, overshoot) {\n    if (anticlockwise === undefined) {\n      anticlockwise = false;\n    }\n\n    if (overshoot === undefined) {\n      overshoot = 0;\n    }\n\n    this.commandBuffer.push(Commands.BEGIN_PATH);\n    this.commandBuffer.push(Commands.MOVE_TO, x, y);\n    this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n    this.commandBuffer.push(Commands.CLOSE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Saves the state of the Graphics by pushing the current state onto a stack.\r\n   *\r\n   * The most recently saved state can then be restored with {@link Phaser.GameObjects.Graphics#restore}.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#save\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  save: function save() {\n    this.commandBuffer.push(Commands.SAVE);\n    return this;\n  },\n\n  /**\r\n   * Restores the most recently saved state of the Graphics by popping from the state stack.\r\n   *\r\n   * Use {@link Phaser.GameObjects.Graphics#save} to save the current state, and call this afterwards to restore that state.\r\n   *\r\n   * If there is no saved state, this command does nothing.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#restore\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  restore: function restore() {\n    this.commandBuffer.push(Commands.RESTORE);\n    return this;\n  },\n\n  /**\r\n   * Translate the graphics.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation to apply.\r\n   * @param {number} y - The vertical translation to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  translate: function translate(x, y) {\n    this.commandBuffer.push(Commands.TRANSLATE, x, y);\n    return this;\n  },\n\n  /**\r\n   * Scale the graphics.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal scale to apply.\r\n   * @param {number} y - The vertical scale to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  scale: function scale(x, y) {\n    this.commandBuffer.push(Commands.SCALE, x, y);\n    return this;\n  },\n\n  /**\r\n   * Rotate the graphics.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The rotation angle, in radians.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  rotate: function rotate(radians) {\n    this.commandBuffer.push(Commands.ROTATE, radians);\n    return this;\n  },\n\n  /**\r\n   * Clear the command buffer and reset the fill style and line style to their defaults.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  clear: function clear() {\n    this.commandBuffer.length = 0;\n\n    if (this.defaultFillColor > -1) {\n      this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\n    }\n\n    if (this.defaultStrokeColor > -1) {\n      this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Generate a texture from this Graphics object.\r\n   *\r\n   * If `key` is a string it'll generate a new texture using it and add it into the\r\n   * Texture Manager (assuming no key conflict happens).\r\n   *\r\n   * If `key` is a Canvas it will draw the texture to that canvas context. Note that it will NOT\r\n   * automatically upload it to the GPU in WebGL mode.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#generateTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|HTMLCanvasElement)} key - The key to store the texture with in the Texture Manager, or a Canvas to draw to.\r\n   * @param {integer} [width] - The width of the graphics to generate.\r\n   * @param {integer} [height] - The height of the graphics to generate.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  generateTexture: function generateTexture(key, width, height) {\n    var sys = this.scene.sys;\n    var renderer = sys.game.renderer;\n\n    if (width === undefined) {\n      width = sys.scale.width;\n    }\n\n    if (height === undefined) {\n      height = sys.scale.height;\n    }\n\n    Graphics.TargetCamera.setScene(this.scene);\n    Graphics.TargetCamera.setViewport(0, 0, width, height);\n    Graphics.TargetCamera.scrollX = this.x;\n    Graphics.TargetCamera.scrollY = this.y;\n    var texture;\n    var ctx;\n\n    if (typeof key === 'string') {\n      if (sys.textures.exists(key)) {\n        //  Key is a string, it DOES exist in the Texture Manager AND is a canvas, so draw to it\n        texture = sys.textures.get(key);\n        var src = texture.getSourceImage();\n\n        if (src instanceof HTMLCanvasElement) {\n          ctx = src.getContext('2d');\n        }\n      } else {\n        //  Key is a string and doesn't exist in the Texture Manager, so generate and save it\n        texture = sys.textures.createCanvas(key, width, height);\n        ctx = texture.getSourceImage().getContext('2d');\n      }\n    } else if (key instanceof HTMLCanvasElement) {\n      //  Key is a Canvas, so draw to it\n      ctx = key.getContext('2d');\n    }\n\n    if (ctx) {\n      // var GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\n      this.renderCanvas(renderer, this, 0, Graphics.TargetCamera, null, ctx, false);\n\n      if (texture) {\n        texture.refresh();\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#preDestroy\r\n   * @protected\r\n   * @since 3.9.0\r\n   */\n  preDestroy: function preDestroy() {\n    this.commandBuffer = [];\n  }\n});\n/**\r\n * A Camera used specifically by the Graphics system for rendering to textures.\r\n *\r\n * @name Phaser.GameObjects.Graphics.TargetCamera\r\n * @type {Phaser.Cameras.Scene2D.Camera}\r\n * @since 3.1.0\r\n */\n\nGraphics.TargetCamera = new BaseCamera();\nmodule.exports = Graphics;","map":null,"metadata":{},"sourceType":"script"}