{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A representation of a vector in 4D space.\r\n *\r\n * A four-component vector.\r\n *\r\n * @class Vector4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\n\n\nvar Vector4 = new Class({\n  initialize: function Vector4(x, y, z, w) {\n    /**\r\n     * The x component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    this.x = 0;\n    /**\r\n     * The y component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The z component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.z = 0;\n    /**\r\n     * The w component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#w\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.w = 0;\n\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n  },\n\n  /**\r\n   * Make a clone of this Vector4.\r\n   *\r\n   * @method Phaser.Math.Vector4#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} A clone of this Vector4.\r\n   */\n  clone: function clone() {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  },\n\n  /**\r\n   * Copy the components of a given Vector into this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} src - The Vector to copy the components from.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  copy: function copy(src) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z || 0;\n    this.w = src.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Check whether this Vector is equal to a given Vector.\r\n   *\r\n   * Performs a strict quality check against each Vector's components.\r\n   *\r\n   * @method Phaser.Math.Vector4#equals\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The vector to check equality with.\r\n   *\r\n   * @return {boolean} A boolean indicating whether the two Vectors are equal or not.\r\n   */\n  equals: function equals(v) {\n    return this.x === v.x && this.y === v.y && this.z === v.z && this.w === v.w;\n  },\n\n  /**\r\n   * Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\r\n   *\r\n   * @method Phaser.Math.Vector4#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y, z and w components.\r\n   * @param {number} y - The y value to set for this Vector.\r\n   * @param {number} z - The z value to set for this Vector.\r\n   * @param {number} w - The z value to set for this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  set: function set(x, y, z, w) {\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a given Vector to this Vector. Addition is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector4#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to add to this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  add: function add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z || 0;\n    this.w += v.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector4#subtract\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to subtract from this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  subtract: function subtract(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z || 0;\n    this.w -= v.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Scale this Vector by the given value.\r\n   *\r\n   * @method Phaser.Math.Vector4#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} scale - The value to scale this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  scale: function scale(_scale) {\n    this.x *= _scale;\n    this.y *= _scale;\n    this.z *= _scale;\n    this.w *= _scale;\n    return this;\n  },\n\n  /**\r\n   * Calculate the length (or magnitude) of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#length\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector.\r\n   */\n  length: function length() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  },\n\n  /**\r\n   * Calculate the length of this Vector squared.\r\n   *\r\n   * @method Phaser.Math.Vector4#lengthSq\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector, squared.\r\n   */\n  lengthSq: function lengthSq() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return x * x + y * y + z * z + w * w;\n  },\n\n  /**\r\n   * Normalize this Vector.\r\n   *\r\n   * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n   *\r\n   * @method Phaser.Math.Vector4#normalize\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  normalize: function normalize() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    var len = x * x + y * y + z * z + w * w;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      this.x = x * len;\n      this.y = y * len;\n      this.z = z * len;\n      this.w = w * len;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the dot product of this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#dot\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The Vector4 to dot product with this Vector4.\r\n   *\r\n   * @return {number} The dot product of this Vector and the given Vector.\r\n   */\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  },\n\n  /**\r\n   * Linearly interpolate between this Vector and the given Vector.\r\n   *\r\n   * Interpolates this Vector towards the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#lerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The Vector4 to interpolate towards.\r\n   * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  lerp: function lerp(v, t) {\n    if (t === undefined) {\n      t = 0;\n    }\n\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    this.x = ax + t * (v.x - ax);\n    this.y = ay + t * (v.y - ay);\n    this.z = az + t * (v.z - az);\n    this.w = aw + t * (v.w - aw);\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise multiplication between this Vector and the given Vector.\r\n   *\r\n   * Multiplies this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to multiply this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  multiply: function multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z || 1;\n    this.w *= v.w || 1;\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise division between this Vector and the given Vector.\r\n   *\r\n   * Divides this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#divide\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to divide this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z || 1;\n    this.w /= v.w || 1;\n    return this;\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#distance\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector.\r\n   */\n  distance: function distance(v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    var dw = v.w - this.w || 0;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector, squared.\r\n   *\r\n   * @method Phaser.Math.Vector4#distanceSq\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector, squared.\r\n   */\n  distanceSq: function distanceSq(v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    var dw = v.w - this.w || 0;\n    return dx * dx + dy * dy + dz * dz + dw * dw;\n  },\n\n  /**\r\n   * Negate the `x`, `y`, `z` and `w` components of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#negate\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector4#transformMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector4 with.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  transformMat4: function transformMat4(mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    var m = mat.val;\n    this.x = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    this.y = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    this.z = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    this.w = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Vector4#transformQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  transformQuat: function transformQuat(q) {\n    // TODO: is this really the same as Vector3?\n    // Also, what about this: http://molecularmusings.wordpress.com/2013/05/24/a-faster-quaternion-vector-multiplication/\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w; // calculate quat * vec\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n\n  /**\r\n   * Make this Vector the zero vector (0, 0, 0, 0).\r\n   *\r\n   * @method Phaser.Math.Vector4#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  reset: function reset() {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n    return this;\n  }\n}); //  TODO: Check if these are required internally, if not, remove.\n\nVector4.prototype.sub = Vector4.prototype.subtract;\nVector4.prototype.mul = Vector4.prototype.multiply;\nVector4.prototype.div = Vector4.prototype.divide;\nVector4.prototype.dist = Vector4.prototype.distance;\nVector4.prototype.distSq = Vector4.prototype.distanceSq;\nVector4.prototype.len = Vector4.prototype.length;\nVector4.prototype.lenSq = Vector4.prototype.lengthSq;\nmodule.exports = Vector4;","map":null,"metadata":{},"sourceType":"script"}