{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n/**\r\n * Calculates the ascent, descent and fontSize of a given font style.\r\n *\r\n * @function Phaser.GameObjects.Text.MeasureText\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.TextStyle} textStyle - The TextStyle object to measure.\r\n *\r\n * @return {object} An object containing the ascent, descent and fontSize of the TextStyle.\r\n */\n\n\nvar MeasureText = function MeasureText(textStyle) {\n  // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.\n  var canvas = CanvasPool.create(this); // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.\n\n  var context = canvas.getContext('2d');\n  textStyle.syncFont(canvas, context);\n  var width = Math.ceil(context.measureText(textStyle.testString).width * textStyle.baselineX);\n  var baseline = width;\n  var height = 2 * baseline;\n  baseline = baseline * textStyle.baselineY | 0;\n  canvas.width = width;\n  canvas.height = height;\n  context.fillStyle = '#f00';\n  context.fillRect(0, 0, width, height);\n  context.font = textStyle._font;\n  context.textBaseline = 'alphabetic';\n  context.fillStyle = '#000';\n  context.fillText(textStyle.testString, 0, baseline);\n  var output = {\n    ascent: 0,\n    descent: 0,\n    fontSize: 0\n  };\n\n  if (!context.getImageData(0, 0, width, height)) {\n    output.ascent = baseline;\n    output.descent = baseline + 6;\n    output.fontSize = output.ascent + output.descent;\n    CanvasPool.remove(canvas);\n    return output;\n  }\n\n  var imagedata = context.getImageData(0, 0, width, height).data;\n  var pixels = imagedata.length;\n  var line = width * 4;\n  var i;\n  var j;\n  var idx = 0;\n  var stop = false; // ascent. scan from top to bottom until we find a non red pixel\n\n  for (i = 0; i < baseline; i++) {\n    for (j = 0; j < line; j += 4) {\n      if (imagedata[idx + j] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx += line;\n    } else {\n      break;\n    }\n  }\n\n  output.ascent = baseline - i;\n  idx = pixels - line;\n  stop = false; // descent. scan from bottom to top until we find a non red pixel\n\n  for (i = height; i > baseline; i--) {\n    for (j = 0; j < line; j += 4) {\n      if (imagedata[idx + j] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx -= line;\n    } else {\n      break;\n    }\n  }\n\n  output.descent = i - baseline;\n  output.fontSize = output.ascent + output.descent;\n  CanvasPool.remove(canvas);\n  return output;\n};\n\nmodule.exports = MeasureText;","map":null,"metadata":{},"sourceType":"script"}