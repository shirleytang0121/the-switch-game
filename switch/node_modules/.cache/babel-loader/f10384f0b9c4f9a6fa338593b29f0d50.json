{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.DynamicTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.DynamicTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\n\n\nvar DynamicTilemapLayerWebGLRenderer = function DynamicTilemapLayerWebGLRenderer(renderer, src, interpolationPercentage, camera) {\n  src.cull(camera);\n  var renderTiles = src.culledTiles;\n  var tileCount = renderTiles.length;\n  var alpha = camera.alpha * src.alpha;\n\n  if (tileCount === 0 || alpha <= 0) {\n    return;\n  }\n\n  var gidMap = src.gidMap;\n  var pipeline = src.pipeline;\n  var getTint = Utils.getTintAppendFloatAlpha;\n  var scrollFactorX = src.scrollFactorX;\n  var scrollFactorY = src.scrollFactorY;\n  var x = src.x;\n  var y = src.y;\n  var sx = src.scaleX;\n  var sy = src.scaleY;\n  var tilesets = src.tileset; //  Loop through each tileset in this layer, drawing just the tiles that are in that set each time\n  //  Doing it this way around allows us to batch tiles using the same tileset\n\n  for (var c = 0; c < tilesets.length; c++) {\n    var currentSet = tilesets[c];\n    var texture = currentSet.glTexture;\n\n    for (var i = 0; i < tileCount; i++) {\n      var tile = renderTiles[i];\n      var tileset = gidMap[tile.index];\n\n      if (tileset !== currentSet) {\n        //  Skip tiles that aren't in this set\n        continue;\n      }\n\n      var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\n\n      if (tileTexCoords === null) {\n        continue;\n      }\n\n      var frameWidth = tile.width;\n      var frameHeight = tile.height;\n      var frameX = tileTexCoords.x;\n      var frameY = tileTexCoords.y;\n      var tw = tile.width * 0.5;\n      var th = tile.height * 0.5;\n      var tint = getTint(tile.tint, alpha * tile.alpha);\n      pipeline.batchTexture(src, texture, texture.width, texture.height, x + (tw + tile.pixelX) * sx, y + (th + tile.pixelY) * sy, tile.width, tile.height, sx, sy, tile.rotation, tile.flipX, tile.flipY, scrollFactorX, scrollFactorY, tw, th, frameX, frameY, frameWidth, frameHeight, tint, tint, tint, tint, false, 0, 0, camera, null, true);\n    }\n  }\n};\n\nmodule.exports = DynamicTilemapLayerWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}