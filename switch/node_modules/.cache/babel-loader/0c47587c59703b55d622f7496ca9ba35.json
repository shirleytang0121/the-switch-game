{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar WorldToTileX = require('./WorldToTileX');\n\nvar WorldToTileY = require('./WorldToTileY');\n/**\r\n * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n * @param {number} width - The width of the area.\r\n * @param {number} height - The height of the area.\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\n\n\nvar GetTilesWithinWorldXY = function GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer) {\n  // Top left corner of the rect, rounded down to include partial tiles\n  var xStart = WorldToTileX(worldX, true, camera, layer);\n  var yStart = WorldToTileY(worldY, true, camera, layer); // Bottom right corner of the rect, rounded up to include partial tiles\n\n  var xEnd = Math.ceil(WorldToTileX(worldX + width, false, camera, layer));\n  var yEnd = Math.ceil(WorldToTileY(worldY + height, false, camera, layer));\n  return GetTilesWithin(xStart, yStart, xEnd - xStart, yEnd - yStart, filteringOptions, layer);\n};\n\nmodule.exports = GetTilesWithinWorldXY;","map":null,"metadata":{},"sourceType":"script"}