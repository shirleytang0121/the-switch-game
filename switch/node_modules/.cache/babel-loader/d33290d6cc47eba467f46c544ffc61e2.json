{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * \r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n * \r\n * A Static Tilemap Layer renders immediately and does not use any batching.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\nvar StaticTilemapLayerWebGLRenderer = function StaticTilemapLayerWebGLRenderer(renderer, src, interpolationPercentage, camera) {\n  var tilesets = src.tileset;\n  var pipeline = src.pipeline;\n  var pipelineVertexBuffer = pipeline.vertexBuffer;\n  renderer.setPipeline(pipeline);\n  pipeline.modelIdentity();\n  pipeline.modelTranslate(src.x - camera.scrollX * src.scrollFactorX, src.y - camera.scrollY * src.scrollFactorY, 0);\n  pipeline.modelScale(src.scaleX, src.scaleY, 1);\n  pipeline.viewLoad2D(camera.matrix.matrix);\n\n  for (var i = 0; i < tilesets.length; i++) {\n    src.upload(camera, i);\n\n    if (src.vertexCount[i] > 0) {\n      if (renderer.currentPipeline && renderer.currentPipeline.vertexCount > 0) {\n        renderer.flush();\n      }\n\n      pipeline.vertexBuffer = src.vertexBuffer[i];\n      renderer.setPipeline(pipeline);\n      renderer.setTexture2D(tilesets[i].glTexture, 0);\n      renderer.gl.drawArrays(pipeline.topology, 0, src.vertexCount[i]);\n    }\n  } //  Restore the pipeline\n\n\n  pipeline.vertexBuffer = pipelineVertexBuffer;\n  pipeline.viewIdentity();\n  pipeline.modelIdentity();\n};\n\nmodule.exports = StaticTilemapLayerWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}