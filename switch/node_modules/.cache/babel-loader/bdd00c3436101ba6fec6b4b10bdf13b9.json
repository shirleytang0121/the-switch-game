{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A Process Queue maintains three internal lists.\r\n * \r\n * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n * The `active` list is a selection of items which are considered active and should be updated.\r\n * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n *\r\n * When new items are added to a Process Queue they are put in a pending data, rather than being added\r\n * immediately the active list. Equally, items that are removed are put into the destroy list, rather than\r\n * being destroyed immediately. This allows the Process Queue to carefully process each item at a specific, fixed\r\n * time, rather than at the time of the request from the API.\r\n *\r\n * @class ProcessQueue\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n */\n\n\nvar ProcessQueue = new Class({\n  initialize: function ProcessQueue() {\n    /**\r\n     * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_pending\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n    this._pending = [];\n    /**\r\n     * The `active` list is a selection of items which are considered active and should be updated.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_active\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._active = [];\n    /**\r\n     * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_destroy\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._destroy = [];\n    /**\r\n     * The total number of items awaiting processing.\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_toProcess\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._toProcess = 0;\n  },\n\n  /**\r\n   * Adds a new item to the Process Queue.\r\n   * The item is added to the pending list and made active in the next update.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#add\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [item]\r\n   * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n   *\r\n   * @param {*} item - The item to add to the queue.\r\n   *\r\n   * @return {Phaser.Structs.ProcessQueue} This Process Queue object.\r\n   */\n  add: function add(item) {\n    this._pending.push(item);\n\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Removes an item from the Process Queue.\r\n   * The item is added to the pending destroy and fully removed in the next update.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [item]\r\n   * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n   *\r\n   * @param {*} item - The item to be removed from the queue.\r\n   *\r\n   * @return {Phaser.Structs.ProcessQueue} This Process Queue object.\r\n   */\n  remove: function remove(item) {\n    this._destroy.push(item);\n\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Update this queue. First it will process any items awaiting destruction, and remove them.\r\n   * \r\n   * Then it will check to see if there are any items pending insertion, and move them to an\r\n   * active state. Finally, it will return a list of active items for further processing.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#update\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} A list of active items.\r\n   */\n  update: function update() {\n    if (this._toProcess === 0) {\n      //  Quick bail\n      return this._active;\n    }\n\n    var list = this._destroy;\n    var active = this._active;\n    var i;\n    var item; //  Clear the 'destroy' list\n\n    for (i = 0; i < list.length; i++) {\n      item = list[i]; //  Remove from the 'active' array\n\n      var idx = active.indexOf(item);\n\n      if (idx !== -1) {\n        active.splice(idx, 1);\n      }\n    }\n\n    list.length = 0; //  Process the pending addition list\n    //  This stops callbacks and out of sync events from populating the active array mid-way during an update\n\n    list = this._pending;\n\n    for (i = 0; i < list.length; i++) {\n      item = list[i];\n\n      this._active.push(item);\n    }\n\n    list.length = 0;\n    this._toProcess = 0; //  The owner of this queue can now safely do whatever it needs to with the active list\n\n    return this._active;\n  },\n\n  /**\r\n   * Returns the current list of active items.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#getActive\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} A list of active items.\r\n   */\n  getActive: function getActive() {\n    return this._active;\n  },\n\n  /**\r\n   * Immediately destroys this process queue, clearing all of its internal arrays and resetting the process totals.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this._toProcess = 0;\n    this._pending = [];\n    this._active = [];\n    this._destroy = [];\n  }\n});\nmodule.exports = ProcessQueue;","map":null,"metadata":{},"sourceType":"script"}