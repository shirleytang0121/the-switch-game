{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ArrayUtils = require('../utils/array');\n\nvar Class = require('../utils/Class');\n\nvar NOOP = require('../utils/NOOP');\n\nvar StableSort = require('../utils/array/StableSort');\n/**\r\n * @callback EachListCallback<I>\r\n *\r\n * @param {I} item - The item which is currently being processed.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n */\n\n/**\r\n * @classdesc\r\n * List is a generic implementation of an ordered list which contains utility methods for retrieving, manipulating, and iterating items.\r\n *\r\n * @class List\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n *\r\n * @param {*} parent - The parent of this list.\r\n */\n\n\nvar List = new Class({\n  initialize: function List(parent) {\n    /**\r\n     * The parent of this list.\r\n     *\r\n     * @name Phaser.Structs.List#parent\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * The objects that belong to this collection.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.List#list\r\n     * @type {Array.<*>}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.list = [];\n    /**\r\n     * The index of the current element.\r\n     * \r\n     * This is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.\r\n     *\r\n     * @name Phaser.Structs.List#position\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.position = 0;\n    /**\r\n     * A callback that is invoked every time a child is added to this list.\r\n     *\r\n     * @name Phaser.Structs.List#addCallback\r\n     * @type {function}\r\n     * @since 3.4.0\r\n     */\n\n    this.addCallback = NOOP;\n    /**\r\n     * A callback that is invoked every time a child is removed from this list.\r\n     *\r\n     * @name Phaser.Structs.List#removeCallback\r\n     * @type {function}\r\n     * @since 3.4.0\r\n     */\n\n    this.removeCallback = NOOP;\n    /**\r\n     * The property key to sort by.\r\n     *\r\n     * @name Phaser.Structs.List#_sortKey\r\n     * @type {string}\r\n     * @since 3.4.0\r\n     */\n\n    this._sortKey = '';\n  },\n\n  /**\r\n   * Adds the given item to the end of the list. Each item must be unique.\r\n   *\r\n   * @method Phaser.Structs.List#add\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*|Array.<*>} child - The item, or array of items, to add to the list.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n   *\r\n   * @return {*} The list's underlying array.\r\n   */\n  add: function add(child, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.Add(this.list, child);\n    } else {\n      return ArrayUtils.Add(this.list, child, 0, this.addCallback, this);\n    }\n  },\n\n  /**\r\n   * Adds an item to list, starting at a specified index. Each item must be unique within the list.\r\n   *\r\n   * @method Phaser.Structs.List#addAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item, or array of items, to add to the list.\r\n   * @param {integer} [index=0] - The index in the list at which the element(s) will be inserted.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n   *\r\n   * @return {*} The List's underlying array.\r\n   */\n  addAt: function addAt(child, index, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.AddAt(this.list, child, index);\n    } else {\n      return ArrayUtils.AddAt(this.list, child, index, 0, this.addCallback, this);\n    }\n  },\n\n  /**\r\n   * Retrieves the item at a given position inside the List.\r\n   *\r\n   * @method Phaser.Structs.List#getAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {integer} index - The index of the item.\r\n   *\r\n   * @return {*} The retrieved item, or `undefined` if it's outside the List's bounds.\r\n   */\n  getAt: function getAt(index) {\n    return this.list[index];\n  },\n\n  /**\r\n   * Locates an item within the List and returns its index.\r\n   *\r\n   * @method Phaser.Structs.List#getIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child]\r\n   *\r\n   * @param {*} child - The item to locate.\r\n   *\r\n   * @return {integer} The index of the item within the List, or -1 if it's not in the List.\r\n   */\n  getIndex: function getIndex(child) {\n    //  Return -1 if given child isn't a child of this display list\n    return this.list.indexOf(child);\n  },\n\n  /**\r\n   * Sort the contents of this List so the items are in order based on the given property.\r\n   * For example, `sort('alpha')` would sort the List contents based on the value of their `alpha` property.\r\n   *\r\n   * @method Phaser.Structs.List#sort\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [children,$return]\r\n   *\r\n   * @param {string} property - The property to lexically sort by.\r\n   * @param {function} [handler] - Provide your own custom handler function. Will receive 2 children which it should compare and return a boolean.\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  sort: function sort(property, handler) {\n    if (!property) {\n      return this;\n    }\n\n    if (handler === undefined) {\n      handler = function handler(childA, childB) {\n        return childA[property] - childB[property];\n      };\n    }\n\n    StableSort.inplace(this.list, handler);\n    return this;\n  },\n\n  /**\r\n   * Searches for the first instance of a child with its `name`\r\n   * property matching the given argument. Should more than one child have\r\n   * the same name only the first is returned.\r\n   *\r\n   * @method Phaser.Structs.List#getByName\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {string} name - The name to search for.\r\n   *\r\n   * @return {?*} The first child with a matching name, or null if none were found.\r\n   */\n  getByName: function getByName(name) {\n    return ArrayUtils.GetFirst(this.list, 'name', name);\n  },\n\n  /**\r\n   * Returns a random child from the group.\r\n   *\r\n   * @method Phaser.Structs.List#getRandom\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {integer} [startIndex=0] - Offset from the front of the group (lowest child).\r\n   * @param {integer} [length=(to top)] - Restriction on the number of values you want to randomly select from.\r\n   *\r\n   * @return {?*} A random child of this Group.\r\n   */\n  getRandom: function getRandom(startIndex, length) {\n    return ArrayUtils.GetRandom(this.list, startIndex, length);\n  },\n\n  /**\r\n   * Returns the first element in a given part of the List which matches a specific criterion.\r\n   *\r\n   * @method Phaser.Structs.List#getFirst\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {string} property - The name of the property to test or a falsey value to have no criterion.\r\n   * @param {*} value - The value to test the `property` against, or `undefined` to allow any value and only check for existence.\r\n   * @param {number} [startIndex=0] - The position in the List to start the search at.\r\n   * @param {number} [endIndex] - The position in the List to optionally stop the search at. It won't be checked.\r\n   *\r\n   * @return {?*} The first item which matches the given criterion, or `null` if no such item exists.\r\n   */\n  getFirst: function getFirst(property, value, startIndex, endIndex) {\n    return ArrayUtils.GetFirst(this.list, property, value, startIndex, endIndex);\n  },\n\n  /**\r\n   * Returns all children in this List.\r\n   *\r\n   * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n   *\r\n   * For example: `getAll('parent')` would return only children that have a property called `parent`.\r\n   *\r\n   * You can also specify a value to compare the property to:\r\n   * \r\n   * `getAll('visible', true)` would return only children that have their visible property set to `true`.\r\n   *\r\n   * Optionally you can specify a start and end index. For example if this List had 100 children,\r\n   * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n   * the first 50 children in the List.\r\n   *\r\n   * @method Phaser.Structs.List#getAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @param {string} [property] - An optional property to test against the value argument.\r\n   * @param {*} [value] - If property is set then Child.property must strictly equal this value to be included in the results.\r\n   * @param {integer} [startIndex] - The first child index to start the search from.\r\n   * @param {integer} [endIndex] - The last child index to search up until.\r\n   *\r\n   * @return {Array.<*>} All items of the List which match the given criterion, if any.\r\n   */\n  getAll: function getAll(property, value, startIndex, endIndex) {\n    return ArrayUtils.GetAll(this.list, property, value, startIndex, endIndex);\n  },\n\n  /**\r\n   * Returns the total number of items in the List which have a property matching the given value.\r\n   *\r\n   * @method Phaser.Structs.List#count\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {string} property - The property to test on each item.\r\n   * @param {*} value - The value to test the property against.\r\n   *\r\n   * @return {integer} The total number of matching elements.\r\n   */\n  count: function count(property, value) {\n    return ArrayUtils.CountAllMatching(this.list, property, value);\n  },\n\n  /**\r\n   * Swaps the positions of two items in the list.\r\n   *\r\n   * @method Phaser.Structs.List#swap\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child1,child2]\r\n   *\r\n   * @param {*} child1 - The first item to swap.\r\n   * @param {*} child2 - The second item to swap.\r\n   */\n  swap: function swap(child1, child2) {\n    ArrayUtils.Swap(this.list, child1, child2);\n  },\n\n  /**\r\n   * Moves an item in the List to a new position.\r\n   *\r\n   * @method Phaser.Structs.List#moveTo\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move.\r\n   * @param {integer} index - Moves an item in the List to a new position.\r\n   *\r\n   * @return {*} The item that was moved.\r\n   */\n  moveTo: function moveTo(child, index) {\n    return ArrayUtils.MoveTo(this.list, child, index);\n  },\n\n  /**\r\n   * Removes one or many items from the List.\r\n   *\r\n   * @method Phaser.Structs.List#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item, or array of items, to remove.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {*} The item, or array of items, which were successfully removed from the List.\r\n   */\n  remove: function remove(child, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.Remove(this.list, child);\n    } else {\n      return ArrayUtils.Remove(this.list, child, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes the item at the given position in the List.\r\n   *\r\n   * @method Phaser.Structs.List#removeAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {integer} index - The position to remove the item from.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {*} The item that was removed.\r\n   */\n  removeAt: function removeAt(index, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.RemoveAt(this.list, index);\n    } else {\n      return ArrayUtils.RemoveAt(this.list, index, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes the items within the given range in the List.\r\n   *\r\n   * @method Phaser.Structs.List#removeBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @param {integer} [startIndex=0] - The index to start removing from.\r\n   * @param {integer} [endIndex] - The position to stop removing at. The item at this position won't be removed.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {Array.<*>} An array of the items which were removed.\r\n   */\n  removeBetween: function removeBetween(startIndex, endIndex, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex);\n    } else {\n      return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes all the items.\r\n   *\r\n   * @method Phaser.Structs.List#removeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   * \r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  removeAll: function removeAll(skipCallback) {\n    var i = this.list.length;\n\n    while (i--) {\n      this.remove(this.list[i], skipCallback);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Brings the given child to the top of this List.\r\n   *\r\n   * @method Phaser.Structs.List#bringToTop\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to bring to the top of the List.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  bringToTop: function bringToTop(child) {\n    return ArrayUtils.BringToTop(this.list, child);\n  },\n\n  /**\r\n   * Sends the given child to the bottom of this List.\r\n   *\r\n   * @method Phaser.Structs.List#sendToBack\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to send to the back of the list.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  sendToBack: function sendToBack(child) {\n    return ArrayUtils.SendToBack(this.list, child);\n  },\n\n  /**\r\n   * Moves the given child up one place in this group unless it's already at the top.\r\n   *\r\n   * @method Phaser.Structs.List#moveUp\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move up.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  moveUp: function moveUp(child) {\n    ArrayUtils.MoveUp(this.list, child);\n    return child;\n  },\n\n  /**\r\n   * Moves the given child down one place in this group unless it's already at the bottom.\r\n   *\r\n   * @method Phaser.Structs.List#moveDown\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move down.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  moveDown: function moveDown(child) {\n    ArrayUtils.MoveDown(this.list, child);\n    return child;\n  },\n\n  /**\r\n   * Reverses the order of all children in this List.\r\n   *\r\n   * @method Phaser.Structs.List#reverse\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  reverse: function reverse() {\n    this.list.reverse();\n    return this;\n  },\n\n  /**\r\n   * Shuffles the items in the list.\r\n   *\r\n   * @method Phaser.Structs.List#shuffle\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  shuffle: function shuffle() {\n    ArrayUtils.Shuffle(this.list);\n    return this;\n  },\n\n  /**\r\n   * Replaces a child of this List with the given newChild. The newChild cannot be a member of this List.\r\n   *\r\n   * @method Phaser.Structs.List#replace\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [oldChild,newChild,$return]\r\n   *\r\n   * @param {*} oldChild - The child in this List that will be replaced.\r\n   * @param {*} newChild - The child to be inserted into this List.\r\n   *\r\n   * @return {*} Returns the oldChild that was replaced within this group.\r\n   */\n  replace: function replace(oldChild, newChild) {\n    return ArrayUtils.Replace(this.list, oldChild, newChild);\n  },\n\n  /**\r\n   * Checks if an item exists within the List.\r\n   *\r\n   * @method Phaser.Structs.List#exists\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child]\r\n   *\r\n   * @param {*} child - The item to check for the existence of.\r\n   *\r\n   * @return {boolean} `true` if the item is found in the list, otherwise `false`.\r\n   */\n  exists: function exists(child) {\n    return this.list.indexOf(child) > -1;\n  },\n\n  /**\r\n   * Sets the property `key` to the given value on all members of this List.\r\n   *\r\n   * @method Phaser.Structs.List#setAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {string} property - The name of the property to set.\r\n   * @param {*} value - The value to set the property to.\r\n   * @param {integer} [startIndex] - The first child index to start the search from.\r\n   * @param {integer} [endIndex] - The last child index to search up until.\r\n   */\n  setAll: function setAll(property, value, startIndex, endIndex) {\n    ArrayUtils.SetAll(this.list, property, value, startIndex, endIndex);\n    return this;\n  },\n\n  /**\r\n   * Passes all children to the given callback.\r\n   *\r\n   * @method Phaser.Structs.List#each\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachListCallback.<T>} - [callback]\r\n   *\r\n   * @param {EachListCallback} callback - The function to call.\r\n   * @param {*} [context] - Value to use as `this` when executing callback.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n   */\n  each: function each(callback, context) {\n    var args = [null];\n\n    for (var i = 2; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (i = 0; i < this.list.length; i++) {\n      args[0] = this.list[i];\n      callback.apply(context, args);\n    }\n  },\n\n  /**\r\n   * Clears the List and recreates its internal array.\r\n   *\r\n   * @method Phaser.Structs.List#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    this.removeAll();\n    this.list = [];\n  },\n\n  /**\r\n   * Destroys this List.\r\n   *\r\n   * @method Phaser.Structs.List#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.removeAll();\n    this.parent = null;\n    this.addCallback = null;\n    this.removeCallback = null;\n  },\n\n  /**\r\n   * The number of items inside the List.\r\n   *\r\n   * @name Phaser.Structs.List#length\r\n   * @type {integer}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  length: {\n    get: function get() {\n      return this.list.length;\n    }\n  },\n\n  /**\r\n   * The first item in the List or `null` for an empty List.\r\n   *\r\n   * @name Phaser.Structs.List#first\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  first: {\n    get: function get() {\n      this.position = 0;\n\n      if (this.list.length > 0) {\n        return this.list[0];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The last item in the List, or `null` for an empty List.\r\n   *\r\n   * @name Phaser.Structs.List#last\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  last: {\n    get: function get() {\n      if (this.list.length > 0) {\n        this.position = this.list.length - 1;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The next item in the List, or `null` if the entire List has been traversed.\r\n   * \r\n   * This property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.\r\n   *\r\n   * @name Phaser.Structs.List#next\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  next: {\n    get: function get() {\n      if (this.position < this.list.length) {\n        this.position++;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The previous item in the List, or `null` if the entire List has been traversed.\r\n   * \r\n   * This property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.\r\n   *\r\n   * @name Phaser.Structs.List#previous\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  previous: {\n    get: function get() {\n      if (this.position > 0) {\n        this.position--;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  }\n});\nmodule.exports = List;","map":null,"metadata":{},"sourceType":"script"}