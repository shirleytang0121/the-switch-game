{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DoubleLinkedNode =\n/** @class */\nfunction () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n\n  return DoubleLinkedNode;\n}();\n/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\n\n\nvar CacheList =\n/** @class */\nfunction () {\n  /**\r\n   * initialization\r\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\r\n   * insert node to the head of the list\r\n   *\r\n   * @param node\r\n   */\n\n\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\r\n   * remove node\r\n   *\r\n   * @param node\r\n   */\n\n\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\r\n   * @return true if list is empty\r\n   */\n\n\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\r\n   * refresh node so it is rotated to the head\r\n   *\r\n   * @param key - key of the node\r\n   */\n\n\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\r\n   * insert new node to the head and add it in the hashtable\r\n   *\r\n   * @param key - the key of the node\r\n   */\n\n\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\r\n   * @return the LAST Recently Visited key\r\n   */\n\n\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\r\n   * remove the cache key from the list and hashtable\r\n   * @param key - the key of the node\r\n   */\n\n\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\r\n   * @return length of the list\r\n   */\n\n\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\r\n   * @return true if the key is in the hashtable\r\n   * @param key\r\n   */\n\n\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\r\n   * clean up the list and hashtable\r\n   */\n\n\n  CacheList.prototype.clearList = function () {\n    for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (this.hashtable.hasOwnProperty(key)) {\n        delete this.hashtable[key];\n      }\n    }\n\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\r\n   * @return all keys in the hashtable\r\n   */\n\n\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\r\n   * mainly for test\r\n   *\r\n   * @param key\r\n   * @return true if key is the head node\r\n   */\n\n\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\r\n   * mainly for test\r\n   *\r\n   * @param key\r\n   * @return true if key is the tail node\r\n   */\n\n\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n\n  return CacheList;\n}();\n\nexports.default = CacheList;","map":null,"metadata":{},"sourceType":"script"}