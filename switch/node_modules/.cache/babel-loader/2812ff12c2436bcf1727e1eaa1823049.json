{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar NOOP = require('../utils/NOOP');\n\nvar RequestAnimationFrame = require('../dom/RequestAnimationFrame'); //  Frame Rate config\n//      fps: {\n//          min: 10,\n//          target: 60,\n//          forceSetTimeOut: false,\n//          deltaHistory: 10,\n//          panicMax: 120\n//     }\n// http://www.testufo.com/#test=animation-time-graph\n\n/**\r\n * @callback TimeStepCallback\r\n *\r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} average - The Delta Average.\r\n * @param {number} interpolation - Interpolation - how far between what is expected and where we are?\r\n */\n\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class TimeStep\r\n * @memberof Phaser.Core\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this Time Step.\r\n * @param {FPSConfig} config\r\n */\n\n\nvar TimeStep = new Class({\n  initialize: function TimeStep(game, config) {\n    /**\r\n     * A reference to the Phaser.Game instance.\r\n     *\r\n     * @name Phaser.Core.TimeStep#game\r\n     * @type {Phaser.Game}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n    this.game = game;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#raf\r\n     * @type {Phaser.DOM.RequestAnimationFrame}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.raf = new RequestAnimationFrame();\n    /**\r\n     * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n     *\r\n     * @name Phaser.Core.TimeStep#started\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.started = false;\n    /**\r\n     * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n     * The difference between this value and `started` is that `running` is toggled when\r\n     * the TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\r\n     * the TimeStep is actually stopped, not just paused.\r\n     *\r\n     * @name Phaser.Core.TimeStep#running\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.running = false;\n    /**\r\n     * The minimum fps rate you want the Time Step to run at.\r\n     *\r\n     * @name Phaser.Core.TimeStep#minFps\r\n     * @type {integer}\r\n     * @default 5\r\n     * @since 3.0.0\r\n     */\n\n    this.minFps = GetValue(config, 'min', 5);\n    /**\r\n     * The target fps rate for the Time Step to run at.\r\n     *\r\n     * Setting this value will not actually change the speed at which the browser runs, that is beyond\r\n     * the control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\r\n     * is spiraling out of control.\r\n     *\r\n     * @name Phaser.Core.TimeStep#targetFps\r\n     * @type {integer}\r\n     * @default 60\r\n     * @since 3.0.0\r\n     */\n\n    this.targetFps = GetValue(config, 'target', 60);\n    /**\r\n     * The minFps value in ms.\r\n     * Defaults to 200ms between frames (i.e. super slow!)\r\n     *\r\n     * @name Phaser.Core.TimeStep#_min\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._min = 1000 / this.minFps;\n    /**\r\n     * The targetFps value in ms.\r\n     * Defaults to 16.66ms between frames (i.e. normal)\r\n     *\r\n     * @name Phaser.Core.TimeStep#_target\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._target = 1000 / this.targetFps;\n    /**\r\n     * An exponential moving average of the frames per second.\r\n     *\r\n     * @name Phaser.Core.TimeStep#actualFps\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 60\r\n     * @since 3.0.0\r\n     */\n\n    this.actualFps = this.targetFps;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#nextFpsUpdate\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.nextFpsUpdate = 0;\n    /**\r\n     * The number of frames processed this second.\r\n     *\r\n     * @name Phaser.Core.TimeStep#framesThisSecond\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.framesThisSecond = 0;\n    /**\r\n     * A callback to be invoked each time the Time Step steps.\r\n     *\r\n     * @name Phaser.Core.TimeStep#callback\r\n     * @type {TimeStepCallback}\r\n     * @default NOOP\r\n     * @since 3.0.0\r\n     */\n\n    this.callback = NOOP;\n    /**\r\n     * You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\r\n     * the `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.\r\n     *\r\n     * @name Phaser.Core.TimeStep#forceSetTimeOut\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.forceSetTimeOut = GetValue(config, 'forceSetTimeOut', false);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#time\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.time = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#startTime\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.startTime = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#lastTime\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lastTime = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#frame\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#inFocus\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.inFocus = true;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#_pauseTime\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._pauseTime = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#_coolDown\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._coolDown = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#delta\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delta = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaIndex\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaIndex = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaHistory\r\n     * @type {integer[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaHistory = [];\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaSmoothingMax\r\n     * @type {integer}\r\n     * @default 10\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaSmoothingMax = GetValue(config, 'deltaHistory', 10);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Core.TimeStep#panicMax\r\n     * @type {integer}\r\n     * @default 120\r\n     * @since 3.0.0\r\n     */\n\n    this.panicMax = GetValue(config, 'panicMax', 120);\n    /**\r\n     * The actual elapsed time in ms between one update and the next.\r\n     * Unlike with `delta` no smoothing, capping, or averaging is applied to this value.\r\n     * So please be careful when using this value in calculations.\r\n     *\r\n     * @name Phaser.Core.TimeStep#rawDelta\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rawDelta = 0;\n  },\n\n  /**\r\n   * Called when the DOM window.onBlur event triggers.\r\n   *\r\n   * @method Phaser.Core.TimeStep#blur\r\n   * @since 3.0.0\r\n   */\n  blur: function blur() {\n    this.inFocus = false;\n  },\n\n  /**\r\n   * Called when the DOM window.onFocus event triggers.\r\n   *\r\n   * @method Phaser.Core.TimeStep#focus\r\n   * @since 3.0.0\r\n   */\n  focus: function focus() {\n    this.inFocus = true;\n    this.resetDelta();\n  },\n\n  /**\r\n   * Called when the visibility API says the game is 'hidden' (tab switch out of view, etc)\r\n   *\r\n   * @method Phaser.Core.TimeStep#pause\r\n   * @since 3.0.0\r\n   */\n  pause: function pause() {\n    this._pauseTime = window.performance.now();\n  },\n\n  /**\r\n   * Called when the visibility API says the game is 'visible' again (tab switch back into view, etc)\r\n   *\r\n   * @method Phaser.Core.TimeStep#resume\r\n   * @since 3.0.0\r\n   */\n  resume: function resume() {\n    this.resetDelta();\n    this.startTime += this.time - this._pauseTime;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Core.TimeStep#resetDelta\r\n   * @since 3.0.0\r\n   */\n  resetDelta: function resetDelta() {\n    var now = window.performance.now();\n    this.time = now;\n    this.lastTime = now;\n    this.nextFpsUpdate = now + 1000;\n    this.framesThisSecond = 0;\n    this.frame = 0; //  Pre-populate smoothing array\n\n    for (var i = 0; i < this.deltaSmoothingMax; i++) {\n      this.deltaHistory[i] = Math.min(this._target, this.deltaHistory[i]);\n    }\n\n    this.delta = 0;\n    this.deltaIndex = 0;\n    this._coolDown = this.panicMax;\n  },\n\n  /**\r\n   * Starts the Time Step running, if it is not already doing so.\r\n   * Called automatically by the Game Boot process.\r\n   *\r\n   * @method Phaser.Core.TimeStep#start\r\n   * @since 3.0.0\r\n   *\r\n   * @param {TimeStepCallback} callback - The callback to be invoked each time the Time Step steps.\r\n   */\n  start: function start(callback) {\n    if (this.started) {\n      return this;\n    }\n\n    this.started = true;\n    this.running = true;\n\n    for (var i = 0; i < this.deltaSmoothingMax; i++) {\n      this.deltaHistory[i] = this._target;\n    }\n\n    this.resetDelta();\n    this.startTime = window.performance.now();\n    this.callback = callback;\n    this.raf.start(this.step.bind(this), this.forceSetTimeOut);\n  },\n\n  /**\r\n   * The main step method. This is called each time the browser updates, either by Request Animation Frame,\r\n   * or by Set Timeout. It is responsible for calculating the delta values, frame totals, cool down history and more.\r\n   * You generally should never call this method directly.\r\n   *\r\n   * @method Phaser.Core.TimeStep#step\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n   */\n  step: function step(time) {\n    var before = time - this.lastTime;\n\n    if (before < 0) {\n      //  Because, Chrome.\n      before = 0;\n    }\n\n    this.rawDelta = before;\n    var idx = this.deltaIndex;\n    var history = this.deltaHistory;\n    var max = this.deltaSmoothingMax; //  delta time (time is in ms)\n\n    var dt = before; //  When a browser switches tab, then comes back again, it takes around 10 frames before\n    //  the delta time settles down so we employ a 'cooling down' period before we start\n    //  trusting the delta values again, to avoid spikes flooding through our delta average\n\n    if (this._coolDown > 0 || !this.inFocus) {\n      this._coolDown--;\n      dt = Math.min(dt, this._target);\n    }\n\n    if (dt > this._min) {\n      //  Probably super bad start time or browser tab context loss,\n      //  so use the last 'sane' dt value\n      dt = history[idx]; //  Clamp delta to min (in case history has become corrupted somehow)\n\n      dt = Math.min(dt, this._min);\n    } //  Smooth out the delta over the previous X frames\n    //  add the delta to the smoothing array\n\n\n    history[idx] = dt; //  adjusts the delta history array index based on the smoothing count\n    //  this stops the array growing beyond the size of deltaSmoothingMax\n\n    this.deltaIndex++;\n\n    if (this.deltaIndex > max) {\n      this.deltaIndex = 0;\n    } //  Delta Average\n\n\n    var avg = 0; //  Loop the history array, adding the delta values together\n\n    for (var i = 0; i < max; i++) {\n      avg += history[i];\n    } //  Then divide by the array length to get the average delta\n\n\n    avg /= max; //  Set as the world delta value\n\n    this.delta = avg; //  Real-world timer advance\n\n    this.time += this.rawDelta; // Update the estimate of the frame rate, `fps`. Every second, the number\n    // of frames that occurred in that second are included in an exponential\n    // moving average of all frames per second, with an alpha of 0.25. This\n    // means that more recent seconds affect the estimated frame rate more than\n    // older seconds.\n    //\n    // When a browser window is NOT minimized, but is covered up (i.e. you're using\n    // another app which has spawned a window over the top of the browser), then it\n    // will start to throttle the raf callback time. It waits for a while, and then\n    // starts to drop the frame rate at 1 frame per second until it's down to just over 1fps.\n    // So if the game was running at 60fps, and the player opens a new window, then\n    // after 60 seconds (+ the 'buffer time') it'll be down to 1fps, so rafin'g at 1Hz.\n    //\n    // When they make the game visible again, the frame rate is increased at a rate of\n    // approx. 8fps, back up to 60fps (or the max it can obtain)\n    //\n    // There is no easy way to determine if this drop in frame rate is because the\n    // browser is throttling raf, or because the game is struggling with performance\n    // because you're asking it to do too much on the device.\n\n    if (time > this.nextFpsUpdate) {\n      //  Compute the new exponential moving average with an alpha of 0.25.\n      this.actualFps = 0.25 * this.framesThisSecond + 0.75 * this.actualFps;\n      this.nextFpsUpdate = time + 1000;\n      this.framesThisSecond = 0;\n    }\n\n    this.framesThisSecond++; //  Interpolation - how far between what is expected and where we are?\n\n    var interpolation = avg / this._target;\n    this.callback(time, avg, interpolation); //  Shift time value over\n\n    this.lastTime = time;\n    this.frame++;\n  },\n\n  /**\r\n   * Manually calls TimeStep.step, passing in the performance.now value to it.\r\n   *\r\n   * @method Phaser.Core.TimeStep#tick\r\n   * @since 3.0.0\r\n   */\n  tick: function tick() {\n    this.step(window.performance.now());\n  },\n\n  /**\r\n   * Sends the TimeStep to sleep, stopping Request Animation Frame (or SetTimeout) and toggling the `running` flag to false.\r\n   *\r\n   * @method Phaser.Core.TimeStep#sleep\r\n   * @since 3.0.0\r\n   */\n  sleep: function sleep() {\n    if (this.running) {\n      this.raf.stop();\n      this.running = false;\n    }\n  },\n\n  /**\r\n   * Wakes-up the TimeStep, restarting Request Animation Frame (or SetTimeout) and toggling the `running` flag to true.\r\n   * The `seamless` argument controls if the wake-up should adjust the start time or not.\r\n   *\r\n   * @method Phaser.Core.TimeStep#wake\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [seamless=false] - Adjust the startTime based on the lastTime values.\r\n   */\n  wake: function wake(seamless) {\n    if (this.running) {\n      this.sleep();\n    } else if (seamless) {\n      this.startTime += -this.lastTime + (this.lastTime + window.performance.now());\n    }\n\n    this.raf.start(this.step.bind(this), this.useRAF);\n    this.running = true;\n    this.step(window.performance.now());\n  },\n\n  /**\r\n   * Stops the TimeStep running.\r\n   *\r\n   * @method Phaser.Core.TimeStep#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Core.TimeStep} The TimeStep object.\r\n   */\n  stop: function stop() {\n    this.running = false;\n    this.started = false;\n    this.raf.stop();\n    return this;\n  },\n\n  /**\r\n   * Destroys the TimeStep. This will stop Request Animation Frame, stop the step, clear the callbacks and null\r\n   * any objects.\r\n   *\r\n   * @method Phaser.Core.TimeStep#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.stop();\n    this.callback = NOOP;\n    this.raf = null;\n    this.game = null;\n  }\n});\nmodule.exports = TimeStep;","map":null,"metadata":{},"sourceType":"script"}