{"ast":null,"code":"/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\nvar Matter = {};\nmodule.exports = Matter;\n\nvar Plugin = require('./Plugin');\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * The library name.\r\n   * @property name\r\n   * @readOnly\r\n   * @type {String}\r\n   */\n  Matter.name = 'matter-js';\n  /**\r\n   * The library version.\r\n   * @property version\r\n   * @readOnly\r\n   * @type {String}\r\n   */\n\n  Matter.version = '0.14.2';\n  /**\r\n   * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n   * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n   * @property uses\r\n   * @type {Array}\r\n   */\n\n  Matter.uses = [];\n  /**\r\n   * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n   * @property used\r\n   * @readOnly\r\n   * @type {Array}\r\n   */\n\n  Matter.used = [];\n  /**\r\n   * Installs the given plugins on the `Matter` namespace.\r\n   * This is a short-hand for `Plugin.use`, see it for more information.\r\n   * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n   * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n   * @method use\r\n   * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n   */\n\n  Matter.use = function () {\n    Plugin.use(Matter, Array.prototype.slice.call(arguments));\n  };\n  /**\r\n   * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n   * See also docs for `Common.chain`.\r\n   * @method before\r\n   * @param {string} path The path relative to `Matter`\r\n   * @param {function} func The function to chain before the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Matter.before = function (path, func) {\n    path = path.replace(/^Matter./, '');\n    return Common.chainPathBefore(Matter, path, func);\n  };\n  /**\r\n   * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n   * See also docs for `Common.chain`.\r\n   * @method after\r\n   * @param {string} path The path relative to `Matter`\r\n   * @param {function} func The function to chain after the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Matter.after = function (path, func) {\n    path = path.replace(/^Matter./, '');\n    return Common.chainPathAfter(Matter, path, func);\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}