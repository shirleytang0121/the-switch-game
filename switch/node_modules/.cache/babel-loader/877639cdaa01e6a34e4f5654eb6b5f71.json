{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Pick = require('./Pick');\n\nvar ParseGID = require('./ParseGID');\n\nvar copyPoints = function copyPoints(p) {\n  return {\n    x: p.x,\n    y: p.y\n  };\n};\n\nvar commonObjectProps = ['id', 'name', 'type', 'rotation', 'properties', 'visible', 'x', 'y', 'width', 'height'];\n/**\r\n * Convert a Tiled object to an internal parsed object normalising and copying properties over, while applying optional x and y offsets. The parsed object will always have the properties `id`, `name`, `type`, `rotation`, `properties`, `visible`, `x`, `y`, `width` and `height`. Other properties will be added according to the object type (such as text, polyline, gid etc.)\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObject\r\n * @since 3.0.0\r\n *\r\n * @param {object} tiledObject - Tiled object to convert to an internal parsed object normalising and copying properties over.\r\n * @param {number} [offsetX=0] - Optional additional offset to apply to the object's x property. Defaults to 0.\r\n * @param {number} [offsetY=0] - Optional additional offset to apply to the object's y property. Defaults to 0.\r\n *\r\n * @return {object} The parsed object containing properties read from the Tiled object according to it's type with x and y values updated according to the given offsets.\r\n */\n\nvar ParseObject = function ParseObject(tiledObject, offsetX, offsetY) {\n  if (offsetX === undefined) {\n    offsetX = 0;\n  }\n\n  if (offsetY === undefined) {\n    offsetY = 0;\n  }\n\n  var parsedObject = Pick(tiledObject, commonObjectProps);\n  parsedObject.x += offsetX;\n  parsedObject.y += offsetY;\n\n  if (tiledObject.gid) {\n    //  Object tiles\n    var gidInfo = ParseGID(tiledObject.gid);\n    parsedObject.gid = gidInfo.gid;\n    parsedObject.flippedHorizontal = gidInfo.flippedHorizontal;\n    parsedObject.flippedVertical = gidInfo.flippedVertical;\n    parsedObject.flippedAntiDiagonal = gidInfo.flippedAntiDiagonal;\n  } else if (tiledObject.polyline) {\n    parsedObject.polyline = tiledObject.polyline.map(copyPoints);\n  } else if (tiledObject.polygon) {\n    parsedObject.polygon = tiledObject.polygon.map(copyPoints);\n  } else if (tiledObject.ellipse) {\n    parsedObject.ellipse = tiledObject.ellipse;\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n  } else if (tiledObject.text) {\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n    parsedObject.text = tiledObject.text;\n  } else {\n    // Otherwise, assume it is a rectangle\n    parsedObject.rectangle = true;\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n  }\n\n  return parsedObject;\n};\n\nmodule.exports = ParseObject;","map":null,"metadata":{},"sourceType":"script"}