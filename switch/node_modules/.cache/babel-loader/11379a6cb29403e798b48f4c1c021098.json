{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Implements a model view projection matrices.\r\n * Pipelines can implement this for doing 2D and 3D rendering.\r\n */\nvar ModelViewProjection = {\n  /**\r\n   * Dirty flag for checking if model matrix needs to be updated on GPU.\r\n   */\n  modelMatrixDirty: false,\n\n  /**\r\n   * Dirty flag for checking if view matrix needs to be updated on GPU.\r\n   */\n  viewMatrixDirty: false,\n\n  /**\r\n   * Dirty flag for checking if projection matrix needs to be updated on GPU.\r\n   */\n  projectionMatrixDirty: false,\n\n  /**\r\n   * Model matrix\r\n   */\n  modelMatrix: null,\n\n  /**\r\n   * View matrix\r\n   */\n  viewMatrix: null,\n\n  /**\r\n   * Projection matrix\r\n   */\n  projectionMatrix: null,\n\n  /**\r\n   * Initializes MVP matrices with an identity matrix\r\n   */\n  mvpInit: function mvpInit() {\n    this.modelMatrixDirty = true;\n    this.viewMatrixDirty = true;\n    this.projectionMatrixDirty = true;\n    this.modelMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    this.viewMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    this.projectionMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    return this;\n  },\n\n  /**\r\n   * If dirty flags are set then the matrices are uploaded to the GPU.\r\n   */\n  mvpUpdate: function mvpUpdate() {\n    var program = this.program;\n\n    if (this.modelMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uModelMatrix', false, this.modelMatrix);\n      this.modelMatrixDirty = false;\n    }\n\n    if (this.viewMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uViewMatrix', false, this.viewMatrix);\n      this.viewMatrixDirty = false;\n    }\n\n    if (this.projectionMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uProjectionMatrix', false, this.projectionMatrix);\n      this.projectionMatrixDirty = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Loads an identity matrix to the model matrix\r\n   */\n  modelIdentity: function modelIdentity() {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[0] = 1;\n    modelMatrix[1] = 0;\n    modelMatrix[2] = 0;\n    modelMatrix[3] = 0;\n    modelMatrix[4] = 0;\n    modelMatrix[5] = 1;\n    modelMatrix[6] = 0;\n    modelMatrix[7] = 0;\n    modelMatrix[8] = 0;\n    modelMatrix[9] = 0;\n    modelMatrix[10] = 1;\n    modelMatrix[11] = 0;\n    modelMatrix[12] = 0;\n    modelMatrix[13] = 0;\n    modelMatrix[14] = 0;\n    modelMatrix[15] = 1;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Scale model matrix\r\n   */\n  modelScale: function modelScale(x, y, z) {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[0] = modelMatrix[0] * x;\n    modelMatrix[1] = modelMatrix[1] * x;\n    modelMatrix[2] = modelMatrix[2] * x;\n    modelMatrix[3] = modelMatrix[3] * x;\n    modelMatrix[4] = modelMatrix[4] * y;\n    modelMatrix[5] = modelMatrix[5] * y;\n    modelMatrix[6] = modelMatrix[6] * y;\n    modelMatrix[7] = modelMatrix[7] * y;\n    modelMatrix[8] = modelMatrix[8] * z;\n    modelMatrix[9] = modelMatrix[9] * z;\n    modelMatrix[10] = modelMatrix[10] * z;\n    modelMatrix[11] = modelMatrix[11] * z;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Translate model matrix\r\n   */\n  modelTranslate: function modelTranslate(x, y, z) {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[12] = modelMatrix[0] * x + modelMatrix[4] * y + modelMatrix[8] * z + modelMatrix[12];\n    modelMatrix[13] = modelMatrix[1] * x + modelMatrix[5] * y + modelMatrix[9] * z + modelMatrix[13];\n    modelMatrix[14] = modelMatrix[2] * x + modelMatrix[6] * y + modelMatrix[10] * z + modelMatrix[14];\n    modelMatrix[15] = modelMatrix[3] * x + modelMatrix[7] * y + modelMatrix[11] * z + modelMatrix[15];\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the X axis.\r\n   */\n  modelRotateX: function modelRotateX(radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a10 = modelMatrix[4];\n    var a11 = modelMatrix[5];\n    var a12 = modelMatrix[6];\n    var a13 = modelMatrix[7];\n    var a20 = modelMatrix[8];\n    var a21 = modelMatrix[9];\n    var a22 = modelMatrix[10];\n    var a23 = modelMatrix[11];\n    modelMatrix[4] = a10 * c + a20 * s;\n    modelMatrix[5] = a11 * c + a21 * s;\n    modelMatrix[6] = a12 * c + a22 * s;\n    modelMatrix[7] = a13 * c + a23 * s;\n    modelMatrix[8] = a20 * c - a10 * s;\n    modelMatrix[9] = a21 * c - a11 * s;\n    modelMatrix[10] = a22 * c - a12 * s;\n    modelMatrix[11] = a23 * c - a13 * s;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the Y axis.\r\n   */\n  modelRotateY: function modelRotateY(radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = modelMatrix[0];\n    var a01 = modelMatrix[1];\n    var a02 = modelMatrix[2];\n    var a03 = modelMatrix[3];\n    var a20 = modelMatrix[8];\n    var a21 = modelMatrix[9];\n    var a22 = modelMatrix[10];\n    var a23 = modelMatrix[11];\n    modelMatrix[0] = a00 * c - a20 * s;\n    modelMatrix[1] = a01 * c - a21 * s;\n    modelMatrix[2] = a02 * c - a22 * s;\n    modelMatrix[3] = a03 * c - a23 * s;\n    modelMatrix[8] = a00 * s + a20 * c;\n    modelMatrix[9] = a01 * s + a21 * c;\n    modelMatrix[10] = a02 * s + a22 * c;\n    modelMatrix[11] = a03 * s + a23 * c;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the Z axis.\r\n   */\n  modelRotateZ: function modelRotateZ(radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = modelMatrix[0];\n    var a01 = modelMatrix[1];\n    var a02 = modelMatrix[2];\n    var a03 = modelMatrix[3];\n    var a10 = modelMatrix[4];\n    var a11 = modelMatrix[5];\n    var a12 = modelMatrix[6];\n    var a13 = modelMatrix[7];\n    modelMatrix[0] = a00 * c + a10 * s;\n    modelMatrix[1] = a01 * c + a11 * s;\n    modelMatrix[2] = a02 * c + a12 * s;\n    modelMatrix[3] = a03 * c + a13 * s;\n    modelMatrix[4] = a10 * c - a00 * s;\n    modelMatrix[5] = a11 * c - a01 * s;\n    modelMatrix[6] = a12 * c - a02 * s;\n    modelMatrix[7] = a13 * c - a03 * s;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads identity matrix into the view matrix\r\n   */\n  viewIdentity: function viewIdentity() {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[0] = 1;\n    viewMatrix[1] = 0;\n    viewMatrix[2] = 0;\n    viewMatrix[3] = 0;\n    viewMatrix[4] = 0;\n    viewMatrix[5] = 1;\n    viewMatrix[6] = 0;\n    viewMatrix[7] = 0;\n    viewMatrix[8] = 0;\n    viewMatrix[9] = 0;\n    viewMatrix[10] = 1;\n    viewMatrix[11] = 0;\n    viewMatrix[12] = 0;\n    viewMatrix[13] = 0;\n    viewMatrix[14] = 0;\n    viewMatrix[15] = 1;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Scales view matrix\r\n   */\n  viewScale: function viewScale(x, y, z) {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[0] = viewMatrix[0] * x;\n    viewMatrix[1] = viewMatrix[1] * x;\n    viewMatrix[2] = viewMatrix[2] * x;\n    viewMatrix[3] = viewMatrix[3] * x;\n    viewMatrix[4] = viewMatrix[4] * y;\n    viewMatrix[5] = viewMatrix[5] * y;\n    viewMatrix[6] = viewMatrix[6] * y;\n    viewMatrix[7] = viewMatrix[7] * y;\n    viewMatrix[8] = viewMatrix[8] * z;\n    viewMatrix[9] = viewMatrix[9] * z;\n    viewMatrix[10] = viewMatrix[10] * z;\n    viewMatrix[11] = viewMatrix[11] * z;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Translates view matrix\r\n   */\n  viewTranslate: function viewTranslate(x, y, z) {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[12] = viewMatrix[0] * x + viewMatrix[4] * y + viewMatrix[8] * z + viewMatrix[12];\n    viewMatrix[13] = viewMatrix[1] * x + viewMatrix[5] * y + viewMatrix[9] * z + viewMatrix[13];\n    viewMatrix[14] = viewMatrix[2] * x + viewMatrix[6] * y + viewMatrix[10] * z + viewMatrix[14];\n    viewMatrix[15] = viewMatrix[3] * x + viewMatrix[7] * y + viewMatrix[11] * z + viewMatrix[15];\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the X axis.\r\n   */\n  viewRotateX: function viewRotateX(radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a10 = viewMatrix[4];\n    var a11 = viewMatrix[5];\n    var a12 = viewMatrix[6];\n    var a13 = viewMatrix[7];\n    var a20 = viewMatrix[8];\n    var a21 = viewMatrix[9];\n    var a22 = viewMatrix[10];\n    var a23 = viewMatrix[11];\n    viewMatrix[4] = a10 * c + a20 * s;\n    viewMatrix[5] = a11 * c + a21 * s;\n    viewMatrix[6] = a12 * c + a22 * s;\n    viewMatrix[7] = a13 * c + a23 * s;\n    viewMatrix[8] = a20 * c - a10 * s;\n    viewMatrix[9] = a21 * c - a11 * s;\n    viewMatrix[10] = a22 * c - a12 * s;\n    viewMatrix[11] = a23 * c - a13 * s;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the Y axis.\r\n   */\n  viewRotateY: function viewRotateY(radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = viewMatrix[0];\n    var a01 = viewMatrix[1];\n    var a02 = viewMatrix[2];\n    var a03 = viewMatrix[3];\n    var a20 = viewMatrix[8];\n    var a21 = viewMatrix[9];\n    var a22 = viewMatrix[10];\n    var a23 = viewMatrix[11];\n    viewMatrix[0] = a00 * c - a20 * s;\n    viewMatrix[1] = a01 * c - a21 * s;\n    viewMatrix[2] = a02 * c - a22 * s;\n    viewMatrix[3] = a03 * c - a23 * s;\n    viewMatrix[8] = a00 * s + a20 * c;\n    viewMatrix[9] = a01 * s + a21 * c;\n    viewMatrix[10] = a02 * s + a22 * c;\n    viewMatrix[11] = a03 * s + a23 * c;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the Z axis.\r\n   */\n  viewRotateZ: function viewRotateZ(radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = viewMatrix[0];\n    var a01 = viewMatrix[1];\n    var a02 = viewMatrix[2];\n    var a03 = viewMatrix[3];\n    var a10 = viewMatrix[4];\n    var a11 = viewMatrix[5];\n    var a12 = viewMatrix[6];\n    var a13 = viewMatrix[7];\n    viewMatrix[0] = a00 * c + a10 * s;\n    viewMatrix[1] = a01 * c + a11 * s;\n    viewMatrix[2] = a02 * c + a12 * s;\n    viewMatrix[3] = a03 * c + a13 * s;\n    viewMatrix[4] = a10 * c - a00 * s;\n    viewMatrix[5] = a11 * c - a01 * s;\n    viewMatrix[6] = a12 * c - a02 * s;\n    viewMatrix[7] = a13 * c - a03 * s;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads a 2D view matrix (3x2 matrix) into a 4x4 view matrix \r\n   */\n  viewLoad2D: function viewLoad2D(matrix2D) {\n    var vm = this.viewMatrix;\n    vm[0] = matrix2D[0];\n    vm[1] = matrix2D[1];\n    vm[2] = 0.0;\n    vm[3] = 0.0;\n    vm[4] = matrix2D[2];\n    vm[5] = matrix2D[3];\n    vm[6] = 0.0;\n    vm[7] = 0.0;\n    vm[8] = matrix2D[4];\n    vm[9] = matrix2D[5];\n    vm[10] = 1.0;\n    vm[11] = 0.0;\n    vm[12] = 0.0;\n    vm[13] = 0.0;\n    vm[14] = 0.0;\n    vm[15] = 1.0;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Copies a 4x4 matrix into the view matrix\r\n   */\n  viewLoad: function viewLoad(matrix) {\n    var vm = this.viewMatrix;\n    vm[0] = matrix[0];\n    vm[1] = matrix[1];\n    vm[2] = matrix[2];\n    vm[3] = matrix[3];\n    vm[4] = matrix[4];\n    vm[5] = matrix[5];\n    vm[6] = matrix[6];\n    vm[7] = matrix[7];\n    vm[8] = matrix[8];\n    vm[9] = matrix[9];\n    vm[10] = matrix[10];\n    vm[11] = matrix[11];\n    vm[12] = matrix[12];\n    vm[13] = matrix[13];\n    vm[14] = matrix[14];\n    vm[15] = matrix[15];\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads identity matrix into the projection matrix.\r\n   */\n  projIdentity: function projIdentity() {\n    var projectionMatrix = this.projectionMatrix;\n    projectionMatrix[0] = 1;\n    projectionMatrix[1] = 0;\n    projectionMatrix[2] = 0;\n    projectionMatrix[3] = 0;\n    projectionMatrix[4] = 0;\n    projectionMatrix[5] = 1;\n    projectionMatrix[6] = 0;\n    projectionMatrix[7] = 0;\n    projectionMatrix[8] = 0;\n    projectionMatrix[9] = 0;\n    projectionMatrix[10] = 1;\n    projectionMatrix[11] = 0;\n    projectionMatrix[12] = 0;\n    projectionMatrix[13] = 0;\n    projectionMatrix[14] = 0;\n    projectionMatrix[15] = 1;\n    this.projectionMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Sets up an orthographics projection matrix\r\n   */\n  projOrtho: function projOrtho(left, right, bottom, top, near, far) {\n    var projectionMatrix = this.projectionMatrix;\n    var leftRight = 1.0 / (left - right);\n    var bottomTop = 1.0 / (bottom - top);\n    var nearFar = 1.0 / (near - far);\n    projectionMatrix[0] = -2.0 * leftRight;\n    projectionMatrix[1] = 0.0;\n    projectionMatrix[2] = 0.0;\n    projectionMatrix[3] = 0.0;\n    projectionMatrix[4] = 0.0;\n    projectionMatrix[5] = -2.0 * bottomTop;\n    projectionMatrix[6] = 0.0;\n    projectionMatrix[7] = 0.0;\n    projectionMatrix[8] = 0.0;\n    projectionMatrix[9] = 0.0;\n    projectionMatrix[10] = 2.0 * nearFar;\n    projectionMatrix[11] = 0.0;\n    projectionMatrix[12] = (left + right) * leftRight;\n    projectionMatrix[13] = (top + bottom) * bottomTop;\n    projectionMatrix[14] = (far + near) * nearFar;\n    projectionMatrix[15] = 1.0;\n    this.projectionMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Sets up a perspective projection matrix\r\n   */\n  projPersp: function projPersp(fovy, aspectRatio, near, far) {\n    var projectionMatrix = this.projectionMatrix;\n    var fov = 1.0 / Math.tan(fovy / 2.0);\n    var nearFar = 1.0 / (near - far);\n    projectionMatrix[0] = fov / aspectRatio;\n    projectionMatrix[1] = 0.0;\n    projectionMatrix[2] = 0.0;\n    projectionMatrix[3] = 0.0;\n    projectionMatrix[4] = 0.0;\n    projectionMatrix[5] = fov;\n    projectionMatrix[6] = 0.0;\n    projectionMatrix[7] = 0.0;\n    projectionMatrix[8] = 0.0;\n    projectionMatrix[9] = 0.0;\n    projectionMatrix[10] = (far + near) * nearFar;\n    projectionMatrix[11] = -1.0;\n    projectionMatrix[12] = 0.0;\n    projectionMatrix[13] = 0.0;\n    projectionMatrix[14] = 2.0 * far * near * nearFar;\n    projectionMatrix[15] = 0.0;\n    this.projectionMatrixDirty = true;\n    return this;\n  }\n};\nmodule.exports = ModelViewProjection;","map":null,"metadata":{},"sourceType":"script"}