{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar HTML5AudioSound = require('./HTML5AudioSound');\n/**\r\n * HTML5 Audio implementation of the Sound Manager.\r\n *\r\n * @class HTML5AudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar HTML5AudioSoundManager = new Class({\n  Extends: BaseSoundManager,\n  initialize: function HTML5AudioSoundManager(game) {\n    /**\r\n     * Flag indicating whether if there are no idle instances of HTML5 Audio tag,\r\n     * for any particular sound, if one of the used tags should be hijacked and used\r\n     * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\r\n     * call should be ignored.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#override\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n    this.override = true;\n    /**\r\n     * Value representing time difference, in seconds, between calling\r\n     * play method on an audio tag and when it actually starts playing.\r\n     * It is used to achieve more accurate delayed sound playback.\r\n     *\r\n     * You might need to tweak this value to get the desired results\r\n     * since audio play delay varies depending on the browser/platform.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#audioPlayDelay\r\n     * @type {number}\r\n     * @default 0.1\r\n     * @since 3.0.0\r\n     */\n\n    this.audioPlayDelay = 0.1;\n    /**\r\n     * A value by which we should offset the loop end marker of the\r\n     * looping sound to compensate for lag, caused by changing audio\r\n     * tag playback position, in order to achieve gapless looping.\r\n     *\r\n     * You might need to tweak this value to get the desired results\r\n     * since loop lag varies depending on the browser/platform.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#loopEndOffset\r\n     * @type {number}\r\n     * @default 0.05\r\n     * @since 3.0.0\r\n     */\n\n    this.loopEndOffset = 0.05;\n    /**\r\n     * An array for keeping track of all the sounds\r\n     * that were paused when game lost focus.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#onBlurPausedSounds\r\n     * @type {Phaser.Sound.HTML5AudioSound[]}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.onBlurPausedSounds = [];\n    this.locked = 'ontouchstart' in window;\n    /**\r\n     * A queue of all actions performed on sound objects while audio was locked.\r\n     * Once the audio gets unlocked, after an explicit user interaction,\r\n     * all actions will be performed in chronological order.\r\n     * Array of object types: { sound: Phaser.Sound.HTML5AudioSound, name: string, value?: * }\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#lockedActionsQueue\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.lockedActionsQueue = this.locked ? [] : null;\n    /**\r\n     * Property that actually holds the value of global mute\r\n     * for HTML5 Audio sound manager implementation.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#_mute\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._mute = false;\n    /**\r\n     * Property that actually holds the value of global volume\r\n     * for HTML5 Audio sound manager implementation.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#_volume\r\n     * @type {boolean}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._volume = 1;\n    BaseSoundManager.call(this, game);\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} The new sound instance.\r\n   */\n  add: function add(key, config) {\n    var sound = new HTML5AudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n\n  /**\r\n   * Unlocks HTML5 Audio loading and playback on mobile\r\n   * devices on the initial explicit user interaction.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#unlock\r\n   * @since 3.0.0\r\n   */\n  unlock: function unlock() {\n    this.locked = false;\n\n    var _this = this;\n\n    this.game.cache.audio.entries.each(function (key, tags) {\n      for (var i = 0; i < tags.length; i++) {\n        if (tags[i].dataset.locked === 'true') {\n          _this.locked = true;\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    if (!this.locked) {\n      return;\n    }\n\n    var moved = false;\n\n    var detectMove = function detectMove() {\n      moved = true;\n    };\n\n    var unlock = function unlock() {\n      if (moved) {\n        moved = false;\n        return;\n      }\n\n      document.body.removeEventListener('touchmove', detectMove);\n      document.body.removeEventListener('touchend', unlock);\n      var lockedTags = [];\n\n      _this.game.cache.audio.entries.each(function (key, tags) {\n        for (var i = 0; i < tags.length; i++) {\n          var tag = tags[i];\n\n          if (tag.dataset.locked === 'true') {\n            lockedTags.push(tag);\n          }\n        }\n\n        return true;\n      });\n\n      if (lockedTags.length === 0) {\n        return;\n      }\n\n      var lastTag = lockedTags[lockedTags.length - 1];\n\n      lastTag.oncanplaythrough = function () {\n        lastTag.oncanplaythrough = null;\n        lockedTags.forEach(function (tag) {\n          tag.dataset.locked = 'false';\n        });\n        _this.unlocked = true;\n      };\n\n      lockedTags.forEach(function (tag) {\n        tag.load();\n      });\n    };\n\n    this.once(Events.UNLOCKED, function () {\n      this.forEachActiveSound(function (sound) {\n        if (sound.currentMarker === null && sound.duration === 0) {\n          sound.duration = sound.tags[0].duration;\n        }\n\n        sound.totalDuration = sound.tags[0].duration;\n      });\n\n      while (this.lockedActionsQueue.length) {\n        var lockedAction = this.lockedActionsQueue.shift();\n\n        if (lockedAction.sound[lockedAction.prop].apply) {\n          lockedAction.sound[lockedAction.prop].apply(lockedAction.sound, lockedAction.value || []);\n        } else {\n          lockedAction.sound[lockedAction.prop] = lockedAction.value;\n        }\n      }\n    }, this);\n    document.body.addEventListener('touchmove', detectMove, false);\n    document.body.addEventListener('touchend', unlock, false);\n  },\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: function onBlur() {\n    this.forEachActiveSound(function (sound) {\n      if (sound.isPlaying) {\n        this.onBlurPausedSounds.push(sound);\n        sound.onBlur();\n      }\n    });\n  },\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#onFocus\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: function onFocus() {\n    this.onBlurPausedSounds.forEach(function (sound) {\n      sound.onFocus();\n    });\n    this.onBlurPausedSounds.length = 0;\n  },\n\n  /**\r\n   * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n   * and cleans up all HTML5 Audio related stuff.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    BaseSoundManager.prototype.destroy.call(this);\n    this.onBlurPausedSounds.length = 0;\n    this.onBlurPausedSounds = null;\n  },\n\n  /**\r\n   * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\r\n   * to check if sound manager is locked and then either perform action immediately or queue it\r\n   * to be performed once the sound manager gets unlocked.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#isLocked\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Sound.HTML5AudioSound} sound - Sound object on which to perform queued action.\r\n   * @param {string} prop - Name of the method to be called or property to be assigned a value to.\r\n   * @param {*} [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.\r\n   *\r\n   * @return {boolean} Whether the sound manager is locked.\r\n   */\n  isLocked: function isLocked(sound, prop, value) {\n    if (sound.tags[0].dataset.locked === 'true') {\n      this.lockedActionsQueue.push({\n        sound: sound,\n        prop: prop,\n        value: value\n      });\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Sets the muted state of all this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#setMute\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n   */\n  setMute: function setMute(value) {\n    this.mute = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.HTML5AudioSoundManager#mute\r\n   * @type {boolean}\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.0.0\r\n   */\n  mute: {\n    get: function get() {\n      return this._mute;\n    },\n    set: function set(value) {\n      this._mute = value;\n      this.forEachActiveSound(function (sound) {\n        sound.updateMute();\n      });\n      this.emit(Events.GLOBAL_MUTE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the volume of this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#setVolume\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The global volume of this Sound Manager.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n   */\n  setVolume: function setVolume(value) {\n    this.volume = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.HTML5AudioSoundManager#volume\r\n   * @type {number}\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.0.0\r\n   */\n  volume: {\n    get: function get() {\n      return this._volume;\n    },\n    set: function set(value) {\n      this._volume = value;\n      this.forEachActiveSound(function (sound) {\n        sound.updateVolume();\n      });\n      this.emit(Events.GLOBAL_VOLUME, this, value);\n    }\n  }\n});\nmodule.exports = HTML5AudioSoundManager;","map":null,"metadata":{},"sourceType":"script"}