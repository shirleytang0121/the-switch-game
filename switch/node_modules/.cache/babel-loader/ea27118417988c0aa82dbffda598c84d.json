{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar List = require('../structs/List');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar StableSort = require('../utils/array/StableSort');\n/**\r\n * @classdesc\r\n * The Display List plugin.\r\n *\r\n * Display Lists belong to a Scene and maintain the list of Game Objects to render every frame.\r\n *\r\n * Some of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.\r\n *\r\n * @class DisplayList\r\n * @extends Phaser.Structs.List.<Phaser.GameObjects.GameObject>\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this Display List belongs to.\r\n */\n\n\nvar DisplayList = new Class({\n  Extends: List,\n  initialize: function DisplayList(scene) {\n    List.call(this, scene);\n    /**\r\n     * The flag the determines whether Game Objects should be sorted when `depthSort()` is called.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#sortChildrenFlag\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.sortChildrenFlag = false;\n    /**\r\n     * The Scene that this Display List belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * The Scene's Systems.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Force a sort of the display list on the next call to depthSort.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#queueDepthSort\r\n   * @since 3.0.0\r\n   */\n  queueDepthSort: function queueDepthSort() {\n    this.sortChildrenFlag = true;\n  },\n\n  /**\r\n   * Immediately sorts the display list if the flag is set.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#depthSort\r\n   * @since 3.0.0\r\n   */\n  depthSort: function depthSort() {\n    if (this.sortChildrenFlag) {\n      StableSort.inplace(this.list, this.sortByDepth);\n      this.sortChildrenFlag = false;\n    }\n  },\n\n  /**\r\n   * Compare the depth of two Game Objects.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#sortByDepth\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} childA - The first Game Object.\r\n   * @param {Phaser.GameObjects.GameObject} childB - The second Game Object.\r\n   *\r\n   * @return {integer} The difference between the depths of each Game Object.\r\n   */\n  sortByDepth: function sortByDepth(childA, childB) {\n    return childA._depth - childB._depth;\n  },\n\n  /**\r\n   * Returns an array which contains all objects currently on the Display List.\r\n   * This is a reference to the main list array, not a copy of it, so be careful not to modify it.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#getChildren\r\n   * @since 3.12.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject[]} The group members.\r\n   */\n  getChildren: function getChildren() {\n    return this.list;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    var i = this.list.length;\n\n    while (i--) {\n      this.list[i].destroy(true);\n    }\n\n    this.list.length = 0;\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('DisplayList', DisplayList, 'displayList');\nmodule.exports = DisplayList;","map":null,"metadata":{},"sourceType":"script"}