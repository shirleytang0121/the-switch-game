{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Rectangle = require('./Rectangle');\n\nvar Intersects = require('../intersects/RectangleToRectangle');\n/**\r\n * Takes two Rectangles and first checks to see if they intersect.\r\n * If they intersect it will return the area of intersection in the `out` Rectangle.\r\n * If they do not intersect, the `out` Rectangle will have a width and height of zero.\r\n *\r\n * @function Phaser.Geom.Rectangle.Intersection\r\n * @since 3.11.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [rect,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} [out] - A Rectangle to store the intersection results in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The intersection result. If the width and height are zero, no intersection occurred.\r\n */\n\n\nvar Intersection = function Intersection(rectA, rectB, out) {\n  if (out === undefined) {\n    out = new Rectangle();\n  }\n\n  if (Intersects(rectA, rectB)) {\n    out.x = Math.max(rectA.x, rectB.x);\n    out.y = Math.max(rectA.y, rectB.y);\n    out.width = Math.min(rectA.right, rectB.right) - out.x;\n    out.height = Math.min(rectA.bottom, rectB.bottom) - out.y;\n  } else {\n    out.setEmpty();\n  }\n\n  return out;\n};\n\nmodule.exports = Intersection;","map":null,"metadata":{},"sourceType":"script"}