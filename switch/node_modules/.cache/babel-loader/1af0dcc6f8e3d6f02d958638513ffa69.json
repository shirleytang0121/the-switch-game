{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Events = require('./events');\n/**\r\n * @classdesc\r\n * Contains information about a specific button on a Gamepad.\r\n * Button objects are created automatically by the Gamepad as they are needed.\r\n *\r\n * @class Button\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Gamepad.Gamepad} pad - A reference to the Gamepad that this Button belongs to.\r\n * @param {integer} index - The index of this Button.\r\n */\n\n\nvar Button = new Class({\n  initialize: function Button(pad, index) {\n    /**\r\n     * A reference to the Gamepad that this Button belongs to.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#pad\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.0.0\r\n     */\n    this.pad = pad;\n    /**\r\n     * An event emitter to use to emit the button events.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = pad.manager;\n    /**\r\n     * The index of this Button.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#index\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.index = index;\n    /**\r\n     * Between 0 and 1.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#value\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.value = 0;\n    /**\r\n     * Can be set for analogue buttons to enable a 'pressure' threshold,\r\n     * before a button is considered as being 'pressed'.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#threshold\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.threshold = 1;\n    /**\r\n     * Is the Button being pressed down or not?\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#pressed\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.pressed = false;\n  },\n\n  /**\r\n   * Internal update handler for this Button.\r\n   * Called automatically by the Gamepad as part of its update.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Button#update\r\n   * @fires Phaser.Input.Gamepad.Events#BUTTON_DOWN\r\n   * @fires Phaser.Input.Gamepad.Events#BUTTON_UP\r\n   * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_DOWN\r\n   * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_UP\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The value of the button. Between 0 and 1.\r\n   */\n  update: function update(value) {\n    this.value = value;\n    var pad = this.pad;\n    var index = this.index;\n\n    if (value >= this.threshold) {\n      if (!this.pressed) {\n        this.pressed = true;\n        this.events.emit(Events.BUTTON_DOWN, pad, this, value);\n        this.pad.emit(Events.GAMEPAD_BUTTON_DOWN, index, value, this);\n      }\n    } else if (this.pressed) {\n      this.pressed = false;\n      this.events.emit(Events.BUTTON_UP, pad, this, value);\n      this.pad.emit(Events.GAMEPAD_BUTTON_UP, index, value, this);\n    }\n  },\n\n  /**\r\n   * Destroys this Button instance and releases external references it holds.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Button#destroy\r\n   * @since 3.10.0\r\n   */\n  destroy: function destroy() {\n    this.pad = null;\n    this.events = null;\n  }\n});\nmodule.exports = Button;","map":null,"metadata":{},"sourceType":"script"}