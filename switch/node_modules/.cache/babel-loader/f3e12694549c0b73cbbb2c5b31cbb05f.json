{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Group = require('../../gameobjects/group/Group');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @typedef {object} PhysicsGroupConfig\r\n * @extends GroupConfig\r\n *\r\n * @property {boolean} [collideWorldBounds=false] - Sets {@link Phaser.Physics.Arcade.Body#collideWorldBounds}.\r\n * @property {number} [accelerationX=0] - Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.x}.\r\n * @property {number} [accelerationY=0] - Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.y}.\r\n * @property {boolean} [allowDrag=true] - Sets {@link Phaser.Physics.Arcade.Body#allowDrag}.\r\n * @property {boolean} [allowGravity=true] - Sets {@link Phaser.Physics.Arcade.Body#allowGravity}.\r\n * @property {boolean} [allowRotation=true] - Sets {@link Phaser.Physics.Arcade.Body#allowRotation}.\r\n * @property {number} [bounceX=0] - Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.x}.\r\n * @property {number} [bounceY=0] - Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.y}.\r\n * @property {number} [dragX=0] - Sets {@link Phaser.Physics.Arcade.Body#drag drag.x}.\r\n * @property {number} [dragY=0] - Sets {@link Phaser.Physics.Arcade.Body#drag drag.y}.\r\n * @property {boolean} [enable=true] - Sets {@link Phaser.Physics.Arcade.Body#enable enable}.\r\n * @property {number} [gravityX=0] - Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.x}.\r\n * @property {number} [gravityY=0] - Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.y}.\r\n * @property {number} [frictionX=0] - Sets {@link Phaser.Physics.Arcade.Body#friction friction.x}.\r\n * @property {number} [frictionY=0] - Sets {@link Phaser.Physics.Arcade.Body#friction friction.y}.\r\n * @property {number} [velocityX=0] - Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.x}.\r\n * @property {number} [velocityY=0] - Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.y}.\r\n * @property {number} [angularVelocity=0] - Sets {@link Phaser.Physics.Arcade.Body#angularVelocity}.\r\n * @property {number} [angularAcceleration=0] - Sets {@link Phaser.Physics.Arcade.Body#angularAcceleration}.\r\n * @property {number} [angularDrag=0] - Sets {@link Phaser.Physics.Arcade.Body#angularDrag}.\r\n * @property {number} [mass=0] - Sets {@link Phaser.Physics.Arcade.Body#mass}.\r\n * @property {boolean} [immovable=false] - Sets {@link Phaser.Physics.Arcade.Body#immovable}.\r\n */\n\n/**\r\n * @typedef {object} PhysicsGroupDefaults\r\n *\r\n * @property {boolean} setCollideWorldBounds - As {@link Phaser.Physics.Arcade.Body#setCollideWorldBounds}.\r\n * @property {number} setAccelerationX - As {@link Phaser.Physics.Arcade.Body#setAccelerationX}.\r\n * @property {number} setAccelerationY - As {@link Phaser.Physics.Arcade.Body#setAccelerationY}.\r\n * @property {boolean} setAllowDrag - As {@link Phaser.Physics.Arcade.Body#setAllowDrag}.\r\n * @property {boolean} setAllowGravity - As {@link Phaser.Physics.Arcade.Body#setAllowGravity}.\r\n * @property {boolean} setAllowRotation - As {@link Phaser.Physics.Arcade.Body#setAllowRotation}.\r\n * @property {number} setBounceX - As {@link Phaser.Physics.Arcade.Body#setBounceX}.\r\n * @property {number} setBounceY - As {@link Phaser.Physics.Arcade.Body#setBounceY}.\r\n * @property {number} setDragX - As {@link Phaser.Physics.Arcade.Body#setDragX}.\r\n * @property {number} setDragY - As {@link Phaser.Physics.Arcade.Body#setDragY}.\r\n * @property {boolean} setEnable - As {@link Phaser.Physics.Arcade.Body#setEnable}.\r\n * @property {number} setGravityX - As {@link Phaser.Physics.Arcade.Body#setGravityX}.\r\n * @property {number} setGravityY - As {@link Phaser.Physics.Arcade.Body#setGravityY}.\r\n * @property {number} setFrictionX - As {@link Phaser.Physics.Arcade.Body#setFrictionX}.\r\n * @property {number} setFrictionY - As {@link Phaser.Physics.Arcade.Body#setFrictionY}.\r\n * @property {number} setVelocityX - As {@link Phaser.Physics.Arcade.Body#setVelocityX}.\r\n * @property {number} setVelocityY - As {@link Phaser.Physics.Arcade.Body#setVelocityY}.\r\n * @property {number} setAngularVelocity - As {@link Phaser.Physics.Arcade.Body#setAngularVelocity}.\r\n * @property {number} setAngularAcceleration - As {@link Phaser.Physics.Arcade.Body#setAngularAcceleration}.\r\n * @property {number} setAngularDrag - As {@link Phaser.Physics.Arcade.Body#setAngularDrag}.\r\n * @property {number} setMass - As {@link Phaser.Physics.Arcade.Body#setMass}.\r\n * @property {boolean} setImmovable - As {@link Phaser.Physics.Arcade.Body#setImmovable}.\r\n */\n\n/**\r\n * @classdesc\r\n * An Arcade Physics Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\r\n *\r\n * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.\r\n *\r\n * @class Group\r\n * @extends Phaser.GameObjects.Group\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|PhysicsGroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {PhysicsGroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n */\n\n\nvar PhysicsGroup = new Class({\n  Extends: Group,\n  initialize: function PhysicsGroup(world, scene, children, config) {\n    if (!children && !config) {\n      config = {\n        createCallback: this.createCallbackHandler,\n        removeCallback: this.removeCallbackHandler\n      };\n    } else if (IsPlainObject(children)) {\n      //  children is a plain object, so swizzle them:\n      config = children;\n      children = null;\n      config.createCallback = this.createCallbackHandler;\n      config.removeCallback = this.removeCallbackHandler;\n    } else if (Array.isArray(children) && IsPlainObject(children[0])) {\n      //  children is an array of plain objects\n      config = children;\n      children = null;\n      config.forEach(function (singleConfig) {\n        singleConfig.createCallback = this.createCallbackHandler;\n        singleConfig.removeCallback = this.removeCallbackHandler;\n      });\n    } else {\n      // config is not defined and children is not a plain object nor an array of plain objects\n      config = {\n        createCallback: this.createCallbackHandler,\n        removeCallback: this.removeCallbackHandler\n      };\n    }\n    /**\r\n     * The physics simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.world = world;\n    /**\r\n     * The class to create new Group members from.\r\n     * \r\n     * This should be either `Phaser.Physics.Arcade.Image`, `Phaser.Physics.Arcade.Sprite`, or a class extending one of those.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#classType\r\n     * @type {GroupClassTypeConstructor}\r\n     * @default ArcadeSprite\r\n     */\n\n    config.classType = GetFastValue(config, 'classType', ArcadeSprite);\n    /**\r\n     * The physics type of the Group's members.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#physicsType\r\n     * @type {integer}\r\n     * @default Phaser.Physics.Arcade.DYNAMIC_BODY\r\n     * @since 3.0.0\r\n     */\n\n    this.physicsType = CONST.DYNAMIC_BODY;\n    /**\r\n     * Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#defaults\r\n     * @type {PhysicsGroupDefaults}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaults = {\n      setCollideWorldBounds: GetFastValue(config, 'collideWorldBounds', false),\n      setAccelerationX: GetFastValue(config, 'accelerationX', 0),\n      setAccelerationY: GetFastValue(config, 'accelerationY', 0),\n      setAllowDrag: GetFastValue(config, 'allowDrag', true),\n      setAllowGravity: GetFastValue(config, 'allowGravity', true),\n      setAllowRotation: GetFastValue(config, 'allowRotation', true),\n      setBounceX: GetFastValue(config, 'bounceX', 0),\n      setBounceY: GetFastValue(config, 'bounceY', 0),\n      setDragX: GetFastValue(config, 'dragX', 0),\n      setDragY: GetFastValue(config, 'dragY', 0),\n      setEnable: GetFastValue(config, 'enable', true),\n      setGravityX: GetFastValue(config, 'gravityX', 0),\n      setGravityY: GetFastValue(config, 'gravityY', 0),\n      setFrictionX: GetFastValue(config, 'frictionX', 0),\n      setFrictionY: GetFastValue(config, 'frictionY', 0),\n      setVelocityX: GetFastValue(config, 'velocityX', 0),\n      setVelocityY: GetFastValue(config, 'velocityY', 0),\n      setAngularVelocity: GetFastValue(config, 'angularVelocity', 0),\n      setAngularAcceleration: GetFastValue(config, 'angularAcceleration', 0),\n      setAngularDrag: GetFastValue(config, 'angularDrag', 0),\n      setMass: GetFastValue(config, 'mass', 1),\n      setImmovable: GetFastValue(config, 'immovable', false)\n    };\n    Group.call(this, scene, children, config);\n  },\n\n  /**\r\n   * Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#createCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object being added.\r\n   */\n  createCallbackHandler: function createCallbackHandler(child) {\n    if (!child.body) {\n      this.world.enableBody(child, CONST.DYNAMIC_BODY);\n    }\n\n    var body = child.body;\n\n    for (var key in this.defaults) {\n      body[key](this.defaults[key]);\n    }\n  },\n\n  /**\r\n   * Disables a Game Object's Body. Called when a Group member is removed.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#removeCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object being removed.\r\n   */\n  removeCallbackHandler: function removeCallbackHandler(child) {\n    if (child.body) {\n      this.world.disableBody(child);\n    }\n  },\n\n  /**\r\n   * Sets the velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity.\r\n   * @param {number} y - The vertical velocity.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocity: function setVelocity(x, y, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.set(x + i * step, y + i * step);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The velocity value.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocityX: function setVelocityX(value, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.x = value + i * step;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The velocity value.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocityY: function setVelocityY(value, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.y = value + i * step;\n    }\n\n    return this;\n  }\n});\nmodule.exports = PhysicsGroup;","map":null,"metadata":{},"sourceType":"script"}