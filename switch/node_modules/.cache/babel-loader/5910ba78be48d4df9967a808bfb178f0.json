{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar InputEvents = require('../events');\n\nvar NOOP = require('../../utils/NOOP'); // https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n// https://patrickhlauke.github.io/touch/tests/results/\n// https://www.html5rocks.com/en/mobile/touch/\n\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberof Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar TouchManager = new Class({\n  initialize: function TouchManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#capture\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.capture = true;\n    /**\r\n     * A boolean that controls if the Touch Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Touch Event target, as defined in the Game Config.\r\n     * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#target\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.target;\n    /**\r\n     * The Touch Start event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchStart\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchStart = NOOP;\n    /**\r\n     * The Touch Move event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchMove\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchMove = NOOP;\n    /**\r\n     * The Touch End event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchEnd\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchEnd = NOOP;\n    /**\r\n     * The Touch Cancel event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchCancel\r\n     * @type {function}\r\n     * @since 3.15.0\r\n     */\n\n    this.onTouchCancel = NOOP;\n    /**\r\n     * The Touch Over event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchOver\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onTouchOver = NOOP;\n    /**\r\n     * The Touch Out event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchOut\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onTouchOut = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Touch Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#boot\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  boot: function boot() {\n    var config = this.manager.config;\n    this.enabled = config.inputTouch;\n    this.target = config.inputTouchEventTarget;\n    this.capture = config.inputTouchCapture;\n\n    if (!this.target) {\n      this.target = this.manager.game.canvas;\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n  },\n\n  /**\r\n   * Starts the Touch Event listeners running as long as an input target is set.\r\n   * \r\n   * This method is called automatically if Touch Input is enabled in the game config,\r\n   * which it is by default. However, you can call it manually should you need to\r\n   * delay input capturing until later in the game.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#startListeners\r\n   * @since 3.0.0\r\n   */\n  startListeners: function startListeners() {\n    var _this = this;\n\n    var canvas = this.manager.canvas;\n    var autoFocus = window && window.focus && this.manager.game.config.autoFocus;\n\n    this.onTouchStart = function (event) {\n      if (autoFocus) {\n        window.focus();\n      }\n\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        //  Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueTouchStart(event);\n\n      if (_this.capture && event.target === canvas) {\n        event.preventDefault();\n      }\n    };\n\n    this.onTouchMove = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        //  Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueTouchMove(event);\n\n      if (_this.capture) {\n        event.preventDefault();\n      }\n    };\n\n    this.onTouchEnd = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        //  Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueTouchEnd(event);\n\n      if (_this.capture && event.target === canvas) {\n        event.preventDefault();\n      }\n    };\n\n    this.onTouchCancel = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        //  Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueTouchCancel(event);\n\n      if (_this.capture) {\n        event.preventDefault();\n      }\n    };\n\n    this.onTouchOver = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.setCanvasOver(event);\n    };\n\n    this.onTouchOut = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.setCanvasOut(event);\n    };\n\n    var target = this.target;\n\n    if (!target) {\n      return;\n    }\n\n    var passive = {\n      passive: true\n    };\n    var nonPassive = {\n      passive: false\n    };\n    target.addEventListener('touchstart', this.onTouchStart, this.capture ? nonPassive : passive);\n    target.addEventListener('touchmove', this.onTouchMove, this.capture ? nonPassive : passive);\n    target.addEventListener('touchend', this.onTouchEnd, this.capture ? nonPassive : passive);\n    target.addEventListener('touchcancel', this.onTouchCancel, this.capture ? nonPassive : passive);\n    target.addEventListener('touchover', this.onTouchOver, this.capture ? nonPassive : passive);\n    target.addEventListener('touchout', this.onTouchOut, this.capture ? nonPassive : passive);\n\n    if (window) {\n      window.addEventListener('touchstart', this.onTouchStart, nonPassive);\n      window.addEventListener('touchend', this.onTouchEnd, nonPassive);\n    }\n\n    this.enabled = true;\n  },\n\n  /**\r\n   * Stops the Touch Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n   * @since 3.0.0\r\n   */\n  stopListeners: function stopListeners() {\n    var target = this.target;\n    target.removeEventListener('touchstart', this.onTouchStart);\n    target.removeEventListener('touchmove', this.onTouchMove);\n    target.removeEventListener('touchend', this.onTouchEnd);\n    target.removeEventListener('touchcancel', this.onTouchCancel);\n    target.removeEventListener('touchover', this.onTouchOver);\n    target.removeEventListener('touchout', this.onTouchOut);\n\n    if (window) {\n      window.removeEventListener('touchstart', this.onTouchStart);\n      window.removeEventListener('touchend', this.onTouchEnd);\n    }\n  },\n\n  /**\r\n   * Destroys this Touch Manager instance.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.stopListeners();\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = TouchManager;","map":null,"metadata":{},"sourceType":"script"}