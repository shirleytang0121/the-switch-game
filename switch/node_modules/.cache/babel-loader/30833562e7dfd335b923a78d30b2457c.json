{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CanvasInterpolation = require('../display/canvas/CanvasInterpolation');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar CONST = require('../const');\n\nvar Features = require('../device/Features');\n/**\r\n * Called automatically by Phaser.Game and responsible for creating the renderer it will use.\r\n *\r\n * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\r\n *\r\n * @function Phaser.Core.CreateRenderer\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance on which the renderer will be set.\r\n */\n\n\nvar CreateRenderer = function CreateRenderer(game) {\n  var config = game.config;\n\n  if ((config.customEnvironment || config.canvas) && config.renderType === CONST.AUTO) {\n    throw new Error('Must set explicit renderType in custom environment');\n  } //  Not a custom environment, didn't provide their own canvas and not headless, so determine the renderer:\n\n\n  if (!config.customEnvironment && !config.canvas && config.renderType !== CONST.HEADLESS) {\n    if (config.renderType === CONST.CANVAS || config.renderType !== CONST.CANVAS && !Features.webGL) {\n      if (Features.canvas) {\n        //  They requested Canvas and their browser supports it\n        config.renderType = CONST.CANVAS;\n      } else {\n        throw new Error('Cannot create Canvas or WebGL context, aborting.');\n      }\n    } else {\n      //  Game requested WebGL and browser says it supports it\n      config.renderType = CONST.WEBGL;\n    }\n  } //  Pixel Art mode?\n\n\n  if (!config.antialias) {\n    CanvasPool.disableSmoothing();\n  }\n\n  var baseSize = game.scale.baseSize;\n  var width = baseSize.width;\n  var height = baseSize.height; //  Does the game config provide its own canvas element to use?\n\n  if (config.canvas) {\n    game.canvas = config.canvas;\n    game.canvas.width = width;\n    game.canvas.height = height;\n  } else {\n    game.canvas = CanvasPool.create(game, width, height, config.renderType);\n  } //  Does the game config provide some canvas css styles to use?\n\n\n  if (config.canvasStyle) {\n    game.canvas.style = config.canvasStyle;\n  } //  Pixel Art mode?\n\n\n  if (!config.antialias) {\n    CanvasInterpolation.setCrisp(game.canvas);\n  }\n\n  if (config.renderType === CONST.HEADLESS) {\n    //  Nothing more to do here\n    return;\n  }\n\n  var CanvasRenderer;\n  var WebGLRenderer;\n\n  if (typeof WEBGL_RENDERER && typeof CANVAS_RENDERER) {\n    CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\n    WebGLRenderer = require('../renderer/webgl/WebGLRenderer'); //  Let the config pick the renderer type, as both are included\n\n    if (config.renderType === CONST.WEBGL) {\n      game.renderer = new WebGLRenderer(game);\n    } else {\n      game.renderer = new CanvasRenderer(game);\n      game.context = game.renderer.gameContext;\n    }\n  }\n\n  if (typeof WEBGL_RENDERER && !typeof CANVAS_RENDERER) {\n    WebGLRenderer = require('../renderer/webgl/WebGLRenderer'); //  Force the type to WebGL, regardless what was requested\n\n    config.renderType = CONST.WEBGL;\n    game.renderer = new WebGLRenderer(game);\n  }\n\n  if (!typeof WEBGL_RENDERER && typeof CANVAS_RENDERER) {\n    CanvasRenderer = require('../renderer/canvas/CanvasRenderer'); //  Force the type to Canvas, regardless what was requested\n\n    config.renderType = CONST.CANVAS;\n    game.renderer = new CanvasRenderer(game);\n    game.context = game.renderer.gameContext;\n  }\n};\n\nmodule.exports = CreateRenderer;","map":null,"metadata":{},"sourceType":"script"}