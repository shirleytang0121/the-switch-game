{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n/**\r\n * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n * disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByExclusion\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SetCollisionByExclusion = function SetCollisionByExclusion(indexes, collides, recalculateFaces, layer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (!Array.isArray(indexes)) {\n    indexes = [indexes];\n  } // Note: this only updates layer.collideIndexes for tile indexes found currently in the layer\n\n\n  for (var ty = 0; ty < layer.height; ty++) {\n    for (var tx = 0; tx < layer.width; tx++) {\n      var tile = layer.data[ty][tx];\n\n      if (tile && indexes.indexOf(tile.index) === -1) {\n        SetTileCollision(tile, collides);\n        SetLayerCollisionIndex(tile.index, collides, layer);\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionByExclusion;","map":null,"metadata":{},"sourceType":"script"}