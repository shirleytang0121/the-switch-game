{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Features = require('../../device/Features');\n\nvar InputEvents = require('../events');\n\nvar NOOP = require('../../utils/Class'); //  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberof Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar MouseManager = new Class({\n  initialize: function MouseManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#capture\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.capture = true;\n    /**\r\n     * A boolean that controls if the Mouse Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Touch Event target, as defined in the Game Config.\r\n     * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#target\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.target;\n    /**\r\n     * If the mouse has been pointer locked successfully this will be set to true.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#locked\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.locked = false;\n    /**\r\n     * The Mouse Move Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseMove\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseMove = NOOP;\n    /**\r\n     * The Mouse Down Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseDown\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseDown = NOOP;\n    /**\r\n     * The Mouse Up Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseUp\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseUp = NOOP;\n    /**\r\n     * The Mouse Over Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseOver\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onMouseOver = NOOP;\n    /**\r\n     * The Mouse Out Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseOut\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onMouseOut = NOOP;\n    /**\r\n     * Internal pointerLockChange handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.pointerLockChange = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Touch Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#boot\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  boot: function boot() {\n    var config = this.manager.config;\n    this.enabled = config.inputMouse;\n    this.target = config.inputMouseEventTarget;\n    this.capture = config.inputMouseCapture;\n\n    if (!this.target) {\n      this.target = this.manager.game.canvas;\n    }\n\n    if (config.disableContextMenu) {\n      this.disableContextMenu();\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n  },\n\n  /**\r\n   * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n   * \r\n   * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n   * \r\n   * Use this if you need to enable right-button mouse support in your game, and the browser\r\n   * menu keeps getting in the way.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Input.Mouse.MouseManager} This Mouse Manager instance.\r\n   */\n  disableContextMenu: function disableContextMenu() {\n    document.body.addEventListener('contextmenu', function (event) {\n      event.preventDefault();\n      return false;\n    });\n    return this;\n  },\n\n  /**\r\n   * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n   *\r\n   * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n   * the user presses an exit key.\r\n   *\r\n   * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n   * from the games Input Manager, with an `isPointerLocked` property.\r\n   *\r\n   * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n   * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n   * @since 3.0.0\r\n   */\n  requestPointerLock: function requestPointerLock() {\n    if (Features.pointerLock) {\n      var element = this.target;\n      element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\n      element.requestPointerLock();\n    }\n  },\n\n  /**\r\n   * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n   * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n   * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n   * @since 3.0.0\r\n   */\n  releasePointerLock: function releasePointerLock() {\n    if (Features.pointerLock) {\n      document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\n      document.exitPointerLock();\n    }\n  },\n\n  /**\r\n   * Starts the Mouse Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n   * @since 3.0.0\r\n   */\n  startListeners: function startListeners() {\n    var _this = this;\n\n    var canvas = this.manager.canvas;\n    var autoFocus = window && window.focus && this.manager.game.config.autoFocus;\n\n    this.onMouseMove = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueMouseMove(event);\n\n      if (_this.capture) {\n        event.preventDefault();\n      }\n    };\n\n    this.onMouseDown = function (event) {\n      if (autoFocus) {\n        window.focus();\n      }\n\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueMouseDown(event);\n\n      if (_this.capture && event.target === canvas) {\n        event.preventDefault();\n      }\n    };\n\n    this.onMouseUp = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.queueMouseUp(event);\n\n      if (_this.capture && event.target === canvas) {\n        event.preventDefault();\n      }\n    };\n\n    this.onMouseOver = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.setCanvasOver(event);\n    };\n\n    this.onMouseOut = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.manager.setCanvasOut(event);\n    };\n\n    var target = this.target;\n\n    if (!target) {\n      return;\n    }\n\n    var passive = {\n      passive: true\n    };\n    var nonPassive = {\n      passive: false\n    };\n    target.addEventListener('mousemove', this.onMouseMove, this.capture ? nonPassive : passive);\n    target.addEventListener('mousedown', this.onMouseDown, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseup', this.onMouseUp, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseover', this.onMouseOver, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseout', this.onMouseOut, this.capture ? nonPassive : passive);\n\n    if (window) {\n      window.addEventListener('mousedown', this.onMouseDown, nonPassive);\n      window.addEventListener('mouseup', this.onMouseUp, nonPassive);\n    }\n\n    if (Features.pointerLock) {\n      this.pointerLockChange = function (event) {\n        var element = _this.target;\n        _this.locked = document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ? true : false;\n\n        _this.manager.queue.push(event);\n      };\n\n      document.addEventListener('pointerlockchange', this.pointerLockChange, true);\n      document.addEventListener('mozpointerlockchange', this.pointerLockChange, true);\n      document.addEventListener('webkitpointerlockchange', this.pointerLockChange, true);\n    }\n\n    this.enabled = true;\n  },\n\n  /**\r\n   * Stops the Mouse Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n   * @since 3.0.0\r\n   */\n  stopListeners: function stopListeners() {\n    var target = this.target;\n    target.removeEventListener('mousemove', this.onMouseMove);\n    target.removeEventListener('mousedown', this.onMouseDown);\n    target.removeEventListener('mouseup', this.onMouseUp);\n    target.removeEventListener('mouseover', this.onMouseOver);\n    target.removeEventListener('mouseout', this.onMouseOut);\n\n    if (window) {\n      window.removeEventListener('mousedown', this.onMouseDown);\n      window.removeEventListener('mouseup', this.onMouseUp);\n    }\n\n    if (Features.pointerLock) {\n      document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\n      document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\n      document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\n    }\n  },\n\n  /**\r\n   * Destroys this Mouse Manager instance.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.stopListeners();\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = MouseManager;","map":null,"metadata":{},"sourceType":"script"}