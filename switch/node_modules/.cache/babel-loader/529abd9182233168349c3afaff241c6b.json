{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Vector2 = require('../math/Vector2');\n/**\r\n * Iterate through the items array changing the position of each element to be that of the element that came before\r\n * it in the array (or after it if direction = 1)\r\n * \r\n * The first items position is set to x/y.\r\n * \r\n * The final x/y coords are returned\r\n *\r\n * @function Phaser.Actions.ShiftPosition\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items]\r\n * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {number} x - The x coordinate to place the first item in the array at.\r\n * @param {number} y - The y coordinate to place the first item in the array at.\r\n * @param {integer} [direction=0] - The iteration direction. 0 = first to last and 1 = last to first.\r\n * @param {(Phaser.Math.Vector2|object)} [output] - An optional objec to store the final objects position in.\r\n *\r\n * @return {Phaser.Math.Vector2} The output vector.\r\n */\n\n\nvar ShiftPosition = function ShiftPosition(items, x, y, direction, output) {\n  if (direction === undefined) {\n    direction = 0;\n  }\n\n  if (output === undefined) {\n    output = new Vector2();\n  }\n\n  var px;\n  var py;\n\n  if (items.length > 1) {\n    var i;\n    var cx;\n    var cy;\n    var cur;\n\n    if (direction === 0) {\n      //  Bottom to Top\n      var len = items.length - 1;\n      px = items[len].x;\n      py = items[len].y;\n\n      for (i = len - 1; i >= 0; i--) {\n        //  Current item\n        cur = items[i]; //  Get current item x/y, to be passed to the next item in the list\n\n        cx = cur.x;\n        cy = cur.y; //  Set current item to the previous items x/y\n\n        cur.x = px;\n        cur.y = py; //  Set current as previous\n\n        px = cx;\n        py = cy;\n      } //  Update the head item to the new x/y coordinates\n\n\n      items[len].x = x;\n      items[len].y = y;\n    } else {\n      //  Top to Bottom\n      px = items[0].x;\n      py = items[0].y;\n\n      for (i = 1; i < items.length; i++) {\n        //  Current item\n        cur = items[i]; //  Get current item x/y, to be passed to the next item in the list\n\n        cx = cur.x;\n        cy = cur.y; //  Set current item to the previous items x/y\n\n        cur.x = px;\n        cur.y = py; //  Set current as previous\n\n        px = cx;\n        py = cy;\n      } //  Update the head item to the new x/y coordinates\n\n\n      items[0].x = x;\n      items[0].y = y;\n    }\n  } else {\n    px = items[0].x;\n    py = items[0].y;\n    items[0].x = x;\n    items[0].y = y;\n  } //  Return the final set of coordinates as they're effectively lost from the shift and may be needed\n\n\n  output.x = px;\n  output.y = py;\n  return output;\n};\n\nmodule.exports = ShiftPosition;","map":null,"metadata":{},"sourceType":"script"}