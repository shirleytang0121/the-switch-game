{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Mesh#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Mesh} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar MeshWebGLRenderer = function MeshWebGLRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  renderer.setPipeline(pipeline, src);\n  var camMatrix = pipeline._tempMatrix1;\n  var spriteMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  spriteMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    spriteMatrix.e = src.x;\n    spriteMatrix.f = src.y; //  Multiply by the Sprite matrix, store result in calcMatrix\n\n    camMatrix.multiply(spriteMatrix, calcMatrix);\n  } else {\n    spriteMatrix.e -= camera.scrollX * src.scrollFactorX;\n    spriteMatrix.f -= camera.scrollY * src.scrollFactorY; //  Multiply by the Sprite matrix, store result in calcMatrix\n\n    camMatrix.multiply(spriteMatrix, calcMatrix);\n  }\n\n  var frame = src.frame;\n  var texture = frame.glTexture;\n  var vertices = src.vertices;\n  var uvs = src.uv;\n  var colors = src.colors;\n  var alphas = src.alphas;\n  var meshVerticesLength = vertices.length;\n  var vertexCount = Math.floor(meshVerticesLength * 0.5);\n\n  if (pipeline.vertexCount + vertexCount > pipeline.vertexCapacity) {\n    pipeline.flush();\n  }\n\n  pipeline.setTexture2D(texture, 0);\n  var vertexViewF32 = pipeline.vertexViewF32;\n  var vertexViewU32 = pipeline.vertexViewU32;\n  var vertexOffset = pipeline.vertexCount * pipeline.vertexComponentCount - 1;\n  var colorIndex = 0;\n  var tintEffect = src.tintFill;\n\n  for (var i = 0; i < meshVerticesLength; i += 2) {\n    var x = vertices[i + 0];\n    var y = vertices[i + 1];\n    var tx = x * calcMatrix.a + y * calcMatrix.c + calcMatrix.e;\n    var ty = x * calcMatrix.b + y * calcMatrix.d + calcMatrix.f;\n\n    if (camera.roundPixels) {\n      tx = Math.round(tx);\n      ty = Math.round(ty);\n    }\n\n    vertexViewF32[++vertexOffset] = tx;\n    vertexViewF32[++vertexOffset] = ty;\n    vertexViewF32[++vertexOffset] = uvs[i + 0];\n    vertexViewF32[++vertexOffset] = uvs[i + 1];\n    vertexViewF32[++vertexOffset] = tintEffect;\n    vertexViewU32[++vertexOffset] = Utils.getTintAppendFloatAlpha(colors[colorIndex], camera.alpha * alphas[colorIndex]);\n    colorIndex++;\n  }\n\n  pipeline.vertexCount += vertexCount;\n};\n\nmodule.exports = MeshWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}