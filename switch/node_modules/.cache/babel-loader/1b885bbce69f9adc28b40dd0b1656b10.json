{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Body = require('../lib/body/Body');\n/**\r\n * A component to apply force to Matter.js bodies.\r\n *\r\n * @name Phaser.Physics.Matter.Components.Force\r\n * @since 3.0.0\r\n */\n\n\nvar Force = {\n  //  force = vec2 / point\n\n  /**\r\n   * Applies a force to a body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#applyForce\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  applyForce: function applyForce(force) {\n    this._tempVec2.set(this.body.position.x, this.body.position.y);\n\n    Body.applyForce(this.body, this._tempVec2, force);\n    return this;\n  },\n\n  /**\r\n   * Applies a force to a body from a given position.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#applyForceFrom\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} position - The position in which the force comes from.\r\n   * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  applyForceFrom: function applyForceFrom(position, force) {\n    Body.applyForce(this.body, position, force);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the forward position of the body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrust\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrust: function thrust(speed) {\n    var angle = this.body.angle;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the left position of the body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustLeft\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustLeft: function thrustLeft(speed) {\n    var angle = this.body.angle - Math.PI / 2;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the right position of the body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustRight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustRight: function thrustRight(speed) {\n    var angle = this.body.angle + Math.PI / 2;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the back position of the body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustBack\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustBack: function thrustBack(speed) {\n    var angle = this.body.angle - Math.PI;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  }\n};\nmodule.exports = Force;","map":null,"metadata":{},"sourceType":"script"}