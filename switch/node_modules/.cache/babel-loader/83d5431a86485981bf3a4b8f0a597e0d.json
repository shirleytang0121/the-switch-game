{"ast":null,"code":"var AWS = require('./core');\n/**\r\n * Represents your AWS security credentials, specifically the\r\n * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.\r\n * Creating a `Credentials` object allows you to pass around your\r\n * security information to configuration and service objects.\r\n *\r\n * Note that this class typically does not need to be constructed manually,\r\n * as the {AWS.Config} and {AWS.Service} classes both accept simple\r\n * options hashes with the three keys. These structures will be converted\r\n * into Credentials objects automatically.\r\n *\r\n * ## Expiring and Refreshing Credentials\r\n *\r\n * Occasionally credentials can expire in the middle of a long-running\r\n * application. In this case, the SDK will automatically attempt to\r\n * refresh the credentials from the storage location if the Credentials\r\n * class implements the {refresh} method.\r\n *\r\n * If you are implementing a credential storage location, you\r\n * will want to create a subclass of the `Credentials` class and\r\n * override the {refresh} method. This method allows credentials to be\r\n * retrieved from the backing store, be it a file system, database, or\r\n * some network storage. The method should reset the credential attributes\r\n * on the object.\r\n *\r\n * @!attribute expired\r\n *   @return [Boolean] whether the credentials have been expired and\r\n *     require a refresh. Used in conjunction with {expireTime}.\r\n * @!attribute expireTime\r\n *   @return [Date] a time when credentials should be considered expired. Used\r\n *     in conjunction with {expired}.\r\n * @!attribute accessKeyId\r\n *   @return [String] the AWS access key ID\r\n * @!attribute secretAccessKey\r\n *   @return [String] the AWS secret access key\r\n * @!attribute sessionToken\r\n *   @return [String] an optional AWS session token\r\n */\n\n\nAWS.Credentials = AWS.util.inherit({\n  /**\r\n   * A credentials object can be created using positional arguments or an options\r\n   * hash.\r\n   *\r\n   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)\r\n   *   Creates a Credentials object with a given set of credential information\r\n   *   as positional arguments.\r\n   *   @param accessKeyId [String] the AWS access key ID\r\n   *   @param secretAccessKey [String] the AWS secret access key\r\n   *   @param sessionToken [String] the optional AWS session token\r\n   *   @example Create a credentials object with AWS credentials\r\n   *     var creds = new AWS.Credentials('akid', 'secret', 'session');\r\n   * @overload AWS.Credentials(options)\r\n   *   Creates a Credentials object with a given set of credential information\r\n   *   as an options hash.\r\n   *   @option options accessKeyId [String] the AWS access key ID\r\n   *   @option options secretAccessKey [String] the AWS secret access key\r\n   *   @option options sessionToken [String] the optional AWS session token\r\n   *   @example Create a credentials object with AWS credentials\r\n   *     var creds = new AWS.Credentials({\r\n   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'\r\n   *     });\r\n   */\n  constructor: function Credentials() {\n    // hide secretAccessKey from being displayed with util.inspect\n    AWS.util.hideProperties(this, ['secretAccessKey']);\n    this.expired = false;\n    this.expireTime = null;\n\n    if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      var creds = arguments[0].credentials || arguments[0];\n      this.accessKeyId = creds.accessKeyId;\n      this.secretAccessKey = creds.secretAccessKey;\n      this.sessionToken = creds.sessionToken;\n    } else {\n      this.accessKeyId = arguments[0];\n      this.secretAccessKey = arguments[1];\n      this.sessionToken = arguments[2];\n    }\n  },\n\n  /**\r\n   * @return [Integer] the number of seconds before {expireTime} during which\r\n   *   the credentials will be considered expired.\r\n   */\n  expiryWindow: 15,\n\n  /**\r\n   * @return [Boolean] whether the credentials object should call {refresh}\r\n   * @note Subclasses should override this method to provide custom refresh\r\n   *   logic.\r\n   */\n  needsRefresh: function needsRefresh() {\n    var currentTime = AWS.util.date.getDate().getTime();\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n\n    if (this.expireTime && adjustedTime > this.expireTime) {\n      return true;\n    } else {\n      return this.expired || !this.accessKeyId || !this.secretAccessKey;\n    }\n  },\n\n  /**\r\n   * Gets the existing credentials, refreshing them if they are not yet loaded\r\n   * or have expired. Users should call this method before using {refresh},\r\n   * as this will not attempt to reload credentials when they are already\r\n   * loaded into the object.\r\n   *\r\n   * @callback callback function(err)\r\n   *   When this callback is called with no error, it means either credentials\r\n   *   do not need to be refreshed or refreshed credentials information has\r\n   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\r\n   *   and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   */\n  get: function get(callback) {\n    var self = this;\n\n    if (this.needsRefresh()) {\n      this.refresh(function (err) {\n        if (!err) self.expired = false; // reset expired flag\n\n        if (callback) callback(err);\n      });\n    } else if (callback) {\n      callback();\n    }\n  },\n\n  /**\r\n   * @!method  getPromise()\r\n   *   Returns a 'thenable' promise.\r\n   *   Gets the existing credentials, refreshing them if they are not yet loaded\r\n   *   or have expired. Users should call this method before using {refresh},\r\n   *   as this will not attempt to reload credentials when they are already\r\n   *   loaded into the object.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function()\r\n   *     Called if the promise is fulfilled. When this callback is called, it\r\n   *     means either credentials do not need to be refreshed or refreshed\r\n   *     credentials information has been loaded into the object (as the\r\n   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\r\n   *   @callback rejectedCallback function(err)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] if an error occurred, this value will be filled\r\n   *   @return [Promise] A promise that represents the state of the `get` call.\r\n   *   @example Calling the `getPromise` method.\r\n   *     var promise = credProvider.getPromise();\r\n   *     promise.then(function() { ... }, function(err) { ... });\r\n   */\n\n  /**\r\n   * @!method  refreshPromise()\r\n   *   Returns a 'thenable' promise.\r\n   *   Refreshes the credentials. Users should call {get} before attempting\r\n   *   to forcibly refresh credentials.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function()\r\n   *     Called if the promise is fulfilled. When this callback is called, it\r\n   *     means refreshed credentials information has been loaded into the object\r\n   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\r\n   *   @callback rejectedCallback function(err)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] if an error occurred, this value will be filled\r\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\r\n   *   @example Calling the `refreshPromise` method.\r\n   *     var promise = credProvider.refreshPromise();\r\n   *     promise.then(function() { ... }, function(err) { ... });\r\n   */\n\n  /**\r\n   * Refreshes the credentials. Users should call {get} before attempting\r\n   * to forcibly refresh credentials.\r\n   *\r\n   * @callback callback function(err)\r\n   *   When this callback is called with no error, it means refreshed\r\n   *   credentials information has been loaded into the object (as the\r\n   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @note Subclasses should override this class to reset the\r\n   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}\r\n   *   on the credentials object and then call the callback with\r\n   *   any error information.\r\n   * @see get\r\n   */\n  refresh: function refresh(callback) {\n    this.expired = false;\n    callback();\n  }\n});\n/**\r\n * @api private\r\n */\n\nAWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);\n  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);\n};\n/**\r\n * @api private\r\n */\n\n\nAWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getPromise;\n  delete this.prototype.refreshPromise;\n};\n\nAWS.util.addPromises(AWS.Credentials);","map":null,"metadata":{},"sourceType":"script"}