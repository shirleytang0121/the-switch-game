{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _actions = require('./actions');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar complete = function complete(action, success, payload) {\n  return (0, _extends3.default)({}, action, {\n    payload: payload,\n    meta: (0, _extends3.default)({}, action.meta, {\n      success: success,\n      completed: true\n    })\n  });\n};\n\nvar send = function send(action, dispatch, config) {\n  var retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var metadata = action.meta.offline;\n  dispatch((0, _actions.busy)(true));\n  return config.effect(metadata.effect, action).then(function (result) {\n    var commitAction = metadata.commit || (0, _extends3.default)({}, config.defaultCommit, {\n      meta: (0, _extends3.default)({}, config.defaultCommit.meta, {\n        offlineAction: action\n      })\n    });\n\n    try {\n      dispatch(complete(commitAction, true, result));\n    } catch (e) {\n      dispatch(complete({\n        type: _constants.JS_ERROR,\n        payload: e\n      }, false));\n    }\n  }).catch(function () {\n    var _ref = (0, _asyncToGenerator3.default)(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee(error) {\n      var rollbackAction, mustDiscard, delay;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              rollbackAction = metadata.rollback || (0, _extends3.default)({}, config.defaultRollback, {\n                meta: (0, _extends3.default)({}, config.defaultRollback.meta, {\n                  offlineAction: action\n                })\n              }); // discard\n\n              mustDiscard = true;\n              _context.prev = 2;\n              _context.next = 5;\n              return config.discard(error, action, retries);\n\n            case 5:\n              mustDiscard = _context.sent;\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context['catch'](2);\n              console.warn(_context.t0);\n\n            case 11:\n              if (mustDiscard) {\n                _context.next = 16;\n                break;\n              }\n\n              delay = config.retry(action, retries);\n\n              if (!(delay != null)) {\n                _context.next = 16;\n                break;\n              }\n\n              dispatch((0, _actions.scheduleRetry)(delay));\n              return _context.abrupt('return');\n\n            case 16:\n              dispatch(complete(rollbackAction, false, error));\n\n            case 17:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, undefined, [[2, 8]]);\n    }));\n\n    return function (_x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nexports.default = send;","map":null,"metadata":{},"sourceType":"script"}