{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar OS = require('./OS');\n\nvar Browser = require('./Browser');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n/**\r\n * Determines the features of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.features` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Features\r\n * @since 3.0.0\r\n * \r\n * @property {?boolean} canvasBitBltShift - True if canvas supports a 'copy' bitblt onto itself when the source and destination regions overlap.\r\n * @property {boolean} canvas - Is canvas available?\r\n * @property {boolean} file - Is file available?\r\n * @property {boolean} fileSystem - Is fileSystem available?\r\n * @property {boolean} getUserMedia - Does the device support the getUserMedia API?\r\n * @property {boolean} littleEndian - Is the device big or little endian? (only detected if the browser supports TypedArrays)\r\n * @property {boolean} localStorage - Is localStorage available?\r\n * @property {boolean} pointerLock - Is Pointer Lock available?\r\n * @property {boolean} support32bit - Does the device context support 32bit pixel manipulation using array buffer views?\r\n * @property {boolean} vibration - Does the device support the Vibration API?\r\n * @property {boolean} webGL - Is webGL available?\r\n * @property {boolean} worker - Is worker available?\r\n */\n\n\nvar Features = {\n  canvas: false,\n  canvasBitBltShift: null,\n  file: false,\n  fileSystem: false,\n  getUserMedia: true,\n  littleEndian: false,\n  localStorage: false,\n  pointerLock: false,\n  support32bit: false,\n  vibration: false,\n  webGL: false,\n  worker: false\n}; // Check Little or Big Endian system.\n// @author Matt DesLauriers (@mattdesl)\n\nfunction checkIsLittleEndian() {\n  var a = new ArrayBuffer(4);\n  var b = new Uint8Array(a);\n  var c = new Uint32Array(a);\n  b[0] = 0xa1;\n  b[1] = 0xb2;\n  b[2] = 0xc3;\n  b[3] = 0xd4;\n\n  if (c[0] === 0xd4c3b2a1) {\n    return true;\n  }\n\n  if (c[0] === 0xa1b2c3d4) {\n    return false;\n  } else {\n    //  Could not determine endianness\n    return null;\n  }\n}\n\nfunction init() {\n  Features.canvas = !!window['CanvasRenderingContext2D'] || OS.cocoonJS;\n\n  try {\n    Features.localStorage = !!localStorage.getItem;\n  } catch (error) {\n    Features.localStorage = false;\n  }\n\n  Features.file = !!window['File'] && !!window['FileReader'] && !!window['FileList'] && !!window['Blob'];\n  Features.fileSystem = !!window['requestFileSystem'];\n  var isUint8 = false;\n\n  var testWebGL = function testWebGL() {\n    if (window['WebGLRenderingContext']) {\n      try {\n        var canvas = CanvasPool.createWebGL(this);\n\n        if (OS.cocoonJS) {\n          canvas.screencanvas = false;\n        }\n\n        var ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n        var canvas2D = CanvasPool.create2D(this);\n        var ctx2D = canvas2D.getContext('2d'); //  Can't be done on a webgl context\n\n        var image = ctx2D.createImageData(1, 1); //  Test to see if ImageData uses CanvasPixelArray or Uint8ClampedArray.\n        //  @author Matt DesLauriers (@mattdesl)\n\n        isUint8 = image.data instanceof Uint8ClampedArray;\n        CanvasPool.remove(canvas);\n        CanvasPool.remove(canvas2D);\n        return !!ctx;\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return false;\n  };\n\n  Features.webGL = testWebGL();\n  Features.worker = !!window['Worker'];\n  Features.pointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;\n  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;\n  window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n  Features.getUserMedia = Features.getUserMedia && !!navigator.getUserMedia && !!window.URL; // Older versions of firefox (< 21) apparently claim support but user media does not actually work\n\n  if (Browser.firefox && Browser.firefoxVersion < 21) {\n    Features.getUserMedia = false;\n  } // Excludes iOS versions as they generally wrap UIWebView (eg. Safari WebKit) and it\n  // is safer to not try and use the fast copy-over method.\n\n\n  if (!OS.iOS && (Browser.ie || Browser.firefox || Browser.chrome)) {\n    Features.canvasBitBltShift = true;\n  } // Known not to work\n\n\n  if (Browser.safari || Browser.mobileSafari) {\n    Features.canvasBitBltShift = false;\n  }\n\n  navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;\n\n  if (navigator.vibrate) {\n    Features.vibration = true;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && typeof Uint32Array !== 'undefined') {\n    Features.littleEndian = checkIsLittleEndian();\n  }\n\n  Features.support32bit = typeof ArrayBuffer !== 'undefined' && typeof Uint8ClampedArray !== 'undefined' && typeof Int32Array !== 'undefined' && Features.littleEndian !== null && isUint8;\n  return Features;\n}\n\nmodule.exports = init();","map":null,"metadata":{},"sourceType":"script"}