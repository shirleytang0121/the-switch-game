{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CustomMap = require('../structs/Map');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n/**\r\n * @classdesc\r\n * The BaseCache is a base Cache class that can be used for storing references to any kind of data.\r\n *\r\n * Data can be added, retrieved and removed based on the given keys.\r\n *\r\n * Keys are string-based.\r\n *\r\n * @class BaseCache\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar BaseCache = new Class({\n  initialize: function BaseCache() {\n    /**\r\n     * The Map in which the cache objects are stored.\r\n     *\r\n     * You can query the Map directly or use the BaseCache methods.\r\n     *\r\n     * @name Phaser.Cache.BaseCache#entries\r\n     * @type {Phaser.Structs.Map.<String, *>}\r\n     * @since 3.0.0\r\n     */\n    this.entries = new CustomMap();\n    /**\r\n     * An instance of EventEmitter used by the cache to emit related events.\r\n     *\r\n     * @name Phaser.Cache.BaseCache#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = new EventEmitter();\n  },\n\n  /**\r\n   * Adds an item to this cache. The item is referenced by a unique string, which you are responsible\r\n   * for setting and keeping track of. The item can only be retrieved by using this string.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#add\r\n   * @fires Phaser.Cache.Events#ADD\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key by which the data added to the cache will be referenced.\r\n   * @param {*} data - The data to be stored in the cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n   */\n  add: function add(key, data) {\n    this.entries.set(key, data);\n    this.events.emit(Events.ADD, this, key, data);\n    return this;\n  },\n\n  /**\r\n   * Checks if this cache contains an item matching the given key.\r\n   * This performs the same action as `BaseCache.exists`.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#has\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be checked in this cache.\r\n   *\r\n   * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n   */\n  has: function has(key) {\n    return this.entries.has(key);\n  },\n\n  /**\r\n   * Checks if this cache contains an item matching the given key.\r\n   * This performs the same action as `BaseCache.has` and is called directly by the Loader.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#exists\r\n   * @since 3.7.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be checked in this cache.\r\n   *\r\n   * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n   */\n  exists: function exists(key) {\n    return this.entries.has(key);\n  },\n\n  /**\r\n   * Gets an item from this cache based on the given key.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be retrieved from this cache.\r\n   *\r\n   * @return {*} The item in the cache, or `null` if no item matching the given key was found.\r\n   */\n  get: function get(key) {\n    return this.entries.get(key);\n  },\n\n  /**\r\n   * Removes and item from this cache based on the given key.\r\n   *\r\n   * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\r\n   * No additional checks are done on the item removed. If other systems or parts of your game code\r\n   * are relying on this item, it is up to you to sever those relationships prior to removing the item.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#remove\r\n   * @fires Phaser.Cache.Events#REMOVE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to remove from the cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n   */\n  remove: function remove(key) {\n    var entry = this.get(key);\n\n    if (entry) {\n      this.entries.delete(key);\n      this.events.emit(Events.REMOVE, this, key, entry.data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Destroys this cache and all items within it.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.entries.clear();\n    this.events.removeAllListeners();\n    this.entries = null;\n    this.events = null;\n  }\n});\nmodule.exports = BaseCache;","map":null,"metadata":{},"sourceType":"script"}