{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enhanceReducer = undefined;\n\nvar _toArray2 = require('babel-runtime/helpers/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global $Shape */\n\n\nvar enqueue = function enqueue(state, action) {\n  var transaction = state.lastTransaction + 1;\n  var stamped = (0, _extends3.default)({}, action, {\n    meta: (0, _extends3.default)({}, action.meta, {\n      transaction: transaction\n    })\n  });\n  var outbox = state.outbox;\n  return (0, _extends3.default)({}, state, {\n    lastTransaction: transaction,\n    outbox: [].concat((0, _toConsumableArray3.default)(outbox), [stamped])\n  });\n};\n\nvar dequeue = function dequeue(state) {\n  var _state$outbox = (0, _toArray3.default)(state.outbox),\n      rest = _state$outbox.slice(1);\n\n  return (0, _extends3.default)({}, state, {\n    outbox: rest,\n    retryCount: 0,\n    busy: false\n  });\n};\n\nvar initialState = {\n  busy: false,\n  lastTransaction: 0,\n  online: false,\n  outbox: [],\n  retryCount: 0,\n  retryScheduled: false,\n  netInfo: {\n    isConnectionExpensive: null,\n    reach: 'NONE'\n  }\n}; // @TODO: the typing of this is all kinds of wack\n\nvar offlineUpdater = function offlineUpdater() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1]; // Update online/offline status\n\n  if (action.type === _constants.OFFLINE_STATUS_CHANGED && action.payload && typeof action.payload.online === 'boolean') {\n    return (0, _extends3.default)({}, state, {\n      online: action.payload.online,\n      netInfo: action.payload.netInfo\n    });\n  }\n\n  if (action.type === _constants.PERSIST_REHYDRATE) {\n    return (0, _extends3.default)({}, state, action.payload.offline, {\n      online: state.online,\n      netInfo: state.netInfo,\n      retryScheduled: initialState.retryScheduled,\n      retryCount: initialState.retryCount,\n      busy: initialState.busy\n    });\n  }\n\n  if (action.type === _constants.OFFLINE_SCHEDULE_RETRY) {\n    return (0, _extends3.default)({}, state, {\n      busy: false,\n      retryScheduled: true,\n      retryCount: state.retryCount + 1\n    });\n  }\n\n  if (action.type === _constants.OFFLINE_COMPLETE_RETRY) {\n    return (0, _extends3.default)({}, state, {\n      retryScheduled: false\n    });\n  }\n\n  if (action.type === _constants.OFFLINE_BUSY && action.payload && typeof action.payload.busy === 'boolean') {\n    return (0, _extends3.default)({}, state, {\n      busy: action.payload.busy\n    });\n  } // Add offline actions to queue\n\n\n  if (action.meta && action.meta.offline) {\n    return enqueue(state, action);\n  } // Remove completed actions from queue (success or fail)\n\n\n  if (action.meta && action.meta.completed === true) {\n    return dequeue(state);\n  }\n\n  if (action.type === _constants.RESET_STATE) {\n    return (0, _extends3.default)({}, initialState, {\n      online: state.online,\n      netInfo: state.netInfo\n    });\n  }\n\n  return state;\n};\n\nvar enhanceReducer = exports.enhanceReducer = function enhanceReducer(reducer, config) {\n  return function (state, action) {\n    var offlineState = void 0;\n    var restState = void 0;\n\n    if (typeof state !== 'undefined') {\n      offlineState = config.offlineStateLens(state).get;\n      restState = config.offlineStateLens(state).set();\n    }\n\n    return config.offlineStateLens(reducer(restState, action)).set(offlineUpdater(offlineState, action));\n  };\n};","map":null,"metadata":{},"sourceType":"script"}