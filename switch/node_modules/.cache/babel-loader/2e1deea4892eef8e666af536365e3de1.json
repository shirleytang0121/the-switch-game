{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetPoint = require('./GetPoint');\n\nvar Perimeter = require('./Perimeter'); //  Return an array of points from the perimeter of the rectangle\n//  each spaced out based on the quantity or step required\n\n/**\r\n * Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\r\n *\r\n * @function Phaser.Geom.Rectangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectangle - The Rectangle object to get the points from.\r\n * @param {number} step - Step between points. Used to calculate the number of points to return when quantity is falsy. Ignored if quantity is positive.\r\n * @param {integer} quantity - The number of evenly spaced points from the rectangles perimeter to return. If falsy, step param will be used to calculate the number of points.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array to store the points in.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points from the perimeter of the rectangle.\r\n */\n\n\nvar GetPoints = function GetPoints(rectangle, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  } //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n\n  if (!quantity) {\n    quantity = Perimeter(rectangle) / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var position = i / quantity;\n    out.push(GetPoint(rectangle, position));\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":null,"metadata":{},"sourceType":"script"}