{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Defaults = require('../tween/Defaults');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar GetBoolean = require('./GetBoolean');\n\nvar GetEaseFunction = require('./GetEaseFunction');\n\nvar GetNewValue = require('./GetNewValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar GetValueOp = require('./GetValueOp');\n\nvar Tween = require('../tween/Tween');\n\nvar TweenData = require('../tween/TweenData');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tweens.Builders.NumberTweenBuilder\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)} parent - [description]\r\n * @param {object} config - [description]\r\n * @param {Phaser.Tweens.TweenConfigDefaults} defaults - [description]\r\n *\r\n * @return {Phaser.Tweens.Tween} [description]\r\n */\n\n\nvar NumberTweenBuilder = function NumberTweenBuilder(parent, config, defaults) {\n  if (defaults === undefined) {\n    defaults = Defaults;\n  } //  var tween = this.tweens.addCounter({\n  //      from: 100,\n  //      to: 200,\n  //      ... (normal tween properties)\n  //  })\n  //\n  //  Then use it in your game via:\n  //\n  //  tween.getValue()\n\n\n  var from = GetValue(config, 'from', 0);\n  var to = GetValue(config, 'to', 1);\n  var targets = [{\n    value: from\n  }];\n  var delay = GetNewValue(config, 'delay', defaults.delay);\n  var duration = GetNewValue(config, 'duration', defaults.duration);\n  var easeParams = GetValue(config, 'easeParams', defaults.easeParams);\n  var ease = GetEaseFunction(GetValue(config, 'ease', defaults.ease), easeParams);\n  var hold = GetNewValue(config, 'hold', defaults.hold);\n  var repeat = GetNewValue(config, 'repeat', defaults.repeat);\n  var repeatDelay = GetNewValue(config, 'repeatDelay', defaults.repeatDelay);\n  var yoyo = GetBoolean(config, 'yoyo', defaults.yoyo);\n  var data = [];\n  var ops = GetValueOp('value', to);\n  var tweenData = TweenData(targets[0], 'value', ops.getEnd, ops.getStart, ease, delay, duration, yoyo, hold, repeat, repeatDelay, false, false);\n  tweenData.start = from;\n  tweenData.current = from;\n  tweenData.to = to;\n  data.push(tweenData);\n  var tween = new Tween(parent, data, targets);\n  tween.offset = GetAdvancedValue(config, 'offset', null);\n  tween.completeDelay = GetAdvancedValue(config, 'completeDelay', 0);\n  tween.loop = Math.round(GetAdvancedValue(config, 'loop', 0));\n  tween.loopDelay = Math.round(GetAdvancedValue(config, 'loopDelay', 0));\n  tween.paused = GetBoolean(config, 'paused', false);\n  tween.useFrames = GetBoolean(config, 'useFrames', false); //  Set the Callbacks\n\n  var scope = GetValue(config, 'callbackScope', tween); //  Callback parameters: 0 = a reference to the Tween itself, 1 = the target/s of the Tween, ... your own params\n\n  var tweenArray = [tween, null];\n  var callbacks = Tween.TYPES;\n\n  for (var i = 0; i < callbacks.length; i++) {\n    var type = callbacks[i];\n    var callback = GetValue(config, type, false);\n\n    if (callback) {\n      var callbackScope = GetValue(config, type + 'Scope', scope);\n      var callbackParams = GetValue(config, type + 'Params', []); //  The null is reset to be the Tween target\n\n      tween.setCallback(type, callback, tweenArray.concat(callbackParams), callbackScope);\n    }\n  }\n\n  return tween;\n};\n\nmodule.exports = NumberTweenBuilder;","map":null,"metadata":{},"sourceType":"script"}