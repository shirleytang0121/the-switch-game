{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar Color = require('../../display/color');\n\nvar defaultTileColor = new Color(105, 210, 231, 150);\nvar defaultCollidingTileColor = new Color(243, 134, 48, 200);\nvar defaultFaceColor = new Color(40, 39, 37, 150);\n/**\r\n * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n * wherever you want on the screen.\r\n *\r\n * @function Phaser.Tilemaps.Components.RenderDebug\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n * @param {?Phaser.Display.Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n * tile faces. If set to null, interesting tile faces will not be drawn.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\nvar RenderDebug = function RenderDebug(graphics, styleConfig, layer) {\n  if (styleConfig === undefined) {\n    styleConfig = {};\n  } // Default colors without needlessly creating Color objects\n\n\n  var tileColor = styleConfig.tileColor !== undefined ? styleConfig.tileColor : defaultTileColor;\n  var collidingTileColor = styleConfig.collidingTileColor !== undefined ? styleConfig.collidingTileColor : defaultCollidingTileColor;\n  var faceColor = styleConfig.faceColor !== undefined ? styleConfig.faceColor : defaultFaceColor;\n  var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\n  graphics.translate(layer.tilemapLayer.x, layer.tilemapLayer.y);\n  graphics.scale(layer.tilemapLayer.scaleX, layer.tilemapLayer.scaleY);\n\n  for (var i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n    var tw = tile.width;\n    var th = tile.height;\n    var x = tile.pixelX;\n    var y = tile.pixelY;\n    var color = tile.collides ? collidingTileColor : tileColor;\n\n    if (color !== null) {\n      graphics.fillStyle(color.color, color.alpha / 255);\n      graphics.fillRect(x, y, tw, th);\n    } // Inset the face line to prevent neighboring tile's lines from overlapping\n\n\n    x += 1;\n    y += 1;\n    tw -= 2;\n    th -= 2;\n\n    if (faceColor !== null) {\n      graphics.lineStyle(1, faceColor.color, faceColor.alpha / 255);\n\n      if (tile.faceTop) {\n        graphics.lineBetween(x, y, x + tw, y);\n      }\n\n      if (tile.faceRight) {\n        graphics.lineBetween(x + tw, y, x + tw, y + th);\n      }\n\n      if (tile.faceBottom) {\n        graphics.lineBetween(x, y + th, x + tw, y + th);\n      }\n\n      if (tile.faceLeft) {\n        graphics.lineBetween(x, y, x, y + th);\n      }\n    }\n  }\n};\n\nmodule.exports = RenderDebug;","map":null,"metadata":{},"sourceType":"script"}