{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n\nvar Circle = require('../../geom/circle/Circle');\n\nvar CircleContains = require('../../geom/circle/Contains');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n/**\r\n * @classdesc\r\n * A Zone Game Object.\r\n *\r\n * A Zone is a non-rendering rectangular Game Object that has a position and size.\r\n * It has no texture and never displays, but does live on the display list and\r\n * can be moved, scaled and rotated like any other Game Object.\r\n *\r\n * Its primary use is for creating Drop Zones and Input Hit Areas and it has a couple of helper methods\r\n * specifically for this. It is also useful for object overlap checks, or as a base for your own\r\n * non-displaying Game Objects.\r\n\r\n * The default origin is 0.5, the center of the Zone, the same as with Game Objects.\r\n *\r\n * @class Zone\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=1] - The width of the Game Object.\r\n * @param {number} [height=1] - The height of the Game Object.\r\n */\n\n\nvar Zone = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Depth, Components.GetBounds, Components.Origin, Components.ScaleMode, Components.Transform, Components.ScrollFactor, Components.Visible],\n  initialize: function Zone(scene, x, y, width, height) {\n    if (width === undefined) {\n      width = 1;\n    }\n\n    if (height === undefined) {\n      height = width;\n    }\n\n    GameObject.call(this, scene, 'Zone');\n    this.setPosition(x, y);\n    /**\r\n     * The native (un-scaled) width of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The native (un-scaled) height of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n    /**\r\n     * The Blend Mode of the Game Object.\r\n     * Although a Zone never renders, it still has a blend mode to allow it to fit seamlessly into\r\n     * display lists without causing a batch flush.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#blendMode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.blendMode = BlendModes.NORMAL;\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * The displayed width of this Game Object.\r\n   * This value takes into account the scale factor.\r\n   *\r\n   * @name Phaser.GameObjects.Zone#displayWidth\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  displayWidth: {\n    get: function get() {\n      return this.scaleX * this.width;\n    },\n    set: function set(value) {\n      this.scaleX = value / this.width;\n    }\n  },\n\n  /**\r\n   * The displayed height of this Game Object.\r\n   * This value takes into account the scale factor.\r\n   *\r\n   * @name Phaser.GameObjects.Zone#displayHeight\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  displayHeight: {\n    get: function get() {\n      return this.scaleY * this.height;\n    },\n    set: function set(value) {\n      this.scaleY = value / this.height;\n    }\n  },\n\n  /**\r\n   * Sets the size of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of this Game Object.\r\n   * @param {number} height - The height of this Game Object.\r\n   * @param {boolean} [resizeInput=true] - If this Zone has a Rectangle for a hit area this argument will resize the hit area as well.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setSize: function setSize(width, height, resizeInput) {\n    if (resizeInput === undefined) {\n      resizeInput = true;\n    }\n\n    this.width = width;\n    this.height = height;\n\n    if (resizeInput && this.input && this.input.hitArea instanceof Rectangle) {\n      this.input.hitArea.width = width;\n      this.input.hitArea.height = height;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the display size of this Game Object.\r\n   * Calling this will adjust the scale.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setDisplaySize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of this Game Object.\r\n   * @param {number} height - The height of this Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setDisplaySize: function setDisplaySize(width, height) {\n    this.displayWidth = width;\n    this.displayHeight = height;\n    return this;\n  },\n\n  /**\r\n   * Sets this Zone to be a Circular Drop Zone.\r\n   * The circle is centered on this Zones `x` and `y` coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setCircleDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - The radius of the Circle that will form the Drop Zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setCircleDropZone: function setCircleDropZone(radius) {\n    return this.setDropZone(new Circle(0, 0, radius), CircleContains);\n  },\n\n  /**\r\n   * Sets this Zone to be a Rectangle Drop Zone.\r\n   * The rectangle is centered on this Zones `x` and `y` coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setRectangleDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the rectangle drop zone.\r\n   * @param {number} height - The height of the rectangle drop zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setRectangleDropZone: function setRectangleDropZone(width, height) {\n    return this.setDropZone(new Rectangle(0, 0, width, height), RectangleContains);\n  },\n\n  /**\r\n   * Allows you to define your own Geometry shape to be used as a Drop Zone.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} shape - A Geometry shape instance, such as Phaser.Geom.Ellipse, or your own custom shape.\r\n   * @param {HitAreaCallback} callback - A function that will return `true` if the given x/y coords it is sent are within the shape.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setDropZone: function setDropZone(shape, callback) {\n    if (shape === undefined) {\n      this.setRectangleDropZone(this.width, this.height);\n    } else if (!this.input) {\n      this.setInteractive(shape, callback, true);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * A NOOP method so you can pass a Zone to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setAlpha\r\n   * @private\r\n   * @since 3.11.0\r\n   */\n  setAlpha: function setAlpha() {},\n\n  /**\r\n   * A NOOP method so you can pass a Zone to a Container in Canvas.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setBlendMode\r\n   * @private\r\n   * @since 3.16.2\r\n   */\n  setBlendMode: function setBlendMode() {},\n\n  /**\r\n   * A Zone does not render.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#renderCanvas\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  renderCanvas: function renderCanvas() {},\n\n  /**\r\n   * A Zone does not render.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#renderWebGL\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  renderWebGL: function renderWebGL() {}\n});\nmodule.exports = Zone;","map":null,"metadata":{},"sourceType":"script"}