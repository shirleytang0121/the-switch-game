{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CheckMatrix = require('./CheckMatrix');\n\nvar TransposeMatrix = require('./TransposeMatrix');\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateMatrix\r\n * @since 3.0.0\r\n *\r\n * @param {array} matrix - The array to rotate.\r\n * @param {(number|string)} [direction=90] - The amount to rotate the matrix by.\r\n *\r\n * @return {array} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\n\n\nvar RotateMatrix = function RotateMatrix(matrix, direction) {\n  if (direction === undefined) {\n    direction = 90;\n  }\n\n  if (!CheckMatrix(matrix)) {\n    return null;\n  }\n\n  if (typeof direction !== 'string') {\n    direction = (direction % 360 + 360) % 360;\n  }\n\n  if (direction === 90 || direction === -270 || direction === 'rotateLeft') {\n    matrix = TransposeMatrix(matrix);\n    matrix.reverse();\n  } else if (direction === -90 || direction === 270 || direction === 'rotateRight') {\n    matrix.reverse();\n    matrix = TransposeMatrix(matrix);\n  } else if (Math.abs(direction) === 180 || direction === 'rotate180') {\n    for (var i = 0; i < matrix.length; i++) {\n      matrix[i].reverse();\n    }\n\n    matrix.reverse();\n  }\n\n  return matrix;\n};\n\nmodule.exports = RotateMatrix;","map":null,"metadata":{},"sourceType":"script"}