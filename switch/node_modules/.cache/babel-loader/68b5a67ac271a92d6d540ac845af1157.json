{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse based on the given angle.\r\n *\r\n * @function Phaser.Geom.Ellipse.CircumferencePoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the circumference point on.\r\n * @param {number} angle - The angle from the center of the Ellipse to the circumference to return the point from. Given in radians.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point, or point-like object, to store the results in. If not given a Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object where the `x` and `y` properties are the point on the circumference.\r\n */\n\n\nvar CircumferencePoint = function CircumferencePoint(ellipse, angle, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var halfWidth = ellipse.width / 2;\n  var halfHeight = ellipse.height / 2;\n  out.x = ellipse.x + halfWidth * Math.cos(angle);\n  out.y = ellipse.y + halfHeight * Math.sin(angle);\n  return out;\n};\n\nmodule.exports = CircumferencePoint;","map":null,"metadata":{},"sourceType":"script"}