{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOfflineMiddleware = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _constants = require('./constants');\n\nvar _actions = require('./actions');\n\nvar _send = require('./send');\n\nvar _send2 = _interopRequireDefault(_send);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar after = function after() {\n  var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new _promise2.default(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n};\n\nvar createOfflineMiddleware = exports.createOfflineMiddleware = function createOfflineMiddleware(config) {\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        // allow other middleware to do their things\n        var result = next(action); // find any actions to send, if any\n\n        var state = store.getState();\n        var offline = config.offlineStateLens(state).get;\n        var offlineAction = offline.outbox[0]; // if the are any actions in the queue that we are not\n        // yet processing, send those actions\n\n        if (offlineAction && !offline.busy && !offline.retryScheduled && offline.online) {\n          (0, _send2.default)(offlineAction, store.dispatch, config, offline.retryCount);\n        }\n\n        if (action.type === _constants.OFFLINE_SCHEDULE_RETRY) {\n          after(action.payload.delay).then(function () {\n            store.dispatch((0, _actions.completeRetry)(offlineAction));\n          });\n        }\n\n        if (action.type === _constants.OFFLINE_SEND && offlineAction && !offline.busy) {\n          (0, _send2.default)(offlineAction, store.dispatch, config, offline.retryCount);\n        }\n\n        return result;\n      };\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"script"}