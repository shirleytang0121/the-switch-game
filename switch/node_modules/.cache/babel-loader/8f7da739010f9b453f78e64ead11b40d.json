{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Length = require('../line/Length');\n\nvar Point = require('../point/Point');\n/**\r\n * Returns an array of evenly spaced points on the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the points from.\r\n * @param {integer} quantity - The number of evenly spaced points to return. Set to 0 to return an arbitrary number of points based on the `stepRate`.\r\n * @param {number} stepRate - If `quantity` is 0, the distance between each returned point.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An array to which the points should be appended.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} The modified `out` array, or a new array if none was provided.\r\n */\n\n\nvar GetPoints = function GetPoints(triangle, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  var line1 = triangle.getLineA();\n  var line2 = triangle.getLineB();\n  var line3 = triangle.getLineC();\n  var length1 = Length(line1);\n  var length2 = Length(line2);\n  var length3 = Length(line3);\n  var perimeter = length1 + length2 + length3; //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n  if (!quantity) {\n    quantity = perimeter / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var p = perimeter * (i / quantity);\n    var localPosition = 0;\n    var point = new Point(); //  Which line is it on?\n\n    if (p < length1) {\n      //  Line 1\n      localPosition = p / length1;\n      point.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\n      point.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\n    } else if (p > length1 + length2) {\n      //  Line 3\n      p -= length1 + length2;\n      localPosition = p / length3;\n      point.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\n      point.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\n    } else {\n      //  Line 2\n      p -= length1;\n      localPosition = p / length2;\n      point.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\n      point.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\n    }\n\n    out.push(point);\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":null,"metadata":{},"sourceType":"script"}