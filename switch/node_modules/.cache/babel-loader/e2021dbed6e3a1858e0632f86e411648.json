{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.STS.prototype, {\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}