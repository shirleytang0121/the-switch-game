{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Provides methods used for setting the drag properties of an Arcade Physics Body.\r\n *\r\n * @name Phaser.Physics.Arcade.Components.Drag\r\n * @since 3.0.0\r\n */\nvar Drag = {\n  /**\r\n   * Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\r\n   *\r\n   * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n   * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n   * The x and y components are applied separately.\r\n   *\r\n   * When `useDamping` is true, this is 1 minus the damping factor.\r\n   * A value of 1 means the Body loses no velocity.\r\n   * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n   * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n   *\r\n   * Drag is applied only when `acceleration` is zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Drag#setDrag\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The amount of horizontal drag to apply.\r\n   * @param {number} [y=x] - The amount of vertical drag to apply.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setDrag: function setDrag(x, y) {\n    this.body.drag.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the body's horizontal drag.\r\n   *\r\n   * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n   * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n   * The x and y components are applied separately.\r\n   *\r\n   * When `useDamping` is true, this is 1 minus the damping factor.\r\n   * A value of 1 means the Body loses no velocity.\r\n   * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n   * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n   *\r\n   * Drag is applied only when `acceleration` is zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Drag#setDragX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The amount of horizontal drag to apply.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setDragX: function setDragX(value) {\n    this.body.drag.x = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the body's vertical drag.\r\n   *\r\n   * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n   * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n   * The x and y components are applied separately.\r\n   *\r\n   * When `useDamping` is true, this is 1 minus the damping factor.\r\n   * A value of 1 means the Body loses no velocity.\r\n   * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n   * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n   *\r\n   * Drag is applied only when `acceleration` is zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Drag#setDragY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The amount of vertical drag to apply.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setDragY: function setDragY(value) {\n    this.body.drag.y = value;\n    return this;\n  },\n\n  /**\r\n   * If this Body is using `drag` for deceleration this function controls how the drag is applied.\r\n   * If set to `true` drag will use a damping effect rather than a linear approach. If you are\r\n   * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\r\n   * the game Asteroids) then you will get a far smoother and more visually correct deceleration\r\n   * by using damping, avoiding the axis-drift that is prone with linear deceleration.\r\n   *\r\n   * If you enable this property then you should use far smaller `drag` values than with linear, as\r\n   * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\r\n   * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Drag#setDamping\r\n   * @since 3.10.0\r\n   *\r\n   * @param {boolean} value - `true` to use damping for deceleration, or `false` to use linear deceleration.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setDamping: function setDamping(value) {\n    this.body.useDamping = value;\n    return this;\n  }\n};\nmodule.exports = Drag;","map":null,"metadata":{},"sourceType":"script"}