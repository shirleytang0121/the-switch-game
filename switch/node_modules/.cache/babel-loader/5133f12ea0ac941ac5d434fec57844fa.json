{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar ProcessKeyCombo = require('./ProcessKeyCombo');\n\nvar ResetKeyCombo = require('./ResetKeyCombo');\n/**\r\n * @callback KeyboardKeydownCallback\r\n *\r\n * @param {KeyboardEvent} event - The Keyboard Event.\r\n */\n\n/**\r\n * @typedef {object} KeyComboConfig\r\n *\r\n * @property {boolean} [resetOnWrongKey=true] - If they press the wrong key do we reset the combo?\r\n * @property {number} [maxKeyDelay=0] - The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.\r\n * @property {boolean} [resetOnMatch=false] - If previously matched and they press the first key of the combo again, will it reset?\r\n * @property {boolean} [deleteOnMatch=false] - If the combo matches, will it delete itself?\r\n */\n\n/**\r\n * @classdesc\r\n * A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\r\n * it will emit a `keycombomatch` event from the Keyboard Manager.\r\n *\r\n * The keys to be listened for can be defined as:\r\n *\r\n * A string (i.e. 'ATARI')\r\n * An array of either integers (key codes) or strings, or a mixture of both\r\n * An array of objects (such as Key objects) with a public 'keyCode' property\r\n *\r\n * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\r\n * you could pass the following array of key codes:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\r\n *\r\n * this.input.keyboard.on('keycombomatch', function (event) {\r\n *     console.log('Konami Code entered!');\r\n * });\r\n * ```\r\n *\r\n * Or, to listen for the user entering the word PHASER:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.createCombo('PHASER');\r\n * ```\r\n *\r\n * @class KeyCombo\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @listens Phaser.Input.Keyboard.Events#ANY_KEY_DOWN\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Keyboard.KeyboardPlugin} keyboardPlugin - A reference to the Keyboard Plugin.\r\n * @param {(string|integer[]|object[])} keys - The keys that comprise this combo.\r\n * @param {KeyComboConfig} [config] - A Key Combo configuration object.\r\n */\n\n\nvar KeyCombo = new Class({\n  initialize: function KeyCombo(keyboardPlugin, keys, config) {\n    if (config === undefined) {\n      config = {};\n    } //  Can't have a zero or single length combo (string or array based)\n\n\n    if (keys.length < 2) {\n      return false;\n    }\n    /**\r\n     * A reference to the Keyboard Manager\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#manager\r\n     * @type {Phaser.Input.Keyboard.KeyboardPlugin}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.manager = keyboardPlugin;\n    /**\r\n     * A flag that controls if this Key Combo is actively processing keys or not.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * An array of the keycodes that comprise this combo.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#keyCodes\r\n     * @type {array}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.keyCodes = []; //  if 'keys' is a string we need to get the keycode of each character in it\n\n    for (var i = 0; i < keys.length; i++) {\n      var char = keys[i];\n\n      if (typeof char === 'string') {\n        this.keyCodes.push(char.toUpperCase().charCodeAt(0));\n      } else if (typeof char === 'number') {\n        this.keyCodes.push(char);\n      } else if (char.hasOwnProperty('keyCode')) {\n        this.keyCodes.push(char.keyCode);\n      }\n    }\n    /**\r\n     * The current keyCode the combo is waiting for.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#current\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.current = this.keyCodes[0];\n    /**\r\n     * The current index of the key being waited for in the 'keys' string.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#index\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.index = 0;\n    /**\r\n     * The length of this combo (in keycodes)\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#size\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = this.keyCodes.length;\n    /**\r\n     * The time the previous key in the combo was matched.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#timeLastMatched\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeLastMatched = 0;\n    /**\r\n     * Has this Key Combo been matched yet?\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#matched\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.matched = false;\n    /**\r\n     * The time the entire combo was matched.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#timeMatched\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeMatched = 0;\n    /**\r\n     * If they press the wrong key do we reset the combo?\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#resetOnWrongKey\r\n     * @type {boolean}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.resetOnWrongKey = GetFastValue(config, 'resetOnWrongKey', true);\n    /**\r\n     * The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#maxKeyDelay\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxKeyDelay = GetFastValue(config, 'maxKeyDelay', 0);\n    /**\r\n     * If previously matched and they press the first key of the combo again, will it reset?\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#resetOnMatch\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.resetOnMatch = GetFastValue(config, 'resetOnMatch', false);\n    /**\r\n     * If the combo matches, will it delete itself?\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#deleteOnMatch\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.deleteOnMatch = GetFastValue(config, 'deleteOnMatch', false);\n\n    var _this = this;\n\n    var onKeyDownHandler = function onKeyDownHandler(event) {\n      if (_this.matched || !_this.enabled) {\n        return;\n      }\n\n      var matched = ProcessKeyCombo(event, _this);\n\n      if (matched) {\n        _this.manager.emit(Events.COMBO_MATCH, _this, event);\n\n        if (_this.resetOnMatch) {\n          ResetKeyCombo(_this);\n        } else if (_this.deleteOnMatch) {\n          _this.destroy();\n        }\n      }\n    };\n    /**\r\n     * The internal Key Down handler.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyCombo#onKeyDown\r\n     * @private\r\n     * @type {KeyboardKeydownCallback}\r\n     * @fires Phaser.Input.Keyboard.Events#COMBO_MATCH\r\n     * @since 3.0.0\r\n     */\n\n\n    this.onKeyDown = onKeyDownHandler;\n    this.manager.on(Events.ANY_KEY_DOWN, this.onKeyDown);\n  },\n\n  /**\r\n   * How far complete is this combo? A value between 0 and 1.\r\n   *\r\n   * @name Phaser.Input.Keyboard.KeyCombo#progress\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  progress: {\n    get: function get() {\n      return this.index / this.size;\n    }\n  },\n\n  /**\r\n   * Destroys this Key Combo and all of its references.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyCombo#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.enabled = false;\n    this.keyCodes = [];\n    this.manager.off(Events.ANY_KEY_DOWN, this.onKeyDown);\n    this.manager = null;\n  }\n});\nmodule.exports = KeyCombo;","map":null,"metadata":{},"sourceType":"script"}