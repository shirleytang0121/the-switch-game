{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ContainsArray = require('../triangle/ContainsArray');\n\nvar Decompose = require('../triangle/Decompose');\n\nvar LineToLine = require('./LineToLine');\n/**\r\n * Checks if two Triangles intersect.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Triangles intersect, otherwise `false`.\r\n */\n\n\nvar TriangleToTriangle = function TriangleToTriangle(triangleA, triangleB) {\n  //  First the cheapest ones:\n  if (triangleA.left > triangleB.right || triangleA.right < triangleB.left || triangleA.top > triangleB.bottom || triangleA.bottom < triangleB.top) {\n    return false;\n  }\n\n  var lineAA = triangleA.getLineA();\n  var lineAB = triangleA.getLineB();\n  var lineAC = triangleA.getLineC();\n  var lineBA = triangleB.getLineA();\n  var lineBB = triangleB.getLineB();\n  var lineBC = triangleB.getLineC(); //  Now check the lines against each line of TriangleB\n\n  if (LineToLine(lineAA, lineBA) || LineToLine(lineAA, lineBB) || LineToLine(lineAA, lineBC)) {\n    return true;\n  }\n\n  if (LineToLine(lineAB, lineBA) || LineToLine(lineAB, lineBB) || LineToLine(lineAB, lineBC)) {\n    return true;\n  }\n\n  if (LineToLine(lineAC, lineBA) || LineToLine(lineAC, lineBB) || LineToLine(lineAC, lineBC)) {\n    return true;\n  } //  Nope, so check to see if any of the points of triangleA are within triangleB\n\n\n  var points = Decompose(triangleA);\n  var within = ContainsArray(triangleB, points, true);\n\n  if (within.length > 0) {\n    return true;\n  } //  Finally check to see if any of the points of triangleB are within triangleA\n\n\n  points = Decompose(triangleB);\n  within = ContainsArray(triangleA, points, true);\n\n  if (within.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = TriangleToTriangle;","map":null,"metadata":{},"sourceType":"script"}