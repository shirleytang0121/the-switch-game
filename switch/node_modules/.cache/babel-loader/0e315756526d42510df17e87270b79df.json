{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetAspectRatio = require('./GetAspectRatio');\n/**\r\n * Adjusts the target rectangle, changing its width, height and position,\r\n * so that it fits inside the area of the source rectangle, while maintaining its original\r\n * aspect ratio.\r\n * \r\n * Unlike the `FitOutside` function, there may be some space inside the source area not covered.\r\n *\r\n * @function Phaser.Geom.Rectangle.FitInside\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [target,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} target - The target rectangle to adjust.\r\n * @param {Phaser.Geom.Rectangle} source - The source rectangle to envlope the target in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified target rectangle instance.\r\n */\n\n\nvar FitInside = function FitInside(target, source) {\n  var ratio = GetAspectRatio(target);\n\n  if (ratio < GetAspectRatio(source)) {\n    //  Taller than Wide\n    target.setSize(source.height * ratio, source.height);\n  } else {\n    //  Wider than Tall\n    target.setSize(source.width, source.width / ratio);\n  }\n\n  return target.setPosition(source.centerX - target.width / 2, source.centerY - target.height / 2);\n};\n\nmodule.exports = FitInside;","map":null,"metadata":{},"sourceType":"script"}