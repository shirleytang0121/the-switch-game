{"ast":null,"code":"/**\r\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\r\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\r\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\r\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\r\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class World\r\n* @extends Composite\r\n*/\nvar World = {};\nmodule.exports = World;\n\nvar Composite = require('./Composite');\n\nvar Constraint = require('../constraint/Constraint');\n\nvar Common = require('../core/Common');\n\n(function () {\n  /**\r\n   * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n   * See the properties section below for detailed information on what you can pass via the `options` object.\r\n   * @method create\r\n   * @constructor\r\n   * @param {} options\r\n   * @return {world} A new world\r\n   */\n  World.create = function (options) {\n    var composite = Composite.create();\n    var defaults = {\n      label: 'World',\n      gravity: {\n        x: 0,\n        y: 1,\n        scale: 0.001\n      },\n      bounds: {\n        min: {\n          x: -Infinity,\n          y: -Infinity\n        },\n        max: {\n          x: Infinity,\n          y: Infinity\n        }\n      }\n    };\n    return Common.extend(composite, defaults, options);\n  };\n  /*\r\n  *\r\n  *  Properties Documentation\r\n  *\r\n  */\n\n  /**\r\n   * The gravity to apply on the world.\r\n   *\r\n   * @property gravity\r\n   * @type object\r\n   */\n\n  /**\r\n   * The gravity x component.\r\n   *\r\n   * @property gravity.x\r\n   * @type object\r\n   * @default 0\r\n   */\n\n  /**\r\n   * The gravity y component.\r\n   *\r\n   * @property gravity.y\r\n   * @type object\r\n   * @default 1\r\n   */\n\n  /**\r\n   * The gravity scale factor.\r\n   *\r\n   * @property gravity.scale\r\n   * @type object\r\n   * @default 0.001\r\n   */\n\n  /**\r\n   * A `Bounds` object that defines the world bounds for collision detection.\r\n   *\r\n   * @property bounds\r\n   * @type bounds\r\n   * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\r\n   */\n  // World is a Composite body\n  // see src/module/Outro.js for these aliases:\n\n  /**\r\n   * An alias for Composite.add\r\n   * @method add\r\n   * @param {world} world\r\n   * @param {} object\r\n   * @return {composite} The original world with the objects added\r\n   */\n\n  /**\r\n   * An alias for Composite.remove\r\n   * @method remove\r\n   * @param {world} world\r\n   * @param {} object\r\n   * @param {boolean} [deep=false]\r\n   * @return {composite} The original world with the objects removed\r\n   */\n\n  /**\r\n   * An alias for Composite.clear\r\n   * @method clear\r\n   * @param {world} world\r\n   * @param {boolean} keepStatic\r\n   */\n\n  /**\r\n   * An alias for Composite.addComposite\r\n   * @method addComposite\r\n   * @param {world} world\r\n   * @param {composite} composite\r\n   * @return {world} The original world with the objects from composite added\r\n   */\n\n  /**\r\n   * An alias for Composite.addBody\r\n   * @method addBody\r\n   * @param {world} world\r\n   * @param {body} body\r\n   * @return {world} The original world with the body added\r\n   */\n\n  /**\r\n   * An alias for Composite.addConstraint\r\n   * @method addConstraint\r\n   * @param {world} world\r\n   * @param {constraint} constraint\r\n   * @return {world} The original world with the constraint added\r\n   */\n\n})();","map":null,"metadata":{},"sourceType":"script"}