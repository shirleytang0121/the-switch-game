{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar MergeXHRSettings = require('./MergeXHRSettings');\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\n\n\nvar XHRLoader = function XHRLoader(file, globalXHRSettings) {\n  var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', file.src, config.async, config.user, config.password);\n  xhr.responseType = file.xhrSettings.responseType;\n  xhr.timeout = config.timeout;\n\n  if (config.header && config.headerValue) {\n    xhr.setRequestHeader(config.header, config.headerValue);\n  }\n\n  if (config.requestedWith) {\n    xhr.setRequestHeader('X-Requested-With', config.requestedWith);\n  }\n\n  if (config.overrideMimeType) {\n    xhr.overrideMimeType(config.overrideMimeType);\n  } // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\n\n\n  xhr.onload = file.onLoad.bind(file, xhr);\n  xhr.onerror = file.onError.bind(file, xhr);\n  xhr.onprogress = file.onProgress.bind(file); //  This is the only standard method, the ones above are browser additions (maybe not universal?)\n  // xhr.onreadystatechange\n\n  xhr.send();\n  return xhr;\n};\n\nmodule.exports = XHRLoader;","map":null,"metadata":{},"sourceType":"script"}