{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetValue = require('../../utils/object/GetValue');\n/**\r\n * @typedef {object} SmoothedKeyControlConfig\r\n *\r\n * @property {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera that this Control will update.\r\n * @property {Phaser.Input.Keyboard.Key} [left] - The Key to be pressed that will move the Camera left.\r\n * @property {Phaser.Input.Keyboard.Key} [right] - The Key to be pressed that will move the Camera right.\r\n * @property {Phaser.Input.Keyboard.Key} [up] - The Key to be pressed that will move the Camera up.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomIn] - The Key to be pressed that will zoom the Camera in.\r\n * @property {Phaser.Input.Keyboard.Key} [zoomOut] - The Key to be pressed that will zoom the Camera out.\r\n * @property {number} [zoomSpeed=0.01] - The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n * @property {(number|{x:number,y:number})} [acceleration=0] - The horizontal and vertical acceleration the camera will move.\r\n * @property {(number|{x:number,y:number})} [drag=0] - The horizontal and vertical drag applied to the camera when it is moving.\r\n * @property {(number|{x:number,y:number})} [maxSpeed=0] - The maximum horizontal and vertical speed the camera will move.\r\n */\n\n/**\r\n * @classdesc\r\n * A Smoothed Key Camera Control.\r\n *\r\n * This allows you to control the movement and zoom of a camera using the defined keys.\r\n * Unlike the Fixed Camera Control you can also provide physics values for acceleration, drag and maxSpeed for smoothing effects.\r\n *\r\n * ```javascript\r\n *\r\n * var controlConfig = {\r\n *     camera: this.cameras.main,\r\n *     left: cursors.left,\r\n *     right: cursors.right,\r\n *     up: cursors.up,\r\n *     down: cursors.down,\r\n *     zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),\r\n *     zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),\r\n *     zoomSpeed: 0.02,\r\n *     acceleration: 0.06,\r\n *     drag: 0.0005,\r\n *     maxSpeed: 1.0\r\n * };\r\n * ```\r\n * \r\n * You must call the `update` method of this controller every frame.\r\n *\r\n * @class SmoothedKeyControl\r\n * @memberof Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {SmoothedKeyControlConfig} config - The Smoothed Key Control configuration object.\r\n */\n\n\nvar SmoothedKeyControl = new Class({\n  initialize: function SmoothedKeyControl(config) {\n    /**\r\n     * The Camera that this Control will update.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#camera\r\n     * @type {?Phaser.Cameras.Scene2D.Camera}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n    this.camera = GetValue(config, 'camera', null);\n    /**\r\n     * The Key to be pressed that will move the Camera left.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#left\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.left = GetValue(config, 'left', null);\n    /**\r\n     * The Key to be pressed that will move the Camera right.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#right\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.right = GetValue(config, 'right', null);\n    /**\r\n     * The Key to be pressed that will move the Camera up.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#up\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.up = GetValue(config, 'up', null);\n    /**\r\n     * The Key to be pressed that will move the Camera down.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#down\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.down = GetValue(config, 'down', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera in.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomIn\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomIn = GetValue(config, 'zoomIn', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera out.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomOut\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomOut = GetValue(config, 'zoomOut', null);\n    /**\r\n     * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomSpeed\r\n     * @type {number}\r\n     * @default 0.01\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\n    /**\r\n     * The horizontal acceleration the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelX = 0;\n    /**\r\n     * The vertical acceleration the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelY = 0;\n    var accel = GetValue(config, 'acceleration', null);\n\n    if (typeof accel === 'number') {\n      this.accelX = accel;\n      this.accelY = accel;\n    } else {\n      this.accelX = GetValue(config, 'acceleration.x', 0);\n      this.accelY = GetValue(config, 'acceleration.y', 0);\n    }\n    /**\r\n     * The horizontal drag applied to the camera when it is moving.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.dragX = 0;\n    /**\r\n     * The vertical drag applied to the camera when it is moving.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.dragY = 0;\n    var drag = GetValue(config, 'drag', null);\n\n    if (typeof drag === 'number') {\n      this.dragX = drag;\n      this.dragY = drag;\n    } else {\n      this.dragX = GetValue(config, 'drag.x', 0);\n      this.dragY = GetValue(config, 'drag.y', 0);\n    }\n    /**\r\n     * The maximum horizontal speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.maxSpeedX = 0;\n    /**\r\n     * The maximum vertical speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxSpeedY = 0;\n    var maxSpeed = GetValue(config, 'maxSpeed', null);\n\n    if (typeof maxSpeed === 'number') {\n      this.maxSpeedX = maxSpeed;\n      this.maxSpeedY = maxSpeed;\n    } else {\n      this.maxSpeedX = GetValue(config, 'maxSpeed.x', 0);\n      this.maxSpeedY = GetValue(config, 'maxSpeed.y', 0);\n    }\n    /**\r\n     * Internal property to track the speed of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedX\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this._speedX = 0;\n    /**\r\n     * Internal property to track the speed of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedY\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._speedY = 0;\n    /**\r\n     * Internal property to track the zoom of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_zoom\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._zoom = 0;\n    /**\r\n     * A flag controlling if the Controls will update the Camera or not.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#active\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.active = this.camera !== null;\n  },\n\n  /**\r\n   * Starts the Key Control running, providing it has been linked to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#start\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  start: function start() {\n    this.active = this.camera !== null;\n    return this;\n  },\n\n  /**\r\n   * Stops this Key Control from running. Call `start` to start it again.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  stop: function stop() {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Binds this Key Control to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#setCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  setCamera: function setCamera(camera) {\n    this.camera = camera;\n    return this;\n  },\n\n  /**\r\n   * Applies the results of pressing the control keys to the Camera.\r\n   *\r\n   * You must call this every step, it is not called automatically.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function update(delta) {\n    if (!this.active) {\n      return;\n    }\n\n    if (delta === undefined) {\n      delta = 1;\n    }\n\n    var cam = this.camera; //  Apply Deceleration\n\n    if (this._speedX > 0) {\n      this._speedX -= this.dragX * delta;\n\n      if (this._speedX < 0) {\n        this._speedX = 0;\n      }\n    } else if (this._speedX < 0) {\n      this._speedX += this.dragX * delta;\n\n      if (this._speedX > 0) {\n        this._speedX = 0;\n      }\n    }\n\n    if (this._speedY > 0) {\n      this._speedY -= this.dragY * delta;\n\n      if (this._speedY < 0) {\n        this._speedY = 0;\n      }\n    } else if (this._speedY < 0) {\n      this._speedY += this.dragY * delta;\n\n      if (this._speedY > 0) {\n        this._speedY = 0;\n      }\n    } //  Check for keys\n\n\n    if (this.up && this.up.isDown) {\n      this._speedY += this.accelY;\n\n      if (this._speedY > this.maxSpeedY) {\n        this._speedY = this.maxSpeedY;\n      }\n    } else if (this.down && this.down.isDown) {\n      this._speedY -= this.accelY;\n\n      if (this._speedY < -this.maxSpeedY) {\n        this._speedY = -this.maxSpeedY;\n      }\n    }\n\n    if (this.left && this.left.isDown) {\n      this._speedX += this.accelX;\n\n      if (this._speedX > this.maxSpeedX) {\n        this._speedX = this.maxSpeedX;\n      }\n    } else if (this.right && this.right.isDown) {\n      this._speedX -= this.accelX;\n\n      if (this._speedX < -this.maxSpeedX) {\n        this._speedX = -this.maxSpeedX;\n      }\n    } //  Camera zoom\n\n\n    if (this.zoomIn && this.zoomIn.isDown) {\n      this._zoom = -this.zoomSpeed;\n    } else if (this.zoomOut && this.zoomOut.isDown) {\n      this._zoom = this.zoomSpeed;\n    } else {\n      this._zoom = 0;\n    } //  Apply to Camera\n\n\n    if (this._speedX !== 0) {\n      cam.scrollX -= this._speedX * delta | 0;\n    }\n\n    if (this._speedY !== 0) {\n      cam.scrollY -= this._speedY * delta | 0;\n    }\n\n    if (this._zoom !== 0) {\n      cam.zoom += this._zoom;\n\n      if (cam.zoom < 0.1) {\n        cam.zoom = 0.1;\n      }\n    }\n  },\n\n  /**\r\n   * Destroys this Key Control.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.camera = null;\n    this.left = null;\n    this.right = null;\n    this.up = null;\n    this.down = null;\n    this.zoomIn = null;\n    this.zoomOut = null;\n  }\n});\nmodule.exports = SmoothedKeyControl;","map":null,"metadata":{},"sourceType":"script"}