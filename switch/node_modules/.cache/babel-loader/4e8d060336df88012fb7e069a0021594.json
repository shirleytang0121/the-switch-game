{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Checks if the a Point falls between the two end-points of a Line, based on the given line thickness.\r\n * \r\n * Assumes that the line end points are circular, not square.\r\n *\r\n * @function Phaser.Geom.Intersects.PointToLine\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|any)} point - The point, or point-like object to check.\r\n * @param {Phaser.Geom.Line} line - The line segment to test for intersection on.\r\n * @param {number} [lineThickness=1] - The line thickness. Assumes that the line end points are circular.\r\n *\r\n * @return {boolean} `true` if the Point falls on the Line, otherwise `false`.\r\n */\nvar PointToLine = function PointToLine(point, line, lineThickness) {\n  if (lineThickness === undefined) {\n    lineThickness = 1;\n  }\n\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var px = point.x;\n  var py = point.y;\n  var L2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n  if (L2 === 0) {\n    return false;\n  }\n\n  var r = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / L2; //  Assume line thickness is circular\n\n  if (r < 0) {\n    //  Outside line1\n    return Math.sqrt((x1 - px) * (x1 - px) + (y1 - py) * (y1 - py)) <= lineThickness;\n  } else if (r >= 0 && r <= 1) {\n    //  On the line segment\n    var s = ((y1 - py) * (x2 - x1) - (x1 - px) * (y2 - y1)) / L2;\n    return Math.abs(s) * Math.sqrt(L2) <= lineThickness;\n  } else {\n    //  Outside line2\n    return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py)) <= lineThickness;\n  }\n};\n\nmodule.exports = PointToLine;","map":null,"metadata":{},"sourceType":"script"}