{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Axis = require('./Axis');\n\nvar Button = require('./Button');\n\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A single Gamepad.\r\n *\r\n * These are created, updated and managed by the Gamepad Plugin.\r\n *\r\n * @class Gamepad\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Gamepad.GamepadPlugin} manager - A reference to the Gamepad Plugin.\r\n * @param {Pad} pad - The Gamepad object, as extracted from GamepadEvent.\r\n */\n\n\nvar Gamepad = new Class({\n  Extends: EventEmitter,\n  initialize: function Gamepad(manager, pad) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Gamepad Plugin.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#manager\r\n     * @type {Phaser.Input.Gamepad.GamepadPlugin}\r\n     * @since 3.0.0\r\n     */\n\n    this.manager = manager;\n    /**\r\n     * A reference to the native Gamepad object that is connected to the browser.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#pad\r\n     * @type {any}\r\n     * @since 3.10.0\r\n     */\n\n    this.pad = pad;\n    /**\r\n     * A string containing some information about the controller.\r\n     *\r\n     * This is not strictly specified, but in Firefox it will contain three pieces of information\r\n     * separated by dashes (-): two 4-digit hexadecimal strings containing the USB vendor and\r\n     * product id of the controller, and the name of the controller as provided by the driver.\r\n     * In Chrome it will contain the name of the controller as provided by the driver,\r\n     * followed by vendor and product 4-digit hexadecimal strings.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#id\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.id = pad.id;\n    /**\r\n     * An integer that is unique for each Gamepad currently connected to the system.\r\n     * This can be used to distinguish multiple controllers.\r\n     * Note that disconnecting a device and then connecting a new device may reuse the previous index.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#index\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.index = pad.index;\n    var buttons = [];\n\n    for (var i = 0; i < pad.buttons.length; i++) {\n      buttons.push(new Button(this, i));\n    }\n    /**\r\n     * An array of Gamepad Button objects, corresponding to the different buttons available on the Gamepad.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#buttons\r\n     * @type {Phaser.Input.Gamepad.Button[]}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.buttons = buttons;\n    var axes = [];\n\n    for (i = 0; i < pad.axes.length; i++) {\n      axes.push(new Axis(this, i));\n    }\n    /**\r\n     * An array of Gamepad Axis objects, corresponding to the different axes available on the Gamepad, if any.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#axes\r\n     * @type {Phaser.Input.Gamepad.Axis[]}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.axes = axes;\n    /**\r\n     * The Gamepad's Haptic Actuator (Vibration / Rumble support).\r\n     * This is highly experimental and only set if both present on the device,\r\n     * and exposed by both the hardware and browser.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#vibration\r\n     * @type {GamepadHapticActuator}\r\n     * @since 3.10.0\r\n     */\n\n    this.vibration = pad.vibrationActuator; // https://w3c.github.io/gamepad/#remapping\n\n    var _noButton = {\n      value: 0,\n      pressed: false\n    };\n    /**\r\n     * A reference to the Left Button in the Left Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_LCLeft\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._LCLeft = buttons[14] ? buttons[14] : _noButton;\n    /**\r\n     * A reference to the Right Button in the Left Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_LCRight\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._LCRight = buttons[15] ? buttons[15] : _noButton;\n    /**\r\n     * A reference to the Top Button in the Left Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_LCTop\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._LCTop = buttons[12] ? buttons[12] : _noButton;\n    /**\r\n     * A reference to the Bottom Button in the Left Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_LCBottom\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._LCBottom = buttons[13] ? buttons[13] : _noButton;\n    /**\r\n     * A reference to the Left Button in the Right Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_RCLeft\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._RCLeft = buttons[2] ? buttons[2] : _noButton;\n    /**\r\n     * A reference to the Right Button in the Right Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_RCRight\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._RCRight = buttons[1] ? buttons[1] : _noButton;\n    /**\r\n     * A reference to the Top Button in the Right Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_RCTop\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._RCTop = buttons[3] ? buttons[3] : _noButton;\n    /**\r\n     * A reference to the Bottom Button in the Right Cluster.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_RCBottom\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._RCBottom = buttons[0] ? buttons[0] : _noButton;\n    /**\r\n     * A reference to the Top Left Front Button (L1 Shoulder Button)\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_FBLeftTop\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._FBLeftTop = buttons[4] ? buttons[4] : _noButton;\n    /**\r\n     * A reference to the Bottom Left Front Button (L2 Shoulder Button)\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_FBLeftBottom\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._FBLeftBottom = buttons[6] ? buttons[6] : _noButton;\n    /**\r\n     * A reference to the Top Right Front Button (R1 Shoulder Button)\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_FBRightTop\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._FBRightTop = buttons[5] ? buttons[5] : _noButton;\n    /**\r\n     * A reference to the Bottom Right Front Button (R2 Shoulder Button)\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_FBRightBottom\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._FBRightBottom = buttons[7] ? buttons[7] : _noButton;\n    var _noAxis = {\n      value: 0\n    };\n    /**\r\n     * A reference to the Horizontal Axis for the Left Stick.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_HAxisLeft\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._HAxisLeft = axes[0] ? axes[0] : _noAxis;\n    /**\r\n     * A reference to the Vertical Axis for the Left Stick.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_VAxisLeft\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._VAxisLeft = axes[1] ? axes[1] : _noAxis;\n    /**\r\n     * A reference to the Horizontal Axis for the Right Stick.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_HAxisRight\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._HAxisRight = axes[2] ? axes[2] : _noAxis;\n    /**\r\n     * A reference to the Vertical Axis for the Right Stick.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#_VAxisRight\r\n     * @type {Phaser.Input.Gamepad.Button}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._VAxisRight = axes[3] ? axes[3] : _noAxis;\n    /**\r\n     * A Vector2 containing the most recent values from the Gamepad's left axis stick.\r\n     * This is updated automatically as part of the Gamepad.update cycle.\r\n     * The H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\r\n     * The values are based on the Axis thresholds.\r\n     * If the Gamepad does not have a left axis stick, the values will always be zero.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#leftStick\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.10.0\r\n     */\n\n    this.leftStick = new Vector2();\n    /**\r\n     * A Vector2 containing the most recent values from the Gamepad's right axis stick.\r\n     * This is updated automatically as part of the Gamepad.update cycle.\r\n     * The H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\r\n     * The values are based on the Axis thresholds.\r\n     * If the Gamepad does not have a right axis stick, the values will always be zero.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Gamepad#rightStick\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.10.0\r\n     */\n\n    this.rightStick = new Vector2();\n  },\n\n  /**\r\n   * Gets the total number of axis this Gamepad claims to support.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#getAxisTotal\r\n   * @since 3.10.0\r\n   *\r\n   * @return {integer} The total number of axes this Gamepad claims to support.\r\n   */\n  getAxisTotal: function getAxisTotal() {\n    return this.axes.length;\n  },\n\n  /**\r\n   * Gets the value of an axis based on the given index.\r\n   * The index must be valid within the range of axes supported by this Gamepad.\r\n   * The return value will be a float between 0 and 1.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#getAxisValue\r\n   * @since 3.10.0\r\n   *\r\n   * @param {integer} index - The index of the axes to get the value for.\r\n   *\r\n   * @return {number} The value of the axis, between 0 and 1.\r\n   */\n  getAxisValue: function getAxisValue(index) {\n    return this.axes[index].getValue();\n  },\n\n  /**\r\n   * Sets the threshold value of all axis on this Gamepad.\r\n   * The value is a float between 0 and 1 and is the amount below which the axis is considered as not having been moved.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#setAxisThreshold\r\n   * @since 3.10.0\r\n   *\r\n   * @param {number} value - A value between 0 and 1.\r\n   */\n  setAxisThreshold: function setAxisThreshold(value) {\n    for (var i = 0; i < this.axes.length; i++) {\n      this.axes[i].threshold = value;\n    }\n  },\n\n  /**\r\n   * Gets the total number of buttons this Gamepad claims to have.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#getButtonTotal\r\n   * @since 3.10.0\r\n   *\r\n   * @return {integer} The total number of buttons this Gamepad claims to have.\r\n   */\n  getButtonTotal: function getButtonTotal() {\n    return this.buttons.length;\n  },\n\n  /**\r\n   * Gets the value of a button based on the given index.\r\n   * The index must be valid within the range of buttons supported by this Gamepad.\r\n   *\r\n   * The return value will be either 0 or 1 for an analogue button, or a float between 0 and 1\r\n   * for a pressure-sensitive digital button, such as the shoulder buttons on a Dual Shock.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#getButtonValue\r\n   * @since 3.10.0\r\n   *\r\n   * @param {integer} index - The index of the button to get the value for.\r\n   *\r\n   * @return {number} The value of the button, between 0 and 1.\r\n   */\n  getButtonValue: function getButtonValue(index) {\n    return this.buttons[index].value;\n  },\n\n  /**\r\n   * Returns if the button is pressed down or not.\r\n   * The index must be valid within the range of buttons supported by this Gamepad.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#isButtonDown\r\n   * @since 3.10.0\r\n   *\r\n   * @param {integer} index - The index of the button to get the value for.\r\n   *\r\n   * @return {boolean} `true` if the button is considered as being pressed down, otherwise `false`.\r\n   */\n  isButtonDown: function isButtonDown(index) {\n    return this.buttons[index].pressed;\n  },\n\n  /**\r\n   * Internal update handler for this Gamepad.\r\n   * Called automatically by the Gamepad Manager as part of its update.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#update\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  update: function update(pad) {\n    var i; //  Sync the button values\n\n    var localButtons = this.buttons;\n    var gamepadButtons = pad.buttons;\n    var len = localButtons.length;\n\n    for (i = 0; i < len; i++) {\n      localButtons[i].update(gamepadButtons[i].value);\n    } //  Sync the axis values\n\n\n    var localAxes = this.axes;\n    var gamepadAxes = pad.axes;\n    len = localAxes.length;\n\n    for (i = 0; i < len; i++) {\n      localAxes[i].update(gamepadAxes[i]);\n    }\n\n    if (len >= 2) {\n      this.leftStick.set(localAxes[0].getValue(), localAxes[1].getValue());\n\n      if (len >= 4) {\n        this.rightStick.set(localAxes[2].getValue(), localAxes[3].getValue());\n      }\n    }\n  },\n\n  /**\r\n   * Destroys this Gamepad instance, its buttons and axes, and releases external references it holds.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Gamepad#destroy\r\n   * @since 3.10.0\r\n   */\n  destroy: function destroy() {\n    this.removeAllListeners();\n    this.manager = null;\n    this.pad = null;\n    var i;\n\n    for (i = 0; i < this.buttons.length; i++) {\n      this.buttons[i].destroy();\n    }\n\n    for (i = 0; i < this.axes.length; i++) {\n      this.axes[i].destroy();\n    }\n\n    this.buttons = [];\n    this.axes = [];\n  },\n\n  /**\r\n   * Is this Gamepad currently connected or not?\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#connected\r\n   * @type {boolean}\r\n   * @default true\r\n   * @since 3.0.0\r\n   */\n  connected: {\n    get: function get() {\n      return this.pad.connected;\n    }\n  },\n\n  /**\r\n   * A timestamp containing the most recent time this Gamepad was updated.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#timestamp\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  timestamp: {\n    get: function get() {\n      return this.pad.timestamp;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's Left button being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * This is the d-pad left button under standard Gamepad mapping.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#left\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  left: {\n    get: function get() {\n      return this._LCLeft.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's Right button being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * This is the d-pad right button under standard Gamepad mapping.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#right\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  right: {\n    get: function get() {\n      return this._LCRight.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's Up button being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * This is the d-pad up button under standard Gamepad mapping.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#up\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  up: {\n    get: function get() {\n      return this._LCTop.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's Down button being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * This is the d-pad down button under standard Gamepad mapping.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#down\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  down: {\n    get: function get() {\n      return this._LCBottom.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's bottom button in the right button cluster being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * On a Dual Shock controller it's the X button.\r\n   * On an XBox controller it's the A button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#A\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  A: {\n    get: function get() {\n      return this._RCBottom.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's top button in the right button cluster being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * On a Dual Shock controller it's the Triangle button.\r\n   * On an XBox controller it's the Y button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#Y\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  Y: {\n    get: function get() {\n      return this._RCTop.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's left button in the right button cluster being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * On a Dual Shock controller it's the Square button.\r\n   * On an XBox controller it's the X button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#X\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  X: {\n    get: function get() {\n      return this._RCLeft.pressed;\n    }\n  },\n\n  /**\r\n   * Is the Gamepad's right button in the right button cluster being pressed?\r\n   * If the Gamepad doesn't have this button it will always return false.\r\n   * On a Dual Shock controller it's the Circle button.\r\n   * On an XBox controller it's the B button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#B\r\n   * @type {boolean}\r\n   * @since 3.10.0\r\n   */\n  B: {\n    get: function get() {\n      return this._RCRight.pressed;\n    }\n  },\n\n  /**\r\n   * Returns the value of the Gamepad's top left shoulder button.\r\n   * If the Gamepad doesn't have this button it will always return zero.\r\n   * The value is a float between 0 and 1, corresponding to how depressed the button is.\r\n   * On a Dual Shock controller it's the L1 button.\r\n   * On an XBox controller it's the LB button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#L1\r\n   * @type {number}\r\n   * @since 3.10.0\r\n   */\n  L1: {\n    get: function get() {\n      return this._FBLeftTop.value;\n    }\n  },\n\n  /**\r\n   * Returns the value of the Gamepad's bottom left shoulder button.\r\n   * If the Gamepad doesn't have this button it will always return zero.\r\n   * The value is a float between 0 and 1, corresponding to how depressed the button is.\r\n   * On a Dual Shock controller it's the L2 button.\r\n   * On an XBox controller it's the LT button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#L2\r\n   * @type {number}\r\n   * @since 3.10.0\r\n   */\n  L2: {\n    get: function get() {\n      return this._FBLeftBottom.value;\n    }\n  },\n\n  /**\r\n   * Returns the value of the Gamepad's top right shoulder button.\r\n   * If the Gamepad doesn't have this button it will always return zero.\r\n   * The value is a float between 0 and 1, corresponding to how depressed the button is.\r\n   * On a Dual Shock controller it's the R1 button.\r\n   * On an XBox controller it's the RB button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#R1\r\n   * @type {number}\r\n   * @since 3.10.0\r\n   */\n  R1: {\n    get: function get() {\n      return this._FBRightTop.value;\n    }\n  },\n\n  /**\r\n   * Returns the value of the Gamepad's bottom right shoulder button.\r\n   * If the Gamepad doesn't have this button it will always return zero.\r\n   * The value is a float between 0 and 1, corresponding to how depressed the button is.\r\n   * On a Dual Shock controller it's the R2 button.\r\n   * On an XBox controller it's the RT button.\r\n   *\r\n   * @name Phaser.Input.Gamepad.Gamepad#R2\r\n   * @type {number}\r\n   * @since 3.10.0\r\n   */\n  R2: {\n    get: function get() {\n      return this._FBRightBottom.value;\n    }\n  }\n});\nmodule.exports = Gamepad;","map":null,"metadata":{},"sourceType":"script"}