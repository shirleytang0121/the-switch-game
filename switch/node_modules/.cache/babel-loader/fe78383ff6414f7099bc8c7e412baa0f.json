{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar ImageFile = require('./ImageFile.js');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar JSONFile = require('./JSONFile.js');\n\nvar MultiFile = require('../MultiFile.js');\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.MultiAtlasFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @property {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from. Or, a well formed JSON object.\r\n * @property {string} [atlasExtension='json'] - The default file extension to use for the atlas json if no url is provided.\r\n * @property {XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @property {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @property {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @property {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\n\n/**\r\n * @classdesc\r\n * A single Multi Texture Atlas File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#multiatlas method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#multiatlas.\r\n *\r\n * @class MultiAtlasFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {string} key - The key of the file. Must be unique within both the Loader and the Texture Manager.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from.\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @param {XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\n\n\nvar MultiAtlasFile = new Class({\n  Extends: MultiFile,\n  initialize: function MultiAtlasFile(loader, key, atlasURL, path, baseURL, atlasXhrSettings, textureXhrSettings) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      atlasURL = GetFastValue(config, 'url');\n      atlasXhrSettings = GetFastValue(config, 'xhrSettings');\n      path = GetFastValue(config, 'path');\n      baseURL = GetFastValue(config, 'baseURL');\n      textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\n    }\n\n    var data = new JSONFile(loader, key, atlasURL, atlasXhrSettings);\n    MultiFile.call(this, loader, 'multiatlas', key, [data]);\n    this.config.path = path;\n    this.config.baseURL = baseURL;\n    this.config.textureXhrSettings = textureXhrSettings;\n  },\n\n  /**\r\n   * Called by each File when it finishes loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.MultiAtlasFile#onFileComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n   */\n  onFileComplete: function onFileComplete(file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n\n      if (file.type === 'json' && file.data.hasOwnProperty('textures')) {\n        //  Inspect the data for the files to now load\n        var textures = file.data.textures;\n        var config = this.config;\n        var loader = this.loader;\n        var currentBaseURL = loader.baseURL;\n        var currentPath = loader.path;\n        var currentPrefix = loader.prefix;\n        var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\n        var path = GetFastValue(config, 'path', currentPath);\n        var prefix = GetFastValue(config, 'prefix', currentPrefix);\n        var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\n        loader.setBaseURL(baseURL);\n        loader.setPath(path);\n        loader.setPrefix(prefix);\n\n        for (var i = 0; i < textures.length; i++) {\n          //  \"image\": \"texture-packer-multi-atlas-0.png\",\n          var textureURL = textures[i].image;\n          var key = '_MA_' + textureURL;\n          var image = new ImageFile(loader, key, textureURL, textureXhrSettings);\n          this.addToMultiFile(image);\n          loader.addFile(image); //  \"normalMap\": \"texture-packer-multi-atlas-0_n.png\",\n\n          if (textures[i].normalMap) {\n            var normalMap = new ImageFile(loader, key, textures[i].normalMap, textureXhrSettings);\n            normalMap.type = 'normalMap';\n            image.setLink(normalMap);\n            this.addToMultiFile(normalMap);\n            loader.addFile(normalMap);\n          }\n        } //  Reset the loader settings\n\n\n        loader.setBaseURL(currentBaseURL);\n        loader.setPath(currentPath);\n        loader.setPrefix(currentPrefix);\n      }\n    }\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.MultiAtlasFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function addToCache() {\n    if (this.isReadyToProcess()) {\n      var fileJSON = this.files[0];\n      fileJSON.addToCache();\n      var data = [];\n      var images = [];\n      var normalMaps = [];\n\n      for (var i = 1; i < this.files.length; i++) {\n        var file = this.files[i];\n\n        if (file.type === 'normalMap') {\n          continue;\n        }\n\n        var key = file.key.substr(4);\n        var image = file.data; //  Now we need to find out which json entry this mapped to\n\n        for (var t = 0; t < fileJSON.data.textures.length; t++) {\n          var item = fileJSON.data.textures[t];\n\n          if (item.image === key) {\n            images.push(image);\n            data.push(item);\n\n            if (file.linkFile) {\n              normalMaps.push(file.linkFile.data);\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (normalMaps.length === 0) {\n        normalMaps = undefined;\n      }\n\n      this.loader.textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);\n      this.complete = true;\n\n      for (i = 0; i < this.files.length; i++) {\n        this.files[i].pendingDestroy();\n      }\n    }\n  }\n});\n/**\r\n * Adds a Multi Texture Atlas, or array of multi atlases, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.multiatlas('level1', 'images/Level1.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the atlas data to be provided in a JSON file as exported from the application Texture Packer,\r\n * version 4.6.3 or above, where you have made sure to use the Phaser 3 Export option.\r\n *\r\n * The way it works internally is that you provide a URL to the JSON file. Phaser then loads this JSON, parses it and\r\n * extracts which texture files it also needs to load to complete the process. If the JSON also defines normal maps,\r\n * Phaser will load those as well.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas({\r\n *     key: 'level1',\r\n *     atlasURL: 'images/Level1.json'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.MultiAtlasFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas('level1', 'images/Level1.json');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'level1', 'background');\r\n * ```\r\n *\r\n * To get a list of all available frames within an atlas please consult your Texture Atlas software.\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Multi Atlas File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#multiatlas\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.7.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.MultiAtlasFileConfig|Phaser.Loader.FileTypes.MultiAtlasFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('multiatlas', function (key, atlasURL, path, baseURL, atlasXhrSettings) {\n  var multifile; //  Supports an Object file definition in the key argument\n  //  Or an array of objects in the key argument\n  //  Or a single entry where all arguments have been defined\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      multifile = new MultiAtlasFile(this, key[i]);\n      this.addFile(multifile.files);\n    }\n  } else {\n    multifile = new MultiAtlasFile(this, key, atlasURL, path, baseURL, atlasXhrSettings);\n    this.addFile(multifile.files);\n  }\n\n  return this;\n});\nmodule.exports = MultiAtlasFile;","map":null,"metadata":{},"sourceType":"script"}