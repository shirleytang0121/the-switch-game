{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Circle = require('../circle/Circle'); //  Adapted from https://gist.github.com/mutoo/5617691\n\n/**\r\n * Finds the circumscribed circle (circumcircle) of a Triangle object. The circumcircle is the circle which touches all of the triangle's vertices.\r\n *\r\n * @function Phaser.Geom.Triangle.CircumCircle\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Circle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use as input.\r\n * @param {Phaser.Geom.Circle} [out] - An optional Circle to store the result in.\r\n *\r\n * @return {Phaser.Geom.Circle} The updated `out` Circle, or a new Circle if none was provided.\r\n */\n\n\nvar CircumCircle = function CircumCircle(triangle, out) {\n  if (out === undefined) {\n    out = new Circle();\n  } //  A\n\n\n  var x1 = triangle.x1;\n  var y1 = triangle.y1; //  B\n\n  var x2 = triangle.x2;\n  var y2 = triangle.y2; //  C\n\n  var x3 = triangle.x3;\n  var y3 = triangle.y3;\n  var A = x2 - x1;\n  var B = y2 - y1;\n  var C = x3 - x1;\n  var D = y3 - y1;\n  var E = A * (x1 + x2) + B * (y1 + y2);\n  var F = C * (x1 + x3) + D * (y1 + y3);\n  var G = 2 * (A * (y3 - y2) - B * (x3 - x2));\n  var dx;\n  var dy; //  If the points of the triangle are collinear, then just find the\n  //  extremes and use the midpoint as the center of the circumcircle.\n\n  if (Math.abs(G) < 0.000001) {\n    var minX = Math.min(x1, x2, x3);\n    var minY = Math.min(y1, y2, y3);\n    dx = (Math.max(x1, x2, x3) - minX) * 0.5;\n    dy = (Math.max(y1, y2, y3) - minY) * 0.5;\n    out.x = minX + dx;\n    out.y = minY + dy;\n    out.radius = Math.sqrt(dx * dx + dy * dy);\n  } else {\n    out.x = (D * E - B * F) / G;\n    out.y = (A * F - C * E) / G;\n    dx = out.x - x1;\n    dy = out.y - y1;\n    out.radius = Math.sqrt(dx * dx + dy * dy);\n  }\n\n  return out;\n};\n\nmodule.exports = CircumCircle;","map":null,"metadata":{},"sourceType":"script"}