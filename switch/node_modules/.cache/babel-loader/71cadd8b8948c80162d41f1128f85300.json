{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar GameEvents = require('../../core/events');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar InputEvents = require('../events');\n\nvar InputPluginCache = require('../InputPluginCache');\n\nvar Key = require('./keys/Key');\n\nvar KeyCodes = require('./keys/KeyCodes');\n\nvar KeyCombo = require('./combo/KeyCombo');\n\nvar KeyMap = require('./keys/KeyMap');\n\nvar SnapFloor = require('../../math/snap/SnapFloor');\n/**\r\n * @classdesc\r\n * The Keyboard Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n * \r\n * Its role is to listen for native DOM Keyboard Events and then process them.\r\n * \r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n * \r\n * You can access it from within a Scene using `this.input.keyboard`. For example, you can do:\r\n *\r\n * ```javascript\r\n * this.input.keyboard.on('keydown', callback, context);\r\n * ```\r\n *\r\n * Or, to listen for a specific key:\r\n * \r\n * ```javascript\r\n * this.input.keyboard.on('keydown-A', callback, context);\r\n * ```\r\n *\r\n * You can also create Key objects, which you can then poll in your game loop:\r\n *\r\n * ```javascript\r\n * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n * ```\r\n * \r\n * If you have multiple parallel Scenes, each trying to get keyboard input, be sure to disable capture on them to stop them from\r\n * stealing input from another Scene in the list. You can do this with `this.input.keyboard.enabled = false` within the\r\n * Scene to stop all input, or `this.input.keyboard.preventDefault = false` to stop a Scene halting input on another Scene.\r\n *\r\n * _Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\r\n * See http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/ for more details.\r\n *\r\n * Also please be aware that certain browser extensions can disable or override Phaser keyboard handling.\r\n * For example the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\r\n * And there are others. So, please check your extensions before opening Phaser issues about keys that don't work.\r\n *\r\n * @class KeyboardPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\n\n\nvar KeyboardPlugin = new Class({\n  Extends: EventEmitter,\n  initialize: function KeyboardPlugin(sceneInputPlugin) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the core game, so we can listen for visibility events.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#game\r\n     * @type {Phaser.Game}\r\n     * @since 3.16.0\r\n     */\n\n    this.game = sceneInputPlugin.systems.game;\n    /**\r\n     * A reference to the Scene that this Input Plugin is responsible for.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.10.0\r\n     */\n\n    this.scene = sceneInputPlugin.scene;\n    /**\r\n     * A reference to the Scene Systems Settings.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#settings\r\n     * @type {Phaser.Scenes.Settings.Object}\r\n     * @since 3.10.0\r\n     */\n\n    this.settings = this.scene.sys.settings;\n    /**\r\n     * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#sceneInputPlugin\r\n     * @type {Phaser.Input.InputPlugin}\r\n     * @since 3.10.0\r\n     */\n\n    this.sceneInputPlugin = sceneInputPlugin;\n    /**\r\n     * A reference to the global Keyboard Manager.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#manager\r\n     * @type {Phaser.Input.InputPlugin}\r\n     * @since 3.16.0\r\n     */\n\n    this.manager = sceneInputPlugin.manager.keyboard;\n    /**\r\n     * A boolean that controls if this Keyboard Plugin is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.10.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * An array of Key objects to process.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#keys\r\n     * @type {Phaser.Input.Keyboard.Key[]}\r\n     * @since 3.10.0\r\n     */\n\n    this.keys = [];\n    /**\r\n     * An array of KeyCombo objects to process.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardPlugin#combos\r\n     * @type {Phaser.Input.Keyboard.KeyCombo[]}\r\n     * @since 3.10.0\r\n     */\n\n    this.combos = [];\n    sceneInputPlugin.pluginEvents.once(InputEvents.BOOT, this.boot, this);\n    sceneInputPlugin.pluginEvents.on(InputEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#boot\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  boot: function boot() {\n    var settings = this.settings.input;\n    this.enabled = GetValue(settings, 'keyboard', true);\n    var captures = GetValue(settings, 'keyboard.capture', null);\n\n    if (captures) {\n      this.addCaptures(captures);\n    }\n\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#start\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  start: function start() {\n    if (this.sceneInputPlugin.manager.useQueue) {\n      this.sceneInputPlugin.pluginEvents.on(InputEvents.UPDATE, this.update, this);\n    } else {\n      this.sceneInputPlugin.manager.events.on(InputEvents.MANAGER_PROCESS, this.update, this);\n    }\n\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.SHUTDOWN, this.shutdown, this);\n    this.game.events.on(GameEvents.BLUR, this.resetKeys, this);\n  },\n\n  /**\r\n   * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#isActive\r\n   * @since 3.10.0\r\n   *\r\n   * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n   */\n  isActive: function isActive() {\n    return this.enabled && this.scene.sys.isActive();\n  },\n\n  /**\r\n   * By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\r\n   * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\r\n   *\r\n   * This `addCapture` method enables consuming keyboard events for specific keys, so they don't bubble up the browser\r\n   * and cause the default behaviors.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\r\n   * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass a single key code value:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or, a comma-delimited string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#addCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to enable event capture for.\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  addCapture: function addCapture(keycode) {\n    this.manager.addCapture(keycode);\n    return this;\n  },\n\n  /**\r\n   * Removes an existing key capture.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\r\n   * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass a single key code value:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or, a comma-delimited string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#removeCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to disable event capture for.\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  removeCapture: function removeCapture(keycode) {\n    this.manager.removeCapture(keycode);\n    return this;\n  },\n\n  /**\r\n   * Returns an array that contains all of the keyboard captures currently enabled.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#getCaptures\r\n   * @since 3.16.0\r\n   * \r\n   * @return {integer[]} An array of all the currently capturing key codes.\r\n   */\n  getCaptures: function getCaptures() {\n    return this.manager.captures;\n  },\n\n  /**\r\n   * Allows Phaser to prevent any key captures you may have defined from bubbling up the browser.\r\n   * You can use this to re-enable event capturing if you had paused it via `disableGlobalCapture`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#enableGlobalCapture\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  enableGlobalCapture: function enableGlobalCapture() {\n    this.manager.preventDefault = true;\n    return this;\n  },\n\n  /**\r\n   * Disables Phaser from preventing any key captures you may have defined, without actually removing them.\r\n   * You can use this to temporarily disable event capturing if, for example, you swap to a DOM element.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#disableGlobalCapture\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  disableGlobalCapture: function disableGlobalCapture() {\n    this.manager.preventDefault = false;\n    return this;\n  },\n\n  /**\r\n   * Removes all keyboard captures.\r\n   * \r\n   * Note that this is a global change. It will clear all event captures across your game, not just for this specific Scene.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#clearCaptures\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  clearCaptures: function clearCaptures() {\n    this.manager.clearCaptures();\n    return this;\n  },\n\n  /**\r\n   * @typedef {object} CursorKeys\r\n   * @memberof Phaser.Input.Keyboard\r\n   * \r\n   * @property {Phaser.Input.Keyboard.Key} [up] - A Key object mapping to the UP arrow key.\r\n   * @property {Phaser.Input.Keyboard.Key} [down] - A Key object mapping to the DOWN arrow key.\r\n   * @property {Phaser.Input.Keyboard.Key} [left] - A Key object mapping to the LEFT arrow key.\r\n   * @property {Phaser.Input.Keyboard.Key} [right] - A Key object mapping to the RIGHT arrow key.\r\n   * @property {Phaser.Input.Keyboard.Key} [space] - A Key object mapping to the SPACE BAR key.\r\n   * @property {Phaser.Input.Keyboard.Key} [shift] - A Key object mapping to the SHIFT key.\r\n   */\n\n  /**\r\n   * Creates and returns an object containing 4 hotkeys for Up, Down, Left and Right, and also Space Bar and shift.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#createCursorKeys\r\n   * @since 3.10.0\r\n   *\r\n   * @return {CursorKeys} An object containing the properties: `up`, `down`, `left`, `right`, `space` and `shift`.\r\n   */\n  createCursorKeys: function createCursorKeys() {\n    return this.addKeys({\n      up: KeyCodes.UP,\n      down: KeyCodes.DOWN,\n      left: KeyCodes.LEFT,\n      right: KeyCodes.RIGHT,\n      space: KeyCodes.SPACE,\n      shift: KeyCodes.SHIFT\n    });\n  },\n\n  /**\r\n   * A practical way to create an object containing user selected hotkeys.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```javascript\r\n   * this.input.keyboard.addKeys({ 'up': Phaser.Input.Keyboard.KeyCodes.W, 'down': Phaser.Input.Keyboard.KeyCodes.S });\r\n   * ```\r\n   * \r\n   * would return an object containing the properties (`up` and `down`) mapped to W and S {@link Phaser.Input.Keyboard.Key} objects.\r\n   *\r\n   * You can also pass in a comma-separated string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addKeys('W,S,A,D');\r\n   * ```\r\n   *\r\n   * Which will return an object with the properties W, S, A and D mapped to the relevant Key objects.\r\n   *\r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#addKeys\r\n   * @since 3.10.0\r\n   *\r\n   * @param {(object|string)} keys - An object containing Key Codes, or a comma-separated string.\r\n   * @param {boolean} [enableCapture=true] - Automatically call `preventDefault` on the native DOM browser event for the key codes being added.\r\n   * @param {boolean} [emitOnRepeat=false] - Controls if the Key will continuously emit a 'down' event while being held down (true), or emit the event just once (false, the default).\r\n   *\r\n   * @return {object} An object containing Key objects mapped to the input properties.\r\n   */\n  addKeys: function addKeys(keys, enableCapture, emitOnRepeat) {\n    if (enableCapture === undefined) {\n      enableCapture = true;\n    }\n\n    if (emitOnRepeat === undefined) {\n      emitOnRepeat = false;\n    }\n\n    var output = {};\n\n    if (typeof keys === 'string') {\n      keys = keys.split(',');\n\n      for (var i = 0; i < keys.length; i++) {\n        var currentKey = keys[i].trim();\n\n        if (currentKey) {\n          output[currentKey] = this.addKey(currentKey, enableCapture, emitOnRepeat);\n        }\n      }\n    } else {\n      for (var key in keys) {\n        output[key] = this.addKey(keys[key], enableCapture, emitOnRepeat);\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Adds a Key object to this Keyboard Plugin.\r\n   *\r\n   * The given argument can be either an existing Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n   *\r\n   * If a Key object is given, and one already exists matching the same key code, the existing one is replaced with the new one.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#addKey\r\n   * @since 3.10.0\r\n   *\r\n   * @param {(Phaser.Input.Keyboard.Key|string|integer)} key - Either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n   * @param {boolean} [enableCapture=true] - Automatically call `preventDefault` on the native DOM browser event for the key codes being added.\r\n   * @param {boolean} [emitOnRepeat=false] - Controls if the Key will continuously emit a 'down' event while being held down (true), or emit the event just once (false, the default).\r\n   *\r\n   * @return {Phaser.Input.Keyboard.Key} The newly created Key object, or a reference to it if it already existed in the keys array.\r\n   */\n  addKey: function addKey(key, enableCapture, emitOnRepeat) {\n    if (enableCapture === undefined) {\n      enableCapture = true;\n    }\n\n    if (emitOnRepeat === undefined) {\n      emitOnRepeat = false;\n    }\n\n    var keys = this.keys;\n\n    if (key instanceof Key) {\n      var idx = keys.indexOf(key);\n\n      if (idx > -1) {\n        keys[idx] = key;\n      } else {\n        keys[key.keyCode] = key;\n      }\n\n      if (enableCapture) {\n        this.addCapture(key.keyCode);\n      }\n\n      key.setEmitOnRepeat(emitOnRepeat);\n      return key;\n    }\n\n    if (typeof key === 'string') {\n      key = KeyCodes[key.toUpperCase()];\n    }\n\n    if (!keys[key]) {\n      keys[key] = new Key(key);\n\n      if (enableCapture) {\n        this.addCapture(key);\n      }\n\n      keys[key].setEmitOnRepeat(emitOnRepeat);\n    }\n\n    return keys[key];\n  },\n\n  /**\r\n   * Removes a Key object from this Keyboard Plugin.\r\n   *\r\n   * The given argument can be either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#removeKey\r\n   * @since 3.10.0\r\n   *\r\n   * @param {(Phaser.Input.Keyboard.Key|string|integer)} key - Either a Key object, a string, such as `A` or `SPACE`, or a key code value.\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  removeKey: function removeKey(key) {\n    var keys = this.keys;\n\n    if (key instanceof Key) {\n      var idx = keys.indexOf(key);\n\n      if (idx > -1) {\n        this.keys[idx] = undefined;\n      }\n    } else if (typeof key === 'string') {\n      key = KeyCodes[key.toUpperCase()];\n    }\n\n    if (keys[key]) {\n      keys[key] = undefined;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates a new KeyCombo.\r\n   * \r\n   * A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\r\n   * it will emit a `keycombomatch` event from this Keyboard Plugin.\r\n   *\r\n   * The keys to be listened for can be defined as:\r\n   *\r\n   * A string (i.e. 'ATARI')\r\n   * An array of either integers (key codes) or strings, or a mixture of both\r\n   * An array of objects (such as Key objects) with a public 'keyCode' property\r\n   *\r\n   * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\r\n   * you could pass the following array of key codes:\r\n   *\r\n   * ```javascript\r\n   * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\r\n   *\r\n   * this.input.keyboard.on('keycombomatch', function (event) {\r\n   *     console.log('Konami Code entered!');\r\n   * });\r\n   * ```\r\n   *\r\n   * Or, to listen for the user entering the word PHASER:\r\n   *\r\n   * ```javascript\r\n   * this.input.keyboard.createCombo('PHASER');\r\n   * ```\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#createCombo\r\n   * @since 3.10.0\r\n   *\r\n   * @param {(string|integer[]|object[])} keys - The keys that comprise this combo.\r\n   * @param {KeyComboConfig} [config] - A Key Combo configuration object.\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyCombo} The new KeyCombo object.\r\n   */\n  createCombo: function createCombo(keys, config) {\n    return new KeyCombo(this, keys, config);\n  },\n\n  /**\r\n   * Checks if the given Key object is currently being held down.\r\n   * \r\n   * The difference between this method and checking the `Key.isDown` property directly is that you can provide\r\n   * a duration to this method. For example, if you wanted a key press to fire a bullet, but you only wanted\r\n   * it to be able to fire every 100ms, then you can call this method with a `duration` of 100 and it\r\n   * will only return `true` every 100ms.\r\n   * \r\n   * If the Keyboard Plugin has been disabled, this method will always return `false`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#checkDown\r\n   * @since 3.11.0\r\n   *\r\n   * @param {Phaser.Input.Keyboard.Key} key - A Key object.\r\n   * @param {number} [duration=0] - The duration which must have elapsed before this Key is considered as being down.\r\n   * \r\n   * @return {boolean} `true` if the Key is down within the duration specified, otherwise `false`.\r\n   */\n  checkDown: function checkDown(key, duration) {\n    if (this.enabled && key.isDown) {\n      var t = SnapFloor(this.time - key.timeDown, duration);\n\n      if (t > key._tick) {\n        key._tick = t;\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Internal update handler called by the Input Plugin, which is in turn invoked by the Game step.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#update\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  update: function update() {\n    var queue = this.manager.queue;\n    var len = queue.length;\n\n    if (!this.isActive() || len === 0) {\n      return;\n    }\n\n    var keys = this.keys; //  Process the event queue, dispatching all of the events that have stored up\n\n    for (var i = 0; i < len; i++) {\n      var event = queue[i];\n      var code = event.keyCode;\n      var key = keys[code];\n      var repeat = false; //  Override the default functions (it's too late for the browser to use them anyway, so we may as well)\n\n      if (event.cancelled === undefined) {\n        //  Event allowed to flow across all handlers in this Scene, and any other Scene in the Scene list\n        event.cancelled = 0; //  Won't reach any more local (Scene level) handlers\n\n        event.stopImmediatePropagation = function () {\n          event.cancelled = 1;\n        }; //  Won't reach any more handlers in any Scene further down the Scene list\n\n\n        event.stopPropagation = function () {\n          event.cancelled = -1;\n        };\n      }\n\n      if (event.cancelled === -1) {\n        //  This event has been stopped from broadcasting to any other Scene, so abort.\n        continue;\n      }\n\n      if (event.type === 'keydown') {\n        //  Key specific callback first\n        if (key) {\n          repeat = key.isDown;\n          key.onDown(event);\n        }\n\n        if (!event.cancelled && (!key || !repeat)) {\n          if (KeyMap[code]) {\n            this.emit(Events.KEY_DOWN + KeyMap[code], event); //  Deprecated, kept in for compatibility with 3.15\n            //  To be removed by 3.20.\n\n            this.emit('keydown_' + KeyMap[code], event);\n          }\n\n          if (!event.cancelled) {\n            this.emit(Events.ANY_KEY_DOWN, event);\n          }\n        }\n      } else {\n        //  Key specific callback first\n        if (key) {\n          key.onUp(event);\n        }\n\n        if (!event.cancelled) {\n          if (KeyMap[code]) {\n            this.emit(Events.KEY_UP + KeyMap[code], event); //  Deprecated, kept in for compatibility with 3.15\n            //  To be removed by 3.20.\n\n            this.emit('keyup_' + KeyMap[code], event);\n          }\n\n          if (!event.cancelled) {\n            this.emit(Events.ANY_KEY_UP, event);\n          }\n        }\n      } //  Reset the cancel state for other Scenes to use\n\n\n      if (event.cancelled === 1) {\n        event.cancelled = 0;\n      }\n    }\n  },\n\n  /**\r\n   * Resets all Key objects created by _this_ Keyboard Plugin back to their default un-pressed states.\r\n   * This can only reset keys created via the `addKey`, `addKeys` or `createCursorKeys` methods.\r\n   * If you have created a Key object directly you'll need to reset it yourself.\r\n   * \r\n   * This method is called automatically when the Keyboard Plugin shuts down, but can be\r\n   * invoked directly at any time you require.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#resetKeys\r\n   * @since 3.15.0\r\n   *\r\n   * @return {Phaser.Input.Keyboard.KeyboardPlugin} This KeyboardPlugin object.\r\n   */\n  resetKeys: function resetKeys() {\n    var keys = this.keys;\n\n    for (var i = 0; i < keys.length; i++) {\n      //  Because it's a sparsely populated array\n      if (keys[i]) {\n        keys[i].reset();\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Shuts this Keyboard Plugin down. This performs the following tasks:\r\n   * \r\n   * 1 - Resets all keys created by this Keyboard plugin.\r\n   * 2 - Stops and removes the keyboard event listeners.\r\n   * 3 - Clears out any pending requests in the queue, without processing them.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#shutdown\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  shutdown: function shutdown() {\n    this.resetKeys();\n\n    if (this.sceneInputPlugin.manager.useQueue) {\n      this.sceneInputPlugin.pluginEvents.off(InputEvents.UPDATE, this.update, this);\n    } else {\n      this.sceneInputPlugin.manager.events.off(InputEvents.MANAGER_PROCESS, this.update, this);\n    }\n\n    this.game.events.off(GameEvents.BLUR, this.resetKeys);\n    this.removeAllListeners();\n    this.queue = [];\n  },\n\n  /**\r\n   * Destroys this Keyboard Plugin instance and all references it holds, plus clears out local arrays.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardPlugin#destroy\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    var keys = this.keys;\n\n    for (var i = 0; i < keys.length; i++) {\n      //  Because it's a sparsely populated array\n      if (keys[i]) {\n        keys[i].destroy();\n      }\n    }\n\n    this.keys = [];\n    this.combos = [];\n    this.queue = [];\n    this.scene = null;\n    this.settings = null;\n    this.sceneInputPlugin = null;\n    this.manager = null;\n  },\n\n  /**\r\n   * Internal time value.\r\n   *\r\n   * @name Phaser.Input.Keyboard.KeyboardPlugin#time\r\n   * @type {number}\r\n   * @private\r\n   * @since 3.11.0\r\n   */\n  time: {\n    get: function get() {\n      return this.sceneInputPlugin.manager.time;\n    }\n  }\n});\n/**\r\n * An instance of the Keyboard Plugin class, if enabled via the `input.keyboard` Scene or Game Config property.\r\n * Use this to create Key objects and listen for keyboard specific events.\r\n *\r\n * @name Phaser.Input.InputPlugin#keyboard\r\n * @type {?Phaser.Input.Keyboard.KeyboardPlugin}\r\n * @since 3.10.0\r\n */\n\nInputPluginCache.register('KeyboardPlugin', KeyboardPlugin, 'keyboard', 'keyboard', 'inputKeyboard');\nmodule.exports = KeyboardPlugin;","map":null,"metadata":{},"sourceType":"script"}