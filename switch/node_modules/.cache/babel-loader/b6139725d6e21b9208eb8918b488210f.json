{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ArrayRemove = require('../../utils/array/Remove');\n\nvar Class = require('../../utils/Class');\n\nvar GameEvents = require('../../core/events');\n\nvar InputEvents = require('../events');\n\nvar KeyCodes = require('../../input/keyboard/keys/KeyCodes');\n\nvar NOOP = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * The Keyboard Manager is a helper class that belongs to the global Input Manager.\r\n * \r\n * Its role is to listen for native DOM Keyboard Events and then store them for further processing by the Keyboard Plugin.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically if keyboard\r\n * input has been enabled in the Game Config.\r\n *\r\n * @class KeyboardManager\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar KeyboardManager = new Class({\n  initialize: function KeyboardManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.16.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * An internal event queue.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#queue\r\n     * @type {KeyboardEvent[]}\r\n     * @private\r\n     * @since 3.16.0\r\n     */\n\n    this.queue = [];\n    /**\r\n     * A flag that controls if the non-modified keys, matching those stored in the `captures` array,\r\n     * have `preventDefault` called on them or not.\r\n     * \r\n     * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n     * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n     * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n     * However, if the user presses just the r key on its own, it will have its event prevented.\r\n     * \r\n     * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n     * you can toggle this property at run-time.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#preventDefault\r\n     * @type {boolean}\r\n     * @since 3.16.0\r\n     */\n\n    this.preventDefault = true;\n    /**\r\n     * An array of Key Code values that will automatically have `preventDefault` called on them,\r\n     * as long as the `KeyboardManager.preventDefault` boolean is set to `true`.\r\n     * \r\n     * By default the array is empty.\r\n     * \r\n     * The key must be non-modified when pressed in order to be captured.\r\n     * \r\n     * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n     * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n     * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n     * However, if the user presses just the r key on its own, it will have its event prevented.\r\n     * \r\n     * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n     * you can toggle the `KeyboardManager.preventDefault` boolean at run-time.\r\n     * \r\n     * If you need more specific control, you can create Key objects and set the flag on each of those instead.\r\n     * \r\n     * This array can be populated via the Game Config by setting the `input.keyboard.capture` array, or you\r\n     * can call the `addCapture` method. See also `removeCapture` and `clearCaptures`.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#captures\r\n     * @type {integer[]}\r\n     * @since 3.16.0\r\n     */\n\n    this.captures = [];\n    /**\r\n     * A boolean that controls if the Keyboard Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Keyboard Event target, as defined in the Game Config.\r\n     * Typically the window in which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#target\r\n     * @type {any}\r\n     * @since 3.16.0\r\n     */\n\n    this.target;\n    /**\r\n     * The Key Down Event handler.\r\n     * This function is sent the native DOM KeyEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#onKeyDown\r\n     * @type {function}\r\n     * @since 3.16.00\r\n     */\n\n    this.onKeyDown = NOOP;\n    /**\r\n     * The Key Up Event handler.\r\n     * This function is sent the native DOM KeyEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#onKeyUp\r\n     * @type {function}\r\n     * @since 3.16.00\r\n     */\n\n    this.onKeyUp = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Keyboard Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#boot\r\n   * @private\r\n   * @since 3.16.0\r\n   */\n  boot: function boot() {\n    var config = this.manager.config;\n    this.enabled = config.inputKeyboard;\n    this.target = config.inputKeyboardEventTarget;\n    this.addCapture(config.inputKeyboardCapture);\n\n    if (!this.target && window) {\n      this.target = window;\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n\n    this.manager.game.events.on(GameEvents.POST_STEP, this.postUpdate, this);\n  },\n\n  /**\r\n   * Starts the Keyboard Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#startListeners\r\n   * @since 3.16.0\r\n   */\n  startListeners: function startListeners() {\n    var _this = this;\n\n    this.onKeyDown = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.queue.push(event);\n\n      if (!_this.manager.useQueue) {\n        _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\n      }\n\n      var modified = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;\n\n      if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n      }\n    };\n\n    this.onKeyUp = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.queue.push(event);\n\n      if (!_this.manager.useQueue) {\n        _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\n      }\n\n      var modified = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;\n\n      if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n      }\n    };\n\n    var target = this.target;\n\n    if (target) {\n      target.addEventListener('keydown', this.onKeyDown, false);\n      target.addEventListener('keyup', this.onKeyUp, false);\n      this.enabled = true;\n    }\n  },\n\n  /**\r\n   * Stops the Key Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#stopListeners\r\n   * @since 3.16.0\r\n   */\n  stopListeners: function stopListeners() {\n    var target = this.target;\n    target.removeEventListener('keydown', this.onKeyDown, false);\n    target.removeEventListener('keyup', this.onKeyUp, false);\n    this.enabled = false;\n  },\n\n  /**\r\n   * Clears the event queue.\r\n   * Called automatically by the Input Manager.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#postUpdate\r\n   * @private\r\n   * @since 3.16.0\r\n   */\n  postUpdate: function postUpdate() {\n    this.queue = [];\n  },\n\n  /**\r\n   * By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\r\n   * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\r\n   *\r\n   * This `addCapture` method enables consuming keyboard event for specific keys so it doesn't bubble up to the the browser\r\n   * and cause the default browser behavior.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\r\n   * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass in a single key code value, or an array of key codes, or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   * \r\n   * If there are active captures after calling this method, the `preventDefault` property is set to `true`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#addCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to enable capture for, preventing them reaching the browser.\r\n   */\n  addCapture: function addCapture(keycode) {\n    if (typeof keycode === 'string') {\n      keycode = keycode.split(',');\n    }\n\n    if (!Array.isArray(keycode)) {\n      keycode = [keycode];\n    }\n\n    var captures = this.captures;\n\n    for (var i = 0; i < keycode.length; i++) {\n      var code = keycode[i];\n\n      if (typeof code === 'string') {\n        code = KeyCodes[code.trim().toUpperCase()];\n      }\n\n      if (captures.indexOf(code) === -1) {\n        captures.push(code);\n      }\n    }\n\n    this.preventDefault = captures.length > 0;\n  },\n\n  /**\r\n   * Removes an existing key capture.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\r\n   * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass in a single key code value, or an array of key codes, or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   * \r\n   * If there are no captures left after calling this method, the `preventDefault` property is set to `false`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#removeCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to disable capture for, allowing them reaching the browser again.\r\n   */\n  removeCapture: function removeCapture(keycode) {\n    if (typeof keycode === 'string') {\n      keycode = keycode.split(',');\n    }\n\n    if (!Array.isArray(keycode)) {\n      keycode = [keycode];\n    }\n\n    var captures = this.captures;\n\n    for (var i = 0; i < keycode.length; i++) {\n      var code = keycode[i];\n\n      if (typeof code === 'string') {\n        code = KeyCodes[code.toUpperCase()];\n      }\n\n      ArrayRemove(captures, code);\n    }\n\n    this.preventDefault = captures.length > 0;\n  },\n\n  /**\r\n   * Removes all keyboard captures and sets the `preventDefault` property to `false`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#clearCaptures\r\n   * @since 3.16.0\r\n   */\n  clearCaptures: function clearCaptures() {\n    this.captures = [];\n    this.preventDefault = false;\n  },\n\n  /**\r\n   * Destroys this Keyboard Manager instance.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#destroy\r\n   * @since 3.16.0\r\n   */\n  destroy: function destroy() {\n    this.stopListeners();\n    this.clearCaptures();\n    this.queue = [];\n    this.manager.game.events.off(GameEvents.POST_RENDER, this.postUpdate, this);\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = KeyboardManager;","map":null,"metadata":{},"sourceType":"script"}