{"ast":null,"code":"/**\r\n* @author       Richard Davey <rich@photonstorm.com>\r\n* @copyright    2019 Photon Storm Ltd.\r\n* @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n*/\nvar BasePlugin = require('./BasePlugin');\n\nvar Class = require('../utils/Class');\n\nvar SceneEvents = require('../scene/events');\n/**\r\n * @classdesc\r\n * A Scene Level Plugin is installed into every Scene and belongs to that Scene.\r\n * It can listen for Scene events and respond to them.\r\n * It can map itself to a Scene property, or into the Scene Systems, or both.\r\n *\r\n * @class ScenePlugin\r\n * @memberof Phaser.Plugins\r\n * @extends Phaser.Plugins.BasePlugin\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that has installed this plugin.\r\n * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the Plugin Manager.\r\n */\n\n\nvar ScenePlugin = new Class({\n  Extends: BasePlugin,\n  initialize: function ScenePlugin(scene, pluginManager) {\n    BasePlugin.call(this, pluginManager);\n    this.scene = scene;\n    this.systems = scene.sys;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n  },\n\n  /**\r\n   * This method is called when the Scene boots. It is only ever called once.\r\n   * \r\n   * By this point the plugin properties `scene` and `systems` will have already been set.\r\n   * \r\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\r\n   * Here are the Scene events you can listen to:\r\n   * \r\n   * start\r\n   * ready\r\n   * preupdate\r\n   * update\r\n   * postupdate\r\n   * resize\r\n   * pause\r\n   * resume\r\n   * sleep\r\n   * wake\r\n   * transitioninit\r\n   * transitionstart\r\n   * transitioncomplete\r\n   * transitionout\r\n   * shutdown\r\n   * destroy\r\n   * \r\n   * At the very least you should offer a destroy handler for when the Scene closes down, i.e:\r\n   *\r\n   * ```javascript\r\n   * var eventEmitter = this.systems.events;\r\n   * eventEmitter.once('destroy', this.sceneDestroy, this);\r\n   * ```\r\n   *\r\n   * @method Phaser.Plugins.ScenePlugin#boot\r\n   * @since 3.8.0\r\n   */\n  boot: function boot() {}\n});\nmodule.exports = ScenePlugin;","map":null,"metadata":{},"sourceType":"script"}