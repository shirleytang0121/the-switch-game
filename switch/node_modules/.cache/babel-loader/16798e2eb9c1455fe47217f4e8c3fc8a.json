{"ast":null,"code":"var AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n/**\r\n * The endpoint that a service will talk to, for example,\r\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\r\n * you need to override an endpoint for a service, you can\r\n * set the endpoint on a service by passing the endpoint\r\n * object with the `endpoint` option key:\r\n *\r\n * ```javascript\r\n * var ep = new AWS.Endpoint('awsproxy.example.com');\r\n * var s3 = new AWS.S3({endpoint: ep});\r\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\r\n * ```\r\n *\r\n * Note that if you do not specify a protocol, the protocol will\r\n * be selected based on your current {AWS.config} configuration.\r\n *\r\n * @!attribute protocol\r\n *   @return [String] the protocol (http or https) of the endpoint\r\n *     URL\r\n * @!attribute hostname\r\n *   @return [String] the host portion of the endpoint, e.g.,\r\n *     example.com\r\n * @!attribute host\r\n *   @return [String] the host portion of the endpoint including\r\n *     the port, e.g., example.com:80\r\n * @!attribute port\r\n *   @return [Integer] the port of the endpoint\r\n * @!attribute href\r\n *   @return [String] the full URL of the endpoint\r\n */\n\nAWS.Endpoint = inherit({\n  /**\r\n   * @overload Endpoint(endpoint)\r\n   *   Constructs a new endpoint given an endpoint URL. If the\r\n   *   URL omits a protocol (http or https), the default protocol\r\n   *   set in the global {AWS.config} will be used.\r\n   *   @param endpoint [String] the URL to construct an endpoint from\r\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint)); // Ensure the port property is set as an integer\n\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n});\n/**\r\n * The low level HTTP request object, encapsulating all HTTP header\r\n * and body data sent by a service request.\r\n *\r\n * @!attribute method\r\n *   @return [String] the HTTP method of the request\r\n * @!attribute path\r\n *   @return [String] the path portion of the URI, e.g.,\r\n *     \"/list/?start=5&num=10\"\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *     a map of header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the request body payload\r\n * @!attribute endpoint\r\n *   @return [AWS.Endpoint] the endpoint for the request\r\n * @!attribute region\r\n *   @api private\r\n *   @return [String] the region, for signing purposes only.\r\n */\n\nAWS.HttpRequest = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this._userAgent = '';\n    this.setUserAgent();\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setUserAgent: function setUserAgent() {\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n  },\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    return prefix + 'User-Agent';\n  },\n\n  /**\r\n   * @api private\r\n   */\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\n    if (typeof agentPartial === 'string' && agentPartial) {\n      this._userAgent += ' ' + agentPartial;\n    }\n\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getUserAgent: function getUserAgent() {\n    return this._userAgent;\n  },\n\n  /**\r\n   * @return [String] the part of the {path} excluding the\r\n   *   query string\r\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\r\n   * @return [String] the query string portion of the {path}\r\n   */\n  search: function search() {\n    var query = this.path.split('?', 2)[1];\n\n    if (query) {\n      query = AWS.util.queryStringParse(query);\n      return AWS.util.queryParamsToString(query);\n    }\n\n    return '';\n  }\n});\n/**\r\n * The low level HTTP response object, encapsulating all HTTP header\r\n * and body data returned from the request.\r\n *\r\n * @!attribute statusCode\r\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *      a map of response header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the response body payload\r\n * @!attribute [r] streaming\r\n *   @return [Boolean] whether this response is being streamed at a low-level.\r\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\r\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\r\n *     instead.\r\n */\n\nAWS.HttpResponse = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n    this.streaming = false;\n    this.stream = null;\n  },\n\n  /**\r\n   * Disables buffering on the HTTP response and returns the stream for reading.\r\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\r\n   *   Use this object to directly read data off of the stream.\r\n   * @note This object is only available after the {AWS.Request~httpHeaders}\r\n   *   event has fired. This method must be called prior to\r\n   *   {AWS.Request~httpData}.\r\n   * @example Taking control of a stream\r\n   *   request.on('httpHeaders', function(statusCode, headers) {\r\n   *     if (statusCode < 300) {\r\n   *       if (headers.etag === 'xyz') {\r\n   *         // pipe the stream, disabling buffering\r\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\r\n   *         stream.pipe(process.stdout);\r\n   *       } else { // abort this request and set a better error message\r\n   *         this.abort();\r\n   *         this.response.error = new Error('Invalid ETag');\r\n   *       }\r\n   *     }\r\n   *   }).send(console.log);\r\n   */\n  createUnbufferedStream: function createUnbufferedStream() {\n    this.streaming = true;\n    return this.stream;\n  }\n});\nAWS.HttpClient = inherit({});\n/**\r\n * @api private\r\n */\n\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n\n  return this.singleton;\n};","map":null,"metadata":{},"sourceType":"script"}