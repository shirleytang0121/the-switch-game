{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.BitmapText#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.BitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar BitmapTextCanvasRenderer = function BitmapTextCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var text = src._text;\n  var textLength = text.length;\n  var ctx = renderer.currentContext;\n\n  if (textLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    return;\n  }\n\n  var textureFrame = src.frame;\n  var chars = src.fontData.chars;\n  var lineHeight = src.fontData.lineHeight;\n  var letterSpacing = src._letterSpacing;\n  var xAdvance = 0;\n  var yAdvance = 0;\n  var charCode = 0;\n  var glyph = null;\n  var glyphX = 0;\n  var glyphY = 0;\n  var glyphW = 0;\n  var glyphH = 0;\n  var x = 0;\n  var y = 0;\n  var lastGlyph = null;\n  var lastCharCode = 0;\n  var image = src.frame.source.image;\n  var textureX = textureFrame.cutX;\n  var textureY = textureFrame.cutY;\n  var scale = src._fontSize / src.fontData.size;\n  var align = src._align;\n  var currentLine = 0;\n  var lineOffsetX = 0; //  Update the bounds - skipped internally if not dirty\n\n  src.getTextBounds(false);\n  var lineData = src._bounds.lines;\n\n  if (align === 1) {\n    lineOffsetX = (lineData.longest - lineData.lengths[0]) / 2;\n  } else if (align === 2) {\n    lineOffsetX = lineData.longest - lineData.lengths[0];\n  }\n\n  ctx.translate(-src.displayOriginX, -src.displayOriginY);\n  var roundPixels = camera.roundPixels;\n\n  for (var i = 0; i < textLength; i++) {\n    charCode = text.charCodeAt(i);\n\n    if (charCode === 10) {\n      currentLine++;\n\n      if (align === 1) {\n        lineOffsetX = (lineData.longest - lineData.lengths[currentLine]) / 2;\n      } else if (align === 2) {\n        lineOffsetX = lineData.longest - lineData.lengths[currentLine];\n      }\n\n      xAdvance = 0;\n      yAdvance += lineHeight;\n      lastGlyph = null;\n      continue;\n    }\n\n    glyph = chars[charCode];\n\n    if (!glyph) {\n      continue;\n    }\n\n    glyphX = textureX + glyph.x;\n    glyphY = textureY + glyph.y;\n    glyphW = glyph.width;\n    glyphH = glyph.height;\n    x = glyph.xOffset + xAdvance;\n    y = glyph.yOffset + yAdvance;\n\n    if (lastGlyph !== null) {\n      var kerningOffset = glyph.kerning[lastCharCode];\n      x += kerningOffset !== undefined ? kerningOffset : 0;\n    }\n\n    x *= scale;\n    y *= scale;\n    x += lineOffsetX;\n    xAdvance += glyph.xAdvance + letterSpacing;\n    lastGlyph = glyph;\n    lastCharCode = charCode; //  Nothing to render or a space? Then skip to the next glyph\n\n    if (glyphW === 0 || glyphH === 0 || charCode === 32) {\n      continue;\n    }\n\n    if (roundPixels) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.scale(scale, scale);\n    ctx.drawImage(image, glyphX, glyphY, glyphW, glyphH, 0, 0, glyphW, glyphH);\n    ctx.restore();\n  }\n\n  ctx.restore();\n};\n\nmodule.exports = BitmapTextCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}