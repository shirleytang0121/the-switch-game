{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Factory = require('./Factory');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Merge = require('../../utils/object/Merge');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar SceneEvents = require('../../scene/events');\n\nvar World = require('./World');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class ImpactPhysics\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\n\nvar ImpactPhysics = new Class({\n  initialize: function ImpactPhysics(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#config\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = this.getConfig();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#add\r\n     * @type {Phaser.Physics.Impact.Factory}\r\n     * @since 3.0.0\r\n     */\n\n    this.add;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.world = new World(this.scene, this.config);\n    this.add = new Factory(this.world);\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    if (!this.world) {\n      this.world = new World(this.scene, this.config);\n      this.add = new Factory(this.world);\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#getConfig\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} [description]\r\n   */\n  getConfig: function getConfig() {\n    var gameConfig = this.systems.game.config.physics;\n    var sceneConfig = this.systems.settings.physics;\n    var config = Merge(GetFastValue(sceneConfig, 'impact', {}), GetFastValue(gameConfig, 'impact', {}));\n    return config;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n   */\n  pause: function pause() {\n    return this.world.pause();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n   */\n  resume: function resume() {\n    return this.world.resume();\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n    this.add.destroy();\n    this.world.destroy();\n    this.add = null;\n    this.world = null;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('ImpactPhysics', ImpactPhysics, 'impactPhysics');\nmodule.exports = ImpactPhysics;","map":null,"metadata":{},"sourceType":"script"}