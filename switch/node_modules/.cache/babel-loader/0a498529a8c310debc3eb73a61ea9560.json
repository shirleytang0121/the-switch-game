{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetValue = require('../utils/object/GetValue'); //  Contains the plugins that Phaser uses globally and locally.\n//  These are the source objects, not instantiated.\n\n\nvar inputPlugins = {};\n/**\r\n * @typedef {object} InputPluginContainer\r\n *\r\n * @property {string} key - The unique name of this plugin in the input plugin cache.\r\n * @property {function} plugin - The plugin to be stored. Should be the source object, not instantiated.\r\n * @property {string} [mapping] - If this plugin is to be injected into the Input Plugin, this is the property key map used.\r\n */\n\n/**\r\n * @namespace Phaser.Input.InputPluginCache\r\n */\n\nvar InputPluginCache = {};\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @name Phaser.Input.InputPluginCache.register\r\n * @type {function}\r\n * @static\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Input Plugin, this is the property key used.\r\n * @param {string} settingsKey - The key in the Scene Settings to check to see if this plugin should install or not.\r\n * @param {string} configKey - The key in the Game Config to check to see if this plugin should install or not.\r\n */\n\nInputPluginCache.register = function (key, plugin, mapping, settingsKey, configKey) {\n  inputPlugins[key] = {\n    plugin: plugin,\n    mapping: mapping,\n    settingsKey: settingsKey,\n    configKey: configKey\n  };\n};\n/**\r\n * Returns the input plugin object from the cache based on the given key.\r\n *\r\n * @name Phaser.Input.InputPluginCache.getCore\r\n * @type {function}\r\n * @static\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - The key of the input plugin to get.\r\n *\r\n * @return {InputPluginContainer} The input plugin object.\r\n */\n\n\nInputPluginCache.getPlugin = function (key) {\n  return inputPlugins[key];\n};\n/**\r\n * Installs all of the registered Input Plugins into the given target.\r\n *\r\n * @name Phaser.Input.InputPluginCache.install\r\n * @type {function}\r\n * @static\r\n * @since 3.10.0\r\n * \r\n * @param {Phaser.Input.InputPlugin} target - The target InputPlugin to install the plugins into.\r\n */\n\n\nInputPluginCache.install = function (target) {\n  var sys = target.scene.sys;\n  var settings = sys.settings.input;\n  var config = sys.game.config;\n\n  for (var key in inputPlugins) {\n    var source = inputPlugins[key].plugin;\n    var mapping = inputPlugins[key].mapping;\n    var settingsKey = inputPlugins[key].settingsKey;\n    var configKey = inputPlugins[key].configKey;\n\n    if (GetValue(settings, settingsKey, config[configKey])) {\n      target[mapping] = new source(target);\n    }\n  }\n};\n/**\r\n * Removes an input plugin based on the given key.\r\n *\r\n * @name Phaser.Input.InputPluginCache.remove\r\n * @type {function}\r\n * @static\r\n * @since 3.10.0\r\n * \r\n * @param {string} key - The key of the input plugin to remove.\r\n */\n\n\nInputPluginCache.remove = function (key) {\n  if (inputPlugins.hasOwnProperty(key)) {\n    delete inputPlugins[key];\n  }\n};\n\nmodule.exports = InputPluginCache;","map":null,"metadata":{},"sourceType":"script"}