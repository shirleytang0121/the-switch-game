{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar GridWebGLRenderer = function GridWebGLRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  var camMatrix = pipeline._tempMatrix1;\n  var shapeMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  renderer.setPipeline(pipeline);\n  shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    shapeMatrix.e = src.x;\n    shapeMatrix.f = src.y;\n  } else {\n    shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\n    shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\n  }\n\n  camMatrix.multiply(shapeMatrix, calcMatrix);\n  calcMatrix.translate(-src._displayOriginX, -src._displayOriginY);\n  var alpha = camera.alpha * src.alpha; //  Work out the grid size\n\n  var width = src.width;\n  var height = src.height;\n  var cellWidth = src.cellWidth;\n  var cellHeight = src.cellHeight;\n  var gridWidth = Math.ceil(width / cellWidth);\n  var gridHeight = Math.ceil(height / cellHeight);\n  var cellWidthA = cellWidth;\n  var cellHeightA = cellHeight;\n  var cellWidthB = cellWidth - (gridWidth * cellWidth - width);\n  var cellHeightB = cellHeight - (gridHeight * cellHeight - height);\n  var fillTint;\n  var fillTintColor;\n  var showCells = src.showCells;\n  var showAltCells = src.showAltCells;\n  var showOutline = src.showOutline;\n  var x = 0;\n  var y = 0;\n  var r = 0;\n  var cw = 0;\n  var ch = 0;\n\n  if (showOutline) {\n    //  To make room for the grid lines (in case alpha < 1)\n    cellWidthA--;\n    cellHeightA--;\n\n    if (cellWidthB === cellWidth) {\n      cellWidthB--;\n    }\n\n    if (cellHeightB === cellHeight) {\n      cellHeightB--;\n    }\n  }\n\n  if (showCells && src.fillAlpha > 0) {\n    fillTint = pipeline.fillTint;\n    fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\n    fillTint.TL = fillTintColor;\n    fillTint.TR = fillTintColor;\n    fillTint.BL = fillTintColor;\n    fillTint.BR = fillTintColor;\n\n    for (y = 0; y < gridHeight; y++) {\n      if (showAltCells) {\n        r = y % 2;\n      }\n\n      for (x = 0; x < gridWidth; x++) {\n        if (showAltCells && r) {\n          r = 0;\n          continue;\n        }\n\n        r++;\n        cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n        ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n        pipeline.setTexture2D();\n        pipeline.batchFillRect(x * cellWidth, y * cellHeight, cw, ch);\n      }\n    }\n  }\n\n  if (showAltCells && src.altFillAlpha > 0) {\n    fillTint = pipeline.fillTint;\n    fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.altFillColor, src.altFillAlpha * alpha);\n    fillTint.TL = fillTintColor;\n    fillTint.TR = fillTintColor;\n    fillTint.BL = fillTintColor;\n    fillTint.BR = fillTintColor;\n\n    for (y = 0; y < gridHeight; y++) {\n      if (showAltCells) {\n        r = y % 2;\n      }\n\n      for (x = 0; x < gridWidth; x++) {\n        if (showAltCells && !r) {\n          r = 1;\n          continue;\n        }\n\n        r = 0;\n        cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n        ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n        pipeline.setTexture2D();\n        pipeline.batchFillRect(x * cellWidth, y * cellHeight, cw, ch);\n      }\n    }\n  }\n\n  if (showOutline && src.outlineFillAlpha > 0) {\n    var strokeTint = pipeline.strokeTint;\n    var color = Utils.getTintAppendFloatAlphaAndSwap(src.outlineFillColor, src.outlineFillAlpha * alpha);\n    strokeTint.TL = color;\n    strokeTint.TR = color;\n    strokeTint.BL = color;\n    strokeTint.BR = color;\n\n    for (x = 1; x < gridWidth; x++) {\n      var x1 = x * cellWidth;\n      pipeline.setTexture2D();\n      pipeline.batchLine(x1, 0, x1, height, 1, 1, 1, 0, false);\n    }\n\n    for (y = 1; y < gridHeight; y++) {\n      var y1 = y * cellHeight;\n      pipeline.setTexture2D();\n      pipeline.batchLine(0, y1, width, y1, 1, 1, 1, 0, false);\n    }\n  }\n};\n\nmodule.exports = GridWebGLRenderer;","map":null,"metadata":{},"sourceType":"script"}