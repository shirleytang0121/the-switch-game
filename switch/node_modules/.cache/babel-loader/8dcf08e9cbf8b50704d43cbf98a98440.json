{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar dataMemory = {};\n/** @class */\n\nvar MemoryStorage = function () {\n  function MemoryStorage() {\n    _classCallCheck(this, MemoryStorage);\n  }\n  /**\r\n   * This is used to set a specific item in storage\r\n   * @param {string} key - the key for the item\r\n   * @param {object} value - the value\r\n   * @returns {string} value that was set\r\n   */\n\n\n  MemoryStorage.setItem = function setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  };\n  /**\r\n   * This is used to get a specific key from storage\r\n   * @param {string} key - the key for the item\r\n   * This is used to clear the storage\r\n   * @returns {string} the data item\r\n   */\n\n\n  MemoryStorage.getItem = function getItem(key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  };\n  /**\r\n   * This is used to remove an item from storage\r\n   * @param {string} key - the key being set\r\n   * @returns {string} value - value that was deleted\r\n   */\n\n\n  MemoryStorage.removeItem = function removeItem(key) {\n    return delete dataMemory[key];\n  };\n  /**\r\n   * This is used to clear the storage\r\n   * @returns {string} nothing\r\n   */\n\n\n  MemoryStorage.clear = function clear() {\n    dataMemory = {};\n    return dataMemory;\n  };\n\n  return MemoryStorage;\n}();\n/** @class */\n\n\nvar StorageHelper = function () {\n  /**\r\n   * This is used to get a storage object\r\n   * @returns {object} the storage\r\n   */\n  function StorageHelper() {\n    _classCallCheck(this, StorageHelper);\n\n    try {\n      this.storageWindow = window.localStorage;\n      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n      this.storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n  /**\r\n   * This is used to return the storage\r\n   * @returns {object} the storage\r\n   */\n\n\n  StorageHelper.prototype.getStorage = function getStorage() {\n    return this.storageWindow;\n  };\n\n  return StorageHelper;\n}();\n\nexport default StorageHelper;","map":null,"metadata":{},"sourceType":"module"}