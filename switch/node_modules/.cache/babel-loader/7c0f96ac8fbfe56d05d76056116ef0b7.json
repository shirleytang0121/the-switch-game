{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Set up the trace-result\r\n * var res = {\r\n *     collision: {x: false, y: false, slope: false},\r\n *     pos: {x: x, y: y},\r\n *     tile: {x: 0, y: 0}\r\n * };\r\n *\r\n * @function Phaser.Physics.Impact.UpdateMotion\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n * @param {object} res - [description]\r\n */\nvar UpdateMotion = function UpdateMotion(body, res) {\n  body.standing = false; //  Y\n\n  if (res.collision.y) {\n    if (body.bounciness > 0 && Math.abs(body.vel.y) > body.minBounceVelocity) {\n      body.vel.y *= -body.bounciness;\n    } else {\n      if (body.vel.y > 0) {\n        body.standing = true;\n      }\n\n      body.vel.y = 0;\n    }\n  } //  X\n\n\n  if (res.collision.x) {\n    if (body.bounciness > 0 && Math.abs(body.vel.x) > body.minBounceVelocity) {\n      body.vel.x *= -body.bounciness;\n    } else {\n      body.vel.x = 0;\n    }\n  } //  SLOPE\n\n\n  if (res.collision.slope) {\n    var s = res.collision.slope;\n\n    if (body.bounciness > 0) {\n      var proj = body.vel.x * s.nx + body.vel.y * s.ny;\n      body.vel.x = (body.vel.x - s.nx * proj * 2) * body.bounciness;\n      body.vel.y = (body.vel.y - s.ny * proj * 2) * body.bounciness;\n    } else {\n      var lengthSquared = s.x * s.x + s.y * s.y;\n      var dot = (body.vel.x * s.x + body.vel.y * s.y) / lengthSquared;\n      body.vel.x = s.x * dot;\n      body.vel.y = s.y * dot;\n      var angle = Math.atan2(s.x, s.y);\n\n      if (angle > body.slopeStanding.min && angle < body.slopeStanding.max) {\n        body.standing = true;\n      }\n    }\n  }\n\n  body.pos.x = res.pos.x;\n  body.pos.y = res.pos.y;\n};\n\nmodule.exports = UpdateMotion;","map":null,"metadata":{},"sourceType":"script"}