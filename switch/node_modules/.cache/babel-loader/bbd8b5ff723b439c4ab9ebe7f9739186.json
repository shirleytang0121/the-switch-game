{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar Gamepad = require('./Gamepad');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar InputPluginCache = require('../InputPluginCache');\n\nvar InputEvents = require('../events');\n/**\r\n * @typedef {object} Pad\r\n *\r\n * @property {string} id - The ID of the Gamepad.\r\n * @property {integer} index - The index of the Gamepad.\r\n */\n\n/**\r\n * @classdesc\r\n * The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n *\r\n * Its role is to listen for native DOM Gamepad Events and then process them.\r\n *\r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n *\r\n * You can access it from within a Scene using `this.input.gamepad`.\r\n *\r\n * To listen for a gamepad being connected:\r\n *\r\n * ```javascript\r\n * this.input.gamepad.once('connected', function (pad) {\r\n *     //   'pad' is a reference to the gamepad that was just connected\r\n * });\r\n * ```\r\n *\r\n * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\r\n * this is for security reasons. However, it may also trust the page already, in which case you won't get the\r\n * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\r\n * already connected.\r\n *\r\n * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\r\n * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\r\n * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\r\n * the `Gamepad` class for more details.\r\n *\r\n * For more information about Gamepad support in browsers see the following resources:\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\r\n * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\r\n * http://html5gamepad.com/\r\n *\r\n * @class GamepadPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\n\n\nvar GamepadPlugin = new Class({\n  Extends: EventEmitter,\n  initialize: function GamepadPlugin(sceneInputPlugin) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Scene that this Input Plugin is responsible for.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.10.0\r\n     */\n\n    this.scene = sceneInputPlugin.scene;\n    /**\r\n     * A reference to the Scene Systems Settings.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#settings\r\n     * @type {Phaser.Scenes.Settings.Object}\r\n     * @since 3.10.0\r\n     */\n\n    this.settings = this.scene.sys.settings;\n    /**\r\n     * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#sceneInputPlugin\r\n     * @type {Phaser.Input.InputPlugin}\r\n     * @since 3.10.0\r\n     */\n\n    this.sceneInputPlugin = sceneInputPlugin;\n    /**\r\n     * A boolean that controls if the Gamepad Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.10.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The Gamepad Event target, as defined in the Game Config.\r\n     * Typically the browser window, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#target\r\n     * @type {any}\r\n     * @since 3.10.0\r\n     */\n\n    this.target;\n    /**\r\n     * An array of the connected Gamepads.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#gamepads\r\n     * @type {Phaser.Input.Gamepad.Gamepad[]}\r\n     * @default []\r\n     * @since 3.10.0\r\n     */\n\n    this.gamepads = [];\n    /**\r\n     * An internal event queue.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#queue\r\n     * @type {GamepadEvent[]}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this.queue = [];\n    /**\r\n     * Internal event handler.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#onGamepadHandler\r\n     * @type {function}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this.onGamepadHandler;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad1\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad1;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad2\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad2;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad3\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad3;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad4\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad4;\n    sceneInputPlugin.pluginEvents.once(InputEvents.BOOT, this.boot, this);\n    sceneInputPlugin.pluginEvents.on(InputEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#boot\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  boot: function boot() {\n    var game = this.scene.sys.game;\n    var settings = this.settings.input;\n    var config = game.config;\n    this.enabled = GetValue(settings, 'gamepad', config.inputGamepad) && game.device.input.gamepads;\n    this.target = GetValue(settings, 'gamepad.target', config.inputGamepadEventTarget);\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#start\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  start: function start() {\n    if (this.enabled) {\n      this.startListeners();\n    }\n\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#isActive\r\n   * @since 3.10.0\r\n   *\r\n   * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n   */\n  isActive: function isActive() {\n    return this.enabled && this.scene.sys.isActive();\n  },\n\n  /**\r\n   * Starts the Gamepad Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#startListeners\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  startListeners: function startListeners() {\n    var _this = this;\n\n    var target = this.target;\n\n    var handler = function handler(event) {\n      // console.log(event);\n      if (event.defaultPrevented || !_this.isActive()) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.refreshPads();\n\n      _this.queue.push(event);\n    };\n\n    this.onGamepadHandler = handler;\n    target.addEventListener('gamepadconnected', handler, false);\n    target.addEventListener('gamepaddisconnected', handler, false); //  FF also supports gamepadbuttondown, gamepadbuttonup and gamepadaxismove but\n    //  nothing else does, and we can get those values via the gamepads anyway, so we will\n    //  until more browsers support this\n    //  Finally, listen for an update event from the Input Plugin\n\n    this.sceneInputPlugin.pluginEvents.on(InputEvents.UPDATE, this.update, this);\n  },\n\n  /**\r\n   * Stops the Gamepad Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#stopListeners\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  stopListeners: function stopListeners() {\n    this.target.removeEventListener('gamepadconnected', this.onGamepadHandler);\n    this.target.removeEventListener('gamepaddisconnected', this.onGamepadHandler);\n    this.sceneInputPlugin.pluginEvents.off(InputEvents.UPDATE, this.update);\n  },\n\n  /**\r\n   * Disconnects all current Gamepads.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#disconnectAll\r\n   * @since 3.10.0\r\n   */\n  disconnectAll: function disconnectAll() {\n    for (var i = 0; i < this.gamepads.length; i++) {\n      this.gamepads.connected = false;\n    }\n  },\n\n  /**\r\n   * Refreshes the list of connected Gamepads.\r\n   *\r\n   * This is called automatically when a gamepad is connected or disconnected,\r\n   * and during the update loop.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#refreshPads\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  refreshPads: function refreshPads() {\n    var connectedPads = navigator.getGamepads();\n\n    if (!connectedPads) {\n      this.disconnectAll();\n    } else {\n      var currentPads = this.gamepads;\n\n      for (var i = 0; i < connectedPads.length; i++) {\n        var livePad = connectedPads[i]; //  Because sometimes they're null (yes, really)\n\n        if (!livePad) {\n          continue;\n        }\n\n        var id = livePad.id;\n        var index = livePad.index;\n        var currentPad = currentPads[index];\n\n        if (!currentPad) {\n          //  A new Gamepad, not currently stored locally\n          var newPad = new Gamepad(this, livePad);\n          currentPads[index] = newPad;\n\n          if (!this._pad1) {\n            this._pad1 = newPad;\n          } else if (!this._pad2) {\n            this._pad2 = newPad;\n          } else if (!this._pad3) {\n            this._pad3 = newPad;\n          } else if (!this._pad4) {\n            this._pad4 = newPad;\n          }\n        } else if (currentPad.id !== id) {\n          //  A new Gamepad with a different vendor string, but it has got the same index as an old one\n          currentPad.destroy();\n          currentPads[index] = new Gamepad(this, livePad);\n        } else {\n          //  If neither of these, it's a pad we've already got, so update it\n          currentPad.update(livePad);\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Returns an array of all currently connected Gamepads.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#getAll\r\n   * @since 3.10.0\r\n   *\r\n   * @return {Phaser.Input.Gamepad.Gamepad[]} An array of all currently connected Gamepads.\r\n   */\n  getAll: function getAll() {\n    var out = [];\n    var pads = this.gamepads;\n\n    for (var i = 0; i < pads.length; i++) {\n      if (pads[i]) {\n        out.push(pads[i]);\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Looks-up a single Gamepad based on the given index value.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#getPad\r\n   * @since 3.10.0\r\n   *\r\n   * @param {number} index - The index of the Gamepad to get.\r\n   *\r\n   * @return {Phaser.Input.Gamepad.Gamepad} The Gamepad matching the given index, or undefined if none were found.\r\n   */\n  getPad: function getPad(index) {\n    var pads = this.gamepads;\n\n    for (var i = 0; i < pads.length; i++) {\n      if (pads[i] && pads[i].index === index) {\n        return pads[i];\n      }\n    }\n  },\n\n  /**\r\n   * The internal update loop. Refreshes all connected gamepads and processes their events.\r\n   *\r\n   * Called automatically by the Input Manager, invoked from the Game step.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#update\r\n   * @private\r\n   * @fires Phaser.Input.Gamepad.Events#CONNECTED\r\n   * @fires Phaser.Input.Gamepad.Events#DISCONNECTED\r\n   * @since 3.10.0\r\n   */\n  update: function update() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.refreshPads();\n    var len = this.queue.length;\n\n    if (len === 0) {\n      return;\n    }\n\n    var queue = this.queue.splice(0, len); //  Process the event queue, dispatching all of the events that have stored up\n\n    for (var i = 0; i < len; i++) {\n      var event = queue[i];\n      var pad = this.getPad(event.gamepad.index);\n\n      if (event.type === 'gamepadconnected') {\n        this.emit(Events.CONNECTED, pad, event);\n      } else if (event.type === 'gamepaddisconnected') {\n        this.emit(Events.DISCONNECTED, pad, event);\n      }\n    }\n  },\n\n  /**\r\n   * Shuts the Gamepad Plugin down.\r\n   * All this does is remove any listeners bound to it.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#shutdown\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  shutdown: function shutdown() {\n    this.stopListeners();\n    this.disconnectAll();\n    this.removeAllListeners();\n  },\n\n  /**\r\n   * Destroys this Gamepad Plugin, disconnecting all Gamepads and releasing internal references.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#destroy\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n\n    for (var i = 0; i < this.gamepads.length; i++) {\n      if (this.gamepads[i]) {\n        this.gamepads[i].destroy();\n      }\n    }\n\n    this.gamepads = [];\n    this.scene = null;\n    this.settings = null;\n    this.sceneInputPlugin = null;\n    this.target = null;\n  },\n\n  /**\r\n   * The total number of connected game pads.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#total\r\n   * @type {integer}\r\n   * @since 3.10.0\r\n   */\n  total: {\n    get: function get() {\n      return this.gamepads.length;\n    }\n  },\n\n  /**\r\n   * A reference to the first connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad1\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad1: {\n    get: function get() {\n      return this._pad1;\n    }\n  },\n\n  /**\r\n   * A reference to the second connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad2\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad2: {\n    get: function get() {\n      return this._pad2;\n    }\n  },\n\n  /**\r\n   * A reference to the third connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad3\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad3: {\n    get: function get() {\n      return this._pad3;\n    }\n  },\n\n  /**\r\n   * A reference to the fourth connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad4\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad4: {\n    get: function get() {\n      return this._pad4;\n    }\n  }\n});\n/**\r\n * An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\r\n * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.\r\n *\r\n * @name Phaser.Input.InputPlugin#gamepad\r\n * @type {?Phaser.Input.Gamepad.GamepadPlugin}\r\n * @since 3.10.0\r\n */\n\nInputPluginCache.register('GamepadPlugin', GamepadPlugin, 'gamepad', 'gamepad', 'inputGamepad');\nmodule.exports = GamepadPlugin;","map":null,"metadata":{},"sourceType":"script"}