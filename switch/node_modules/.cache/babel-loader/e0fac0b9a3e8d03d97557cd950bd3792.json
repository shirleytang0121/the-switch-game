{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar MeshRender = require('./MeshRender');\n\nvar NOOP = require('../../utils/NOOP');\n/**\r\n * @classdesc\r\n * A Mesh Game Object.\r\n *\r\n * @class Mesh\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar Mesh = new Class({\n  Extends: GameObject,\n  Mixins: [Components.BlendMode, Components.Depth, Components.GetBounds, Components.Mask, Components.Pipeline, Components.ScaleMode, Components.Size, Components.Texture, Components.Transform, Components.Visible, Components.ScrollFactor, MeshRender],\n  initialize: function Mesh(scene, x, y, vertices, uv, colors, alphas, texture, frame) {\n    GameObject.call(this, scene, 'Mesh');\n\n    if (vertices.length !== uv.length) {\n      throw new Error('Mesh Vertex count must match UV count');\n    }\n\n    var verticesUB = vertices.length / 2 | 0;\n\n    if (colors.length > 0 && colors.length < verticesUB) {\n      throw new Error('Mesh Color count must match Vertex count');\n    }\n\n    if (alphas.length > 0 && alphas.length < verticesUB) {\n      throw new Error('Mesh Alpha count must match Vertex count');\n    }\n\n    var i;\n\n    if (colors.length === 0) {\n      for (i = 0; i < verticesUB; ++i) {\n        colors[i] = 0xFFFFFF;\n      }\n    }\n\n    if (alphas.length === 0) {\n      for (i = 0; i < verticesUB; ++i) {\n        alphas[i] = 1.0;\n      }\n    }\n    /**\r\n     * An array containing the vertices data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#vertices\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.vertices = new Float32Array(vertices);\n    /**\r\n     * An array containing the uv data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#uv\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.uv = new Float32Array(uv);\n    /**\r\n     * An array containing the color data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#colors\r\n     * @type {Uint32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.colors = new Uint32Array(colors);\n    /**\r\n     * An array containing the alpha data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#alphas\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.alphas = new Float32Array(alphas);\n    /**\r\n     * Fill or additive mode used when blending the color values?\r\n     * \r\n     * @name Phaser.GameObjects.Mesh#tintFill\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.11.0\r\n     */\n\n    this.tintFill = false;\n    this.setTexture(texture, frame);\n    this.setPosition(x, y);\n    this.setSizeToFrame();\n    this.initPipeline();\n  },\n\n  /**\r\n   * This method is left intentionally empty and does not do anything.\r\n   * It is retained to allow a Mesh or Quad to be added to a Container.\r\n   * \r\n   * @method Phaser.GameObjects.Mesh#setAlpha\r\n   * @since 3.17.0\r\n   */\n  setAlpha: NOOP\n});\nmodule.exports = Mesh;","map":null,"metadata":{},"sourceType":"script"}