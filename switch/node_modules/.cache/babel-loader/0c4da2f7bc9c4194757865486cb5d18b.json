{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar Random = require('./Random');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * Defines a Line segment, a part of a line between two endpoints.\r\n *\r\n * @class Line\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n */\n\n\nvar Line = new Class({\n  initialize: function Line(x1, y1, x2, y2) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n    /**\r\n     * The x coordinate of the lines starting point.\r\n     *\r\n     * @name Phaser.Geom.Line#x1\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x1 = x1;\n    /**\r\n     * The y coordinate of the lines starting point.\r\n     *\r\n     * @name Phaser.Geom.Line#y1\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y1 = y1;\n    /**\r\n     * The x coordinate of the lines ending point.\r\n     *\r\n     * @name Phaser.Geom.Line#x2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.x2 = x2;\n    /**\r\n     * The y coordinate of the lines ending point.\r\n     *\r\n     * @name Phaser.Geom.Line#y2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y2 = y2;\n  },\n\n  /**\r\n   * Get a point on a line that's a given percentage along its length.\r\n   *\r\n   * @method Phaser.Geom.Line#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - An optional point, or point-like object, to store the coordinates of the point on the line.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point on the line.\r\n   */\n  getPoint: function getPoint(position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Get a number of points along a line's length.\r\n   *\r\n   * Provide a `quantity` to get an exact number of points along the line.\r\n   *\r\n   * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n   * providing a `stepRate`.\r\n   *\r\n   * @method Phaser.Geom.Line#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n   * @param {integer} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n   */\n  getPoints: function getPoints(quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Get a random Point on the Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {(Phaser.Geom.Point|object)} [point] - An instance of a Point to be modified.\r\n   *\r\n   * @return {Phaser.Geom.Point} A random Point on the Line.\r\n   */\n  getRandomPoint: function getRandomPoint(point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Set new coordinates for the line endpoints.\r\n   *\r\n   * @method Phaser.Geom.Line#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n   * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n   * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n   * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n   *\r\n   * @return {Phaser.Geom.Line} This Line object.\r\n   */\n  setTo: function setTo(x1, y1, x2, y2) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    return this;\n  },\n\n  /**\r\n   * Returns a Vector2 object that corresponds to the start of this Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getPointA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the start of this Line.\r\n   */\n  getPointA: function getPointA(vec2) {\n    if (vec2 === undefined) {\n      vec2 = new Vector2();\n    }\n\n    vec2.set(this.x1, this.y1);\n    return vec2;\n  },\n\n  /**\r\n   * Returns a Vector2 object that corresponds to the end of this Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getPointB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the end of this Line.\r\n   */\n  getPointB: function getPointB(vec2) {\n    if (vec2 === undefined) {\n      vec2 = new Vector2();\n    }\n\n    vec2.set(this.x2, this.y2);\n    return vec2;\n  },\n\n  /**\r\n   * The left position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function get() {\n      return Math.min(this.x1, this.x2);\n    },\n    set: function set(value) {\n      if (this.x1 <= this.x2) {\n        this.x1 = value;\n      } else {\n        this.x2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The right position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function get() {\n      return Math.max(this.x1, this.x2);\n    },\n    set: function set(value) {\n      if (this.x1 > this.x2) {\n        this.x1 = value;\n      } else {\n        this.x2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The top position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function get() {\n      return Math.min(this.y1, this.y2);\n    },\n    set: function set(value) {\n      if (this.y1 <= this.y2) {\n        this.y1 = value;\n      } else {\n        this.y2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The bottom position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function get() {\n      return Math.max(this.y1, this.y2);\n    },\n    set: function set(value) {\n      if (this.y1 > this.y2) {\n        this.y1 = value;\n      } else {\n        this.y2 = value;\n      }\n    }\n  }\n});\nmodule.exports = Line;","map":null,"metadata":{},"sourceType":"script"}