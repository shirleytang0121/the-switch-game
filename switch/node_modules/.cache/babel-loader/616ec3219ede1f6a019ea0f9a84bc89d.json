{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DynamicBitmapText#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.DynamicBitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar DynamicBitmapTextCanvasRenderer = function DynamicBitmapTextCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var text = src.text;\n  var textLength = text.length;\n  var ctx = renderer.currentContext;\n\n  if (textLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    return;\n  }\n\n  var textureFrame = src.frame;\n  var displayCallback = src.displayCallback;\n  var callbackData = src.callbackData;\n  var cameraScrollX = camera.scrollX * src.scrollFactorX;\n  var cameraScrollY = camera.scrollY * src.scrollFactorY;\n  var chars = src.fontData.chars;\n  var lineHeight = src.fontData.lineHeight;\n  var xAdvance = 0;\n  var yAdvance = 0;\n  var indexCount = 0;\n  var charCode = 0;\n  var glyph = null;\n  var glyphX = 0;\n  var glyphY = 0;\n  var glyphW = 0;\n  var glyphH = 0;\n  var x = 0;\n  var y = 0;\n  var lastGlyph = null;\n  var lastCharCode = 0;\n  var image = src.frame.source.image;\n  var textureX = textureFrame.cutX;\n  var textureY = textureFrame.cutY;\n  var rotation = 0;\n  var scale = src.fontSize / src.fontData.size;\n\n  if (src.cropWidth > 0 && src.cropHeight > 0) {\n    ctx.beginPath();\n    ctx.rect(0, 0, src.cropWidth, src.cropHeight);\n    ctx.clip();\n  }\n\n  for (var index = 0; index < textLength; ++index) {\n    //  Reset the scale (in case the callback changed it)\n    scale = src.fontSize / src.fontData.size;\n    rotation = 0;\n    charCode = text.charCodeAt(index);\n\n    if (charCode === 10) {\n      xAdvance = 0;\n      indexCount = 0;\n      yAdvance += lineHeight;\n      lastGlyph = null;\n      continue;\n    }\n\n    glyph = chars[charCode];\n\n    if (!glyph) {\n      continue;\n    }\n\n    glyphX = textureX + glyph.x;\n    glyphY = textureY + glyph.y;\n    glyphW = glyph.width;\n    glyphH = glyph.height;\n    x = indexCount + glyph.xOffset + xAdvance - src.scrollX;\n    y = glyph.yOffset + yAdvance - src.scrollY; //  This could be optimized so that it doesn't even bother drawing it if the x/y is out of range\n\n    if (lastGlyph !== null) {\n      var kerningOffset = glyph.kerning[lastCharCode];\n      x += kerningOffset !== undefined ? kerningOffset : 0;\n    }\n\n    if (displayCallback) {\n      callbackData.index = index;\n      callbackData.charCode = charCode;\n      callbackData.x = x;\n      callbackData.y = y;\n      callbackData.scale = scale;\n      callbackData.rotation = rotation;\n      callbackData.data = glyph.data;\n      var output = displayCallback(callbackData);\n      x = output.x;\n      y = output.y;\n      scale = output.scale;\n      rotation = output.rotation;\n    }\n\n    x *= scale;\n    y *= scale;\n    x -= cameraScrollX;\n    y -= cameraScrollY;\n\n    if (camera.roundPixels) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotation);\n    ctx.scale(scale, scale);\n    ctx.drawImage(image, glyphX, glyphY, glyphW, glyphH, 0, 0, glyphW, glyphH);\n    ctx.restore();\n    xAdvance += glyph.xAdvance;\n    indexCount += 1;\n    lastGlyph = glyph;\n    lastCharCode = charCode;\n  } //  Restore the context saved in SetTransform\n\n\n  ctx.restore();\n};\n\nmodule.exports = DynamicBitmapTextCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}