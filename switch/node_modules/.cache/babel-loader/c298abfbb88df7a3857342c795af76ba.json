{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A Bob Game Object.\r\n *\r\n * A Bob belongs to a Blitter Game Object. The Blitter is responsible for managing and rendering this object.\r\n *\r\n * A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle\r\n * the flipped and visible state of the Bob. The Frame the Bob uses to render can be changed dynamically, but it\r\n * must be a Frame within the Texture used by the parent Blitter.\r\n *\r\n * Bob positions are relative to the Blitter parent. So if you move the Blitter parent, all Bob children will\r\n * have their positions impacted by this change as well.\r\n *\r\n * You can manipulate Bob objects directly from your game code, but the creation and destruction of them should be\r\n * handled via the Blitter parent.\r\n *\r\n * @class Bob\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Blitter} blitter - The parent Blitter object is responsible for updating this Bob.\r\n * @param {number} x - The horizontal position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {number} y - The vertical position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {(string|integer)} frame - The Frame this Bob will render with, as defined in the Texture the parent Blitter is using.\r\n * @param {boolean} visible - Should the Bob render visible or not to start with?\r\n */\n\n\nvar Bob = new Class({\n  initialize: function Bob(blitter, x, y, frame, visible) {\n    /**\r\n     * The Blitter object that this Bob belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#parent\r\n     * @type {Phaser.GameObjects.Blitter}\r\n     * @since 3.0.0\r\n     */\n    this.parent = blitter;\n    /**\r\n     * The x position of this Bob, relative to the x position of the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The y position of this Bob, relative to the y position of the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The frame that the Bob uses to render with.\r\n     * To change the frame use the `Bob.setFrame` method.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = frame;\n    /**\r\n     * A blank object which can be used to store data related to this Bob in.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#data\r\n     * @type {object}\r\n     * @default {}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = {};\n    /**\r\n     * The visible state of this Bob.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#_visible\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._visible = visible;\n    /**\r\n     * The alpha value of this Bob.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#_alpha\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._alpha = 1;\n    /**\r\n     * The horizontally flipped state of the Bob.\r\n     * A Bob that is flipped horizontally will render inversed on the horizontal axis.\r\n     * Flipping always takes place from the middle of the texture.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#flipX\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.flipX = false;\n    /**\r\n     * The vertically flipped state of the Bob.\r\n     * A Bob that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\r\n     * Flipping always takes place from the middle of the texture.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#flipY\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.flipY = false;\n  },\n\n  /**\r\n   * Changes the Texture Frame being used by this Bob.\r\n   * The frame must be part of the Texture the parent Blitter is using.\r\n   * If no value is given it will use the default frame of the Blitter parent.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The frame to be used during rendering.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFrame: function setFrame(frame) {\n    if (frame === undefined) {\n      this.frame = this.parent.frame;\n    } else {\n      this.frame = this.parent.texture.get(frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Resets the horizontal and vertical flipped state of this Bob back to their default un-flipped state.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#resetFlip\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  resetFlip: function resetFlip() {\n    this.flipX = false;\n    this.flipY = false;\n    return this;\n  },\n\n  /**\r\n   * Resets this Bob.\r\n   *\r\n   * Changes the position to the values given, and optionally changes the frame.\r\n   *\r\n   * Also resets the flipX and flipY values, sets alpha back to 1 and visible to true.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  reset: function reset(x, y, frame) {\n    this.x = x;\n    this.y = y;\n    this.flipX = false;\n    this.flipY = false;\n    this._alpha = 1;\n    this._visible = true;\n    this.parent.dirty = true;\n\n    if (frame) {\n      this.setFrame(frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlipX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlipX: function setFlipX(value) {\n    this.flipX = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlipY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlipY: function setFlipY(value) {\n    this.flipY = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal and vertical flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlip\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} x - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n   * @param {boolean} y - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlip: function setFlip(x, y) {\n    this.flipX = x;\n    this.flipY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the visibility of this Bob.\r\n   * \r\n   * An invisible Bob will skip rendering.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setVisible\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The visible state of the Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setVisible: function setVisible(value) {\n    this.visible = value;\n    return this;\n  },\n\n  /**\r\n   * Set the Alpha level of this Bob. The alpha controls the opacity of the Game Object as it renders.\r\n   * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n   * \r\n   * A Bob with alpha 0 will skip rendering.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The alpha value used for this Bob. Between 0 and 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setAlpha: function setAlpha(value) {\n    this.alpha = value;\n    return this;\n  },\n\n  /**\r\n   * Destroys this Bob instance.\r\n   * Removes itself from the Blitter and clears the parent, frame and data properties.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.parent.dirty = true;\n    this.parent.children.remove(this);\n    this.parent = undefined;\n    this.frame = undefined;\n    this.data = undefined;\n  },\n\n  /**\r\n   * The visible state of the Bob.\r\n   * \r\n   * An invisible Bob will skip rendering.\r\n   *\r\n   * @name Phaser.GameObjects.Bob#visible\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  visible: {\n    get: function get() {\n      return this._visible;\n    },\n    set: function set(value) {\n      this._visible = value;\n      this.parent.dirty = true;\n    }\n  },\n\n  /**\r\n   * The alpha value of the Bob, between 0 and 1.\r\n   * \r\n   * A Bob with alpha 0 will skip rendering.\r\n   *\r\n   * @name Phaser.GameObjects.Bob#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function get() {\n      return this._alpha;\n    },\n    set: function set(value) {\n      this._alpha = value;\n      this.parent.dirty = true;\n    }\n  }\n});\nmodule.exports = Bob;","map":null,"metadata":{},"sourceType":"script"}