{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Vector3 = require('../math/Vector3');\n\nvar Matrix4 = require('../math/Matrix4');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar tmpMat4 = new Matrix4();\nvar tmpQuat = new Quaternion();\nvar tmpVec3 = new Vector3();\n/**\r\n * Rotates a vector in place by axis angle.\r\n *\r\n * This is the same as transforming a point by an\r\n * axis-angle quaternion, but it has higher precision.\r\n *\r\n * @function Phaser.Math.RotateVec3\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec - The vector to be rotated.\r\n * @param {Phaser.Math.Vector3} axis - The axis to rotate around.\r\n * @param {number} radians - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Math.Vector3} The given vector.\r\n */\n\nvar RotateVec3 = function RotateVec3(vec, axis, radians) {\n  //  Set the quaternion to our axis angle\n  tmpQuat.setAxisAngle(axis, radians); //  Create a rotation matrix from the axis angle\n\n  tmpMat4.fromRotationTranslation(tmpQuat, tmpVec3.set(0, 0, 0)); //  Multiply our vector by the rotation matrix\n\n  return vec.transformMat4(tmpMat4);\n};\n\nmodule.exports = RotateVec3;","map":null,"metadata":{},"sourceType":"script"}