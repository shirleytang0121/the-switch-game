{"ast":null,"code":"/**\r\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\r\n*\r\n* @class Plugin\r\n*/\nvar Plugin = {};\nmodule.exports = Plugin;\n\nvar Common = require('./Common');\n\n(function () {\n  Plugin._registry = {};\n  /**\r\n   * Registers a plugin object so it can be resolved later by name.\r\n   * @method register\r\n   * @param plugin {} The plugin to register.\r\n   * @return {object} The plugin.\r\n   */\n\n  Plugin.register = function (plugin) {\n    if (!Plugin.isPlugin(plugin)) {\n      Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n    }\n\n    if (plugin.name in Plugin._registry) {\n      var registered = Plugin._registry[plugin.name],\n          pluginVersion = Plugin.versionParse(plugin.version).number,\n          registeredVersion = Plugin.versionParse(registered.version).number;\n\n      if (pluginVersion > registeredVersion) {\n        Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n        Plugin._registry[plugin.name] = plugin;\n      } else if (pluginVersion < registeredVersion) {\n        Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n      } else if (plugin !== registered) {\n        Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n      }\n    } else {\n      Plugin._registry[plugin.name] = plugin;\n    }\n\n    return plugin;\n  };\n  /**\r\n   * Resolves a dependency to a plugin object from the registry if it exists. \r\n   * The `dependency` may contain a version, but only the name matters when resolving.\r\n   * @method resolve\r\n   * @param dependency {string} The dependency.\r\n   * @return {object} The plugin if resolved, otherwise `undefined`.\r\n   */\n\n\n  Plugin.resolve = function (dependency) {\n    return Plugin._registry[Plugin.dependencyParse(dependency).name];\n  };\n  /**\r\n   * Returns a pretty printed plugin name and version.\r\n   * @method toString\r\n   * @param plugin {} The plugin.\r\n   * @return {string} Pretty printed plugin name and version.\r\n   */\n\n\n  Plugin.toString = function (plugin) {\n    return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n  };\n  /**\r\n   * Returns `true` if the object meets the minimum standard to be considered a plugin.\r\n   * This means it must define the following properties:\r\n   * - `name`\r\n   * - `version`\r\n   * - `install`\r\n   * @method isPlugin\r\n   * @param obj {} The obj to test.\r\n   * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\r\n   */\n\n\n  Plugin.isPlugin = function (obj) {\n    return obj && obj.name && obj.version && obj.install;\n  };\n  /**\r\n   * Returns `true` if a plugin with the given `name` been installed on `module`.\r\n   * @method isUsed\r\n   * @param module {} The module.\r\n   * @param name {string} The plugin name.\r\n   * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\r\n   */\n\n\n  Plugin.isUsed = function (module, name) {\n    return module.used.indexOf(name) > -1;\n  };\n  /**\r\n   * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\r\n   * If `plugin.for` is not specified then it is assumed to be applicable.\r\n   * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\r\n   * @method isFor\r\n   * @param plugin {} The plugin.\r\n   * @param module {} The module.\r\n   * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\r\n   */\n\n\n  Plugin.isFor = function (plugin, module) {\n    var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n    return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n  };\n  /**\r\n   * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\r\n   * For installing plugins on `Matter` see the convenience function `Matter.use`.\r\n   * Plugins may be specified either by their name or a reference to the plugin object.\r\n   * Plugins themselves may specify further dependencies, but each plugin is installed only once.\r\n   * Order is important, a topological sort is performed to find the best resulting order of installation.\r\n   * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\r\n   * This function logs the resulting status of each dependency in the console, along with any warnings.\r\n   * - A green tick ‚úÖ indicates a dependency was resolved and installed.\r\n   * - An orange diamond üî∂ indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\r\n   * - A red cross ‚ùå indicates a dependency could not be resolved.\r\n   * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\r\n   * @method use\r\n   * @param module {} The module install plugins on.\r\n   * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\r\n   */\n\n\n  Plugin.use = function (module, plugins) {\n    module.uses = (module.uses || []).concat(plugins || []);\n\n    if (module.uses.length === 0) {\n      Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n      return;\n    }\n\n    var dependencies = Plugin.dependencies(module),\n        sortedDependencies = Common.topologicalSort(dependencies),\n        status = [];\n\n    for (var i = 0; i < sortedDependencies.length; i += 1) {\n      if (sortedDependencies[i] === module.name) {\n        continue;\n      }\n\n      var plugin = Plugin.resolve(sortedDependencies[i]);\n\n      if (!plugin) {\n        status.push('‚ùå ' + sortedDependencies[i]);\n        continue;\n      }\n\n      if (Plugin.isUsed(module, plugin.name)) {\n        continue;\n      }\n\n      if (!Plugin.isFor(plugin, module)) {\n        Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n        plugin._warned = true;\n      }\n\n      if (plugin.install) {\n        plugin.install(module);\n      } else {\n        Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n        plugin._warned = true;\n      }\n\n      if (plugin._warned) {\n        status.push('üî∂ ' + Plugin.toString(plugin));\n        delete plugin._warned;\n      } else {\n        status.push('‚úÖ ' + Plugin.toString(plugin));\n      }\n\n      module.used.push(plugin.name);\n    }\n\n    if (status.length > 0 && !plugin.silent) {\n      Common.info(status.join('  '));\n    }\n  };\n  /**\r\n   * Recursively finds all of a module's dependencies and returns a flat dependency graph.\r\n   * @method dependencies\r\n   * @param module {} The module.\r\n   * @return {object} A dependency graph.\r\n   */\n\n\n  Plugin.dependencies = function (module, tracked) {\n    var parsedBase = Plugin.dependencyParse(module),\n        name = parsedBase.name;\n    tracked = tracked || {};\n\n    if (name in tracked) {\n      return;\n    }\n\n    module = Plugin.resolve(module) || module;\n    tracked[name] = Common.map(module.uses || [], function (dependency) {\n      if (Plugin.isPlugin(dependency)) {\n        Plugin.register(dependency);\n      }\n\n      var parsed = Plugin.dependencyParse(dependency),\n          resolved = Plugin.resolve(dependency);\n\n      if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n        Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n        resolved._warned = true;\n        module._warned = true;\n      } else if (!resolved) {\n        Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n        module._warned = true;\n      }\n\n      return parsed.name;\n    });\n\n    for (var i = 0; i < tracked[name].length; i += 1) {\n      Plugin.dependencies(tracked[name][i], tracked);\n    }\n\n    return tracked;\n  };\n  /**\r\n   * Parses a dependency string into its components.\r\n   * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\r\n   * See documentation for `Plugin.versionParse` for a description of the format.\r\n   * This function can also handle dependencies that are already resolved (e.g. a module object).\r\n   * @method dependencyParse\r\n   * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\r\n   * @return {object} The dependency parsed into its components.\r\n   */\n\n\n  Plugin.dependencyParse = function (dependency) {\n    if (Common.isString(dependency)) {\n      var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n      if (!pattern.test(dependency)) {\n        Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n      }\n\n      return {\n        name: dependency.split('@')[0],\n        range: dependency.split('@')[1] || '*'\n      };\n    }\n\n    return {\n      name: dependency.name,\n      range: dependency.range || dependency.version\n    };\n  };\n  /**\r\n   * Parses a version string into its components.  \r\n   * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\r\n   * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\r\n   * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\r\n   * Only the following range types are supported:\r\n   * - Tilde ranges e.g. `~1.2.3`\r\n   * - Caret ranges e.g. `^1.2.3`\r\n   * - Exact version e.g. `1.2.3`\r\n   * - Any version `*`\r\n   * @method versionParse\r\n   * @param range {string} The version string.\r\n   * @return {object} The version range parsed into its components.\r\n   */\n\n\n  Plugin.versionParse = function (range) {\n    var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n    if (!pattern.test(range)) {\n      Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n    }\n\n    var identifiers = range.split('-');\n    range = identifiers[0];\n    var isRange = isNaN(Number(range[0])),\n        version = isRange ? range.substr(1) : range,\n        parts = Common.map(version.split('.'), function (part) {\n      return Number(part);\n    });\n    return {\n      isRange: isRange,\n      version: version,\n      range: range,\n      operator: isRange ? range[0] : '',\n      parts: parts,\n      prerelease: identifiers[1],\n      number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n    };\n  };\n  /**\r\n   * Returns `true` if `version` satisfies the given `range`.\r\n   * See documentation for `Plugin.versionParse` for a description of the format.\r\n   * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\r\n   * @method versionSatisfies\r\n   * @param version {string} The version string.\r\n   * @param range {string} The range string.\r\n   * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\r\n   */\n\n\n  Plugin.versionSatisfies = function (version, range) {\n    range = range || '*';\n    var rangeParsed = Plugin.versionParse(range),\n        rangeParts = rangeParsed.parts,\n        versionParsed = Plugin.versionParse(version),\n        versionParts = versionParsed.parts;\n\n    if (rangeParsed.isRange) {\n      if (rangeParsed.operator === '*' || version === '*') {\n        return true;\n      }\n\n      if (rangeParsed.operator === '~') {\n        return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n      }\n\n      if (rangeParsed.operator === '^') {\n        if (rangeParts[0] > 0) {\n          return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n        }\n\n        if (rangeParts[1] > 0) {\n          return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n        }\n\n        return versionParts[2] === rangeParts[2];\n      }\n    }\n\n    return version === range || version === '*';\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}