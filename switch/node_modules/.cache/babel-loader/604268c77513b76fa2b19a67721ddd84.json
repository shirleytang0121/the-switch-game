{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Igor Ognichenko <ognichenko.igor@gmail.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar copy = function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n};\n/**\r\n * Takes a Polygon object and applies Chaikin's smoothing algorithm on its points.\r\n *\r\n * @function Phaser.Geom.Polygon.Smooth\r\n * @since 3.13.0\r\n *\r\n * @generic {Phaser.Geom.Polygon} O - [polygon,$return]\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The polygon to be smoothed. The polygon will be modified in-place and returned.\r\n *\r\n * @return {Phaser.Geom.Polygon} The input polygon.\r\n */\n\n\nvar Smooth = function Smooth(polygon) {\n  var i;\n  var points = [];\n  var data = polygon.points;\n\n  for (i = 0; i < data.length; i++) {\n    points.push([data[i].x, data[i].y]);\n  }\n\n  var output = [];\n\n  if (points.length > 0) {\n    output.push(copy([0, 0], points[0]));\n  }\n\n  for (i = 0; i < points.length - 1; i++) {\n    var p0 = points[i];\n    var p1 = points[i + 1];\n    var p0x = p0[0];\n    var p0y = p0[1];\n    var p1x = p1[0];\n    var p1y = p1[1];\n    output.push([0.85 * p0x + 0.15 * p1x, 0.85 * p0y + 0.15 * p1y]);\n    output.push([0.15 * p0x + 0.85 * p1x, 0.15 * p0y + 0.85 * p1y]);\n  }\n\n  if (points.length > 1) {\n    output.push(copy([0, 0], points[points.length - 1]));\n  }\n\n  return polygon.setTo(output);\n};\n\nmodule.exports = Smooth;","map":null,"metadata":{},"sourceType":"script"}