{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n/**\r\n * Provides methods used for setting the blend mode of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @name Phaser.GameObjects.Components.BlendMode\r\n * @since 3.0.0\r\n */\n\n\nvar BlendMode = {\n  /**\r\n   * Private internal value. Holds the current blend mode.\r\n   * \r\n   * @name Phaser.GameObjects.Components.BlendMode#_blendMode\r\n   * @type {integer}\r\n   * @private\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  _blendMode: BlendModes.NORMAL,\n\n  /**\r\n   * Sets the Blend Mode being used by this Game Object.\r\n   *\r\n   * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n   *\r\n   * Under WebGL only the following Blend Modes are available:\r\n   *\r\n   * * ADD\r\n   * * MULTIPLY\r\n   * * SCREEN\r\n   * * ERASE\r\n   *\r\n   * Canvas has more available depending on browser support.\r\n   *\r\n   * You can also create your own custom Blend Modes in WebGL.\r\n   *\r\n   * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n   * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n   * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\r\n   * are used.\r\n   *\r\n   * @name Phaser.GameObjects.Components.BlendMode#blendMode\r\n   * @type {(Phaser.BlendModes|string)}\r\n   * @since 3.0.0\r\n   */\n  blendMode: {\n    get: function get() {\n      return this._blendMode;\n    },\n    set: function set(value) {\n      if (typeof value === 'string') {\n        value = BlendModes[value];\n      }\n\n      value |= 0;\n\n      if (value >= -1) {\n        this._blendMode = value;\n      }\n    }\n  },\n\n  /**\r\n   * Sets the Blend Mode being used by this Game Object.\r\n   *\r\n   * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n   *\r\n   * Under WebGL only the following Blend Modes are available:\r\n   *\r\n   * * ADD\r\n   * * MULTIPLY\r\n   * * SCREEN\r\n   * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\r\n   *\r\n   * Canvas has more available depending on browser support.\r\n   *\r\n   * You can also create your own custom Blend Modes in WebGL.\r\n   *\r\n   * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n   * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n   * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\r\n   * are used.\r\n   *\r\n   * @method Phaser.GameObjects.Components.BlendMode#setBlendMode\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.BlendModes)} value - The BlendMode value. Either a string or a CONST.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setBlendMode: function setBlendMode(value) {\n    this.blendMode = value;\n    return this;\n  }\n};\nmodule.exports = BlendMode;","map":null,"metadata":{},"sourceType":"script"}