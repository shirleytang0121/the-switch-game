{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Utils = require('./Utils');\n/**\r\n * @classdesc\r\n * WebGLPipeline is a class that describes the way elements will be rendererd\r\n * in WebGL, specially focused on batching vertices (batching is not provided).\r\n * Pipelines are mostly used for describing 2D rendering passes but it's\r\n * flexible enough to be used for any type of rendering including 3D.\r\n * Internally WebGLPipeline will handle things like compiling shaders,\r\n * creating vertex buffers, assigning primitive topology and binding\r\n * vertex attributes.\r\n *\r\n * The config properties are:\r\n * - game: Current game instance.\r\n * - renderer: Current WebGL renderer.\r\n * - gl: Current WebGL context.\r\n * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\r\n *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\r\n * - vertShader: Source for vertex shader as a string.\r\n * - fragShader: Source for fragment shader as a string.\r\n * - vertexCapacity: The amount of vertices that shall be allocated\r\n * - vertexSize: The size of a single vertex in bytes.\r\n * - vertices: An optional buffer of vertices\r\n * - attributes: An array describing the vertex attributes\r\n *\r\n * The vertex attributes properties are:\r\n * - name : String - Name of the attribute in the vertex shader\r\n * - size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\r\n * - type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\r\n * - normalized : boolean - Is the attribute normalized\r\n * - offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\r\n * Here you can find more information of how to describe an attribute:\r\n * - https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\r\n *\r\n * @class WebGLPipeline\r\n * @memberof Phaser.Renderer.WebGL\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - The configuration object for this WebGL Pipeline, as described above.\r\n */\n\n\nvar WebGLPipeline = new Class({\n  initialize: function WebGLPipeline(config) {\n    /**\r\n     * Name of the Pipeline. Used for identifying\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n    this.name = 'WebGLPipeline';\n    /**\r\n     * The Game which owns this WebGL Pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#game\r\n     * @type {Phaser.Game}\r\n     * @since 3.0.0\r\n     */\n\n    this.game = config.game;\n    /**\r\n     * The canvas which this WebGL Pipeline renders to.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#view\r\n     * @type {HTMLCanvasElement}\r\n     * @since 3.0.0\r\n     */\n\n    this.view = config.game.canvas;\n    /**\r\n     * Used to store the current game resolution\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#resolution\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.resolution = 1;\n    /**\r\n     * Width of the current viewport\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = 0;\n    /**\r\n     * Height of the current viewport\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = 0;\n    /**\r\n     * The WebGL context this WebGL Pipeline uses.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#gl\r\n     * @type {WebGLRenderingContext}\r\n     * @since 3.0.0\r\n     */\n\n    this.gl = config.gl;\n    /**\r\n     * How many vertices have been fed to the current pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCount\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexCount = 0;\n    /**\r\n     * The limit of vertices that the pipeline can hold\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCapacity\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexCapacity = config.vertexCapacity;\n    /**\r\n     * The WebGL Renderer which owns this WebGL Pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#renderer\r\n     * @type {Phaser.Renderer.WebGL.WebGLRenderer}\r\n     * @since 3.0.0\r\n     */\n\n    this.renderer = config.renderer;\n    /**\r\n     * Raw byte buffer of vertices.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexData\r\n     * @type {ArrayBuffer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexData = config.vertices ? config.vertices : new ArrayBuffer(config.vertexCapacity * config.vertexSize);\n    /**\r\n     * The handle to a WebGL vertex buffer object.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexBuffer\r\n     * @type {WebGLBuffer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexBuffer = this.renderer.createVertexBuffer(config.vertices ? config.vertices : this.vertexData.byteLength, this.gl.STREAM_DRAW);\n    /**\r\n     * The handle to a WebGL program\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#program\r\n     * @type {WebGLProgram}\r\n     * @since 3.0.0\r\n     */\n\n    this.program = this.renderer.createProgram(config.vertShader, config.fragShader);\n    /**\r\n     * Array of objects that describe the vertex attributes\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#attributes\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.attributes = config.attributes;\n    /**\r\n     * The size in bytes of the vertex\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexSize\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexSize = config.vertexSize;\n    /**\r\n     * The primitive topology which the pipeline will use to submit draw calls\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#topology\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.topology = config.topology;\n    /**\r\n     * Uint8 view to the vertex raw buffer. Used for uploading vertex buffer resources\r\n     * to the GPU.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#bytes\r\n     * @type {Uint8Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.bytes = new Uint8Array(this.vertexData);\n    /**\r\n     * This will store the amount of components of 32 bit length\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexComponentCount\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexComponentCount = Utils.getComponentCount(config.attributes, this.gl);\n    /**\r\n     * Indicates if the current pipeline is flushing the contents to the GPU.\r\n     * When the variable is set the flush function will be locked.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#flushLocked\r\n     * @type {boolean}\r\n     * @since 3.1.0\r\n     */\n\n    this.flushLocked = false;\n    /**\r\n     * Indicates if the current pipeline is active or not for this frame only.\r\n     * Reset in the onRender method.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#active\r\n     * @type {boolean}\r\n     * @since 3.10.0\r\n     */\n\n    this.active = false;\n  },\n\n  /**\r\n   * Called when the Game has fully booted and the Renderer has finished setting up.\r\n   *\r\n   * By this stage all Game level systems are now in place and you can perform any final\r\n   * tasks that the pipeline may need that relied on game systems such as the Texture Manager.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#boot\r\n   * @since 3.11.0\r\n   */\n  boot: function boot() {},\n\n  /**\r\n   * Adds a description of vertex attribute to the pipeline\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#addAttribute\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - Name of the vertex attribute\r\n   * @param {integer} size - Vertex component size\r\n   * @param {integer} type - Type of the attribute\r\n   * @param {boolean} normalized - Is the value normalized to a range\r\n   * @param {integer} offset - Byte offset to the beginning of the first element in the vertex\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  addAttribute: function addAttribute(name, size, type, normalized, offset) {\n    this.attributes.push({\n      name: name,\n      size: size,\n      type: this.renderer.glFormats[type],\n      normalized: normalized,\n      offset: offset\n    });\n    return this;\n  },\n\n  /**\r\n   * Check if the current batch of vertices is full.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#shouldFlush\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the current batch should be flushed, otherwise `false`.\r\n   */\n  shouldFlush: function shouldFlush() {\n    return this.vertexCount >= this.vertexCapacity;\n  },\n\n  /**\r\n   * Resizes the properties used to describe the viewport\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#resize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The new width of this WebGL Pipeline.\r\n   * @param {number} height - The new height of this WebGL Pipeline.\r\n   * @param {number} resolution - The resolution this WebGL Pipeline should be resized to.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  resize: function resize(width, height, resolution) {\n    this.width = width * resolution;\n    this.height = height * resolution;\n    this.resolution = resolution;\n    return this;\n  },\n\n  /**\r\n   * Binds the pipeline resources, including programs, vertex buffers and binds attributes\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#bind\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  bind: function bind() {\n    var gl = this.gl;\n    var vertexBuffer = this.vertexBuffer;\n    var attributes = this.attributes;\n    var program = this.program;\n    var renderer = this.renderer;\n    var vertexSize = this.vertexSize;\n    renderer.setProgram(program);\n    renderer.setVertexBuffer(vertexBuffer);\n\n    for (var index = 0; index < attributes.length; ++index) {\n      var element = attributes[index];\n      var location = gl.getAttribLocation(program, element.name);\n\n      if (location >= 0) {\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, element.size, element.type, element.normalized, vertexSize, element.offset);\n      } else {\n        gl.disableVertexAttribArray(location);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set whenever this WebGL Pipeline is bound to a WebGL Renderer.\r\n   *\r\n   * This method is called every time the WebGL Pipeline is attempted to be bound, even if it already is the current pipeline.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onBind\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onBind: function onBind() {\n    // This is for updating uniform data it's called on each bind attempt.\n    return this;\n  },\n\n  /**\r\n   * Called before each frame is rendered, but after the canvas has been cleared.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onPreRender\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onPreRender: function onPreRender() {\n    // called once every frame\n    return this;\n  },\n\n  /**\r\n   * Called before a Scene's Camera is rendered.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onRender\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Scene} scene - The Scene being rendered.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Scene Camera being rendered with.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onRender: function onRender() {\n    // called for each camera\n    return this;\n  },\n\n  /**\r\n   * Called after each frame has been completely rendered and snapshots have been taken.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onPostRender\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onPostRender: function onPostRender() {\n    // called once every frame\n    return this;\n  },\n\n  /**\r\n   * Uploads the vertex data and emits a draw call\r\n   * for the current batch of vertices.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#flush\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  flush: function flush() {\n    if (this.flushLocked) {\n      return this;\n    }\n\n    this.flushLocked = true;\n    var gl = this.gl;\n    var vertexCount = this.vertexCount;\n    var topology = this.topology;\n    var vertexSize = this.vertexSize;\n\n    if (vertexCount === 0) {\n      this.flushLocked = false;\n      return;\n    }\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.bytes.subarray(0, vertexCount * vertexSize));\n    gl.drawArrays(topology, 0, vertexCount);\n    this.vertexCount = 0;\n    this.flushLocked = false;\n    return this;\n  },\n\n  /**\r\n   * Removes all object references in this WebGL Pipeline and removes its program from the WebGL context.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#destroy\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  destroy: function destroy() {\n    var gl = this.gl;\n    gl.deleteProgram(this.program);\n    gl.deleteBuffer(this.vertexBuffer);\n    delete this.program;\n    delete this.vertexBuffer;\n    delete this.gl;\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new value of the `float` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat1: function setFloat1(name, x) {\n    this.renderer.setFloat1(this.program, name, x);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new X component of the `vec2` uniform.\r\n   * @param {number} y - The new Y component of the `vec2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat2: function setFloat2(name, x, y) {\n    this.renderer.setFloat2(this.program, name, x, y);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new X component of the `vec3` uniform.\r\n   * @param {number} y - The new Y component of the `vec3` uniform.\r\n   * @param {number} z - The new Z component of the `vec3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat3: function setFloat3(name, x, y, z) {\n    this.renderer.setFloat3(this.program, name, x, y, z);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - X component of the uniform\r\n   * @param {number} y - Y component of the uniform\r\n   * @param {number} z - Z component of the uniform\r\n   * @param {number} w - W component of the uniform\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat4: function setFloat4(name, x, y, z, w) {\n    this.renderer.setFloat4(this.program, name, x, y, z, w);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat1v: function setFloat1v(name, arr) {\n    this.renderer.setFloat1v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat2v: function setFloat2v(name, arr) {\n    this.renderer.setFloat2v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat3v: function setFloat3v(name, arr) {\n    this.renderer.setFloat3v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat4v: function setFloat4v(name, arr) {\n    this.renderer.setFloat4v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt1\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new value of the `int` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt1: function setInt1(name, x) {\n    this.renderer.setInt1(this.program, name, x);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new X component of the `ivec2` uniform.\r\n   * @param {integer} y - The new Y component of the `ivec2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt2: function setInt2(name, x, y) {\n    this.renderer.setInt2(this.program, name, x, y);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new X component of the `ivec3` uniform.\r\n   * @param {integer} y - The new Y component of the `ivec3` uniform.\r\n   * @param {integer} z - The new Z component of the `ivec3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt3: function setInt3(name, x, y, z) {\n    this.renderer.setInt3(this.program, name, x, y, z);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - X component of the uniform\r\n   * @param {integer} y - Y component of the uniform\r\n   * @param {integer} z - Z component of the uniform\r\n   * @param {integer} w - W component of the uniform\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt4: function setInt4(name, x, y, z, w) {\n    this.renderer.setInt4(this.program, name, x, y, z, w);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n   * @param {Float32Array} matrix - The new values for the `mat2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix2: function setMatrix2(name, transpose, matrix) {\n    this.renderer.setMatrix2(this.program, name, transpose, matrix);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n   * @param {Float32Array} matrix - The new values for the `mat3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix3: function setMatrix3(name, transpose, matrix) {\n    this.renderer.setMatrix3(this.program, name, transpose, matrix);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Should the matrix be transpose\r\n   * @param {Float32Array} matrix - Matrix data\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix4: function setMatrix4(name, transpose, matrix) {\n    this.renderer.setMatrix4(this.program, name, transpose, matrix);\n    return this;\n  }\n});\nmodule.exports = WebGLPipeline;","map":null,"metadata":{},"sourceType":"script"}