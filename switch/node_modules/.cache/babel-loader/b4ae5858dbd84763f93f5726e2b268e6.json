{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Perimeter = require('./Perimeter');\n\nvar Point = require('../point/Point'); //  Return an array of points from the perimeter of the rectangle\n//  each spaced out based on the quantity or step required\n\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Rectangle.MarchingAnts\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - [description]\r\n * @param {number} step - [description]\r\n * @param {integer} quantity - [description]\r\n * @param {(array|Phaser.Geom.Point[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} [description]\r\n */\n\n\nvar MarchingAnts = function MarchingAnts(rect, step, quantity, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (!step && !quantity) {\n    //  Bail out\n    return out;\n  } //  If step is a falsey value (false, null, 0, undefined, etc) then we calculate\n  //  it based on the quantity instead, otherwise we always use the step value\n\n\n  if (!step) {\n    step = Perimeter(rect) / quantity;\n  } else {\n    quantity = Math.round(Perimeter(rect) / step);\n  }\n\n  var x = rect.x;\n  var y = rect.y;\n  var face = 0; //  Loop across each face of the rectangle\n\n  for (var i = 0; i < quantity; i++) {\n    out.push(new Point(x, y));\n\n    switch (face) {\n      //  Top face\n      case 0:\n        x += step;\n\n        if (x >= rect.right) {\n          face = 1;\n          y += x - rect.right;\n          x = rect.right;\n        }\n\n        break;\n      //  Right face\n\n      case 1:\n        y += step;\n\n        if (y >= rect.bottom) {\n          face = 2;\n          x -= y - rect.bottom;\n          y = rect.bottom;\n        }\n\n        break;\n      //  Bottom face\n\n      case 2:\n        x -= step;\n\n        if (x <= rect.left) {\n          face = 3;\n          y -= rect.left - x;\n          x = rect.left;\n        }\n\n        break;\n      //  Left face\n\n      case 3:\n        y -= step;\n\n        if (y <= rect.top) {\n          face = 0;\n          y = rect.top;\n        }\n\n        break;\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = MarchingAnts;","map":null,"metadata":{},"sourceType":"script"}