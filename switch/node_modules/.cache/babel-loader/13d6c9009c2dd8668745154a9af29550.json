{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  http://www.blackpawn.com/texts/pointinpoly/\n//  points is an array of Point-like objects with public x/y properties\n//  returns an array containing all points that are within the triangle, or an empty array if none\n//  if 'returnFirst' is true it will return after the first point within the triangle is found\n\n/**\r\n * Filters an array of point-like objects to only those contained within a triangle.\r\n * If `returnFirst` is true, will return an array containing only the first point in the provided array that is within the triangle (or an empty array if there are no such points).\r\n *\r\n * @function Phaser.Geom.Triangle.ContainsArray\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The triangle that the points are being checked in.\r\n * @param {Phaser.Geom.Point[]} points - An array of point-like objects (objects that have an `x` and `y` property)\r\n * @param {boolean} [returnFirst=false] - If `true`, return an array containing only the first point found that is within the triangle.\r\n * @param {array} [out] - If provided, the points that are within the triangle will be appended to this array instead of being added to a new array. If `returnFirst` is true, only the first point found within the triangle will be appended. This array will also be returned by this function.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array containing all the points from `points` that are within the triangle, if an array was provided as `out`, points will be appended to that array and it will also be returned here.\r\n */\nvar ContainsArray = function ContainsArray(triangle, points, returnFirst, out) {\n  if (returnFirst === undefined) {\n    returnFirst = false;\n  }\n\n  if (out === undefined) {\n    out = [];\n  }\n\n  var v0x = triangle.x3 - triangle.x1;\n  var v0y = triangle.y3 - triangle.y1;\n  var v1x = triangle.x2 - triangle.x1;\n  var v1y = triangle.y2 - triangle.y1;\n  var dot00 = v0x * v0x + v0y * v0y;\n  var dot01 = v0x * v1x + v0y * v1y;\n  var dot11 = v1x * v1x + v1y * v1y; // Compute barycentric coordinates\n\n  var b = dot00 * dot11 - dot01 * dot01;\n  var inv = b === 0 ? 0 : 1 / b;\n  var u;\n  var v;\n  var v2x;\n  var v2y;\n  var dot02;\n  var dot12;\n  var x1 = triangle.x1;\n  var y1 = triangle.y1;\n\n  for (var i = 0; i < points.length; i++) {\n    v2x = points[i].x - x1;\n    v2y = points[i].y - y1;\n    dot02 = v0x * v2x + v0y * v2y;\n    dot12 = v1x * v2x + v1y * v2y;\n    u = (dot11 * dot02 - dot01 * dot12) * inv;\n    v = (dot00 * dot12 - dot01 * dot02) * inv;\n\n    if (u >= 0 && v >= 0 && u + v < 1) {\n      out.push({\n        x: points[i].x,\n        y: points[i].y\n      });\n\n      if (returnFirst) {\n        break;\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = ContainsArray;","map":null,"metadata":{},"sourceType":"script"}