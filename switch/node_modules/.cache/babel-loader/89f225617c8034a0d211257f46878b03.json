{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ArcadeImage = require('./ArcadeImage');\n\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar PhysicsGroup = require('./PhysicsGroup');\n\nvar StaticPhysicsGroup = require('./StaticPhysicsGroup');\n/**\r\n * @classdesc\r\n * The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics World instance.\r\n */\n\n\nvar Factory = new Class({\n  initialize: function Factory(world) {\n    /**\r\n     * A reference to the Arcade Physics World.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n    this.world = world;\n    /**\r\n     * A reference to the Scene this Arcade Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = world.scene;\n    /**\r\n     * A reference to the Scene.Systems this Arcade Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#sys\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.sys = world.scene.sys;\n  },\n\n  /**\r\n   * Creates a new Arcade Physics Collider object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#collider\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for collision.\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for collision.\r\n   * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n   * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n   * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n   */\n  collider: function collider(object1, object2, collideCallback, processCallback, callbackContext) {\n    return this.world.addCollider(object1, object2, collideCallback, processCallback, callbackContext);\n  },\n\n  /**\r\n   * Creates a new Arcade Physics Collider Overlap object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#overlap\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for overlap.\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for overlap.\r\n   * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n   * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n   * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n   */\n  overlap: function overlap(object1, object2, collideCallback, processCallback, callbackContext) {\n    return this.world.addOverlap(object1, object2, collideCallback, processCallback, callbackContext);\n  },\n\n  /**\r\n   * Adds an Arcade Physics Body to the given Game Object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - A Game Object.\r\n   * @param {boolean} [isStatic=false] - Create a Static body (true) or Dynamic body (false).\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n   */\n  existing: function existing(gameObject, isStatic) {\n    var type = isStatic ? CONST.STATIC_BODY : CONST.DYNAMIC_BODY;\n    this.world.enableBody(gameObject, type);\n    return gameObject;\n  },\n\n  /**\r\n   * Creates a new Arcade Image object with a Static body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n   */\n  staticImage: function staticImage(x, y, key, frame) {\n    var image = new ArcadeImage(this.scene, x, y, key, frame);\n    this.sys.displayList.add(image);\n    this.world.enableBody(image, CONST.STATIC_BODY);\n    return image;\n  },\n\n  /**\r\n   * Creates a new Arcade Image object with a Dynamic body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#image\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n   */\n  image: function image(x, y, key, frame) {\n    var image = new ArcadeImage(this.scene, x, y, key, frame);\n    this.sys.displayList.add(image);\n    this.world.enableBody(image, CONST.DYNAMIC_BODY);\n    return image;\n  },\n\n  /**\r\n   * Creates a new Arcade Sprite object with a Static body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticSprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n   */\n  staticSprite: function staticSprite(x, y, key, frame) {\n    var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    this.world.enableBody(sprite, CONST.STATIC_BODY);\n    return sprite;\n  },\n\n  /**\r\n   * Creates a new Arcade Sprite object with a Dynamic body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#sprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n   */\n  sprite: function sprite(x, y, key, frame) {\n    var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    this.world.enableBody(sprite, CONST.DYNAMIC_BODY);\n    return sprite;\n  },\n\n  /**\r\n   * Creates a Static Physics Group object.\r\n   * All Game Objects created by this Group will automatically be static Arcade Physics objects.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject[]|GroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n   * @param {GroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticGroup} The Static Group object that was created.\r\n   */\n  staticGroup: function staticGroup(children, config) {\n    return this.sys.updateList.add(new StaticPhysicsGroup(this.world, this.world.scene, children, config));\n  },\n\n  /**\r\n   * Creates a Physics Group object.\r\n   * All Game Objects created by this Group will automatically be dynamic Arcade Physics objects.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#group\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject[]|PhysicsGroupConfig|GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n   * @param {PhysicsGroupConfig|GroupCreateConfig} [config] - Settings for this group.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} The Group object that was created.\r\n   */\n  group: function group(children, config) {\n    return this.sys.updateList.add(new PhysicsGroup(this.world, this.world.scene, children, config));\n  },\n\n  /**\r\n   * Destroys this Factory.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function destroy() {\n    this.world = null;\n    this.scene = null;\n    this.sys = null;\n  }\n});\nmodule.exports = Factory;","map":null,"metadata":{},"sourceType":"script"}