{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseAnimation = require('../../animations/Animation');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../../animations/events');\n/**\r\n * @classdesc\r\n * A Game Object Animation Controller.\r\n *\r\n * This controller lives as an instance within a Game Object, accessible as `sprite.anims`.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} parent - The Game Object to which this animation controller belongs.\r\n */\n\n\nvar Animation = new Class({\n  initialize: function Animation(parent) {\n    /**\r\n     * The Game Object to which this animation controller belongs.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#parent\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * A reference to the global Animation Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#animationManager\r\n     * @type {Phaser.Animations.AnimationManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.animationManager = parent.scene.sys.anims;\n    this.animationManager.once(Events.REMOVE_ANIMATION, this.remove, this);\n    /**\r\n     * Is an animation currently playing or not?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#isPlaying\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isPlaying = false;\n    /**\r\n     * The current Animation loaded into this Animation Controller.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#currentAnim\r\n     * @type {?Phaser.Animations.Animation}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.currentAnim = null;\n    /**\r\n     * The current AnimationFrame being displayed by this Animation Controller.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#currentFrame\r\n     * @type {?Phaser.Animations.AnimationFrame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.currentFrame = null;\n    /**\r\n     * The key of the next Animation to be loaded into this Animation Controller when the current animation completes.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#nextAnim\r\n     * @type {?string}\r\n     * @default null\r\n     * @since 3.16.0\r\n     */\n\n    this.nextAnim = null;\n    /**\r\n     * Time scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_timeScale\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._timeScale = 1;\n    /**\r\n     * The frame rate of playback in frames per second.\r\n     * The default is 24 if the `duration` property is `null`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#frameRate\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.frameRate = 0;\n    /**\r\n     * How long the animation should play for, in milliseconds.\r\n     * If the `frameRate` property has been set then it overrides this value,\r\n     * otherwise the `frameRate` is derived from `duration`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * ms per frame, not including frame specific modifiers that may be present in the Animation data.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#msPerFrame\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.msPerFrame = 0;\n    /**\r\n     * Skip frames if the time lags, or always advanced anyway?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#skipMissedFrames\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.skipMissedFrames = true;\n    /**\r\n     * A delay before starting playback, in milliseconds.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_delay\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._delay = 0;\n    /**\r\n     * Number of times to repeat the animation (-1 for infinity)\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_repeat\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._repeat = 0;\n    /**\r\n     * Delay before the repeat starts, in milliseconds.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_repeatDelay\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._repeatDelay = 0;\n    /**\r\n     * Should the animation yoyo? (reverse back down to the start) before repeating?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_yoyo\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._yoyo = false;\n    /**\r\n     * Will the playhead move forwards (`true`) or in reverse (`false`).\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#forward\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.forward = true;\n    /**\r\n     * An Internal trigger that's play the animation in reverse mode ('true') or not ('false'),\r\n     * needed because forward can be changed by yoyo feature.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_reverse\r\n     * @type {boolean}\r\n     * @default false\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this._reverse = false;\n    /**\r\n     * Internal time overflow accumulator.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#accumulator\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accumulator = 0;\n    /**\r\n     * The time point at which the next animation frame will change.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#nextTick\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.nextTick = 0;\n    /**\r\n     * An internal counter keeping track of how many repeats are left to play.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#repeatCounter\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeatCounter = 0;\n    /**\r\n     * An internal flag keeping track of pending repeats.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#pendingRepeat\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.pendingRepeat = false;\n    /**\r\n     * Is the Animation paused?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_paused\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._paused = false;\n    /**\r\n     * Was the animation previously playing before being paused?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_wasPlaying\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._wasPlaying = false;\n    /**\r\n     * Internal property tracking if this Animation is waiting to stop.\r\n     *\r\n     * 0 = No\r\n     * 1 = Waiting for ms to pass\r\n     * 2 = Waiting for repeat\r\n     * 3 = Waiting for specific frame\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_pendingStop\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.4.0\r\n     */\n\n    this._pendingStop = 0;\n    /**\r\n     * Internal property used by _pendingStop.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_pendingStopValue\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.4.0\r\n     */\n\n    this._pendingStopValue;\n  },\n\n  /**\r\n   * Sets an animation to be played immediately after the current one completes.\r\n   * \r\n   * The current animation must enter a 'completed' state for this to happen, i.e. finish all of its repeats, delays, etc, or have the `stop` method called directly on it.\r\n   * \r\n   * An animation set to repeat forever will never enter a completed state.\r\n   * \r\n   * You can chain a new animation at any point, including before the current one starts playing, during it, or when it ends (via its `animationcomplete` callback).\r\n   * Chained animations are specific to a Game Object, meaning different Game Objects can have different chained animations without impacting the global animation they're playing.\r\n   * \r\n   * Call this method with no arguments to reset the chained animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#chain\r\n   * @since 3.16.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} [key] - The string-based key of the animation to play next, as defined previously in the Animation Manager. Or an Animation instance.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  chain: function chain(key) {\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    this.nextAnim = key;\n    return this.parent;\n  },\n\n  /**\r\n   * Sets the amount of time, in milliseconds, that the animation will be delayed before starting playback.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} [value=0] - The amount of time, in milliseconds, to wait before starting playback.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setDelay: function setDelay(value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this._delay = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the amount of time, in milliseconds that the animation will be delayed before starting playback.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The amount of time, in milliseconds, the Animation will wait before starting playback.\r\n   */\n  getDelay: function getDelay() {\n    return this._delay;\n  },\n\n  /**\r\n   * Waits for the specified delay, in milliseconds, then starts playback of the requested animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#delayedPlay\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} delay - The delay, in milliseconds, to wait before starting the animation playing.\r\n   * @param {string} key - The key of the animation to play.\r\n   * @param {integer} [startFrame=0] - The frame of the animation to start from.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  delayedPlay: function delayedPlay(delay, key, startFrame) {\n    this.play(key, true, startFrame);\n    this.nextTick += delay;\n    return this.parent;\n  },\n\n  /**\r\n   * Returns the key of the animation currently loaded into this component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getCurrentKey\r\n   * @since 3.0.0\r\n   *\r\n   * @return {string} The key of the Animation loaded into this component.\r\n   */\n  getCurrentKey: function getCurrentKey() {\n    if (this.currentAnim) {\n      return this.currentAnim.key;\n    }\n  },\n\n  /**\r\n   * Internal method used to load an animation into this component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#load\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to load.\r\n   * @param {integer} [startFrame=0] - The start frame of the animation to load.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  load: function load(key, startFrame) {\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (this.isPlaying) {\n      this.stop();\n    } //  Load the new animation in\n\n\n    this.animationManager.load(this, key, startFrame);\n    return this.parent;\n  },\n\n  /**\r\n   * Pause the current animation and set the `isPlaying` property to `false`.\r\n   * You can optionally pause it at a specific frame.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} [atFrame] - An optional frame to set after pausing the animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  pause: function pause(atFrame) {\n    if (!this._paused) {\n      this._paused = true;\n      this._wasPlaying = this.isPlaying;\n      this.isPlaying = false;\n    }\n\n    if (atFrame !== undefined) {\n      this.updateFrame(atFrame);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Resumes playback of a paused animation and sets the `isPlaying` property to `true`.\r\n   * You can optionally tell it to start playback from a specific frame.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} [fromFrame] - An optional frame to set before restarting playback.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  resume: function resume(fromFrame) {\n    if (this._paused) {\n      this._paused = false;\n      this.isPlaying = this._wasPlaying;\n    }\n\n    if (fromFrame !== undefined) {\n      this.updateFrame(fromFrame);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * `true` if the current animation is paused, otherwise `false`.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Animation#isPaused\r\n   * @readonly\r\n   * @type {boolean}\r\n   * @since 3.4.0\r\n   */\n  isPaused: {\n    get: function get() {\n      return this._paused;\n    }\n  },\n\n  /**\r\n   * Plays an Animation on a Game Object that has the Animation component, such as a Sprite.\r\n   * \r\n   * Animations are stored in the global Animation Manager and are referenced by a unique string-based key.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#play\r\n   * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n   * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  play: function play(key, ignoreIfPlaying, startFrame) {\n    if (ignoreIfPlaying === undefined) {\n      ignoreIfPlaying = false;\n    }\n\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key) {\n      return this.parent;\n    }\n\n    this.forward = true;\n    this._reverse = false;\n    return this._startAnimation(key, startFrame);\n  },\n\n  /**\r\n   * Plays an Animation (in reverse mode) on the Game Object that owns this Animation Component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#playReverse\r\n   * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n   * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  playReverse: function playReverse(key, ignoreIfPlaying, startFrame) {\n    if (ignoreIfPlaying === undefined) {\n      ignoreIfPlaying = false;\n    }\n\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key) {\n      return this.parent;\n    }\n\n    this.forward = false;\n    this._reverse = true;\n    return this._startAnimation(key, startFrame);\n  },\n\n  /**\r\n   * Load an Animation and fires 'onStartEvent' event, extracted from 'play' method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#_startAnimation\r\n   * @fires Phaser.Animations.Events#START_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_START_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_START_KEY_ANIMATION_EVENT\r\n   * @since 3.12.0\r\n   *\r\n   * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  _startAnimation: function _startAnimation(key, startFrame) {\n    this.load(key, startFrame);\n    var anim = this.currentAnim;\n    var gameObject = this.parent; //  Should give us 9,007,199,254,740,991 safe repeats\n\n    this.repeatCounter = this._repeat === -1 ? Number.MAX_VALUE : this._repeat;\n    anim.getFirstTick(this);\n    this.isPlaying = true;\n    this.pendingRepeat = false;\n\n    if (anim.showOnStart) {\n      gameObject.visible = true;\n    }\n\n    var frame = this.currentFrame;\n    anim.emit(Events.ANIMATION_START, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_KEY_START + key, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_START, anim, frame, gameObject);\n    return gameObject;\n  },\n\n  /**\r\n   * Reverse the Animation that is already playing on the Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#reverse\r\n   * @since 3.12.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  reverse: function reverse() {\n    if (this.isPlaying) {\n      this._reverse = !this._reverse;\n      this.forward = !this.forward;\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.\r\n   * If the animation has a non-zero repeat defined, `getProgress` and `getTotalProgress` will be different\r\n   * because `getProgress` doesn't include any repeats or repeat delays, whereas `getTotalProgress` does.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getProgress\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The progress of the current animation, between 0 and 1.\r\n   */\n  getProgress: function getProgress() {\n    var p = this.currentFrame.progress;\n\n    if (!this.forward) {\n      p = 1 - p;\n    }\n\n    return p;\n  },\n\n  /**\r\n   * Takes a value between 0 and 1 and uses it to set how far this animation is through playback.\r\n   * Does not factor in repeats or yoyos, but does handle playing forwards or backwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setProgress\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [value=0] - The progress value, between 0 and 1.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setProgress: function setProgress(value) {\n    if (!this.forward) {\n      value = 1 - value;\n    }\n\n    this.setCurrentFrame(this.currentAnim.getFrameByProgress(value));\n    return this.parent;\n  },\n\n  /**\r\n   * Handle the removal of an animation from the Animation Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [key] - The key of the removed Animation.\r\n   * @param {Phaser.Animations.Animation} [animation] - The removed Animation.\r\n   */\n  remove: function remove(key, animation) {\n    if (animation === undefined) {\n      animation = this.currentAnim;\n    }\n\n    if (this.isPlaying && animation.key === this.currentAnim.key) {\n      this.stop();\n      this.setCurrentFrame(this.currentAnim.frames[0]);\n    }\n  },\n\n  /**\r\n   * Gets the number of times that the animation will repeat\r\n   * after its first iteration. For example, if returns 1, the animation will\r\n   * play a total of twice (the initial play plus 1 repeat).\r\n   * A value of -1 means the animation will repeat indefinitely.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getRepeat\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The number of times that the animation will repeat.\r\n   */\n  getRepeat: function getRepeat() {\n    return this._repeat;\n  },\n\n  /**\r\n   * Sets the number of times that the animation should repeat\r\n   * after its first iteration. For example, if repeat is 1, the animation will\r\n   * play a total of twice (the initial play plus 1 repeat).\r\n   * To repeat indefinitely, use -1. repeat should always be an integer.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setRepeat\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} value - The number of times that the animation should repeat.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setRepeat: function setRepeat(value) {\n    this._repeat = value;\n    this.repeatCounter = 0;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the amount of delay between repeats, if any.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getRepeatDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The delay between repeats.\r\n   */\n  getRepeatDelay: function getRepeatDelay() {\n    return this._repeatDelay;\n  },\n\n  /**\r\n   * Sets the amount of time in seconds between repeats.\r\n   * For example, if `repeat` is 2 and `repeatDelay` is 10, the animation will play initially,\r\n   * then wait for 10 seconds before repeating, then play again, then wait another 10 seconds\r\n   * before doing its final repeat.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setRepeatDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} value - The delay to wait between repeats, in seconds.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setRepeatDelay: function setRepeatDelay(value) {\n    this._repeatDelay = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Restarts the current animation from its beginning, optionally including its delay value.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#restart\r\n   * @fires Phaser.Animations.Events#RESTART_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_RESTART_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_RESTART_KEY_ANIMATION_EVENT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [includeDelay=false] - Whether to include the delay value of the animation when restarting.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  restart: function restart(includeDelay) {\n    if (includeDelay === undefined) {\n      includeDelay = false;\n    }\n\n    var anim = this.currentAnim;\n    anim.getFirstTick(this, includeDelay);\n    this.forward = true;\n    this.isPlaying = true;\n    this.pendingRepeat = false;\n    this._paused = false; //  Set frame\n\n    this.updateFrame(anim.frames[0]);\n    var gameObject = this.parent;\n    var frame = this.currentFrame;\n    anim.emit(Events.ANIMATION_RESTART, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_KEY_RESTART + anim.key, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_RESTART, anim, frame, gameObject);\n    return this.parent;\n  },\n\n  /**\r\n   * Immediately stops the current animation from playing and dispatches the `animationcomplete` event.\r\n   * \r\n   * If no animation is set, no event will be dispatched.\r\n   * \r\n   * If there is another animation queued (via the `chain` method) then it will start playing immediately.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stop\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stop: function stop() {\n    this._pendingStop = 0;\n    this.isPlaying = false;\n    var gameObject = this.parent;\n    var anim = this.currentAnim;\n    var frame = this.currentFrame;\n\n    if (anim) {\n      anim.emit(Events.ANIMATION_COMPLETE, anim, frame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_KEY_COMPLETE + anim.key, anim, frame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_COMPLETE, anim, frame, gameObject);\n    }\n\n    if (this.nextAnim) {\n      var key = this.nextAnim;\n      this.nextAnim = null;\n      this.play(key);\n    }\n\n    return gameObject;\n  },\n\n  /**\r\n   * Stops the current animation from playing after the specified time delay, given in milliseconds.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopAfterDelay\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} delay - The number of milliseconds to wait before stopping this animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopAfterDelay: function stopAfterDelay(delay) {\n    this._pendingStop = 1;\n    this._pendingStopValue = delay;\n    return this.parent;\n  },\n\n  /**\r\n   * Stops the current animation from playing when it next repeats.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopOnRepeat\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopOnRepeat: function stopOnRepeat() {\n    this._pendingStop = 2;\n    return this.parent;\n  },\n\n  /**\r\n   * Stops the current animation from playing when it next sets the given frame.\r\n   * If this frame doesn't exist within the animation it will not stop it from playing.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopOnFrame\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} frame - The frame to check before stopping this animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopOnFrame: function stopOnFrame(frame) {\n    this._pendingStop = 3;\n    this._pendingStopValue = frame;\n    return this.parent;\n  },\n\n  /**\r\n   * Sets the Time Scale factor, allowing you to make the animation go go faster or slower than default.\r\n   * Where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setTimeScale\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [value=1] - The time scale factor, where 1 is no change, 0.5 is half speed, etc.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setTimeScale: function setTimeScale(value) {\n    if (value === undefined) {\n      value = 1;\n    }\n\n    this._timeScale = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the Time Scale factor.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getTimeScale\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The Time Scale value.\r\n   */\n  getTimeScale: function getTimeScale() {\n    return this._timeScale;\n  },\n\n  /**\r\n   * Returns the total number of frames in this animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getTotalFrames\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The total number of frames in this animation.\r\n   */\n  getTotalFrames: function getTotalFrames() {\n    return this.currentAnim.frames.length;\n  },\n\n  /**\r\n   * The internal update loop for the Animation Component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (!this.currentAnim || !this.isPlaying || this.currentAnim.paused) {\n      return;\n    }\n\n    this.accumulator += delta * this._timeScale;\n\n    if (this._pendingStop === 1) {\n      this._pendingStopValue -= delta;\n\n      if (this._pendingStopValue <= 0) {\n        return this.currentAnim.completeAnimation(this);\n      }\n    }\n\n    if (this.accumulator >= this.nextTick) {\n      this.currentAnim.setFrame(this);\n    }\n  },\n\n  /**\r\n   * Sets the given Animation Frame as being the current frame\r\n   * and applies it to the parent Game Object, adjusting its size and origin as needed.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setCurrentFrame\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} animationFrame - The Animation Frame to set as being current.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  setCurrentFrame: function setCurrentFrame(animationFrame) {\n    var gameObject = this.parent;\n    this.currentFrame = animationFrame;\n    gameObject.texture = animationFrame.frame.texture;\n    gameObject.frame = animationFrame.frame;\n\n    if (gameObject.isCropped) {\n      gameObject.frame.updateCropUVs(gameObject._crop, gameObject.flipX, gameObject.flipY);\n    }\n\n    gameObject.setSizeToFrame();\n\n    if (animationFrame.frame.customPivot) {\n      gameObject.setOrigin(animationFrame.frame.pivotX, animationFrame.frame.pivotY);\n    } else {\n      gameObject.updateDisplayOrigin();\n    }\n\n    return gameObject;\n  },\n\n  /**\r\n   * Internal frame change handler.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#updateFrame\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_UPDATE_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_UPDATE_EVENT\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} animationFrame - The animation frame to change to.\r\n   */\n  updateFrame: function updateFrame(animationFrame) {\n    var gameObject = this.setCurrentFrame(animationFrame);\n\n    if (this.isPlaying) {\n      if (animationFrame.setAlpha) {\n        gameObject.alpha = animationFrame.alpha;\n      }\n\n      var anim = this.currentAnim;\n      gameObject.emit(Events.SPRITE_ANIMATION_KEY_UPDATE + anim.key, anim, animationFrame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_UPDATE, anim, animationFrame, gameObject);\n\n      if (this._pendingStop === 3 && this._pendingStopValue === animationFrame) {\n        this.currentAnim.completeAnimation(this);\n      }\n    }\n  },\n\n  /**\r\n   * Advances the animation to the next frame, regardless of the time or animation state.\r\n   * If the animation is set to repeat, or yoyo, this will still take effect.\r\n   * \r\n   * Calling this does not change the direction of the animation. I.e. if it was currently\r\n   * playing in reverse, calling this method doesn't then change the direction to forwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#nextFrame\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  nextFrame: function nextFrame() {\n    if (this.currentAnim) {\n      this.currentAnim.nextFrame(this);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Advances the animation to the previous frame, regardless of the time or animation state.\r\n   * If the animation is set to repeat, or yoyo, this will still take effect.\r\n   * \r\n   * Calling this does not change the direction of the animation. I.e. if it was currently\r\n   * playing in forwards, calling this method doesn't then change the direction to backwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#previousFrame\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  previousFrame: function previousFrame() {\n    if (this.currentAnim) {\n      this.currentAnim.previousFrame(this);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Sets if the current Animation will yoyo when it reaches the end.\r\n   * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setYoyo\r\n   * @since 3.4.0\r\n   *\r\n   * @param {boolean} [value=false] - `true` if the animation should yoyo, `false` to not.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  setYoyo: function setYoyo(value) {\n    if (value === undefined) {\n      value = false;\n    }\n\n    this._yoyo = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets if the current Animation will yoyo when it reaches the end.\r\n   * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getYoyo\r\n   * @since 3.4.0\r\n   *\r\n   * @return {boolean} `true` if the animation is set to yoyo, `false` if not.\r\n   */\n  getYoyo: function getYoyo() {\n    return this._yoyo;\n  },\n\n  /**\r\n   * Destroy this Animation component.\r\n   *\r\n   * Unregisters event listeners and cleans up its references.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.animationManager.off(Events.REMOVE_ANIMATION, this.remove, this);\n    this.animationManager = null;\n    this.parent = null;\n    this.currentAnim = null;\n    this.currentFrame = null;\n  }\n});\nmodule.exports = Animation;","map":null,"metadata":{},"sourceType":"script"}