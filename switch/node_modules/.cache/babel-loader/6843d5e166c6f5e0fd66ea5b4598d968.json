{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar File = require('../File');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetURL = require('../GetURL');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class HTML5AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [urlConfig] - The absolute or relative URL to load this file from.\r\n * @param {XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar HTML5AudioFile = new Class({\n  Extends: File,\n  initialize: function HTML5AudioFile(loader, key, urlConfig, audioConfig) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      audioConfig = GetFastValue(config, 'config', audioConfig);\n    }\n\n    var fileConfig = {\n      type: 'audio',\n      cache: loader.cacheManager.audio,\n      extension: urlConfig.type,\n      key: key,\n      url: urlConfig.url,\n      config: audioConfig\n    };\n    File.call(this, loader, fileConfig); //  New properties specific to this class\n\n    this.locked = 'ontouchstart' in window;\n    this.loaded = false;\n    this.filesLoaded = 0;\n    this.filesTotal = 0;\n  },\n\n  /**\r\n   * Called when the file finishes loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onLoad\r\n   * @since 3.0.0\r\n   */\n  onLoad: function onLoad() {\n    if (this.loaded) {\n      return;\n    }\n\n    this.loaded = true;\n    this.loader.nextFile(this, true);\n  },\n\n  /**\r\n   * Called if the file errors while loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onError\r\n   * @since 3.0.0\r\n   */\n  onError: function onError() {\n    for (var i = 0; i < this.data.length; i++) {\n      var audio = this.data[i];\n      audio.oncanplaythrough = null;\n      audio.onerror = null;\n    }\n\n    this.loader.nextFile(this, false);\n  },\n\n  /**\r\n   * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onProgress\r\n   * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n   * @since 3.0.0\r\n   */\n  onProgress: function onProgress(event) {\n    var audio = event.target;\n    audio.oncanplaythrough = null;\n    audio.onerror = null;\n    this.filesLoaded++;\n    this.percentComplete = Math.min(this.filesLoaded / this.filesTotal, 1);\n    this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\n\n    if (this.filesLoaded === this.filesTotal) {\n      this.onLoad();\n    }\n  },\n\n  /**\r\n   * Called by the Loader, starts the actual file downloading.\r\n   * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n   * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#load\r\n   * @since 3.0.0\r\n   */\n  load: function load() {\n    this.data = [];\n    var instances = this.config && this.config.instances || 1;\n    this.filesTotal = instances;\n    this.filesLoaded = 0;\n    this.percentComplete = 0;\n\n    for (var i = 0; i < instances; i++) {\n      var audio = new Audio();\n      audio.dataset.name = this.key + ('0' + i).slice(-2);\n      audio.dataset.used = 'false';\n\n      if (this.locked) {\n        audio.dataset.locked = 'true';\n      } else {\n        audio.dataset.locked = 'false';\n        audio.preload = 'auto';\n        audio.oncanplaythrough = this.onProgress.bind(this);\n        audio.onerror = this.onError.bind(this);\n      }\n\n      this.data.push(audio);\n    }\n\n    for (i = 0; i < this.data.length; i++) {\n      audio = this.data[i];\n      audio.src = GetURL(this, this.loader.baseURL);\n\n      if (!this.locked) {\n        audio.load();\n      }\n    }\n\n    if (this.locked) {\n      //  This is super-dangerous but works. Race condition potential high.\n      //  Is there another way?\n      setTimeout(this.onLoad.bind(this));\n    }\n  }\n});\nmodule.exports = HTML5AudioFile;","map":null,"metadata":{},"sourceType":"script"}