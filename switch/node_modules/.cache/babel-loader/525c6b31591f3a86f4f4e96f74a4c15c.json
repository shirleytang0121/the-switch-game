{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Light = require('./Light');\n\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * @callback LightForEach\r\n *\r\n * @param {Phaser.GameObjects.Light} light - The Light.\r\n */\n\n/**\r\n * @classdesc\r\n * Manages Lights for a Scene.\r\n *\r\n * Affects the rendering of Game Objects using the `Light2D` pipeline.\r\n *\r\n * @class LightsManager\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar LightsManager = new Class({\n  initialize: function LightsManager() {\n    /**\r\n     * The pool of Lights.\r\n     *\r\n     * Used to recycle removed Lights for a more efficient use of memory.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#lightPool\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n    this.lightPool = [];\n    /**\r\n     * The Lights in the Scene.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#lights\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.lights = [];\n    /**\r\n     * Lights that have been culled from a Camera's viewport.\r\n     *\r\n     * Lights in this list will not be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#culledLights\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.culledLights = [];\n    /**\r\n     * The ambient color.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#ambientColor\r\n     * @type {{ r: number, g: number, b: number }}\r\n     * @since 3.0.0\r\n     */\n\n    this.ambientColor = {\n      r: 0.1,\n      g: 0.1,\n      b: 0.1\n    };\n    /**\r\n     * Whether the Lights Manager is enabled.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#active\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.active = false;\n    /**\r\n     * The maximum number of lights that a single Camera and the lights shader can process.\r\n     * Change this via the `maxLights` property in your game config, as it cannot be changed at runtime.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#maxLights\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.15.0\r\n     */\n\n    this.maxLights = -1;\n  },\n\n  /**\r\n   * Enable the Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#enable\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  enable: function enable() {\n    if (this.maxLights === -1) {\n      this.maxLights = this.scene.sys.game.renderer.config.maxLights;\n    }\n\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Disable the Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#disable\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  disable: function disable() {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Cull any Lights that aren't visible to the given Camera.\r\n   *\r\n   * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#cull\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to cull Lights for.\r\n   *\r\n   * @return {Phaser.GameObjects.Light[]} The culled Lights.\r\n   */\n  cull: function cull(camera) {\n    var lights = this.lights;\n    var culledLights = this.culledLights;\n    var length = lights.length;\n    var cameraCenterX = camera.x + camera.width / 2.0;\n    var cameraCenterY = camera.y + camera.height / 2.0;\n    var cameraRadius = (camera.width + camera.height) / 2.0;\n    var point = {\n      x: 0,\n      y: 0\n    };\n    var cameraMatrix = camera.matrix;\n    var viewportHeight = this.systems.game.config.height;\n    culledLights.length = 0;\n\n    for (var index = 0; index < length && culledLights.length < this.maxLights; index++) {\n      var light = lights[index];\n      cameraMatrix.transformPoint(light.x, light.y, point); //  We'll just use bounding spheres to test if lights should be rendered\n\n      var dx = cameraCenterX - (point.x - camera.scrollX * light.scrollFactorX * camera.zoom);\n      var dy = cameraCenterY - (viewportHeight - (point.y - camera.scrollY * light.scrollFactorY * camera.zoom));\n      var distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < light.radius + cameraRadius) {\n        culledLights.push(lights[index]);\n      }\n    }\n\n    return culledLights;\n  },\n\n  /**\r\n   * Iterate over each Light with a callback.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#forEachLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {LightForEach} callback - The callback that is called with each Light.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  forEachLight: function forEachLight(callback) {\n    if (!callback) {\n      return;\n    }\n\n    var lights = this.lights;\n    var length = lights.length;\n\n    for (var index = 0; index < length; ++index) {\n      callback(lights[index]);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set the ambient light color.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#setAmbientColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rgb - The integer RGB color of the ambient light.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  setAmbientColor: function setAmbientColor(rgb) {\n    var color = Utils.getFloatsFromUintRGB(rgb);\n    this.ambientColor.r = color[0];\n    this.ambientColor.g = color[1];\n    this.ambientColor.b = color[2];\n    return this;\n  },\n\n  /**\r\n   * Returns the maximum number of Lights allowed to appear at once.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#getMaxVisibleLights\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The maximum number of Lights allowed to appear at once.\r\n   */\n  getMaxVisibleLights: function getMaxVisibleLights() {\n    return 10;\n  },\n\n  /**\r\n   * Get the number of Lights managed by this Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#getLightCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of Lights managed by this Lights Manager.\r\n   */\n  getLightCount: function getLightCount() {\n    return this.lights.length;\n  },\n\n  /**\r\n   * Add a Light.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#addLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal position of the Light.\r\n   * @param {number} [y=0] - The vertical position of the Light.\r\n   * @param {number} [radius=100] - The radius of the Light.\r\n   * @param {number} [rgb=0xffffff] - The integer RGB color of the light.\r\n   * @param {number} [intensity=1] - The intensity of the Light.\r\n   *\r\n   * @return {Phaser.GameObjects.Light} The Light that was added.\r\n   */\n  addLight: function addLight(x, y, radius, rgb, intensity) {\n    var color = null;\n    var light = null;\n    x = x === undefined ? 0.0 : x;\n    y = y === undefined ? 0.0 : y;\n    rgb = rgb === undefined ? 0xffffff : rgb;\n    radius = radius === undefined ? 100.0 : radius;\n    intensity = intensity === undefined ? 1.0 : intensity;\n    color = Utils.getFloatsFromUintRGB(rgb);\n    light = null;\n\n    if (this.lightPool.length > 0) {\n      light = this.lightPool.pop();\n      light.set(x, y, radius, color[0], color[1], color[2], intensity);\n    } else {\n      light = new Light(x, y, radius, color[0], color[1], color[2], intensity);\n    }\n\n    this.lights.push(light);\n    return light;\n  },\n\n  /**\r\n   * Remove a Light.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#removeLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Light} light - The Light to remove.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  removeLight: function removeLight(light) {\n    var index = this.lights.indexOf(light);\n\n    if (index >= 0) {\n      this.lightPool.push(light);\n      this.lights.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Shut down the Lights Manager.\r\n   *\r\n   * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\r\n   * culled Lights.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    while (this.lights.length > 0) {\n      this.lightPool.push(this.lights.pop());\n    }\n\n    this.ambientColor = {\n      r: 0.1,\n      g: 0.1,\n      b: 0.1\n    };\n    this.culledLights.length = 0;\n    this.lights.length = 0;\n  },\n\n  /**\r\n   * Destroy the Lights Manager.\r\n   *\r\n   * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n  }\n});\nmodule.exports = LightsManager;","map":null,"metadata":{},"sourceType":"script"}