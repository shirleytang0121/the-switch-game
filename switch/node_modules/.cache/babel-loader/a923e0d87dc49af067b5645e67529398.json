{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Logger_1 = require(\"../Logger\");\n\nvar logger = new Logger_1.ConsoleLogger('I18n');\n/**\r\n * Language transition class\r\n */\n\nvar I18n =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * Initialize with configurations\r\n   * @param {Object} options\r\n   */\n  function I18n(options) {\n    /**\r\n     * @private\r\n     */\n    this._options = null;\n    /**\r\n     * @private\r\n     */\n\n    this._lang = null;\n    /**\r\n     * @private\r\n     */\n\n    this._dict = {};\n    this._options = Object.assign({}, options);\n    this._lang = this._options.language;\n\n    if (!this._lang && typeof window !== 'undefined' && window && window.navigator) {\n      this._lang = window.navigator.language;\n    }\n\n    logger.debug(this._lang);\n  }\n  /**\r\n   * @method\r\n   * Explicitly setting language\r\n   * @param {String} lang\r\n   */\n\n\n  I18n.prototype.setLanguage = function (lang) {\n    this._lang = lang;\n  };\n  /**\r\n   * @method\r\n   * Get value\r\n   * @param {String} key\r\n   * @param {String} defVal - Default value\r\n   */\n\n\n  I18n.prototype.get = function (key, defVal) {\n    if (defVal === void 0) {\n      defVal = undefined;\n    }\n\n    if (!this._lang) {\n      return typeof defVal !== 'undefined' ? defVal : key;\n    }\n\n    var lang = this._lang;\n    var val = this.getByLanguage(key, lang);\n\n    if (val) {\n      return val;\n    }\n\n    if (lang.indexOf('-') > 0) {\n      val = this.getByLanguage(key, lang.split('-')[0]);\n    }\n\n    if (val) {\n      return val;\n    }\n\n    return typeof defVal !== 'undefined' ? defVal : key;\n  };\n  /**\r\n   * @method\r\n   * Get value according to specified language\r\n   * @param {String} key\r\n   * @param {String} language - Specified langurage to be used\r\n   * @param {String} defVal - Default value\r\n   */\n\n\n  I18n.prototype.getByLanguage = function (key, language, defVal) {\n    if (defVal === void 0) {\n      defVal = null;\n    }\n\n    if (!language) {\n      return defVal;\n    }\n\n    var lang_dict = this._dict[language];\n\n    if (!lang_dict) {\n      return defVal;\n    }\n\n    return lang_dict[key];\n  };\n  /**\r\n   * @method\r\n   * Add vocabularies for one language\r\n   * @param {String} langurage - Language of the dictionary\r\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\r\n   */\n\n\n  I18n.prototype.putVocabulariesForLanguage = function (language, vocabularies) {\n    var lang_dict = this._dict[language];\n\n    if (!lang_dict) {\n      lang_dict = this._dict[language] = {};\n    }\n\n    Object.assign(lang_dict, vocabularies);\n  };\n  /**\r\n   * @method\r\n   * Add vocabularies for one language\r\n   * @param {Object} vocabularies - Object that has language as key,\r\n   *                                vocabularies of each language as value\r\n   */\n\n\n  I18n.prototype.putVocabularies = function (vocabularies) {\n    var _this = this;\n\n    Object.keys(vocabularies).map(function (key) {\n      _this.putVocabulariesForLanguage(key, vocabularies[key]);\n    });\n  };\n\n  return I18n;\n}();\n\nexports.I18n = I18n;","map":null,"metadata":{},"sourceType":"script"}