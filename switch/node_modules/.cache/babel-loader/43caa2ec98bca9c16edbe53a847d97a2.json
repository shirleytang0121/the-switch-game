{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CatmullRom = require('../CatmullRom');\n/**\r\n * A Catmull-Rom interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.CatmullRom\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\n\n\nvar CatmullRomInterpolation = function CatmullRomInterpolation(v, k) {\n  var m = v.length - 1;\n  var f = m * k;\n  var i = Math.floor(f);\n\n  if (v[0] === v[m]) {\n    if (k < 0) {\n      i = Math.floor(f = m * (1 + k));\n    }\n\n    return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\n  } else {\n    if (k < 0) {\n      return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\n    }\n\n    if (k > 1) {\n      return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\n    }\n\n    return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\n  }\n};\n\nmodule.exports = CatmullRomInterpolation;","map":null,"metadata":{},"sourceType":"script"}