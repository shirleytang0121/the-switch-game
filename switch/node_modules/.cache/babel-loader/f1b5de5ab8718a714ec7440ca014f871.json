{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar NoAudioSound = require('./NoAudioSound');\n\nvar NOOP = require('../../utils/NOOP');\n/**\r\n * @classdesc\r\n * No audio implementation of the sound manager. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound manager logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar NoAudioSoundManager = new Class({\n  Extends: EventEmitter,\n  initialize: function NoAudioSoundManager(game) {\n    EventEmitter.call(this);\n    this.game = game;\n    this.sounds = [];\n    this.mute = false;\n    this.volume = 1;\n    this.rate = 1;\n    this.detune = 0;\n    this.pauseOnBlur = true;\n    this.locked = false;\n  },\n  add: function add(key, config) {\n    var sound = new NoAudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n  addAudioSprite: function addAudioSprite(key, config) {\n    var sound = this.add(key, config);\n    sound.spritemap = {};\n    return sound;\n  },\n  // eslint-disable-next-line no-unused-vars\n  play: function play(key, extra) {\n    return false;\n  },\n  // eslint-disable-next-line no-unused-vars\n  playAudioSprite: function playAudioSprite(key, spriteName, config) {\n    return false;\n  },\n  remove: function remove(sound) {\n    return BaseSoundManager.prototype.remove.call(this, sound);\n  },\n  removeByKey: function removeByKey(key) {\n    return BaseSoundManager.prototype.removeByKey.call(this, key);\n  },\n  pauseAll: NOOP,\n  resumeAll: NOOP,\n  stopAll: NOOP,\n  update: NOOP,\n  setRate: NOOP,\n  setDetune: NOOP,\n  setMute: NOOP,\n  setVolume: NOOP,\n  forEachActiveSound: function forEachActiveSound(callbackfn, scope) {\n    BaseSoundManager.prototype.forEachActiveSound.call(this, callbackfn, scope);\n  },\n  destroy: function destroy() {\n    BaseSoundManager.prototype.destroy.call(this);\n  }\n});\nmodule.exports = NoAudioSoundManager;","map":null,"metadata":{},"sourceType":"script"}