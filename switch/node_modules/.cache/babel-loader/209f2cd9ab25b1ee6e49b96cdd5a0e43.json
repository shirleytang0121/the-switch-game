{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Phaser Blend Modes.\r\n * \r\n * @name Phaser.BlendModes\r\n * @enum {integer}\r\n * @memberof Phaser\r\n * @readonly\r\n * @since 3.0.0\r\n */\nmodule.exports = {\n  /**\r\n   * Skips the Blend Mode check in the renderer.\r\n   * \r\n   * @name Phaser.BlendModes.SKIP_CHECK\r\n   */\n  SKIP_CHECK: -1,\n\n  /**\r\n   * Normal blend mode. For Canvas and WebGL.\r\n   * This is the default setting and draws new shapes on top of the existing canvas content.\r\n   * \r\n   * @name Phaser.BlendModes.NORMAL\r\n   */\n  NORMAL: 0,\n\n  /**\r\n   * Add blend mode. For Canvas and WebGL.\r\n   * Where both shapes overlap the color is determined by adding color values.\r\n   * \r\n   * @name Phaser.BlendModes.ADD\r\n   */\n  ADD: 1,\n\n  /**\r\n   * Multiply blend mode. For Canvas and WebGL.\r\n   * The pixels are of the top layer are multiplied with the corresponding pixel of the bottom layer. A darker picture is the result.\r\n   * \r\n   * @name Phaser.BlendModes.MULTIPLY\r\n   */\n  MULTIPLY: 2,\n\n  /**\r\n   * Screen blend mode. For Canvas and WebGL.\r\n   * The pixels are inverted, multiplied, and inverted again. A lighter picture is the result (opposite of multiply)\r\n   * \r\n   * @name Phaser.BlendModes.SCREEN\r\n   */\n  SCREEN: 3,\n\n  /**\r\n   * Overlay blend mode. For Canvas only.\r\n   * A combination of multiply and screen. Dark parts on the base layer become darker, and light parts become lighter.\r\n   * \r\n   * @name Phaser.BlendModes.OVERLAY\r\n   */\n  OVERLAY: 4,\n\n  /**\r\n   * Darken blend mode. For Canvas only.\r\n   * Retains the darkest pixels of both layers.\r\n   * \r\n   * @name Phaser.BlendModes.DARKEN\r\n   */\n  DARKEN: 5,\n\n  /**\r\n   * Lighten blend mode. For Canvas only.\r\n   * Retains the lightest pixels of both layers.\r\n   * \r\n   * @name Phaser.BlendModes.LIGHTEN\r\n   */\n  LIGHTEN: 6,\n\n  /**\r\n   * Color Dodge blend mode. For Canvas only.\r\n   * Divides the bottom layer by the inverted top layer.\r\n   * \r\n   * @name Phaser.BlendModes.COLOR_DODGE\r\n   */\n  COLOR_DODGE: 7,\n\n  /**\r\n   * Color Burn blend mode. For Canvas only.\r\n   * Divides the inverted bottom layer by the top layer, and then inverts the result.\r\n   * \r\n   * @name Phaser.BlendModes.COLOR_BURN\r\n   */\n  COLOR_BURN: 8,\n\n  /**\r\n   * Hard Light blend mode. For Canvas only.\r\n   * A combination of multiply and screen like overlay, but with top and bottom layer swapped.\r\n   * \r\n   * @name Phaser.BlendModes.HARD_LIGHT\r\n   */\n  HARD_LIGHT: 9,\n\n  /**\r\n   * Soft Light blend mode. For Canvas only.\r\n   * A softer version of hard-light. Pure black or white does not result in pure black or white.\r\n   * \r\n   * @name Phaser.BlendModes.SOFT_LIGHT\r\n   */\n  SOFT_LIGHT: 10,\n\n  /**\r\n   * Difference blend mode. For Canvas only.\r\n   * Subtracts the bottom layer from the top layer or the other way round to always get a positive value.\r\n   * \r\n   * @name Phaser.BlendModes.DIFFERENCE\r\n   */\n  DIFFERENCE: 11,\n\n  /**\r\n   * Exclusion blend mode. For Canvas only.\r\n   * Like difference, but with lower contrast.\r\n   * \r\n   * @name Phaser.BlendModes.EXCLUSION\r\n   */\n  EXCLUSION: 12,\n\n  /**\r\n   * Hue blend mode. For Canvas only.\r\n   * Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.\r\n   * \r\n   * @name Phaser.BlendModes.HUE\r\n   */\n  HUE: 13,\n\n  /**\r\n   * Saturation blend mode. For Canvas only.\r\n   * Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.\r\n   * \r\n   * @name Phaser.BlendModes.SATURATION\r\n   */\n  SATURATION: 14,\n\n  /**\r\n   * Color blend mode. For Canvas only.\r\n   * Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.\r\n   * \r\n   * @name Phaser.BlendModes.COLOR\r\n   */\n  COLOR: 15,\n\n  /**\r\n   * Luminosity blend mode. For Canvas only.\r\n   * Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.\r\n   * \r\n   * @name Phaser.BlendModes.LUMINOSITY\r\n   */\n  LUMINOSITY: 16,\n\n  /**\r\n   * Alpha erase blend mode. For Canvas and WebGL.\r\n   * \r\n   * @name Phaser.BlendModes.ERASE\r\n   */\n  ERASE: 17,\n\n  /**\r\n   * Source-in blend mode. For Canvas only.\r\n   * The new shape is drawn only where both the new shape and the destination canvas overlap. Everything else is made transparent.\r\n   * \r\n   * @name Phaser.BlendModes.SOURCE_IN\r\n   */\n  SOURCE_IN: 18,\n\n  /**\r\n   * Source-out blend mode. For Canvas only.\r\n   * The new shape is drawn where it doesn't overlap the existing canvas content.\r\n   * \r\n   * @name Phaser.BlendModes.SOURCE_OUT\r\n   */\n  SOURCE_OUT: 19,\n\n  /**\r\n   * Source-out blend mode. For Canvas only.\r\n   * The new shape is only drawn where it overlaps the existing canvas content.\r\n   * \r\n   * @name Phaser.BlendModes.SOURCE_ATOP\r\n   */\n  SOURCE_ATOP: 20,\n\n  /**\r\n   * Destination-over blend mode. For Canvas only.\r\n   * New shapes are drawn behind the existing canvas content.\r\n   * \r\n   * @name Phaser.BlendModes.DESTINATION_OVER\r\n   */\n  DESTINATION_OVER: 21,\n\n  /**\r\n   * Destination-in blend mode. For Canvas only.\r\n   * The existing canvas content is kept where both the new shape and existing canvas content overlap. Everything else is made transparent.\r\n   * \r\n   * @name Phaser.BlendModes.DESTINATION_IN\r\n   */\n  DESTINATION_IN: 22,\n\n  /**\r\n   * Destination-out blend mode. For Canvas only.\r\n   * The existing content is kept where it doesn't overlap the new shape.\r\n   * \r\n   * @name Phaser.BlendModes.DESTINATION_OUT\r\n   */\n  DESTINATION_OUT: 23,\n\n  /**\r\n   * Destination-out blend mode. For Canvas only.\r\n   * The existing canvas is only kept where it overlaps the new shape. The new shape is drawn behind the canvas content.\r\n   * \r\n   * @name Phaser.BlendModes.DESTINATION_ATOP\r\n   */\n  DESTINATION_ATOP: 24,\n\n  /**\r\n   * Lighten blend mode. For Canvas only.\r\n   * Where both shapes overlap the color is determined by adding color values.\r\n   * \r\n   * @name Phaser.BlendModes.LIGHTER\r\n   */\n  LIGHTER: 25,\n\n  /**\r\n   * Copy blend mode. For Canvas only.\r\n   * Only the new shape is shown.\r\n   * \r\n   * @name Phaser.BlendModes.COPY\r\n   */\n  COPY: 26,\n\n  /**\r\n   * xor blend mode. For Canvas only.\r\n   * Shapes are made transparent where both overlap and drawn normal everywhere else.\r\n   * \r\n   * @name Phaser.BlendModes.XOR\r\n   */\n  XOR: 27\n};","map":null,"metadata":{},"sourceType":"script"}