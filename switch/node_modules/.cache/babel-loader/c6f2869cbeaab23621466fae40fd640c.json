{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar StaticTilemapLayerCanvasRenderer = function StaticTilemapLayerCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  src.cull(camera);\n  var renderTiles = src.culledTiles;\n  var tileCount = renderTiles.length;\n\n  if (tileCount === 0) {\n    return;\n  }\n\n  var camMatrix = renderer._tempMatrix1;\n  var layerMatrix = renderer._tempMatrix2;\n  var calcMatrix = renderer._tempMatrix3;\n  layerMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n  var ctx = renderer.currentContext;\n  var gidMap = src.gidMap;\n  ctx.save();\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    layerMatrix.e = src.x;\n    layerMatrix.f = src.y;\n    camMatrix.multiply(layerMatrix, calcMatrix);\n    calcMatrix.copyToContext(ctx);\n  } else {\n    //  Undo the camera scroll\n    layerMatrix.e -= camera.scrollX * src.scrollFactorX;\n    layerMatrix.f -= camera.scrollY * src.scrollFactorY;\n    layerMatrix.copyToContext(ctx);\n  }\n\n  var alpha = camera.alpha * src.alpha;\n  ctx.globalAlpha = camera.alpha * src.alpha;\n\n  for (var i = 0; i < tileCount; i++) {\n    var tile = renderTiles[i];\n    var tileset = gidMap[tile.index];\n\n    if (!tileset) {\n      continue;\n    }\n\n    var image = tileset.image.getSourceImage();\n    var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\n\n    if (tileTexCoords) {\n      var tileWidth = tileset.tileWidth;\n      var tileHeight = tileset.tileHeight;\n      var halfWidth = tileWidth / 2;\n      var halfHeight = tileHeight / 2;\n      ctx.save();\n      ctx.translate(tile.pixelX + halfWidth, tile.pixelY + halfHeight);\n\n      if (tile.rotation !== 0) {\n        ctx.rotate(tile.rotation);\n      }\n\n      if (tile.flipX || tile.flipY) {\n        ctx.scale(tile.flipX ? -1 : 1, tile.flipY ? -1 : 1);\n      }\n\n      ctx.globalAlpha = alpha * tile.alpha;\n      ctx.drawImage(image, tileTexCoords.x, tileTexCoords.y, tileWidth, tileHeight, -halfWidth, -halfHeight, tileWidth, tileHeight);\n      ctx.restore();\n    }\n  }\n\n  ctx.restore();\n};\n\nmodule.exports = StaticTilemapLayerCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}