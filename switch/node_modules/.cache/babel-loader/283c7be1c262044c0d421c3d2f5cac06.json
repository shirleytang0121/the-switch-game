{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar Shape = require('../Shape');\n\nvar GeomLine = require('../../../geom/line/Line');\n\nvar LineRender = require('./LineRender');\n/**\r\n * @classdesc\r\n * The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only stroke colors and cannot be filled.\r\n * \r\n * A Line Shape allows you to draw a line between two points in your game. You can control the\r\n * stroke color and thickness of the line. In WebGL only you can also specify a different\r\n * thickness for the start and end of the line, allowing you to render lines that taper-off.\r\n * \r\n * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.\r\n *\r\n * @class Line\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n * @param {number} [y1=0] - The vertical position of the start of the line.\r\n * @param {number} [x2=128] - The horizontal position of the end of the line.\r\n * @param {number} [y2=0] - The vertical position of the end of the line.\r\n * @param {number} [strokeColor] - The color the line will be drawn in, i.e. 0xff0000 for red.\r\n * @param {number} [strokeAlpha] - The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Line = new Class({\n  Extends: Shape,\n  Mixins: [LineRender],\n  initialize: function Line(scene, x, y, x1, y1, x2, y2, strokeColor, strokeAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 128;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    Shape.call(this, scene, 'Line', new GeomLine(x1, y1, x2, y2));\n    var width = this.geom.right - this.geom.left;\n    var height = this.geom.bottom - this.geom.top;\n    /**\r\n     * The width (or thickness) of the line.\r\n     * See the setLineWidth method for extra details on changing this on WebGL.\r\n     *\r\n     * @name Phaser.GameObjects.Line#lineWidth\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.lineWidth = 1;\n    /**\r\n     * Private internal value. Holds the start width of the line.\r\n     *\r\n     * @name Phaser.GameObjects.Line#_startWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._startWidth = 1;\n    /**\r\n     * Private internal value. Holds the end width of the line.\r\n     *\r\n     * @name Phaser.GameObjects.Line#_endWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._endWidth = 1;\n    this.setPosition(x, y);\n    this.setSize(width, height);\n\n    if (strokeColor !== undefined) {\n      this.setStrokeStyle(1, strokeColor, strokeAlpha);\n    }\n\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * Sets the width of the line.\r\n   * \r\n   * When using the WebGL renderer you can have different start and end widths.\r\n   * When using the Canvas renderer only the `startWidth` value is used. The `endWidth` is ignored.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Line#setLineWidth\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} startWidth - The start width of the line.\r\n   * @param {number} [endWidth] - The end width of the line. Only used in WebGL.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setLineWidth: function setLineWidth(startWidth, endWidth) {\n    if (endWidth === undefined) {\n      endWidth = startWidth;\n    }\n\n    this._startWidth = startWidth;\n    this._endWidth = endWidth;\n    this.lineWidth = startWidth;\n    return this;\n  },\n\n  /**\r\n   * Sets the start and end coordinates of this Line.\r\n   *\r\n   * @method Phaser.GameObjects.Line#setTo\r\n   * @since 3.13.0\r\n   *\r\n   * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n   * @param {number} [y1=0] - The vertical position of the start of the line.\r\n   * @param {number} [x2=0] - The horizontal position of the end of the line.\r\n   * @param {number} [y2=0] - The vertical position of the end of the line.\r\n   *\r\n   * @return {this} This Line object.\r\n   */\n  setTo: function setTo(x1, y1, x2, y2) {\n    this.geom.setTo(x1, y1, x2, y2);\n    return this;\n  }\n});\nmodule.exports = Line;","map":null,"metadata":{},"sourceType":"script"}