{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar AlignIn = require('../display/align/in/QuickSet');\n\nvar CONST = require('../display/align/const');\n\nvar GetFastValue = require('../utils/object/GetFastValue');\n\nvar NOOP = require('../utils/NOOP');\n\nvar Zone = require('../gameobjects/zone/Zone');\n\nvar tempZone = new Zone({\n  sys: {\n    queueDepthSort: NOOP,\n    events: {\n      once: NOOP\n    }\n  }\n}, 0, 0, 1, 1);\n/**\r\n * @typedef {object} GridAlignConfig\r\n *\r\n * @property {integer} [width=-1] - The width of the grid in items (not pixels). -1 means lay all items out horizontally, regardless of quantity.\r\n *                                  If both this value and height are set to -1 then this value overrides it and the `height` value is ignored.\r\n * @property {integer} [height=-1] - The height of the grid in items (not pixels). -1 means lay all items out vertically, regardless of quantity.\r\n *                                   If both this value and `width` are set to -1 then `width` overrides it and this value is ignored.\r\n * @property {integer} [cellWidth=1] - The width of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [cellHeight=1] - The height of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [position=0] - The alignment position. One of the Phaser.Display.Align consts such as `TOP_LEFT` or `RIGHT_CENTER`.\r\n * @property {number} [x=0] - Optionally place the top-left of the final grid at this coordinate.\r\n * @property {number} [y=0] - Optionally place the top-left of the final grid at this coordinate.\r\n */\n\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then aligns them based on the grid configuration given to this action.\r\n *\r\n * @function Phaser.Actions.GridAlign\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {GridAlignConfig} options - The GridAlign Configuration object.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\n\nvar GridAlign = function GridAlign(items, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  var width = GetFastValue(options, 'width', -1);\n  var height = GetFastValue(options, 'height', -1);\n  var cellWidth = GetFastValue(options, 'cellWidth', 1);\n  var cellHeight = GetFastValue(options, 'cellHeight', cellWidth);\n  var position = GetFastValue(options, 'position', CONST.TOP_LEFT);\n  var x = GetFastValue(options, 'x', 0);\n  var y = GetFastValue(options, 'y', 0);\n  var cx = 0;\n  var cy = 0;\n  var w = width * cellWidth;\n  var h = height * cellHeight;\n  tempZone.setPosition(x, y);\n  tempZone.setSize(cellWidth, cellHeight);\n\n  for (var i = 0; i < items.length; i++) {\n    AlignIn(items[i], tempZone, position);\n\n    if (width === -1) {\n      //  We keep laying them out horizontally until we've done them all\n      cy += cellHeight;\n      tempZone.y += cellHeight;\n\n      if (cy === h) {\n        cy = 0;\n        tempZone.x += cellWidth;\n        tempZone.y = y;\n      }\n    } else if (height === -1) {\n      //  We keep laying them out vertically until we've done them all\n      cx += cellWidth;\n      tempZone.x += cellWidth;\n\n      if (cx === w) {\n        cx = 0;\n        tempZone.x = x;\n        tempZone.y += cellHeight;\n      }\n    } else {\n      //  We keep laying them out until we hit the column limit\n      cx += cellWidth;\n      tempZone.x += cellWidth;\n\n      if (cx === w) {\n        cx = 0;\n        cy += cellHeight;\n        tempZone.x = x;\n        tempZone.y += cellHeight;\n\n        if (cy === h) {\n          //  We've hit the column limit, so return, even if there are items left\n          break;\n        }\n      }\n    }\n  }\n\n  return items;\n};\n\nmodule.exports = GridAlign;","map":null,"metadata":{},"sourceType":"script"}