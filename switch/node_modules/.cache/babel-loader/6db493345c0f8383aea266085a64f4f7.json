{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Browser = require('./Browser');\n/**\r\n * Determines the audio playback capabilities of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.audio` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Audio\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} audioData - Can this device play HTML Audio tags?\r\n * @property {boolean} dolby - Can this device play EC-3 Dolby Digital Plus files?\r\n * @property {boolean} m4a - Can this device can play m4a files.\r\n * @property {boolean} mp3 - Can this device play mp3 files?\r\n * @property {boolean} ogg - Can this device play ogg files?\r\n * @property {boolean} opus - Can this device play opus files?\r\n * @property {boolean} wav - Can this device play wav files?\r\n * @property {boolean} webAudio - Does this device have the Web Audio API?\r\n * @property {boolean} webm - Can this device play webm files?\r\n */\n\n\nvar Audio = {\n  audioData: false,\n  dolby: false,\n  m4a: false,\n  mp3: false,\n  ogg: false,\n  opus: false,\n  wav: false,\n  webAudio: false,\n  webm: false\n};\n\nfunction init() {\n  Audio.audioData = !!window['Audio'];\n  Audio.webAudio = !!(window['AudioContext'] || window['webkitAudioContext']);\n  var audioElement = document.createElement('audio');\n  var result = !!audioElement.canPlayType;\n\n  try {\n    if (result) {\n      if (audioElement.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')) {\n        Audio.ogg = true;\n      }\n\n      if (audioElement.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '') || audioElement.canPlayType('audio/opus;').replace(/^no$/, '')) {\n        Audio.opus = true;\n      }\n\n      if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '')) {\n        Audio.mp3 = true;\n      } //  Mimetypes accepted:\n      //  developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n      //  bit.ly/iphoneoscodecs\n\n\n      if (audioElement.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')) {\n        Audio.wav = true;\n      }\n\n      if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) {\n        Audio.m4a = true;\n      }\n\n      if (audioElement.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')) {\n        Audio.webm = true;\n      }\n\n      if (audioElement.canPlayType('audio/mp4;codecs=\"ec-3\"') !== '') {\n        if (Browser.edge) {\n          Audio.dolby = true;\n        } else if (Browser.safari && Browser.safariVersion >= 9) {\n          if (/Mac OS X (\\d+)_(\\d+)/.test(navigator.userAgent)) {\n            var major = parseInt(RegExp.$1, 10);\n            var minor = parseInt(RegExp.$2, 10);\n\n            if (major === 10 && minor >= 11 || major > 10) {\n              Audio.dolby = true;\n            }\n          }\n        }\n      }\n    }\n  } catch (e) {//  Nothing to do here\n  }\n\n  return Audio;\n}\n\nmodule.exports = init();","map":null,"metadata":{},"sourceType":"script"}