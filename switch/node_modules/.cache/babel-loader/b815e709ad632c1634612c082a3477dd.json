{"ast":null,"code":"// @if DEBUG\n\n/**\r\n* _Internal Class_, not generally used outside of the engine's internals.\r\n*\r\n*/\nvar Metrics = {};\nmodule.exports = Metrics;\n\nvar Composite = require('../body/Composite');\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * Creates a new metrics.\r\n   * @method create\r\n   * @private\r\n   * @return {metrics} A new metrics\r\n   */\n  Metrics.create = function (options) {\n    var defaults = {\n      extended: false,\n      narrowDetections: 0,\n      narrowphaseTests: 0,\n      narrowReuse: 0,\n      narrowReuseCount: 0,\n      midphaseTests: 0,\n      broadphaseTests: 0,\n      narrowEff: 0.0001,\n      midEff: 0.0001,\n      broadEff: 0.0001,\n      collisions: 0,\n      buckets: 0,\n      bodies: 0,\n      pairs: 0\n    };\n    return Common.extend(defaults, false, options);\n  };\n  /**\r\n   * Resets metrics.\r\n   * @method reset\r\n   * @private\r\n   * @param {metrics} metrics\r\n   */\n\n\n  Metrics.reset = function (metrics) {\n    if (metrics.extended) {\n      metrics.narrowDetections = 0;\n      metrics.narrowphaseTests = 0;\n      metrics.narrowReuse = 0;\n      metrics.narrowReuseCount = 0;\n      metrics.midphaseTests = 0;\n      metrics.broadphaseTests = 0;\n      metrics.narrowEff = 0;\n      metrics.midEff = 0;\n      metrics.broadEff = 0;\n      metrics.collisions = 0;\n      metrics.buckets = 0;\n      metrics.pairs = 0;\n      metrics.bodies = 0;\n    }\n  };\n  /**\r\n   * Updates metrics.\r\n   * @method update\r\n   * @private\r\n   * @param {metrics} metrics\r\n   * @param {engine} engine\r\n   */\n\n\n  Metrics.update = function (metrics, engine) {\n    if (metrics.extended) {\n      var world = engine.world,\n          bodies = Composite.allBodies(world);\n      metrics.collisions = metrics.narrowDetections;\n      metrics.pairs = engine.pairs.list.length;\n      metrics.bodies = bodies.length;\n      metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\n      metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\n      metrics.broadEff = (1 - metrics.broadphaseTests / (bodies.length || 1)).toFixed(2);\n      metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2); //var broadphase = engine.broadphase[engine.broadphase.current];\n      //if (broadphase.instance)\n      //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\n    }\n  };\n})(); // @endif","map":null,"metadata":{},"sourceType":"script"}