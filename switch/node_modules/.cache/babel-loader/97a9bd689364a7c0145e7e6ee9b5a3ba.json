{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Color = require('./Color');\n/**\r\n * Converts a CSS 'web' string into a Phaser Color object.\r\n * \r\n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\r\n *\r\n * @function Phaser.Display.Color.RGBStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\n\n\nvar RGBStringToColor = function RGBStringToColor(rgb) {\n  var color = new Color();\n  var result = /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/.exec(rgb.toLowerCase());\n\n  if (result) {\n    var r = parseInt(result[1], 10);\n    var g = parseInt(result[2], 10);\n    var b = parseInt(result[3], 10);\n    var a = result[4] !== undefined ? parseFloat(result[4]) : 1;\n    color.setTo(r, g, b, a * 255);\n  }\n\n  return color;\n};\n\nmodule.exports = RGBStringToColor;","map":null,"metadata":{},"sourceType":"script"}