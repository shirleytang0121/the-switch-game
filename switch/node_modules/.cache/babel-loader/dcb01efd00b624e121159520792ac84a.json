{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar COLLIDES = require('./COLLIDES');\n\nvar GetVelocity = require('./GetVelocity');\n\nvar TYPE = require('./TYPE');\n\nvar UpdateMotion = require('./UpdateMotion');\n/**\r\n * @callback BodyUpdateCallback\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n */\n\n/**\r\n * @typedef {object} JSONImpactBody\r\n * @todo Replace object types\r\n *\r\n * @property {string} name - [description]\r\n * @property {object} size - [description]\r\n * @property {object} pos - The entity's position in the game world.\r\n * @property {object} vel - Current velocity in pixels per second.\r\n * @property {object} accel - Current acceleration to be added to the entity's velocity per second. E.g. an entity with a `vel.x` of 0 and `accel.x` of 10 will have a `vel.x` of 100 ten seconds later.\r\n * @property {object} friction - Deceleration to be subtracted from the entity's velocity per second. Only applies if `accel` is 0.\r\n * @property {object} maxVel - The maximum velocity a body can move.\r\n * @property {number} gravityFactor - [description]\r\n * @property {number} bounciness - [description]\r\n * @property {number} minBounceVelocity - [description]\r\n * @property {Phaser.Physics.Impact.TYPE} type - [description]\r\n * @property {Phaser.Physics.Impact.TYPE} checkAgainst - [description]\r\n * @property {Phaser.Physics.Impact.COLLIDES} collides - [description]\r\n */\n\n/**\r\n * @classdesc\r\n * An Impact.js compatible physics body.\r\n * This re-creates the properties you'd get on an Entity and the math needed to update them.\r\n *\r\n * @class Body\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - [description]\r\n * @param {number} y - [description]\r\n * @param {number} [sx=16] - [description]\r\n * @param {number} [sy=16] - [description]\r\n */\n\n\nvar Body = new Class({\n  initialize: function Body(world, x, y, sx, sy) {\n    if (sx === undefined) {\n      sx = 16;\n    }\n\n    if (sy === undefined) {\n      sy = sx;\n    }\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.world = world;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#gameObject\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.gameObject = null;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#parent\r\n     * @type {?(Phaser.Physics.Impact.ImpactBody|Phaser.Physics.Impact.ImpactImage|Phaser.Physics.Impact.ImpactSprite)}\r\n     * @since 3.0.0\r\n     */\n\n    this.parent;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#id\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.id = world.getNextID();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#size\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = {\n      x: sx,\n      y: sy\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#offset\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#pos\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.pos = {\n      x: x,\n      y: y\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#last\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.last = {\n      x: x,\n      y: y\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#vel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.vel = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.accel = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#friction\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.friction = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#maxVel\r\n     * @type {{x: number, y: number}}\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVel = {\n      x: world.defaults.maxVelocityX,\n      y: world.defaults.maxVelocityY\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#standing\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.standing = false;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#gravityFactor\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.gravityFactor = world.defaults.gravityFactor;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#bounciness\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.bounciness = world.defaults.bounciness;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#minBounceVelocity\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.minBounceVelocity = world.defaults.minBounceVelocity;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accelGround\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelGround = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accelAir\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelAir = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#jumpSpeed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.jumpSpeed = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#type\r\n     * @type {Phaser.Physics.Impact.TYPE}\r\n     * @since 3.0.0\r\n     */\n\n    this.type = TYPE.NONE;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#checkAgainst\r\n     * @type {Phaser.Physics.Impact.TYPE}\r\n     * @since 3.0.0\r\n     */\n\n    this.checkAgainst = TYPE.NONE;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#collides\r\n     * @type {Phaser.Physics.Impact.COLLIDES}\r\n     * @since 3.0.0\r\n     */\n\n    this.collides = COLLIDES.NEVER;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugShowBody\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugShowBody = world.defaults.debugShowBody;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugShowVelocity\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugShowVelocity = world.defaults.debugShowVelocity;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugBodyColor\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugBodyColor = world.defaults.bodyDebugColor;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#updateCallback\r\n     * @type {?BodyUpdateCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.updateCallback;\n    /**\r\n     * min 44 deg, max 136 deg\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#slopeStanding\r\n     * @type {{ min: number, max: number }}\r\n     * @since 3.0.0\r\n     */\n\n    this.slopeStanding = {\n      min: 0.767944870877505,\n      max: 2.3736477827122884\n    };\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   */\n  reset: function reset(x, y) {\n    this.pos = {\n      x: x,\n      y: y\n    };\n    this.last = {\n      x: x,\n      y: y\n    };\n    this.vel = {\n      x: 0,\n      y: 0\n    };\n    this.accel = {\n      x: 0,\n      y: 0\n    };\n    this.friction = {\n      x: 0,\n      y: 0\n    };\n    this.maxVel = {\n      x: 100,\n      y: 100\n    };\n    this.standing = false;\n    this.gravityFactor = 1;\n    this.bounciness = 0;\n    this.minBounceVelocity = 40;\n    this.accelGround = 0;\n    this.accelAir = 0;\n    this.jumpSpeed = 0;\n    this.type = TYPE.NONE;\n    this.checkAgainst = TYPE.NONE;\n    this.collides = COLLIDES.NEVER;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function update(delta) {\n    var pos = this.pos;\n    this.last.x = pos.x;\n    this.last.y = pos.y;\n    this.vel.y += this.world.gravity * delta * this.gravityFactor;\n    this.vel.x = GetVelocity(delta, this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);\n    this.vel.y = GetVelocity(delta, this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);\n    var mx = this.vel.x * delta;\n    var my = this.vel.y * delta;\n    var res = this.world.collisionMap.trace(pos.x, pos.y, mx, my, this.size.x, this.size.y);\n\n    if (this.handleMovementTrace(res)) {\n      UpdateMotion(this, res);\n    }\n\n    var go = this.gameObject;\n\n    if (go) {\n      go.x = pos.x - this.offset.x + go.displayOriginX * go.scaleX;\n      go.y = pos.y - this.offset.y + go.displayOriginY * go.scaleY;\n    }\n\n    if (this.updateCallback) {\n      this.updateCallback(this);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#drawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphic - [description]\r\n   */\n  drawDebug: function drawDebug(graphic) {\n    var pos = this.pos;\n\n    if (this.debugShowBody) {\n      graphic.lineStyle(1, this.debugBodyColor, 1);\n      graphic.strokeRect(pos.x, pos.y, this.size.x, this.size.y);\n    }\n\n    if (this.debugShowVelocity) {\n      var x = pos.x + this.size.x / 2;\n      var y = pos.y + this.size.y / 2;\n      graphic.lineStyle(1, this.world.defaults.velocityDebugColor, 1);\n      graphic.lineBetween(x, y, x + this.vel.x, y + this.vel.y);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#willDrawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  willDrawDebug: function willDrawDebug() {\n    return this.debugShowBody || this.debugShowVelocity;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#skipHash\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  skipHash: function skipHash() {\n    return !this.enabled || this.type === 0 && this.checkAgainst === 0 && this.collides === 0;\n  },\n\n  /**\r\n   * Determines whether the body collides with the `other` one or not.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#touches\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  touches: function touches(other) {\n    return !(this.pos.x >= other.pos.x + other.size.x || this.pos.x + this.size.x <= other.pos.x || this.pos.y >= other.pos.y + other.size.y || this.pos.y + this.size.y <= other.pos.y);\n  },\n\n  /**\r\n   * Reset the size and position of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#resetSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to position the body.\r\n   * @param {number} y - The y coordinate to position the body.\r\n   * @param {number} width - The width of the body.\r\n   * @param {number} height - The height of the body.\r\n   *\r\n   * @return {Phaser.Physics.Impact.Body} This Body object.\r\n   */\n  resetSize: function resetSize(x, y, width, height) {\n    this.pos.x = x;\n    this.pos.y = y;\n    this.size.x = width;\n    this.size.y = height;\n    return this;\n  },\n\n  /**\r\n   * Export this body object to JSON.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {JSONImpactBody} JSON representation of this body object.\r\n   */\n  toJSON: function toJSON() {\n    var output = {\n      name: this.name,\n      size: {\n        x: this.size.x,\n        y: this.size.y\n      },\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y\n      },\n      vel: {\n        x: this.vel.x,\n        y: this.vel.y\n      },\n      accel: {\n        x: this.accel.x,\n        y: this.accel.y\n      },\n      friction: {\n        x: this.friction.x,\n        y: this.friction.y\n      },\n      maxVel: {\n        x: this.maxVel.x,\n        y: this.maxVel.y\n      },\n      gravityFactor: this.gravityFactor,\n      bounciness: this.bounciness,\n      minBounceVelocity: this.minBounceVelocity,\n      type: this.type,\n      checkAgainst: this.checkAgainst,\n      collides: this.collides\n    };\n    return output;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#fromJSON\r\n   * @todo Code it!\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - [description]\r\n   */\n  fromJSON: function fromJSON() {},\n\n  /**\r\n   * Can be overridden by user code\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#check\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   */\n  check: function check() {},\n\n  /**\r\n   * Can be overridden by user code\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#collideWith\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   * @param {string} axis - [description]\r\n   */\n  collideWith: function collideWith(other, axis) {\n    if (this.parent && this.parent._collideCallback) {\n      this.parent._collideCallback.call(this.parent._callbackScope, this, other, axis);\n    }\n  },\n\n  /**\r\n   * Can be overridden by user code but must return a boolean.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#handleMovementTrace\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} res - [description]\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  handleMovementTrace: function handleMovementTrace() {\n    return true;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.world.remove(this);\n    this.enabled = false;\n    this.world = null;\n    this.gameObject = null;\n    this.parent = null;\n  }\n});\nmodule.exports = Body;","map":null,"metadata":{},"sourceType":"script"}