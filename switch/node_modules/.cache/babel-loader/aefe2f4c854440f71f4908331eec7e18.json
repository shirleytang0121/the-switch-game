{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar LineToLine = require('./LineToLine');\n\nvar Contains = require('../rectangle/Contains');\n\nvar ContainsArray = require('../triangle/ContainsArray');\n\nvar Decompose = require('../rectangle/Decompose');\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape.\r\n *\r\n * @function Phaser.Geom.Intersects.RectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n *\r\n * @return {boolean} A value of `true` if objects intersect; otherwise `false`.\r\n */\n\n\nvar RectangleToTriangle = function RectangleToTriangle(rect, triangle) {\n  //  First the cheapest ones:\n  if (triangle.left > rect.right || triangle.right < rect.left || triangle.top > rect.bottom || triangle.bottom < rect.top) {\n    return false;\n  }\n\n  var triA = triangle.getLineA();\n  var triB = triangle.getLineB();\n  var triC = triangle.getLineC(); //  Are any of the triangle points within the rectangle?\n\n  if (Contains(rect, triA.x1, triA.y1) || Contains(rect, triA.x2, triA.y2)) {\n    return true;\n  }\n\n  if (Contains(rect, triB.x1, triB.y1) || Contains(rect, triB.x2, triB.y2)) {\n    return true;\n  }\n\n  if (Contains(rect, triC.x1, triC.y1) || Contains(rect, triC.x2, triC.y2)) {\n    return true;\n  } //  Cheap tests over, now to see if any of the lines intersect ...\n\n\n  var rectA = rect.getLineA();\n  var rectB = rect.getLineB();\n  var rectC = rect.getLineC();\n  var rectD = rect.getLineD();\n\n  if (LineToLine(triA, rectA) || LineToLine(triA, rectB) || LineToLine(triA, rectC) || LineToLine(triA, rectD)) {\n    return true;\n  }\n\n  if (LineToLine(triB, rectA) || LineToLine(triB, rectB) || LineToLine(triB, rectC) || LineToLine(triB, rectD)) {\n    return true;\n  }\n\n  if (LineToLine(triC, rectA) || LineToLine(triC, rectB) || LineToLine(triC, rectC) || LineToLine(triC, rectD)) {\n    return true;\n  } //  None of the lines intersect, so are any rectangle points within the triangle?\n\n\n  var points = Decompose(rect);\n  var within = ContainsArray(triangle, points, true);\n  return within.length > 0;\n};\n\nmodule.exports = RectangleToTriangle;","map":null,"metadata":{},"sourceType":"script"}