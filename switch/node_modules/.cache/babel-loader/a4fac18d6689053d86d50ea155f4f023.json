{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BaseSound = require('../BaseSound');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * HTML5 Audio implementation of the sound.\r\n *\r\n * @class HTML5AudioSound\r\n * @extends Phaser.Sound.BaseSound\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.HTML5AudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\n\n\nvar HTML5AudioSound = new Class({\n  Extends: BaseSound,\n  initialize: function HTML5AudioSound(manager, key, config) {\n    if (config === undefined) {\n      config = {};\n    }\n    /**\r\n     * An array containing all HTML5 Audio tags that could be used for individual\r\n     * sound's playback. Number of instances depends on the config value passed\r\n     * to the Loader#audio method call, default is 1.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#tags\r\n     * @type {HTMLAudioElement[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n\n    this.tags = manager.game.cache.audio.get(key);\n\n    if (!this.tags) {\n      // eslint-disable-next-line no-console\n      console.warn('Audio cache entry missing: ' + key);\n      return;\n    }\n    /**\r\n     * Reference to an HTML5 Audio tag used for playing sound.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#audio\r\n     * @type {HTMLAudioElement}\r\n     * @private\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n\n    this.audio = null;\n    /**\r\n     * Timestamp as generated by the Request Animation Frame or SetTimeout\r\n     * representing the time at which the delayed sound playback should start.\r\n     * Set to 0 if sound playback is not delayed.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#startTime\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.startTime = 0;\n    /**\r\n     * Audio tag's playback position recorded on previous\r\n     * update method call. Set to 0 if sound is not playing.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#previousTime\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.previousTime = 0;\n    this.duration = this.tags[0].duration;\n    this.totalDuration = this.tags[0].duration;\n    BaseSound.call(this, manager, key, config);\n  },\n\n  /**\r\n   * Play this sound, or a marked section of it.\r\n   * It always plays the sound from the start. If you want to start playback from a specific time\r\n   * you can set 'seek' setting of the config object, provided to this call, to that value.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#play\r\n   * @fires Phaser.Sound.Events#PLAY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [markerName=''] - If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound.\r\n   * @param {SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n   *\r\n   * @return {boolean} Whether the sound started playing successfully.\r\n   */\n  play: function play(markerName, config) {\n    if (this.manager.isLocked(this, 'play', [markerName, config])) {\n      return false;\n    }\n\n    if (!BaseSound.prototype.play.call(this, markerName, config)) {\n      return false;\n    } //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\n\n\n    if (!this.pickAndPlayAudioTag()) {\n      return false;\n    }\n\n    this.emit(Events.PLAY, this);\n    return true;\n  },\n\n  /**\r\n   * Pauses the sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#pause\r\n   * @fires Phaser.Sound.Events#PAUSE\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether the sound was paused successfully.\r\n   */\n  pause: function pause() {\n    if (this.manager.isLocked(this, 'pause')) {\n      return false;\n    }\n\n    if (this.startTime > 0) {\n      return false;\n    }\n\n    if (!BaseSound.prototype.pause.call(this)) {\n      return false;\n    } //  \\/\\/\\/ isPlaying = false, isPaused = true \\/\\/\\/\n\n\n    this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\n    this.stopAndReleaseAudioTag();\n    this.emit(Events.PAUSE, this);\n    return true;\n  },\n\n  /**\r\n   * Resumes the sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#resume\r\n   * @fires Phaser.Sound.Events#RESUME\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether the sound was resumed successfully.\r\n   */\n  resume: function resume() {\n    if (this.manager.isLocked(this, 'resume')) {\n      return false;\n    }\n\n    if (this.startTime > 0) {\n      return false;\n    }\n\n    if (!BaseSound.prototype.resume.call(this)) {\n      return false;\n    } //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\n\n\n    if (!this.pickAndPlayAudioTag()) {\n      return false;\n    }\n\n    this.emit(Events.RESUME, this);\n    return true;\n  },\n\n  /**\r\n   * Stop playing this sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#stop\r\n   * @fires Phaser.Sound.Events#STOP\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether the sound was stopped successfully.\r\n   */\n  stop: function stop() {\n    if (this.manager.isLocked(this, 'stop')) {\n      return false;\n    }\n\n    if (!BaseSound.prototype.stop.call(this)) {\n      return false;\n    } //  \\/\\/\\/ isPlaying = false, isPaused = false \\/\\/\\/\n\n\n    this.stopAndReleaseAudioTag();\n    this.emit(Events.STOP, this);\n    return true;\n  },\n\n  /**\r\n   * Used internally to do what the name says.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#pickAndPlayAudioTag\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n   */\n  pickAndPlayAudioTag: function pickAndPlayAudioTag() {\n    if (!this.pickAudioTag()) {\n      this.reset();\n      return false;\n    }\n\n    var seek = this.currentConfig.seek;\n    var delay = this.currentConfig.delay;\n    var offset = (this.currentMarker ? this.currentMarker.start : 0) + seek;\n    this.previousTime = offset;\n    this.audio.currentTime = offset;\n    this.applyConfig();\n\n    if (delay === 0) {\n      this.startTime = 0;\n\n      if (this.audio.paused) {\n        this.playCatchPromise();\n      }\n    } else {\n      this.startTime = window.performance.now() + delay * 1000;\n\n      if (!this.audio.paused) {\n        this.audio.pause();\n      }\n    }\n\n    this.resetConfig();\n    return true;\n  },\n\n  /**\r\n   * This method performs the audio tag pooling logic. It first looks for\r\n   * unused audio tag to assign to this sound object. If there are no unused\r\n   * audio tags, based on HTML5AudioSoundManager#override property value, it\r\n   * looks for sound with most advanced playback and hijacks its audio tag or\r\n   * does nothing.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#pickAudioTag\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n   */\n  pickAudioTag: function pickAudioTag() {\n    if (this.audio) {\n      return true;\n    }\n\n    for (var i = 0; i < this.tags.length; i++) {\n      var audio = this.tags[i];\n\n      if (audio.dataset.used === 'false') {\n        audio.dataset.used = 'true';\n        this.audio = audio;\n        return true;\n      }\n    }\n\n    if (!this.manager.override) {\n      return false;\n    }\n\n    var otherSounds = [];\n    this.manager.forEachActiveSound(function (sound) {\n      if (sound.key === this.key && sound.audio) {\n        otherSounds.push(sound);\n      }\n    }, this);\n    otherSounds.sort(function (a1, a2) {\n      if (a1.loop === a2.loop) {\n        // sort by progress\n        return a2.seek / a2.duration - a1.seek / a1.duration;\n      }\n\n      return a1.loop ? 1 : -1;\n    });\n    var selectedSound = otherSounds[0];\n    this.audio = selectedSound.audio;\n    selectedSound.reset();\n    selectedSound.audio = null;\n    selectedSound.startTime = 0;\n    selectedSound.previousTime = 0;\n    return true;\n  },\n\n  /**\r\n   * Method used for playing audio tag and catching possible exceptions\r\n   * thrown from rejected Promise returned from play method call.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#playCatchPromise\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  playCatchPromise: function playCatchPromise() {\n    var playPromise = this.audio.play();\n\n    if (playPromise) {\n      // eslint-disable-next-line no-unused-vars\n      playPromise.catch(function (reason) {\n        console.warn(reason);\n      });\n    }\n  },\n\n  /**\r\n   * Used internally to do what the name says.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#stopAndReleaseAudioTag\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  stopAndReleaseAudioTag: function stopAndReleaseAudioTag() {\n    this.audio.pause();\n    this.audio.dataset.used = 'false';\n    this.audio = null;\n    this.startTime = 0;\n    this.previousTime = 0;\n  },\n\n  /**\r\n   * Method used internally to reset sound state, usually when stopping sound\r\n   * or when hijacking audio tag from another sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#reset\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  reset: function reset() {\n    BaseSound.prototype.stop.call(this);\n  },\n\n  /**\r\n   * Method used internally by sound manager for pausing sound if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  onBlur: function onBlur() {\n    this.isPlaying = false;\n    this.isPaused = true;\n    this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\n    this.currentConfig.delay = Math.max(0, (this.startTime - window.performance.now()) / 1000);\n    this.stopAndReleaseAudioTag();\n  },\n\n  /**\r\n   * Method used internally by sound manager for resuming sound if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#onFocus\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  onFocus: function onFocus() {\n    this.isPlaying = true;\n    this.isPaused = false;\n    this.pickAndPlayAudioTag();\n  },\n\n  /**\r\n   * Update method called automatically by sound manager on every game step.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#update\r\n   * @fires Phaser.Sound.Events#COMPLETE\r\n   * @fires Phaser.Sound.Events#LOOPED\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time elapsed since the last frame.\r\n   */\n  // eslint-disable-next-line no-unused-vars\n  update: function update(time, delta) {\n    if (!this.isPlaying) {\n      return;\n    } // handling delayed playback\n\n\n    if (this.startTime > 0) {\n      if (this.startTime < time - this.manager.audioPlayDelay) {\n        this.audio.currentTime += Math.max(0, time - this.startTime) / 1000;\n        this.startTime = 0;\n        this.previousTime = this.audio.currentTime;\n        this.playCatchPromise();\n      }\n\n      return;\n    } // handle looping and ending\n\n\n    var startTime = this.currentMarker ? this.currentMarker.start : 0;\n    var endTime = startTime + this.duration;\n    var currentTime = this.audio.currentTime;\n\n    if (this.currentConfig.loop) {\n      if (currentTime >= endTime - this.manager.loopEndOffset) {\n        this.audio.currentTime = startTime + Math.max(0, currentTime - endTime);\n        currentTime = this.audio.currentTime;\n      } else if (currentTime < startTime) {\n        this.audio.currentTime += startTime;\n        currentTime = this.audio.currentTime;\n      }\n\n      if (currentTime < this.previousTime) {\n        this.emit(Events.LOOPED, this);\n      }\n    } else if (currentTime >= endTime) {\n      this.reset();\n      this.stopAndReleaseAudioTag();\n      this.emit(Events.COMPLETE, this);\n      return;\n    }\n\n    this.previousTime = currentTime;\n  },\n\n  /**\r\n   * Calls Phaser.Sound.BaseSound#destroy method\r\n   * and cleans up all HTML5 Audio related stuff.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    BaseSound.prototype.destroy.call(this);\n    this.tags = null;\n\n    if (this.audio) {\n      this.stopAndReleaseAudioTag();\n    }\n  },\n\n  /**\r\n   * Method used internally to determine mute setting of the sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#updateMute\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  updateMute: function updateMute() {\n    if (this.audio) {\n      this.audio.muted = this.currentConfig.mute || this.manager.mute;\n    }\n  },\n\n  /**\r\n   * Method used internally to calculate total volume of the sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#updateVolume\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  updateVolume: function updateVolume() {\n    if (this.audio) {\n      this.audio.volume = this.currentConfig.volume * this.manager.volume;\n    }\n  },\n\n  /**\r\n   * Method used internally to calculate total playback rate of the sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#calculateRate\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  calculateRate: function calculateRate() {\n    BaseSound.prototype.calculateRate.call(this);\n\n    if (this.audio) {\n      this.audio.playbackRate = this.totalRate;\n    }\n  },\n\n  /**\r\n   * Boolean indicating whether the sound is muted or not.\r\n   * Gets or sets the muted state of this sound.\r\n   * \r\n   * @name Phaser.Sound.HTML5AudioSound#mute\r\n   * @type {boolean}\r\n   * @default false\r\n   * @fires Phaser.Sound.Events#MUTE\r\n   * @since 3.0.0\r\n   */\n  mute: {\n    get: function get() {\n      return this.currentConfig.mute;\n    },\n    set: function set(value) {\n      this.currentConfig.mute = value;\n\n      if (this.manager.isLocked(this, 'mute', value)) {\n        return;\n      }\n\n      this.updateMute();\n      this.emit(Events.MUTE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the muted state of this Sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setMute\r\n   * @fires Phaser.Sound.Events#MUTE\r\n   * @since 3.4.0\r\n   *\r\n   * @param {boolean} value - `true` to mute this sound, `false` to unmute it.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n   */\n  setMute: function setMute(value) {\n    this.mute = value;\n    return this;\n  },\n\n  /**\r\n   * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).\r\n   * \r\n   * @name Phaser.Sound.HTML5AudioSound#volume\r\n   * @type {number}\r\n   * @default 1\r\n   * @fires Phaser.Sound.Events#VOLUME\r\n   * @since 3.0.0\r\n   */\n  volume: {\n    get: function get() {\n      return this.currentConfig.volume;\n    },\n    set: function set(value) {\n      this.currentConfig.volume = value;\n\n      if (this.manager.isLocked(this, 'volume', value)) {\n        return;\n      }\n\n      this.updateVolume();\n      this.emit(Events.VOLUME, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the volume of this Sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setVolume\r\n   * @fires Phaser.Sound.Events#VOLUME\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} value - The volume of the sound.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n   */\n  setVolume: function setVolume(value) {\n    this.volume = value;\n    return this;\n  },\n\n  /**\r\n   * Rate at which this Sound will be played.\r\n   * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audios playback speed.\r\n   *\r\n   * @name Phaser.Sound.HTML5AudioSound#rate\r\n   * @type {number}\r\n   * @default 1\r\n   * @fires Phaser.Sound.Events#RATE\r\n   * @since 3.0.0\r\n   */\n  rate: {\n    get: function get() {\n      return this.currentConfig.rate;\n    },\n    set: function set(value) {\n      this.currentConfig.rate = value;\n\n      if (this.manager.isLocked(this, Events.RATE, value)) {\n        return;\n      } else {\n        this.calculateRate();\n        this.emit(Events.RATE, this, value);\n      }\n    }\n  },\n\n  /**\r\n   * Sets the playback rate of this Sound.\r\n   * \r\n   * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audios playback speed.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setRate\r\n   * @fires Phaser.Sound.Events#RATE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The playback rate at of this Sound.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound.\r\n   */\n  setRate: function setRate(value) {\n    this.rate = value;\n    return this;\n  },\n\n  /**\r\n   * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @name Phaser.Sound.HTML5AudioSound#detune\r\n   * @type {number}\r\n   * @default 0\r\n   * @fires Phaser.Sound.Events#DETUNE\r\n   * @since 3.0.0\r\n   */\n  detune: {\n    get: function get() {\n      return this.currentConfig.detune;\n    },\n    set: function set(value) {\n      this.currentConfig.detune = value;\n\n      if (this.manager.isLocked(this, Events.DETUNE, value)) {\n        return;\n      } else {\n        this.calculateRate();\n        this.emit(Events.DETUNE, this, value);\n      }\n    }\n  },\n\n  /**\r\n   * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setDetune\r\n   * @fires Phaser.Sound.Events#DETUNE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound.\r\n   */\n  setDetune: function setDetune(value) {\n    this.detune = value;\n    return this;\n  },\n\n  /**\r\n   * Property representing the position of playback for this sound, in seconds.\r\n   * Setting it to a specific value moves current playback to that position.\r\n   * The value given is clamped to the range 0 to current marker duration.\r\n   * Setting seek of a stopped sound has no effect.\r\n   * \r\n   * @name Phaser.Sound.HTML5AudioSound#seek\r\n   * @type {number}\r\n   * @fires Phaser.Sound.Events#SEEK\r\n   * @since 3.0.0\r\n   */\n  seek: {\n    get: function get() {\n      if (this.isPlaying) {\n        return this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\n      } else if (this.isPaused) {\n        return this.currentConfig.seek;\n      } else {\n        return 0;\n      }\n    },\n    set: function set(value) {\n      if (this.manager.isLocked(this, 'seek', value)) {\n        return;\n      }\n\n      if (this.startTime > 0) {\n        return;\n      }\n\n      if (this.isPlaying || this.isPaused) {\n        value = Math.min(Math.max(0, value), this.duration);\n\n        if (this.isPlaying) {\n          this.previousTime = value;\n          this.audio.currentTime = value;\n        } else if (this.isPaused) {\n          this.currentConfig.seek = value;\n        }\n\n        this.emit(Events.SEEK, this, value);\n      }\n    }\n  },\n\n  /**\r\n   * Seeks to a specific point in this sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setSeek\r\n   * @fires Phaser.Sound.Events#SEEK\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} value - The point in the sound to seek to.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n   */\n  setSeek: function setSeek(value) {\n    this.seek = value;\n    return this;\n  },\n\n  /**\r\n   * Flag indicating whether or not the sound or current sound marker will loop.\r\n   * \r\n   * @name Phaser.Sound.HTML5AudioSound#loop\r\n   * @type {boolean}\r\n   * @default false\r\n   * @fires Phaser.Sound.Events#LOOP\r\n   * @since 3.0.0\r\n   */\n  loop: {\n    get: function get() {\n      return this.currentConfig.loop;\n    },\n    set: function set(value) {\n      this.currentConfig.loop = value;\n\n      if (this.manager.isLocked(this, 'loop', value)) {\n        return;\n      }\n\n      if (this.audio) {\n        this.audio.loop = value;\n      }\n\n      this.emit(Events.LOOP, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the loop state of this Sound.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSound#setLoop\r\n   * @fires Phaser.Sound.Events#LOOP\r\n   * @since 3.4.0\r\n   *\r\n   * @param {boolean} value - `true` to loop this sound, `false` to not loop it.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n   */\n  setLoop: function setLoop(value) {\n    this.loop = value;\n    return this;\n  }\n});\nmodule.exports = HTML5AudioSound;","map":null,"metadata":{},"sourceType":"script"}