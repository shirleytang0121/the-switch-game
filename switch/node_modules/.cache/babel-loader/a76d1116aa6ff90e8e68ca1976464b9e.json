{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Events = require('./events');\n/**\r\n * @callback DataEachCallback\r\n *\r\n * @param {*} parent - The parent object of the DataManager.\r\n * @param {string} key - The key of the value.\r\n * @param {*} value - The value.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n */\n\n/**\r\n * @classdesc\r\n * The Data Manager Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManager\r\n * @memberof Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} parent - The object that this DataManager belongs to.\r\n * @param {Phaser.Events.EventEmitter} eventEmitter - The DataManager's event emitter.\r\n */\n\n\nvar DataManager = new Class({\n  initialize: function DataManager(parent, eventEmitter) {\n    /**\r\n     * The object that this DataManager belongs to.\r\n     *\r\n     * @name Phaser.Data.DataManager#parent\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * The DataManager's event emitter.\r\n     *\r\n     * @name Phaser.Data.DataManager#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = eventEmitter;\n\n    if (!eventEmitter) {\n      this.events = parent.events ? parent.events : parent;\n    }\n    /**\r\n     * The data list.\r\n     *\r\n     * @name Phaser.Data.DataManager#list\r\n     * @type {Object.<string, *>}\r\n     * @default {}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.list = {};\n    /**\r\n     * The public values list. You can use this to access anything you have stored\r\n     * in this Data Manager. For example, if you set a value called `gold` you can\r\n     * access it via:\r\n     *\r\n     * ```javascript\r\n     * this.data.values.gold;\r\n     * ```\r\n     *\r\n     * You can also modify it directly:\r\n     * \r\n     * ```javascript\r\n     * this.data.values.gold += 1000;\r\n     * ```\r\n     *\r\n     * Doing so will emit a `setdata` event from the parent of this Data Manager.\r\n     * \r\n     * Do not modify this object directly. Adding properties directly to this object will not\r\n     * emit any events. Always use `DataManager.set` to create new items the first time around.\r\n     *\r\n     * @name Phaser.Data.DataManager#values\r\n     * @type {Object.<string, *>}\r\n     * @default {}\r\n     * @since 3.10.0\r\n     */\n\n    this.values = {};\n    /**\r\n     * Whether setting data is frozen for this DataManager.\r\n     *\r\n     * @name Phaser.Data.DataManager#_frozen\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._frozen = false;\n\n    if (!parent.hasOwnProperty('sys') && this.events) {\n      this.events.once('destroy', this.destroy, this);\n    }\n  },\n\n  /**\r\n   * Retrieves the value for the given key, or undefined if it doesn't exist.\r\n   *\r\n   * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\r\n   * \r\n   * ```javascript\r\n   * this.data.get('gold');\r\n   * ```\r\n   *\r\n   * Or access the value directly:\r\n   * \r\n   * ```javascript\r\n   * this.data.values.gold;\r\n   * ```\r\n   *\r\n   * You can also pass in an array of keys, in which case an array of values will be returned:\r\n   * \r\n   * ```javascript\r\n   * this.data.get([ 'gold', 'armor', 'health' ]);\r\n   * ```\r\n   *\r\n   * This approach is useful for destructuring arrays in ES6.\r\n   *\r\n   * @method Phaser.Data.DataManager#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} key - The key of the value to retrieve, or an array of keys.\r\n   *\r\n   * @return {*} The value belonging to the given key, or an array of values, the order of which will match the input array.\r\n   */\n  get: function get(key) {\n    var list = this.list;\n\n    if (Array.isArray(key)) {\n      var output = [];\n\n      for (var i = 0; i < key.length; i++) {\n        output.push(list[key[i]]);\n      }\n\n      return output;\n    } else {\n      return list[key];\n    }\n  },\n\n  /**\r\n   * Retrieves all data values in a new object.\r\n   *\r\n   * @method Phaser.Data.DataManager#getAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Object.<string, *>} All data values.\r\n   */\n  getAll: function getAll() {\n    var results = {};\n\n    for (var key in this.list) {\n      if (this.list.hasOwnProperty(key)) {\n        results[key] = this.list[key];\n      }\n    }\n\n    return results;\n  },\n\n  /**\r\n   * Queries the DataManager for the values of keys matching the given regular expression.\r\n   *\r\n   * @method Phaser.Data.DataManager#query\r\n   * @since 3.0.0\r\n   *\r\n   * @param {RegExp} search - A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\r\n   *\r\n   * @return {Object.<string, *>} The values of the keys matching the search string.\r\n   */\n  query: function query(search) {\n    var results = {};\n\n    for (var key in this.list) {\n      if (this.list.hasOwnProperty(key) && key.match(search)) {\n        results[key] = this.list[key];\n      }\n    }\n\n    return results;\n  },\n\n  /**\r\n   * Sets a value for the given key. If the key doesn't already exist in the Data Manager then it is created.\r\n   * \r\n   * ```javascript\r\n   * data.set('name', 'Red Gem Stone');\r\n   * ```\r\n   *\r\n   * You can also pass in an object of key value pairs as the first argument:\r\n   *\r\n   * ```javascript\r\n   * data.set({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\r\n   * ```\r\n   *\r\n   * To get a value back again you can call `get`:\r\n   * \r\n   * ```javascript\r\n   * data.get('gold');\r\n   * ```\r\n   * \r\n   * Or you can access the value directly via the `values` property, where it works like any other variable:\r\n   * \r\n   * ```javascript\r\n   * data.values.gold += 50;\r\n   * ```\r\n   *\r\n   * When the value is first set, a `setdata` event is emitted.\r\n   *\r\n   * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\r\n   * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata-PlayerLives`.\r\n   * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\r\n   *\r\n   * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\r\n   * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#set\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|object)} key - The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\r\n   * @param {*} data - The value to set for the given key. If an object is provided as the key this argument is ignored.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  set: function set(key, data) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (typeof key === 'string') {\n      return this.setValue(key, data);\n    } else {\n      for (var entry in key) {\n        this.setValue(entry, key[entry]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal value setter, called automatically by the `set` method.\r\n   *\r\n   * @method Phaser.Data.DataManager#setValue\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @private\r\n   * @since 3.10.0\r\n   *\r\n   * @param {string} key - The key to set the value for.\r\n   * @param {*} data - The value to set.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  setValue: function setValue(key, data) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (this.has(key)) {\n      //  Hit the key getter, which will in turn emit the events.\n      this.values[key] = data;\n    } else {\n      var _this = this;\n\n      var list = this.list;\n      var events = this.events;\n      var parent = this.parent;\n      Object.defineProperty(this.values, key, {\n        enumerable: true,\n        configurable: true,\n        get: function get() {\n          return list[key];\n        },\n        set: function set(value) {\n          if (!_this._frozen) {\n            var previousValue = list[key];\n            list[key] = value;\n            events.emit(Events.CHANGE_DATA, parent, key, value, previousValue);\n            events.emit(Events.CHANGE_DATA_KEY + key, parent, value, previousValue);\n          }\n        }\n      });\n      list[key] = data;\n      events.emit(Events.SET_DATA, parent, key, data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Passes all data entries to the given callback.\r\n   *\r\n   * @method Phaser.Data.DataManager#each\r\n   * @since 3.0.0\r\n   *\r\n   * @param {DataEachCallback} callback - The function to call.\r\n   * @param {*} [context] - Value to use as `this` when executing callback.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  each: function each(callback, context) {\n    var args = [this.parent, null, undefined];\n\n    for (var i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (var key in this.list) {\n      args[1] = key;\n      args[2] = this.list[key];\n      callback.apply(context, args);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Merge the given object of key value pairs into this DataManager.\r\n   *\r\n   * Any newly created values will emit a `setdata` event. Any updated values (see the `overwrite` argument)\r\n   * will emit a `changedata` event.\r\n   *\r\n   * @method Phaser.Data.DataManager#merge\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Object.<string, *>} data - The data to merge.\r\n   * @param {boolean} [overwrite=true] - Whether to overwrite existing data. Defaults to true.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  merge: function merge(data, overwrite) {\n    if (overwrite === undefined) {\n      overwrite = true;\n    } //  Merge data from another component into this one\n\n\n    for (var key in data) {\n      if (data.hasOwnProperty(key) && (overwrite || !overwrite && !this.has(key))) {\n        this.setValue(key, data[key]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Remove the value for the given key.\r\n   *\r\n   * If the key is found in this Data Manager it is removed from the internal lists and a\r\n   * `removedata` event is emitted.\r\n   * \r\n   * You can also pass in an array of keys, in which case all keys in the array will be removed:\r\n   * \r\n   * ```javascript\r\n   * this.data.remove([ 'gold', 'armor', 'health' ]);\r\n   * ```\r\n   *\r\n   * @method Phaser.Data.DataManager#remove\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} key - The key to remove, or an array of keys to remove.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  remove: function remove(key) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (Array.isArray(key)) {\n      for (var i = 0; i < key.length; i++) {\n        this.removeValue(key[i]);\n      }\n    } else {\n      return this.removeValue(key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal value remover, called automatically by the `remove` method.\r\n   *\r\n   * @method Phaser.Data.DataManager#removeValue\r\n   * @private\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.10.0\r\n   *\r\n   * @param {string} key - The key to set the value for.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  removeValue: function removeValue(key) {\n    if (this.has(key)) {\n      var data = this.list[key];\n      delete this.list[key];\n      delete this.values[key];\n      this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Retrieves the data associated with the given 'key', deletes it from this Data Manager, then returns it.\r\n   *\r\n   * @method Phaser.Data.DataManager#pop\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the value to retrieve and delete.\r\n   *\r\n   * @return {*} The value of the given key.\r\n   */\n  pop: function pop(key) {\n    var data = undefined;\n\n    if (!this._frozen && this.has(key)) {\n      data = this.list[key];\n      delete this.list[key];\n      delete this.values[key];\n      this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\n    }\n\n    return data;\n  },\n\n  /**\r\n   * Determines whether the given key is set in this Data Manager.\r\n   * \r\n   * Please note that the keys are case-sensitive and must be valid JavaScript Object property strings.\r\n   * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#has\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key to check.\r\n   *\r\n   * @return {boolean} Returns `true` if the key exists, otherwise `false`.\r\n   */\n  has: function has(key) {\n    return this.list.hasOwnProperty(key);\n  },\n\n  /**\r\n   * Freeze or unfreeze this Data Manager. A frozen Data Manager will block all attempts\r\n   * to create new values or update existing ones.\r\n   *\r\n   * @method Phaser.Data.DataManager#setFreeze\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - Whether to freeze or unfreeze the Data Manager.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  setFreeze: function setFreeze(value) {\n    this._frozen = value;\n    return this;\n  },\n\n  /**\r\n   * Delete all data in this Data Manager and unfreeze it.\r\n   *\r\n   * @method Phaser.Data.DataManager#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  reset: function reset() {\n    for (var key in this.list) {\n      delete this.list[key];\n      delete this.values[key];\n    }\n\n    this._frozen = false;\n    return this;\n  },\n\n  /**\r\n   * Destroy this data manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.reset();\n    this.events.off(Events.CHANGE_DATA);\n    this.events.off(Events.SET_DATA);\n    this.events.off(Events.REMOVE_DATA);\n    this.parent = null;\n  },\n\n  /**\r\n   * Gets or sets the frozen state of this Data Manager.\r\n   * A frozen Data Manager will block all attempts to create new values or update existing ones.\r\n   *\r\n   * @name Phaser.Data.DataManager#freeze\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  freeze: {\n    get: function get() {\n      return this._frozen;\n    },\n    set: function set(value) {\n      this._frozen = value ? true : false;\n    }\n  },\n\n  /**\r\n   * Return the total number of entries in this Data Manager.\r\n   *\r\n   * @name Phaser.Data.DataManager#count\r\n   * @type {integer}\r\n   * @since 3.0.0\r\n   */\n  count: {\n    get: function get() {\n      var i = 0;\n\n      for (var key in this.list) {\n        if (this.list[key] !== undefined) {\n          i++;\n        }\n      }\n\n      return i;\n    }\n  }\n});\nmodule.exports = DataManager;","map":null,"metadata":{},"sourceType":"script"}