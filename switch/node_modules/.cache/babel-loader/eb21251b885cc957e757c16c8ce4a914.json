{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar BlitterRender = require('./BlitterRender');\n\nvar Bob = require('./Bob');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar Frame = require('../../textures/Frame');\n\nvar GameObject = require('../GameObject');\n\nvar List = require('../../structs/List');\n/**\r\n * @callback CreateCallback\r\n *\r\n * @param {Phaser.GameObjects.Bob} bob - The Bob that was created by the Blitter.\r\n * @param {integer} index - The position of the Bob within the Blitter display list.\r\n */\n\n/**\r\n * @classdesc\r\n * A Blitter Game Object.\r\n *\r\n * The Blitter Game Object is a special kind of container that creates, updates and manages Bob objects.\r\n * Bobs are designed for rendering speed rather than flexibility. They consist of a texture, or frame from a texture,\r\n * a position and an alpha value. You cannot scale or rotate them. They use a batched drawing method for speed\r\n * during rendering.\r\n *\r\n * A Blitter Game Object has one texture bound to it. Bobs created by the Blitter can use any Frame from this\r\n * Texture to render with, but they cannot use any other Texture. It is this single texture-bind that allows\r\n * them their speed.\r\n *\r\n * If you have a need to blast a large volume of frames around the screen then Blitter objects are well worth\r\n * investigating. They are especially useful for using as a base for your own special effects systems.\r\n *\r\n * @class Blitter\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} [x=0] - The x coordinate of this Game Object in world space.\r\n * @param {number} [y=0] - The y coordinate of this Game Object in world space.\r\n * @param {string} [texture='__DEFAULT'] - The key of the texture this Game Object will use for rendering. The Texture must already exist in the Texture Manager.\r\n * @param {(string|integer)} [frame=0] - The Frame of the Texture that this Game Object will use. Only set if the Texture has multiple frames, such as a Texture Atlas or Sprite Sheet.\r\n */\n\n\nvar Blitter = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.Depth, Components.Mask, Components.Pipeline, Components.ScaleMode, Components.ScrollFactor, Components.Size, Components.Texture, Components.Transform, Components.Visible, BlitterRender],\n  initialize: function Blitter(scene, x, y, texture, frame) {\n    GameObject.call(this, scene, 'Blitter');\n    this.setTexture(texture, frame);\n    this.setPosition(x, y);\n    this.initPipeline();\n    /**\r\n     * The children of this Blitter.\r\n     * This List contains all of the Bob objects created by the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#children\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Bob>}\r\n     * @since 3.0.0\r\n     */\n\n    this.children = new List();\n    /**\r\n     * A transient array that holds all of the Bobs that will be rendered this frame.\r\n     * The array is re-populated whenever the dirty flag is set.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#renderList\r\n     * @type {Phaser.GameObjects.Bob[]}\r\n     * @default []\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.renderList = [];\n    /**\r\n     * Is the Blitter considered dirty?\r\n     * A 'dirty' Blitter has had its child count changed since the last frame.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#dirty\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.dirty = false;\n  },\n\n  /**\r\n   * Creates a new Bob in this Blitter.\r\n   *\r\n   * The Bob is created at the given coordinates, relative to the Blitter and uses the given frame.\r\n   * A Bob can use any frame belonging to the texture bound to the Blitter.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   * @param {integer} [index] - The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} The newly created Bob object.\r\n   */\n  create: function create(x, y, frame, visible, index) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    if (index === undefined) {\n      index = this.children.length;\n    }\n\n    if (frame === undefined) {\n      frame = this.frame;\n    } else if (!(frame instanceof Frame)) {\n      frame = this.texture.get(frame);\n    }\n\n    var bob = new Bob(this, x, y, frame, visible);\n    this.children.addAt(bob, index, false);\n    this.dirty = true;\n    return bob;\n  },\n\n  /**\r\n   * Creates multiple Bob objects within this Blitter and then passes each of them to the specified callback.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#createFromCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {CreateCallback} callback - The callback to invoke after creating a bob. It will be sent two arguments: The Bob and the index of the Bob.\r\n   * @param {integer} quantity - The quantity of Bob objects to create.\r\n   * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n   */\n  createFromCallback: function createFromCallback(callback, quantity, frame, visible) {\n    var bobs = this.createMultiple(quantity, frame, visible);\n\n    for (var i = 0; i < bobs.length; i++) {\n      var bob = bobs[i];\n      callback.call(this, bob, i);\n    }\n\n    return bobs;\n  },\n\n  /**\r\n   * Creates multiple Bobs in one call.\r\n   *\r\n   * The amount created is controlled by a combination of the `quantity` argument and the number of frames provided.\r\n   *\r\n   * If the quantity is set to 10 and you provide 2 frames, then 20 Bobs will be created. 10 with the first\r\n   * frame and 10 with the second.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#createMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} quantity - The quantity of Bob objects to create.\r\n   * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n   */\n  createMultiple: function createMultiple(quantity, frame, visible) {\n    if (frame === undefined) {\n      frame = this.frame.name;\n    }\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    if (!Array.isArray(frame)) {\n      frame = [frame];\n    }\n\n    var bobs = [];\n\n    var _this = this;\n\n    frame.forEach(function (singleFrame) {\n      for (var i = 0; i < quantity; i++) {\n        bobs.push(_this.create(0, 0, singleFrame, visible));\n      }\n    });\n    return bobs;\n  },\n\n  /**\r\n   * Checks if the given child can render or not, by checking its `visible` and `alpha` values.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#childCanRender\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Bob} child - The Bob to check for rendering.\r\n   *\r\n   * @return {boolean} Returns `true` if the given child can render, otherwise `false`.\r\n   */\n  childCanRender: function childCanRender(child) {\n    return child.visible && child.alpha > 0;\n  },\n\n  /**\r\n   * Returns an array of Bobs to be rendered.\r\n   * If the Blitter is dirty then a new list is generated and stored in `renderList`.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#getRenderList\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that will be rendered this frame.\r\n   */\n  getRenderList: function getRenderList() {\n    if (this.dirty) {\n      this.renderList = this.children.list.filter(this.childCanRender, this);\n      this.dirty = false;\n    }\n\n    return this.renderList;\n  },\n\n  /**\r\n   * Removes all Bobs from the children List and clears the dirty flag.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#clear\r\n   * @since 3.0.0\r\n   */\n  clear: function clear() {\n    this.children.removeAll();\n    this.dirty = true;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#preDestroy\r\n   * @protected\r\n   * @since 3.9.0\r\n   */\n  preDestroy: function preDestroy() {\n    this.children.destroy();\n    this.renderList = [];\n  }\n});\nmodule.exports = Blitter;","map":null,"metadata":{},"sourceType":"script"}