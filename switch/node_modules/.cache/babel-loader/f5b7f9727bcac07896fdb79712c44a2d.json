{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  bitmask flag for GameObject.renderMask\nvar _FLAG = 8; // 1000\n\n/**\r\n * Provides methods used for getting and setting the texture of a Game Object.\r\n *\r\n * @name Phaser.GameObjects.Components.TextureCrop\r\n * @since 3.0.0\r\n */\n\nvar TextureCrop = {\n  /**\r\n   * The Texture this Game Object is using to render with.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#texture\r\n   * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n   * @since 3.0.0\r\n   */\n  texture: null,\n\n  /**\r\n   * The Texture Frame this Game Object is using to render with.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#frame\r\n   * @type {Phaser.Textures.Frame}\r\n   * @since 3.0.0\r\n   */\n  frame: null,\n\n  /**\r\n   * A boolean flag indicating if this Game Object is being cropped or not.\r\n   * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\r\n   * Equally, calling `setCrop` with no arguments will reset the crop and disable it.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#isCropped\r\n   * @type {boolean}\r\n   * @since 3.11.0\r\n   */\n  isCropped: false,\n\n  /**\r\n   * Applies a crop to a texture based Game Object, such as a Sprite or Image.\r\n   * \r\n   * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\r\n   * \r\n   * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\r\n   * changes what is shown when rendered.\r\n   * \r\n   * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\r\n   * \r\n   * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\r\n   * half of it, you could call `setCrop(0, 0, 400, 600)`.\r\n   * \r\n   * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\r\n   * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\r\n   * \r\n   * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\r\n   * \r\n   * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\r\n   * \r\n   * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\r\n   * the renderer to skip several internal calculations.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setCrop\r\n   * @since 3.11.0\r\n   *\r\n   * @param {(number|Phaser.Geom.Rectangle)} [x] - The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\r\n   * @param {number} [y] - The y coordinate to start the crop from.\r\n   * @param {number} [width] - The width of the crop rectangle in pixels.\r\n   * @param {number} [height] - The height of the crop rectangle in pixels.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setCrop: function setCrop(x, y, width, height) {\n    if (x === undefined) {\n      this.isCropped = false;\n    } else if (this.frame) {\n      if (typeof x === 'number') {\n        this.frame.setCropUVs(this._crop, x, y, width, height, this.flipX, this.flipY);\n      } else {\n        var rect = x;\n        this.frame.setCropUVs(this._crop, rect.x, rect.y, rect.width, rect.height, this.flipX, this.flipY);\n      }\n\n      this.isCropped = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the texture and frame this Game Object will use to render with.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setTexture: function setTexture(key, frame) {\n    this.texture = this.scene.sys.textures.get(key);\n    return this.setFrame(frame);\n  },\n\n  /**\r\n   * Sets the frame this Game Object will use to render with.\r\n   *\r\n   * The Frame has to belong to the current Texture being used.\r\n   *\r\n   * It can be either a string or an index.\r\n   *\r\n   * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\r\n   * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} frame - The name or index of the frame within the Texture.\r\n   * @param {boolean} [updateSize=true] - Should this call adjust the size of the Game Object?\r\n   * @param {boolean} [updateOrigin=true] - Should this call adjust the origin of the Game Object?\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFrame: function setFrame(frame, updateSize, updateOrigin) {\n    if (updateSize === undefined) {\n      updateSize = true;\n    }\n\n    if (updateOrigin === undefined) {\n      updateOrigin = true;\n    }\n\n    this.frame = this.texture.get(frame);\n\n    if (!this.frame.cutWidth || !this.frame.cutHeight) {\n      this.renderFlags &= ~_FLAG;\n    } else {\n      this.renderFlags |= _FLAG;\n    }\n\n    if (this._sizeComponent && updateSize) {\n      this.setSizeToFrame();\n    }\n\n    if (this._originComponent && updateOrigin) {\n      if (this.frame.customPivot) {\n        this.setOrigin(this.frame.pivotX, this.frame.pivotY);\n      } else {\n        this.updateDisplayOrigin();\n      }\n    }\n\n    if (this.isCropped) {\n      this.frame.updateCropUVs(this._crop, this.flipX, this.flipY);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal method that returns a blank, well-formed crop object for use by a Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#resetCropObject\r\n   * @private\r\n   * @since 3.12.0\r\n   * \r\n   * @return {object} The crop object.\r\n   */\n  resetCropObject: function resetCropObject() {\n    return {\n      u0: 0,\n      v0: 0,\n      u1: 0,\n      v1: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n      flipX: false,\n      flipY: false,\n      cx: 0,\n      cy: 0,\n      cw: 0,\n      ch: 0\n    };\n  }\n};\nmodule.exports = TextureCrop;","map":null,"metadata":{},"sourceType":"script"}