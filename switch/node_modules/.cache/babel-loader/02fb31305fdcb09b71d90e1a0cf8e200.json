{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar Line = require('../line/Line');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * A triangle is a plane created by connecting three points.\r\n * The first two arguments specify the first point, the middle two arguments\r\n * specify the second point, and the last two arguments specify the third point.\r\n *\r\n * @class Triangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - `x` coordinate of the first point.\r\n * @param {number} [y1=0] - `y` coordinate of the first point.\r\n * @param {number} [x2=0] - `x` coordinate of the second point.\r\n * @param {number} [y2=0] - `y` coordinate of the second point.\r\n * @param {number} [x3=0] - `x` coordinate of the third point.\r\n * @param {number} [y3=0] - `y` coordinate of the third point.\r\n */\n\n\nvar Triangle = new Class({\n  initialize: function Triangle(x1, y1, x2, y2, x3, y3) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    if (x3 === undefined) {\n      x3 = 0;\n    }\n\n    if (y3 === undefined) {\n      y3 = 0;\n    }\n    /**\r\n     * `x` coordinate of the first point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x1\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x1 = x1;\n    /**\r\n     * `y` coordinate of the first point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y1\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y1 = y1;\n    /**\r\n     * `x` coordinate of the second point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x2\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x2 = x2;\n    /**\r\n     * `y` coordinate of the second point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y2\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y2 = y2;\n    /**\r\n     * `x` coordinate of the third point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x3\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x3 = x3;\n    /**\r\n     * `y` coordinate of the third point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y3\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y3 = y3;\n  },\n\n  /**\r\n   * Checks whether a given points lies within the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point to check.\r\n   * @param {number} y - The y coordinate of the point to check.\r\n   *\r\n   * @return {boolean} `true` if the coordinate pair is within the triangle, otherwise `false`.\r\n   */\n  contains: function contains(x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Returns a specific point  on the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - Position as float within `0` and `1`. `0` equals the first point.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - Optional Point, or point-like object, that the calculated point will be written to.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} Calculated `Point` that represents the requested position. It is the same as `output` when this parameter has been given.\r\n   */\n  getPoint: function getPoint(position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Calculates a list of evenly distributed points on the triangle. It is either possible to pass an amount of points to be generated (`quantity`) or the distance between two points (`stepRate`).\r\n   *\r\n   * @method Phaser.Geom.Triangle#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - Number of points to be generated. Can be falsey when `stepRate` should be used. All points have the same distance along the triangle.\r\n   * @param {number} [stepRate] - Distance between two points. Will only be used when `quantity` is falsey.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - Optional Array for writing the calculated points into. Otherwise a new array will be created.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} Returns a list of calculated `Point` instances or the filled array passed as parameter `output`.\r\n   */\n  getPoints: function getPoints(quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a random point along the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {Phaser.Geom.Point} [point] - Optional `Point` that should be modified. Otherwise a new one will be created.\r\n   *\r\n   * @return {Phaser.Geom.Point} Random `Point`. When parameter `point` has been provided it will be returned.\r\n   */\n  getRandomPoint: function getRandomPoint(point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets all three points of the triangle. Leaving out any coordinate sets it to be `0`.\r\n   *\r\n   * @method Phaser.Geom.Triangle#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x1=0] - `x` coordinate of the first point.\r\n   * @param {number} [y1=0] - `y` coordinate of the first point.\r\n   * @param {number} [x2=0] - `x` coordinate of the second point.\r\n   * @param {number} [y2=0] - `y` coordinate of the second point.\r\n   * @param {number} [x3=0] - `x` coordinate of the third point.\r\n   * @param {number} [y3=0] - `y` coordinate of the third point.\r\n   *\r\n   * @return {Phaser.Geom.Triangle} This Triangle object.\r\n   */\n  setTo: function setTo(x1, y1, x2, y2, x3, y3) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    if (x3 === undefined) {\n      x3 = 0;\n    }\n\n    if (y3 === undefined) {\n      y3 = 0;\n    }\n\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n    return this;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line A of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line A of this Triangle.\r\n   */\n  getLineA: function getLineA(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x1, this.y1, this.x2, this.y2);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line B of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line B of this Triangle.\r\n   */\n  getLineB: function getLineB(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x2, this.y2, this.x3, this.y3);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line C of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineC\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line C of this Triangle.\r\n   */\n  getLineC: function getLineC(line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x3, this.y3, this.x1, this.y1);\n    return line;\n  },\n\n  /**\r\n   * Left most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function get() {\n      return Math.min(this.x1, this.x2, this.x3);\n    },\n    set: function set(value) {\n      var diff = 0;\n\n      if (this.x1 <= this.x2 && this.x1 <= this.x3) {\n        diff = this.x1 - value;\n      } else if (this.x2 <= this.x1 && this.x2 <= this.x3) {\n        diff = this.x2 - value;\n      } else {\n        diff = this.x3 - value;\n      }\n\n      this.x1 -= diff;\n      this.x2 -= diff;\n      this.x3 -= diff;\n    }\n  },\n\n  /**\r\n   * Right most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function get() {\n      return Math.max(this.x1, this.x2, this.x3);\n    },\n    set: function set(value) {\n      var diff = 0;\n\n      if (this.x1 >= this.x2 && this.x1 >= this.x3) {\n        diff = this.x1 - value;\n      } else if (this.x2 >= this.x1 && this.x2 >= this.x3) {\n        diff = this.x2 - value;\n      } else {\n        diff = this.x3 - value;\n      }\n\n      this.x1 -= diff;\n      this.x2 -= diff;\n      this.x3 -= diff;\n    }\n  },\n\n  /**\r\n   * Top most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function get() {\n      return Math.min(this.y1, this.y2, this.y3);\n    },\n    set: function set(value) {\n      var diff = 0;\n\n      if (this.y1 <= this.y2 && this.y1 <= this.y3) {\n        diff = this.y1 - value;\n      } else if (this.y2 <= this.y1 && this.y2 <= this.y3) {\n        diff = this.y2 - value;\n      } else {\n        diff = this.y3 - value;\n      }\n\n      this.y1 -= diff;\n      this.y2 -= diff;\n      this.y3 -= diff;\n    }\n  },\n\n  /**\r\n   * Bottom most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function get() {\n      return Math.max(this.y1, this.y2, this.y3);\n    },\n    set: function set(value) {\n      var diff = 0;\n\n      if (this.y1 >= this.y2 && this.y1 >= this.y3) {\n        diff = this.y1 - value;\n      } else if (this.y2 >= this.y1 && this.y2 >= this.y3) {\n        diff = this.y2 - value;\n      } else {\n        diff = this.y3 - value;\n      }\n\n      this.y1 -= diff;\n      this.y2 -= diff;\n      this.y3 -= diff;\n    }\n  }\n});\nmodule.exports = Triangle;","map":null,"metadata":{},"sourceType":"script"}