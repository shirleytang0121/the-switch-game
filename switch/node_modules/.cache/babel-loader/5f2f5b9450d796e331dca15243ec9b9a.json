{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar NOOP = require('../utils/NOOP');\n/**\r\n * @classdesc\r\n * Abstracts away the use of RAF or setTimeOut for the core game update loop.\r\n * This is invoked automatically by the Phaser.Game instance.\r\n *\r\n * @class RequestAnimationFrame\r\n * @memberof Phaser.DOM\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar RequestAnimationFrame = new Class({\n  initialize: function RequestAnimationFrame() {\n    /**\r\n     * True if RequestAnimationFrame is running, otherwise false.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#isRunning\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n    this.isRunning = false;\n    /**\r\n     * The callback to be invoked each step.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#callback\r\n     * @type {FrameRequestCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.callback = NOOP;\n    /**\r\n     * The most recent timestamp. Either a DOMHighResTimeStamp under RAF or `Date.now` under SetTimeout.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#tick\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.tick = 0;\n    /**\r\n     * True if the step is using setTimeout instead of RAF.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#isSetTimeOut\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isSetTimeOut = false;\n    /**\r\n     * The setTimeout or RAF callback ID used when canceling them.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#timeOutID\r\n     * @type {?number}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.timeOutID = null;\n    /**\r\n     * The previous time the step was called.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#lastTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lastTime = 0;\n\n    var _this = this;\n    /**\r\n     * The RAF step function.\r\n     * Updates the local tick value, invokes the callback and schedules another call to requestAnimationFrame.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#step\r\n     * @type {FrameRequestCallback}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.step = function step() {\n      //  Because we cannot trust the time passed to this callback from the browser and need it kept in sync with event times\n      var timestamp = window.performance.now(); //  DOMHighResTimeStamp\n\n      _this.lastTime = _this.tick;\n      _this.tick = timestamp;\n\n      _this.callback(timestamp);\n\n      _this.timeOutID = window.requestAnimationFrame(step);\n    };\n    /**\r\n     * The SetTimeout step function.\r\n     * Updates the local tick value, invokes the callback and schedules another call to setTimeout.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#stepTimeout\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.stepTimeout = function stepTimeout() {\n      var d = Date.now();\n      var delay = Math.max(16 + _this.lastTime - d, 0);\n      _this.lastTime = _this.tick;\n      _this.tick = d;\n\n      _this.callback(d);\n\n      _this.timeOutID = window.setTimeout(stepTimeout, delay);\n    };\n  },\n\n  /**\r\n   * Starts the requestAnimationFrame or setTimeout process running.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#start\r\n   * @since 3.0.0\r\n   *\r\n   * @param {FrameRequestCallback} callback - The callback to invoke each step.\r\n   * @param {boolean} forceSetTimeOut - Should it use SetTimeout, even if RAF is available?\r\n   */\n  start: function start(callback, forceSetTimeOut) {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.callback = callback;\n    this.isSetTimeOut = forceSetTimeOut;\n    this.isRunning = true;\n    this.timeOutID = forceSetTimeOut ? window.setTimeout(this.stepTimeout, 0) : window.requestAnimationFrame(this.step);\n  },\n\n  /**\r\n   * Stops the requestAnimationFrame or setTimeout from running.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#stop\r\n   * @since 3.0.0\r\n   */\n  stop: function stop() {\n    this.isRunning = false;\n\n    if (this.isSetTimeOut) {\n      clearTimeout(this.timeOutID);\n    } else {\n      window.cancelAnimationFrame(this.timeOutID);\n    }\n  },\n\n  /**\r\n   * Stops the step from running and clears the callback reference.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.stop();\n    this.callback = NOOP;\n  }\n});\nmodule.exports = RequestAnimationFrame;","map":null,"metadata":{},"sourceType":"script"}