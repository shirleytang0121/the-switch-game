{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Searches a pre-sorted array for the closet value to the given number.\r\n *\r\n * If the `key` argument is given it will assume the array contains objects that all have the required `key` property name,\r\n * and will check for the closest value of those to the given number.\r\n *\r\n * @function Phaser.Utils.Array.FindClosestInSorted\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to search for in the array.\r\n * @param {array} array - The array to search, which must be sorted.\r\n * @param {string} [key] - An optional property key. If specified the array elements property will be checked against value.\r\n *\r\n * @return {(number|any)} The nearest value found in the array, or if a `key` was given, the nearest object with the matching property value.\r\n */\nvar FindClosestInSorted = function FindClosestInSorted(value, array, key) {\n  if (!array.length) {\n    return NaN;\n  } else if (array.length === 1) {\n    return array[0];\n  }\n\n  var i = 1;\n  var low;\n  var high;\n\n  if (key) {\n    if (value < array[0][key]) {\n      return array[0];\n    }\n\n    while (array[i][key] < value) {\n      i++;\n    }\n  } else {\n    while (array[i] < value) {\n      i++;\n    }\n  }\n\n  if (i > array.length) {\n    i = array.length;\n  }\n\n  if (key) {\n    low = array[i - 1][key];\n    high = array[i][key];\n    return high - value <= value - low ? array[i] : array[i - 1];\n  } else {\n    low = array[i - 1];\n    high = array[i];\n    return high - value <= value - low ? high : low;\n  }\n};\n\nmodule.exports = FindClosestInSorted;","map":null,"metadata":{},"sourceType":"script"}