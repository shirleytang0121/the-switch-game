{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Formats = require('../../Formats');\n\nvar MapData = require('../../mapdata/MapData');\n\nvar ParseTileLayers = require('./ParseTileLayers');\n\nvar ParseImageLayers = require('./ParseImageLayers');\n\nvar ParseTilesets = require('./ParseTilesets');\n\nvar ParseObjectLayers = require('./ParseObjectLayers');\n\nvar BuildTilesetIndex = require('./BuildTilesetIndex');\n\nvar AssignTileProperties = require('./AssignTileProperties');\n/**\r\n * @namespace Phaser.Tilemaps.Parsers.Tiled\r\n */\n\n/**\r\n * Parses a Tiled JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseJSONTiled\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?Phaser.Tilemaps.MapData} The created MapData object, or `null` if the data can't be parsed.\r\n */\n\n\nvar ParseJSONTiled = function ParseJSONTiled(name, json, insertNull) {\n  if (json.orientation !== 'orthogonal') {\n    console.warn('Only orthogonal map types are supported in this version of Phaser');\n    return null;\n  } //  Map data will consist of: layers, objects, images, tilesets, sizes\n\n\n  var mapData = new MapData({\n    width: json.width,\n    height: json.height,\n    name: name,\n    tileWidth: json.tilewidth,\n    tileHeight: json.tileheight,\n    orientation: json.orientation,\n    format: Formats.TILED_JSON,\n    version: json.version,\n    properties: json.properties,\n    renderOrder: json.renderorder\n  });\n  mapData.layers = ParseTileLayers(json, insertNull);\n  mapData.images = ParseImageLayers(json);\n  var sets = ParseTilesets(json);\n  mapData.tilesets = sets.tilesets;\n  mapData.imageCollections = sets.imageCollections;\n  mapData.objects = ParseObjectLayers(json);\n  mapData.tiles = BuildTilesetIndex(mapData);\n  AssignTileProperties(mapData);\n  return mapData;\n};\n\nmodule.exports = ParseJSONTiled;","map":null,"metadata":{},"sourceType":"script"}