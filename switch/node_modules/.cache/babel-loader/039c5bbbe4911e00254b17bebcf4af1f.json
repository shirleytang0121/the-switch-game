{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar Color = require('../../display/color/Color');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.Canvas\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {SnapshotState} config - The snapshot configuration object.\r\n */\n\n\nvar CanvasSnapshot = function CanvasSnapshot(canvas, config) {\n  var callback = GetFastValue(config, 'callback');\n  var type = GetFastValue(config, 'type', 'image/png');\n  var encoderOptions = GetFastValue(config, 'encoder', 0.92);\n  var x = Math.abs(Math.round(GetFastValue(config, 'x', 0)));\n  var y = Math.abs(Math.round(GetFastValue(config, 'y', 0)));\n  var width = GetFastValue(config, 'width', canvas.width);\n  var height = GetFastValue(config, 'height', canvas.height);\n  var getPixel = GetFastValue(config, 'getPixel', false);\n\n  if (getPixel) {\n    var context = canvas.getContext('2d');\n    var imageData = context.getImageData(x, y, 1, 1);\n    var data = imageData.data;\n    callback.call(null, new Color(data[0], data[1], data[2], data[3] / 255));\n  } else if (x !== 0 || y !== 0 || width !== canvas.width || height !== canvas.height) {\n    //  Area Grab\n    var copyCanvas = CanvasPool.createWebGL(this, width, height);\n    var ctx = copyCanvas.getContext('2d');\n    ctx.drawImage(canvas, x, y, width, height, 0, 0, width, height);\n    var image1 = new Image();\n\n    image1.onerror = function () {\n      callback.call(null);\n      CanvasPool.remove(copyCanvas);\n    };\n\n    image1.onload = function () {\n      callback.call(null, image1);\n      CanvasPool.remove(copyCanvas);\n    };\n\n    image1.src = copyCanvas.toDataURL(type, encoderOptions);\n  } else {\n    //  Full Grab\n    var image2 = new Image();\n\n    image2.onerror = function () {\n      callback.call(null);\n    };\n\n    image2.onload = function () {\n      callback.call(null, image2);\n    };\n\n    image2.src = canvas.toDataURL(type, encoderOptions);\n  }\n};\n\nmodule.exports = CanvasSnapshot;","map":null,"metadata":{},"sourceType":"script"}