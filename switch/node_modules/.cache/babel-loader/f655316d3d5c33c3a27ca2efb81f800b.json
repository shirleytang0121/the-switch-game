{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar PutTileAt = require('./PutTileAt');\n/**\r\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n * index at the specified location will be changed. Collision information will be recalculated\r\n * within the region tiles were changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.PutTilesAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar PutTilesAt = function PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer) {\n  if (!Array.isArray(tilesArray)) {\n    return null;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  } // Force the input array to be a 2D array\n\n\n  if (!Array.isArray(tilesArray[0])) {\n    tilesArray = [tilesArray];\n  }\n\n  var height = tilesArray.length;\n  var width = tilesArray[0].length;\n\n  for (var ty = 0; ty < height; ty++) {\n    for (var tx = 0; tx < width; tx++) {\n      var tile = tilesArray[ty][tx];\n      PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\n    }\n  }\n\n  if (recalculateFaces) {\n    // Recalculate the faces within the destination area and neighboring tiles\n    CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n  }\n};\n\nmodule.exports = PutTilesAt;","map":null,"metadata":{},"sourceType":"script"}