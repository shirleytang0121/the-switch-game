{"ast":null,"code":"var AWS = require('../core');\n\nvar STS = require('../../clients/sts');\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation support.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation\r\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\r\n * application for which credentials will be given. In addition, the\r\n * `WebIdentityToken` must be set to the token provided by the identity\r\n * provider. See {constructor} for an example on creating a credentials\r\n * object with proper `RoleArn` and `WebIdentityToken` values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.WebIdentityToken = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n */\n\n\nAWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new credentials object.\r\n   * @param (see AWS.STS.assumeRoleWithWebIdentity)\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.WebIdentityCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',\r\n   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service\r\n   *     RoleSessionName: 'web' // optional name, defaults to web-identity\r\n   *   }, {\r\n   *     // optionally provide configuration to apply to the underlying AWS.STS service client\r\n   *     // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *     // specify timeout options\r\n   *     httpOptions: {\r\n   *       timeout: 100\r\n   *     }\r\n   *   });\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.Config\r\n   */\n  constructor: function WebIdentityCredentials(params, clientConfig) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';\n    this.data = null;\n    this._clientConfig = AWS.util.copy(clientConfig || {});\n  },\n\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    self.createClients();\n    if (!callback) callback = function callback(err) {\n      if (err) throw err;\n    };\n    self.service.assumeRoleWithWebIdentity(function (err, data) {\n      self.data = null;\n\n      if (!err) {\n        self.data = data;\n        self.service.credentialsFrom(data, self);\n      }\n\n      callback(err);\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  createClients: function createClients() {\n    if (!this.service) {\n      var stsConfig = AWS.util.merge({}, this._clientConfig);\n      stsConfig.params = this.params;\n      this.service = new STS(stsConfig);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}