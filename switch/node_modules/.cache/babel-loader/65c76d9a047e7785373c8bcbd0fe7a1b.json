{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Tile = require('../Tile');\n\nvar IsInLayerBounds = require('./IsInLayerBounds');\n\nvar CalculateFacesAt = require('./CalculateFacesAt');\n/**\r\n * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n * collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.RemoveTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile} The Tile object that was removed.\r\n */\n\n\nvar RemoveTileAt = function RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer) {\n  if (replaceWithNull === undefined) {\n    replaceWithNull = false;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (!IsInLayerBounds(tileX, tileY, layer)) {\n    return null;\n  }\n\n  var tile = layer.data[tileY][tileX] || null;\n\n  if (tile === null) {\n    return null;\n  } else {\n    layer.data[tileY][tileX] = replaceWithNull ? null : new Tile(layer, -1, tileX, tileY, tile.width, tile.height);\n  } // Recalculate faces only if the removed tile was a colliding tile\n\n\n  if (recalculateFaces && tile && tile.collides) {\n    CalculateFacesAt(tileX, tileY, layer);\n  }\n\n  return tile;\n};\n\nmodule.exports = RemoveTileAt;","map":null,"metadata":{},"sourceType":"script"}