{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  Source object\n//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'\n//  The default value to use if the key doesn't exist\n\n/**\r\n * Retrieves a value from an object.\r\n *\r\n * @function Phaser.Utils.Objects.GetValue\r\n * @since 3.0.0\r\n *\r\n * @param {object} source - The object to retrieve the value from.\r\n * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\r\n * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.\r\n *\r\n * @return {*} The value of the requested key.\r\n */\nvar GetValue = function GetValue(source, key, defaultValue) {\n  if (!source || typeof source === 'number') {\n    return defaultValue;\n  } else if (source.hasOwnProperty(key)) {\n    return source[key];\n  } else if (key.indexOf('.') !== -1) {\n    var keys = key.split('.');\n    var parent = source;\n    var value = defaultValue; //  Use for loop here so we can break early\n\n    for (var i = 0; i < keys.length; i++) {\n      if (parent.hasOwnProperty(keys[i])) {\n        //  Yes it has a key property, let's carry on down\n        value = parent[keys[i]];\n        parent = parent[keys[i]];\n      } else {\n        //  Can't go any further, so reset to default\n        value = defaultValue;\n        break;\n      }\n    }\n\n    return value;\n  } else {\n    return defaultValue;\n  }\n};\n\nmodule.exports = GetValue;","map":null,"metadata":{},"sourceType":"script"}