{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar EaseMap = require('../../../math/easing/EaseMap');\n\nvar Events = require('../events');\n\nvar Vector2 = require('../../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera Pan effect.\r\n *\r\n * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n * over the duration and with the ease specified.\r\n *\r\n * Only the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Pan\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Pan = new Class({\n  initialize: function Pan(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.11.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.11.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The starting scroll coordinates to pan the camera from.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#source\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.source = new Vector2();\n    /**\r\n     * The constantly updated value based on zoom.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#current\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.current = new Vector2();\n    /**\r\n     * The destination scroll coordinates to pan the camera to.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#destination\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.destination = new Vector2();\n    /**\r\n     * The ease function to use during the pan.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#ease\r\n     * @type {function}\r\n     * @since 3.11.0\r\n     */\n\n    this.ease;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#progress\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * @callback CameraPanCallback\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n     * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n     * @param {number} x - The Camera's new scrollX coordinate.\r\n     * @param {number} y - The Camera's new scrollY coordinate.\r\n     */\n\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdate\r\n     * @type {?CameraPanCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n   * over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n   * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function start(x, y, duration, ease, force, callback, context) {\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    if (ease === undefined) {\n      ease = EaseMap.Linear;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    var cam = this.camera;\n\n    if (!force && this.isRunning) {\n      return cam;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0; //  Starting from\n\n    this.source.set(cam.scrollX, cam.scrollY); //  Destination\n\n    this.destination.set(x, y); //  Zoom factored version\n\n    cam.getScroll(x, y, this.current); //  Using this ease\n\n    if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease)) {\n      this.ease = EaseMap[ease];\n    } else if (typeof ease === 'function') {\n      this.ease = ease;\n    }\n\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.PAN_START, this.camera, this, duration, x, y);\n    return cam;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#update\r\n   * @since 3.11.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    var progress = Clamp(this._elapsed / this.duration, 0, 1);\n    this.progress = progress;\n    var cam = this.camera;\n\n    if (this._elapsed < this.duration) {\n      var v = this.ease(progress);\n      cam.getScroll(this.destination.x, this.destination.y, this.current);\n      var x = this.source.x + (this.current.x - this.source.x) * v;\n      var y = this.source.y + (this.current.y - this.source.y) * v;\n      cam.setScroll(x, y);\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, cam, progress, x, y);\n      }\n    } else {\n      cam.centerOn(this.destination.x, this.destination.y);\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, cam, progress, cam.scrollX, cam.scrollY);\n      }\n\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   */\n  effectComplete: function effectComplete() {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.PAN_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#reset\r\n   * @since 3.11.0\r\n   */\n  reset: function reset() {\n    this.isRunning = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#destroy\r\n   * @since 3.11.0\r\n   */\n  destroy: function destroy() {\n    this.reset();\n    this.camera = null;\n    this.source = null;\n    this.destination = null;\n  }\n});\nmodule.exports = Pan;","map":null,"metadata":{},"sourceType":"script"}