{"ast":null,"code":"/**\r\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Events\r\n*/\nvar Events = {};\nmodule.exports = Events;\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * Subscribes a callback function to the given object's `eventName`.\r\n   * @method on\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {function} callback\r\n   */\n  Events.on = function (object, eventNames, callback) {\n    var names = eventNames.split(' '),\n        name;\n\n    for (var i = 0; i < names.length; i++) {\n      name = names[i];\n      object.events = object.events || {};\n      object.events[name] = object.events[name] || [];\n      object.events[name].push(callback);\n    }\n\n    return callback;\n  };\n  /**\r\n   * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\r\n   * @method off\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {function} callback\r\n   */\n\n\n  Events.off = function (object, eventNames, callback) {\n    if (!eventNames) {\n      object.events = {};\n      return;\n    } // handle Events.off(object, callback)\n\n\n    if (typeof eventNames === 'function') {\n      callback = eventNames;\n      eventNames = Common.keys(object.events).join(' ');\n    }\n\n    var names = eventNames.split(' ');\n\n    for (var i = 0; i < names.length; i++) {\n      var callbacks = object.events[names[i]],\n          newCallbacks = [];\n\n      if (callback && callbacks) {\n        for (var j = 0; j < callbacks.length; j++) {\n          if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n        }\n      }\n\n      object.events[names[i]] = newCallbacks;\n    }\n  };\n  /**\r\n   * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\r\n   * @method trigger\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {} event\r\n   */\n\n\n  Events.trigger = function (object, eventNames, event) {\n    var names, name, callbacks, eventClone;\n    var events = object.events;\n\n    if (events && Common.keys(events).length > 0) {\n      if (!event) event = {};\n      names = eventNames.split(' ');\n\n      for (var i = 0; i < names.length; i++) {\n        name = names[i];\n        callbacks = events[name];\n\n        if (callbacks) {\n          eventClone = Common.clone(event, false);\n          eventClone.name = name;\n          eventClone.source = object;\n\n          for (var j = 0; j < callbacks.length; j++) {\n            callbacks[j].apply(object, [eventClone]);\n          }\n        }\n      }\n    }\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}