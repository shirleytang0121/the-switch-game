{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar SpriteRender = require('./SpriteRender');\n/**\r\n * @classdesc\r\n * A Sprite Game Object.\r\n *\r\n * A Sprite Game Object is used for the display of both static and animated images in your game.\r\n * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\r\n * and animated.\r\n *\r\n * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\r\n * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\r\n * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.\r\n *\r\n * @class Sprite\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.TextureCrop\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar Sprite = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.Depth, Components.Flip, Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScaleMode, Components.ScrollFactor, Components.Size, Components.TextureCrop, Components.Tint, Components.Transform, Components.Visible, SpriteRender],\n  initialize: function Sprite(scene, x, y, texture, frame) {\n    GameObject.call(this, scene, 'Sprite');\n    /**\r\n     * The internal crop data object, as used by `setCrop` and passed to the `Frame.setCropUVs` method.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite#_crop\r\n     * @type {object}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._crop = this.resetCropObject();\n    /**\r\n     * The Animation Controller of this Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite#anims\r\n     * @type {Phaser.GameObjects.Components.Animation}\r\n     * @since 3.0.0\r\n     */\n\n    this.anims = new Components.Animation(this);\n    this.setTexture(texture, frame);\n    this.setPosition(x, y);\n    this.setSizeToFrame();\n    this.setOriginFromFrame();\n    this.initPipeline();\n  },\n\n  /**\r\n   * Update this Sprite's animations.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite#preUpdate\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  preUpdate: function preUpdate(time, delta) {\n    this.anims.update(time, delta);\n  },\n\n  /**\r\n   * Start playing the given animation.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite#play\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The string-based key of the animation to play.\r\n   * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite} This Game Object.\r\n   */\n  play: function play(key, ignoreIfPlaying, startFrame) {\n    this.anims.play(key, ignoreIfPlaying, startFrame);\n    return this;\n  },\n\n  /**\r\n   * Build a JSON representation of this Sprite.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {JSONGameObject} A JSON representation of the Game Object.\r\n   */\n  toJSON: function toJSON() {\n    var data = Components.ToJSON(this); //  Extra Sprite data is added here\n\n    return data;\n  },\n\n  /**\r\n   * Handles the pre-destroy step for the Sprite, which removes the Animation component.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite#preDestroy\r\n   * @private\r\n   * @since 3.14.0\r\n   */\n  preDestroy: function preDestroy() {\n    this.anims.destroy();\n    this.anims = undefined;\n  }\n});\nmodule.exports = Sprite;","map":null,"metadata":{},"sourceType":"script"}