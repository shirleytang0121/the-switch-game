{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Point = require('../point/Point'); //  This is based off an explanation and expanded math presented by Paul Bourke:\n//  See http:'local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/\n\n/**\r\n * Checks if two Lines intersect. If the Lines are identical, they will be treated as parallel and thus non-intersecting.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line1 - The first Line to check.\r\n * @param {Phaser.Geom.Line} line2 - The second Line to check.\r\n * @param {Phaser.Geom.Point} [out] - A Point in which to optionally store the point of intersection.\r\n *\r\n * @return {boolean} `true` if the two Lines intersect, and the `out` object will be populated, if given. Otherwise, `false`.\r\n */\n\n\nvar LineToLine = function LineToLine(line1, line2, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var x1 = line1.x1;\n  var y1 = line1.y1;\n  var x2 = line1.x2;\n  var y2 = line1.y2;\n  var x3 = line2.x1;\n  var y3 = line2.y1;\n  var x4 = line2.x2;\n  var y4 = line2.y2;\n  var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n  var deNom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1); //  Make sure there is not a division by zero - this also indicates that the lines are parallel.\n  //  If numA and numB were both equal to zero the lines would be on top of each other (coincidental).\n  //  This check is not done because it is not necessary for this implementation (the parallel check accounts for this).\n\n  if (deNom === 0) {\n    return false;\n  } //  Calculate the intermediate fractional point that the lines potentially intersect.\n\n\n  var uA = numA / deNom;\n  var uB = numB / deNom; //  The fractional point will be between 0 and 1 inclusive if the lines intersect.\n  //  If the fractional calculation is larger than 1 or smaller than 0 the lines would need to be longer to intersect.\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    out.x = x1 + uA * (x2 - x1);\n    out.y = y1 + uA * (y2 - y1);\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = LineToLine;","map":null,"metadata":{},"sourceType":"script"}