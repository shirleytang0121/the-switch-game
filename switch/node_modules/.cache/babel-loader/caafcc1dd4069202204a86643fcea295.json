{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Bodies = require('../lib/factory/Bodies');\n\nvar Body = require('../lib/body/Body');\n\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar PhysicsEditorParser = require('../PhysicsEditorParser');\n\nvar Vertices = require('../lib/geometry/Vertices');\n/**\r\n * [description]\r\n *\r\n * @name Phaser.Physics.Matter.Components.SetBody\r\n * @since 3.0.0\r\n */\n\n\nvar SetBody = {\n  //  Calling any of these methods resets previous properties you may have set on the body, including plugins, mass, etc\n\n  /**\r\n   * Set the body on a Game Object to a rectangle.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setRectangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - Width of the rectangle.\r\n   * @param {number} height - Height of the rectangle.\r\n   * @param {object} options - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setRectangle: function setRectangle(width, height, options) {\n    return this.setBody({\n      type: 'rectangle',\n      width: width,\n      height: height\n    }, options);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - [description]\r\n   * @param {object} options - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setCircle: function setCircle(radius, options) {\n    return this.setBody({\n      type: 'circle',\n      radius: radius\n    }, options);\n  },\n\n  /**\r\n   * Set the body on the Game Object to a polygon shape.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setPolygon\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - The radius of the polygon.\r\n   * @param {number} sides - The amount of sides creating the polygon.\r\n   * @param {object} options - A matterjs config object.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setPolygon: function setPolygon(radius, sides, options) {\n    return this.setBody({\n      type: 'polygon',\n      sides: sides,\n      radius: radius\n    }, options);\n  },\n\n  /**\r\n   * Creates a new matterjs trapezoid body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setTrapezoid\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the trapezoid.\r\n   * @param {number} height - The height of the trapezoid.\r\n   * @param {number} slope - The angle of slope for the trapezoid.\r\n   * @param {object} options - A matterjs config object for the body.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setTrapezoid: function setTrapezoid(width, height, slope, options) {\n    return this.setBody({\n      type: 'trapezoid',\n      width: width,\n      height: height,\n      slope: slope\n    }, options);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setExistingBody\r\n   * @since 3.0.0\r\n   *\r\n   * @param {MatterJS.Body} body - [description]\r\n   * @param {boolean} [addToWorld=true] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setExistingBody: function setExistingBody(body, addToWorld) {\n    if (addToWorld === undefined) {\n      addToWorld = true;\n    }\n\n    if (this.body) {\n      this.world.remove(this.body);\n    }\n\n    this.body = body;\n\n    for (var i = 0; i < body.parts.length; i++) {\n      body.parts[i].gameObject = this;\n    }\n\n    var _this = this;\n\n    body.destroy = function destroy() {\n      _this.world.remove(_this.body);\n\n      _this.body.gameObject = null;\n    };\n\n    if (addToWorld) {\n      this.world.add(body);\n    }\n\n    if (this._originComponent) {\n      this.setOrigin(body.render.sprite.xOffset, body.render.sprite.yOffset);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setBody\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - [description]\r\n   * @param {object} options - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setBody: function setBody(config, options) {\n    if (!config) {\n      return this;\n    }\n\n    var body; //  Allow them to do: shape: 'circle' instead of shape: { type: 'circle' }\n\n    if (typeof config === 'string') {\n      //  Using defaults\n      config = {\n        type: config\n      };\n    }\n\n    var shapeType = GetFastValue(config, 'type', 'rectangle');\n    var bodyX = GetFastValue(config, 'x', this._tempVec2.x);\n    var bodyY = GetFastValue(config, 'y', this._tempVec2.y);\n    var bodyWidth = GetFastValue(config, 'width', this.width);\n    var bodyHeight = GetFastValue(config, 'height', this.height);\n\n    switch (shapeType) {\n      case 'rectangle':\n        body = Bodies.rectangle(bodyX, bodyY, bodyWidth, bodyHeight, options);\n        break;\n\n      case 'circle':\n        var radius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\n        var maxSides = GetFastValue(config, 'maxSides', 25);\n        body = Bodies.circle(bodyX, bodyY, radius, options, maxSides);\n        break;\n\n      case 'trapezoid':\n        var slope = GetFastValue(config, 'slope', 0.5);\n        body = Bodies.trapezoid(bodyX, bodyY, bodyWidth, bodyHeight, slope, options);\n        break;\n\n      case 'polygon':\n        var sides = GetFastValue(config, 'sides', 5);\n        var pRadius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\n        body = Bodies.polygon(bodyX, bodyY, sides, pRadius, options);\n        break;\n\n      case 'fromVertices':\n      case 'fromVerts':\n        var verts = GetFastValue(config, 'verts', null);\n\n        if (verts) {\n          //  Has the verts array come from Vertices.fromPath, or is it raw?\n          if (typeof verts === 'string') {\n            verts = Vertices.fromPath(verts);\n          }\n\n          if (this.body && !this.body.hasOwnProperty('temp')) {\n            Body.setVertices(this.body, verts);\n            body = this.body;\n          } else {\n            var flagInternal = GetFastValue(config, 'flagInternal', false);\n            var removeCollinear = GetFastValue(config, 'removeCollinear', 0.01);\n            var minimumArea = GetFastValue(config, 'minimumArea', 10);\n            body = Bodies.fromVertices(bodyX, bodyY, verts, options, flagInternal, removeCollinear, minimumArea);\n          }\n        }\n\n        break;\n\n      case 'fromPhysicsEditor':\n        body = PhysicsEditorParser.parseBody(bodyX, bodyY, bodyWidth, bodyHeight, config);\n        break;\n    }\n\n    if (body) {\n      this.setExistingBody(body, config.addToWorld);\n    }\n\n    return this;\n  }\n};\nmodule.exports = SetBody;","map":null,"metadata":{},"sourceType":"script"}