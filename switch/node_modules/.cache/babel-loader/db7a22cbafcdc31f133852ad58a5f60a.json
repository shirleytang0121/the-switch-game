{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * @typedef {object} GravityWellConfig\r\n *\r\n * @property {number} [x=0] - The x coordinate of the Gravity Well, in world space.\r\n * @property {number} [y=0] - The y coordinate of the Gravity Well, in world space.\r\n * @property {number} [power=0] - The strength of the gravity force - larger numbers produce a stronger force.\r\n * @property {number} [epsilon=100] - The minimum distance for which the gravity force is calculated.\r\n * @property {number} [gravity=50] - The gravitational force of this Gravity Well.\r\n */\n\n/**\r\n * @classdesc\r\n * The GravityWell action applies a force on the particle to draw it towards, or repel it from, a single point.\r\n * \r\n * The force applied is inversely proportional to the square of the distance from the particle to the point, in accordance with Newton's law of gravity.\r\n * \r\n * This simulates the effect of gravity over large distances (as between planets, for example).\r\n *\r\n * @class GravityWell\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(number|GravityWellConfig)} [x=0] - The x coordinate of the Gravity Well, in world space.\r\n * @param {number} [y=0] - The y coordinate of the Gravity Well, in world space.\r\n * @param {number} [power=0] - The strength of the gravity force - larger numbers produce a stronger force.\r\n * @param {number} [epsilon=100] - The minimum distance for which the gravity force is calculated.\r\n * @param {number} [gravity=50] - The gravitational force of this Gravity Well.\r\n */\n\n\nvar GravityWell = new Class({\n  initialize: function GravityWell(x, y, power, epsilon, gravity) {\n    if (typeof x === 'object') {\n      var config = x;\n      x = GetFastValue(config, 'x', 0);\n      y = GetFastValue(config, 'y', 0);\n      power = GetFastValue(config, 'power', 0);\n      epsilon = GetFastValue(config, 'epsilon', 100);\n      gravity = GetFastValue(config, 'gravity', 50);\n    } else {\n      if (x === undefined) {\n        x = 0;\n      }\n\n      if (y === undefined) {\n        y = 0;\n      }\n\n      if (power === undefined) {\n        power = 0;\n      }\n\n      if (epsilon === undefined) {\n        epsilon = 100;\n      }\n\n      if (gravity === undefined) {\n        gravity = 50;\n      }\n    }\n    /**\r\n     * The x coordinate of the Gravity Well, in world space.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x = x;\n    /**\r\n     * The y coordinate of the Gravity Well, in world space.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The active state of the Gravity Well. An inactive Gravity Well will not influence any particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#active\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.active = true;\n    /**\r\n     * Internal gravity value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_gravity\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._gravity = gravity;\n    /**\r\n     * Internal power value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_power\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._power = 0;\n    /**\r\n     * Internal epsilon value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_epsilon\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._epsilon = 0;\n    /**\r\n     * The strength of the gravity force - larger numbers produce a stronger force.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#power\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.power = power;\n    /**\r\n     * The minimum distance for which the gravity force is calculated.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#epsilon\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.epsilon = epsilon;\n  },\n\n  /**\r\n   * Takes a Particle and updates it based on the properties of this Gravity Well.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.GravityWell#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to update.\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   */\n  update: function update(particle, delta) {\n    var x = this.x - particle.x;\n    var y = this.y - particle.y;\n    var dSq = x * x + y * y;\n\n    if (dSq === 0) {\n      return;\n    }\n\n    var d = Math.sqrt(dSq);\n\n    if (dSq < this._epsilon) {\n      dSq = this._epsilon;\n    }\n\n    var factor = this._power * delta / (dSq * d) * 100;\n    particle.velocityX += x * factor;\n    particle.velocityY += y * factor;\n  },\n  epsilon: {\n    get: function get() {\n      return Math.sqrt(this._epsilon);\n    },\n    set: function set(value) {\n      this._epsilon = value * value;\n    }\n  },\n  power: {\n    get: function get() {\n      return this._power / this._gravity;\n    },\n    set: function set(value) {\n      this._power = value * this._gravity;\n    }\n  },\n  gravity: {\n    get: function get() {\n      return this._gravity;\n    },\n    set: function set(value) {\n      var pwr = this.power;\n      this._gravity = value;\n      this.power = pwr;\n    }\n  }\n});\nmodule.exports = GravityWell;","map":null,"metadata":{},"sourceType":"script"}