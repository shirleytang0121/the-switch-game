{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar Color = require('../../display/color/Color');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a WebGL canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.WebGL\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {SnapshotState} config - The snapshot configuration object.\r\n */\n\n\nvar WebGLSnapshot = function WebGLSnapshot(sourceCanvas, config) {\n  var gl = sourceCanvas.getContext('experimental-webgl');\n  var callback = GetFastValue(config, 'callback');\n  var type = GetFastValue(config, 'type', 'image/png');\n  var encoderOptions = GetFastValue(config, 'encoder', 0.92);\n  var x = GetFastValue(config, 'x', 0);\n  var y = GetFastValue(config, 'y', 0);\n  var width = GetFastValue(config, 'width', gl.drawingBufferWidth);\n  var height = GetFastValue(config, 'height', gl.drawingBufferHeight);\n  var getPixel = GetFastValue(config, 'getPixel', false);\n\n  if (getPixel) {\n    var pixel = new Uint8Array(4);\n    gl.readPixels(x, gl.drawingBufferHeight - y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n    callback.call(null, new Color(pixel[0], pixel[1], pixel[2], pixel[3] / 255));\n  } else {\n    var pixels = new Uint8Array(width * height * 4);\n    gl.readPixels(x, gl.drawingBufferHeight - y - height, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    var canvas = CanvasPool.createWebGL(this, width, height);\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.getImageData(0, 0, width, height);\n    var data = imageData.data;\n\n    for (var py = 0; py < height; py++) {\n      for (var px = 0; px < width; px++) {\n        var sourceIndex = ((height - py) * width + px) * 4;\n        var destIndex = (py * width + px) * 4;\n        data[destIndex + 0] = pixels[sourceIndex + 0];\n        data[destIndex + 1] = pixels[sourceIndex + 1];\n        data[destIndex + 2] = pixels[sourceIndex + 2];\n        data[destIndex + 3] = pixels[sourceIndex + 3];\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    var image = new Image();\n\n    image.onerror = function () {\n      callback.call(null);\n      CanvasPool.remove(canvas);\n    };\n\n    image.onload = function () {\n      callback.call(null, image);\n      CanvasPool.remove(canvas);\n    };\n\n    image.src = canvas.toDataURL(type, encoderOptions);\n  }\n};\n\nmodule.exports = WebGLSnapshot;","map":null,"metadata":{},"sourceType":"script"}