{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A Tileset is a combination of an image containing the tiles and a container for data about\r\n * each tile.\r\n *\r\n * @class Tileset\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tileset in the map data.\r\n * @param {integer} firstgid - The first tile index this tileset contains.\r\n * @param {integer} [tileWidth=32] - Width of each tile (in pixels).\r\n * @param {integer} [tileHeight=32] - Height of each tile (in pixels).\r\n * @param {integer} [tileMargin=0] - The margin around all tiles in the sheet (in pixels).\r\n * @param {integer} [tileSpacing=0] - The spacing between each tile in the sheet (in pixels).\r\n * @param {object} [tileProperties={}] - Custom properties defined per tile in the Tileset.\r\n * These typically are custom properties created in Tiled when editing a tileset.\r\n * @param {object} [tileData={}] - Data stored per tile. These typically are created in Tiled\r\n * when editing a tileset, e.g. from Tiled's tile collision editor or terrain editor.\r\n */\n\n\nvar Tileset = new Class({\n  initialize: function Tileset(name, firstgid, tileWidth, tileHeight, tileMargin, tileSpacing, tileProperties, tileData) {\n    if (tileWidth === undefined || tileWidth <= 0) {\n      tileWidth = 32;\n    }\n\n    if (tileHeight === undefined || tileHeight <= 0) {\n      tileHeight = 32;\n    }\n\n    if (tileMargin === undefined) {\n      tileMargin = 0;\n    }\n\n    if (tileSpacing === undefined) {\n      tileSpacing = 0;\n    }\n\n    if (tileProperties === undefined) {\n      tileProperties = {};\n    }\n\n    if (tileData === undefined) {\n      tileData = {};\n    }\n    /**\r\n     * The name of the Tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.name = name;\n    /**\r\n     * The starting index of the first tile index this Tileset contains.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#firstgid\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.firstgid = firstgid;\n    /**\r\n     * The width of each tile (in pixels). Use setTileSize to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileWidth\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileWidth = tileWidth;\n    /**\r\n     * The height of each tile (in pixels). Use setTileSize to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileHeight\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileHeight = tileHeight;\n    /**\r\n     * The margin around the tiles in the sheet (in pixels). Use `setSpacing` to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileMargin\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileMargin = tileMargin;\n    /**\r\n     * The spacing between each the tile in the sheet (in pixels). Use `setSpacing` to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileSpacing\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileSpacing = tileSpacing;\n    /**\r\n     * Tileset-specific properties per tile that are typically defined in the Tiled editor in the\r\n     * Tileset editor.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileProperties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileProperties = tileProperties;\n    /**\r\n     * Tileset-specific data per tile that are typically defined in the Tiled editor, e.g. within\r\n     * the Tileset collision editor. This is where collision objects and terrain are stored.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileData\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileData = tileData;\n    /**\r\n     * The cached image that contains the individual tiles. Use setImage to set.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#image\r\n     * @type {?Phaser.Textures.Texture}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.image = null;\n    /**\r\n     * The gl texture used by the WebGL renderer.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.glTexture = null;\n    /**\r\n     * The number of tile rows in the the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#rows\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.rows = 0;\n    /**\r\n     * The number of tile columns in the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#columns\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.columns = 0;\n    /**\r\n     * The total number of tiles in the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#total\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.total = 0;\n    /**\r\n     * The look-up table to specific tile image texture coordinates (UV in pixels). Each element\r\n     * contains the coordinates for a tile in an object of the form {x, y}.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#texCoordinates\r\n     * @type {object[]}\r\n     * @readonly\r\n     * @since 3.0.0\r\n    */\n\n    this.texCoordinates = [];\n  },\n\n  /**\r\n   * Get a tiles properties that are stored in the Tileset. Returns null if tile index is not\r\n   * contained in this Tileset. This is typically defined in Tiled under the Tileset editor.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileProperties\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?(object|undefined)}\r\n   */\n  getTileProperties: function getTileProperties(tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.tileProperties[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Get a tile's data that is stored in the Tileset. Returns null if tile index is not contained\r\n   * in this Tileset. This is typically defined in Tiled and will contain both Tileset collision\r\n   * info and terrain mapping.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileData\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object|undefined}\r\n   */\n  getTileData: function getTileData(tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.tileData[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Get a tile's collision group that is stored in the Tileset. Returns null if tile index is not\r\n   * contained in this Tileset. This is typically defined within Tiled's tileset collision editor.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object}\r\n   */\n  getTileCollisionGroup: function getTileCollisionGroup(tileIndex) {\n    var data = this.getTileData(tileIndex);\n    return data && data.objectgroup ? data.objectgroup : null;\n  },\n\n  /**\r\n   * Returns true if and only if this Tileset contains the given tile index.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#containsTileIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {boolean}\r\n   */\n  containsTileIndex: function containsTileIndex(tileIndex) {\n    return tileIndex >= this.firstgid && tileIndex < this.firstgid + this.total;\n  },\n\n  /**\r\n   * Returns the texture coordinates (UV in pixels) in the Tileset image for the given tile index.\r\n   * Returns null if tile index is not contained in this Tileset.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileTextureCoordinates\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object} Object in the form { x, y } representing the top-left UV coordinate\r\n   * within the Tileset image.\r\n   */\n  getTileTextureCoordinates: function getTileTextureCoordinates(tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.texCoordinates[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Sets the image associated with this Tileset and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.Texture} texture - The image that contains the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setImage: function setImage(texture) {\n    this.image = texture;\n    this.glTexture = texture.get().source.glTexture;\n    this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    return this;\n  },\n\n  /**\r\n   * Sets the tile width & height and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setTileSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileWidth] - The width of a tile in pixels.\r\n   * @param {integer} [tileHeight] - The height of a tile in pixels.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setTileSize: function setTileSize(tileWidth, tileHeight) {\n    if (tileWidth !== undefined) {\n      this.tileWidth = tileWidth;\n    }\n\n    if (tileHeight !== undefined) {\n      this.tileHeight = tileHeight;\n    }\n\n    if (this.image) {\n      this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the tile margin & spacing and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setSpacing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [margin] - The margin around the tiles in the sheet (in pixels).\r\n   * @param {integer} [spacing] - The spacing between the tiles in the sheet (in pixels).\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setSpacing: function setSpacing(margin, spacing) {\n    if (margin !== undefined) {\n      this.tileMargin = margin;\n    }\n\n    if (spacing !== undefined) {\n      this.tileSpacing = spacing;\n    }\n\n    if (this.image) {\n      this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Updates tile texture coordinates and tileset data.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#updateTileData\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} imageWidth - The (expected) width of the image to slice.\r\n   * @param {integer} imageHeight - The (expected) height of the image to slice.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  updateTileData: function updateTileData(imageWidth, imageHeight) {\n    var rowCount = (imageHeight - this.tileMargin * 2 + this.tileSpacing) / (this.tileHeight + this.tileSpacing);\n    var colCount = (imageWidth - this.tileMargin * 2 + this.tileSpacing) / (this.tileWidth + this.tileSpacing);\n\n    if (rowCount % 1 !== 0 || colCount % 1 !== 0) {\n      console.warn('Image tile area not tile size multiple in: ' + this.name);\n    } // In Tiled a tileset image that is not an even multiple of the tile dimensions is truncated\n    // - hence the floor when calculating the rows/columns.\n\n\n    rowCount = Math.floor(rowCount);\n    colCount = Math.floor(colCount);\n    this.rows = rowCount;\n    this.columns = colCount; // In Tiled, \"empty\" spaces in a tileset count as tiles and hence count towards the gid\n\n    this.total = rowCount * colCount;\n    this.texCoordinates.length = 0;\n    var tx = this.tileMargin;\n    var ty = this.tileMargin;\n\n    for (var y = 0; y < this.rows; y++) {\n      for (var x = 0; x < this.columns; x++) {\n        this.texCoordinates.push({\n          x: tx,\n          y: ty\n        });\n        tx += this.tileWidth + this.tileSpacing;\n      }\n\n      tx = this.tileMargin;\n      ty += this.tileHeight + this.tileSpacing;\n    }\n\n    return this;\n  }\n});\nmodule.exports = Tileset;","map":null,"metadata":{},"sourceType":"script"}