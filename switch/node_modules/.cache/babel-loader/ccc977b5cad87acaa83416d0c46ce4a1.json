{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar CONST = require('./const');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar Merge = require('../utils/object/Merge');\n\nvar InjectionMap = require('./InjectionMap');\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\n\n/**\r\n * @typedef {object} Phaser.Scenes.Settings.Config\r\n *\r\n * @property {string} [key] - The unique key of this Scene. Must be unique within the entire Game instance.\r\n * @property {boolean} [active=false] - Does the Scene start as active or not? An active Scene updates each step.\r\n * @property {boolean} [visible=true] - Does the Scene start as visible or not? A visible Scene renders each step.\r\n * @property {(false|Phaser.Loader.FileTypes.PackFileConfig)} [pack=false] - An optional Loader Packfile to be loaded before the Scene begins.\r\n * @property {?(InputJSONCameraObject|InputJSONCameraObject[])} [cameras=null] - An optional Camera configuration object.\r\n * @property {Object.<string, string>} [map] - Overwrites the default injection map for a scene.\r\n * @property {Object.<string, string>} [mapAdd] - Extends the injection map for a scene.\r\n * @property {object} [physics={}] - The physics configuration object for the Scene.\r\n * @property {object} [loader={}] - The loader configuration object for the Scene.\r\n * @property {(false|*)} [plugins=false] - The plugin configuration object for the Scene.\r\n */\n\n/**\r\n * @typedef {object} Phaser.Scenes.Settings.Object\r\n *\r\n * @property {number} status - The current status of the Scene. Maps to the Scene constants.\r\n * @property {string} key - The unique key of this Scene. Unique within the entire Game instance.\r\n * @property {boolean} active - The active state of this Scene. An active Scene updates each step.\r\n * @property {boolean} visible - The visible state of this Scene. A visible Scene renders each step.\r\n * @property {boolean} isBooted - Has the Scene finished booting?\r\n * @property {boolean} isTransition - Is the Scene in a state of transition?\r\n * @property {?Phaser.Scene} transitionFrom - The Scene this Scene is transitioning from, if set.\r\n * @property {integer} transitionDuration - The duration of the transition, if set.\r\n * @property {boolean} transitionAllowInput - Is this Scene allowed to receive input during transitions?\r\n * @property {object} data - a data bundle passed to this Scene from the Scene Manager.\r\n * @property {(false|Phaser.Loader.FileTypes.PackFileConfig)} pack - The Loader Packfile to be loaded before the Scene begins.\r\n * @property {?(InputJSONCameraObject|InputJSONCameraObject[])} cameras - The Camera configuration object.\r\n * @property {Object.<string, string>} map - The Scene's Injection Map.\r\n * @property {object} physics - The physics configuration object for the Scene.\r\n * @property {object} loader - The loader configuration object for the Scene.\r\n * @property {(false|*)} plugins - The plugin configuration object for the Scene.\r\n */\n\n\nvar Settings = {\n  /**\r\n   * Takes a Scene configuration object and returns a fully formed System Settings object.\r\n   *\r\n   * @function Phaser.Scenes.Settings.create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Scenes.Settings.Config)} config - The Scene configuration object used to create this Scene Settings.\r\n   *\r\n   * @return {Phaser.Scenes.Settings.Object} The Scene Settings object created as a result of the config and default settings.\r\n   */\n  create: function create(config) {\n    if (typeof config === 'string') {\n      config = {\n        key: config\n      };\n    } else if (config === undefined) {\n      //  Pass the 'hasOwnProperty' checks\n      config = {};\n    }\n\n    return {\n      status: CONST.PENDING,\n      key: GetValue(config, 'key', ''),\n      active: GetValue(config, 'active', false),\n      visible: GetValue(config, 'visible', true),\n      isBooted: false,\n      isTransition: false,\n      transitionFrom: null,\n      transitionDuration: 0,\n      transitionAllowInput: true,\n      //  Loader payload array\n      data: {},\n      pack: GetValue(config, 'pack', false),\n      //  Cameras\n      cameras: GetValue(config, 'cameras', null),\n      //  Scene Property Injection Map\n      map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\n      //  Physics\n      physics: GetValue(config, 'physics', {}),\n      //  Loader\n      loader: GetValue(config, 'loader', {}),\n      //  Plugins\n      plugins: GetValue(config, 'plugins', false),\n      //  Input\n      input: GetValue(config, 'input', {})\n    };\n  }\n};\nmodule.exports = Settings;","map":null,"metadata":{},"sourceType":"script"}