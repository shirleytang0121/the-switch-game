{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Animation = require('./Animation');\n\nvar Class = require('../utils/Class');\n\nvar CustomMap = require('../structs/Map');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar GameEvents = require('../core/events');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar Pad = require('../utils/string/Pad');\n/**\r\n * @classdesc\r\n * The Animation Manager.\r\n *\r\n * Animations are managed by the global Animation Manager. This is a singleton class that is\r\n * responsible for creating and delivering animations and their corresponding data to all Game Objects.\r\n * Unlike plugins it is owned by the Game instance, not the Scene.\r\n *\r\n * Sprites and other Game Objects get the data they need from the AnimationManager.\r\n *\r\n * @class AnimationManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Animations\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n */\n\n\nvar AnimationManager = new Class({\n  Extends: EventEmitter,\n  initialize: function AnimationManager(game) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Phaser.Game instance.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#game\r\n     * @type {Phaser.Game}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.game = game;\n    /**\r\n     * A reference to the Texture Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#textureManager\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.textureManager = null;\n    /**\r\n     * The global time scale of the Animation Manager.\r\n     *\r\n     * This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#globalTimeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.globalTimeScale = 1;\n    /**\r\n     * The Animations registered in the Animation Manager.\r\n     *\r\n     * This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#anims\r\n     * @type {Phaser.Structs.Map.<string, Phaser.Animations.Animation>}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.anims = new CustomMap();\n    /**\r\n     * Whether the Animation Manager is paused along with all of its Animations.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#paused\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.paused = false;\n    /**\r\n     * The name of this Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.name = 'AnimationManager';\n    game.events.once(GameEvents.BOOT, this.boot, this);\n  },\n\n  /**\r\n   * Registers event listeners after the Game boots.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#boot\r\n   * @listens Phaser.Core.Events#DESTROY\r\n   * @since 3.0.0\r\n   */\n  boot: function boot() {\n    this.textureManager = this.game.textures;\n    this.game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Adds an existing Animation to the Animation Manager.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#add\r\n   * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key under which the Animation should be added. The Animation will be updated with it. Must be unique.\r\n   * @param {Phaser.Animations.Animation} animation - The Animation which should be added to the Animation Manager.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  add: function add(key, animation) {\n    if (this.anims.has(key)) {\n      console.warn('Animation key exists: ' + key);\n      return;\n    }\n\n    animation.key = key;\n    this.anims.set(key, animation);\n    this.emit(Events.ADD_ANIMATION, key, animation);\n    return this;\n  },\n\n  /**\r\n   * Checks to see if the given key is already in use within the Animation Manager or not.\r\n   * \r\n   * Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#exists\r\n   * @since 3.16.0\r\n   *\r\n   * @param {string} key - The key of the Animation to check.\r\n   *\r\n   * @return {boolean} `true` if the Animation already exists in the Animation Manager, or `false` if the key is available.\r\n   */\n  exists: function exists(key) {\n    return this.anims.has(key);\n  },\n\n  /**\r\n   * Creates a new Animation and adds it to the Animation Manager.\r\n   * \r\n   * Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.\r\n   * \r\n   * If an invalid key is given this method will return `false`.\r\n   * \r\n   * If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.\r\n   * \r\n   * A brand new animation is only created if the key is valid and not already in use.\r\n   * \r\n   * If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#create\r\n   * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.Types.Animation} config - The configuration settings for the Animation.\r\n   *\r\n   * @return {(Phaser.Animations.Animation|false)} The Animation that was created, or `false` is the key is already in use.\r\n   */\n  create: function create(config) {\n    var key = config.key;\n    var anim = false;\n\n    if (key) {\n      anim = this.get(key);\n\n      if (!anim) {\n        anim = new Animation(this, key, config);\n        this.anims.set(key, anim);\n        this.emit(Events.ADD_ANIMATION, key, anim);\n      }\n    }\n\n    return anim;\n  },\n\n  /**\r\n   * Loads this Animation Manager's Animations and settings from a JSON object.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Types.JSONAnimations|Phaser.Animations.Types.JSONAnimation)} data - The JSON object to parse.\r\n   * @param {boolean} [clearCurrentAnimations=false] - If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added.\r\n   *\r\n   * @return {Phaser.Animations.Animation[]} An array containing all of the Animation objects that were created as a result of this call.\r\n   */\n  fromJSON: function fromJSON(data, clearCurrentAnimations) {\n    if (clearCurrentAnimations === undefined) {\n      clearCurrentAnimations = false;\n    }\n\n    if (clearCurrentAnimations) {\n      this.anims.clear();\n    } //  Do we have a String (i.e. from JSON, or an Object?)\n\n\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n\n    var output = []; //  Array of animations, or a single animation?\n\n    if (data.hasOwnProperty('anims') && Array.isArray(data.anims)) {\n      for (var i = 0; i < data.anims.length; i++) {\n        output.push(this.create(data.anims[i]));\n      }\n\n      if (data.hasOwnProperty('globalTimeScale')) {\n        this.globalTimeScale = data.globalTimeScale;\n      }\n    } else if (data.hasOwnProperty('key') && data.type === 'frame') {\n      output.push(this.create(data));\n    }\n\n    return output;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#generateFrameNames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key for the texture containing the animation frames.\r\n   * @param {Phaser.Animations.Types.GenerateFrameNames} [config] - The configuration object for the animation frame names.\r\n   *\r\n   * @return {Phaser.Animations.Types.AnimationFrame[]} The array of {@link Phaser.Animations.Types.AnimationFrame} objects.\r\n   */\n  generateFrameNames: function generateFrameNames(key, config) {\n    var prefix = GetValue(config, 'prefix', '');\n    var start = GetValue(config, 'start', 0);\n    var end = GetValue(config, 'end', 0);\n    var suffix = GetValue(config, 'suffix', '');\n    var zeroPad = GetValue(config, 'zeroPad', 0);\n    var out = GetValue(config, 'outputArray', []);\n    var frames = GetValue(config, 'frames', false);\n    var texture = this.textureManager.get(key);\n\n    if (!texture) {\n      return out;\n    }\n\n    var diff = start < end ? 1 : -1; //  Adjust because we use i !== end in the for loop\n\n    end += diff;\n    var i;\n    var frame;\n\n    if (!config) {\n      //  Use every frame in the atlas?\n      frames = texture.getFrameNames();\n\n      for (i = 0; i < frames.length; i++) {\n        out.push({\n          key: key,\n          frame: frames[i]\n        });\n      }\n    } else if (Array.isArray(frames)) {\n      //  Have they provided their own custom frame sequence array?\n      for (i = 0; i < frames.length; i++) {\n        frame = prefix + Pad(frames[i], zeroPad, '0', 1) + suffix;\n\n        if (texture.has(frame)) {\n          out.push({\n            key: key,\n            frame: frame\n          });\n        }\n      }\n    } else {\n      for (i = start; i !== end; i += diff) {\n        frame = prefix + Pad(i, zeroPad, '0', 1) + suffix;\n\n        if (texture.has(frame)) {\n          out.push({\n            key: key,\n            frame: frame\n          });\n        }\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Generate an array of {@link Phaser.Animations.Types.AnimationFrame} objects from a texture key and configuration object.\r\n   *\r\n   * Generates objects with numbered frame names, as configured by the given {@link Phaser.Animations.Types.GenerateFrameNumbers}.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#generateFrameNumbers\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key for the texture containing the animation frames.\r\n   * @param {Phaser.Animations.Types.GenerateFrameNumbers} config - The configuration object for the animation frames.\r\n   *\r\n   * @return {Phaser.Animations.Types.AnimationFrame[]} The array of {@link Phaser.Animations.Types.AnimationFrame} objects.\r\n   */\n  generateFrameNumbers: function generateFrameNumbers(key, config) {\n    var startFrame = GetValue(config, 'start', 0);\n    var endFrame = GetValue(config, 'end', -1);\n    var firstFrame = GetValue(config, 'first', false);\n    var out = GetValue(config, 'outputArray', []);\n    var frames = GetValue(config, 'frames', false);\n    var texture = this.textureManager.get(key);\n\n    if (!texture) {\n      return out;\n    }\n\n    if (firstFrame && texture.has(firstFrame)) {\n      out.push({\n        key: key,\n        frame: firstFrame\n      });\n    }\n\n    var i; //  Have they provided their own custom frame sequence array?\n\n    if (Array.isArray(frames)) {\n      for (i = 0; i < frames.length; i++) {\n        if (texture.has(frames[i])) {\n          out.push({\n            key: key,\n            frame: frames[i]\n          });\n        }\n      }\n    } else {\n      //  No endFrame then see if we can get it\n      if (endFrame === -1) {\n        endFrame = texture.frameTotal;\n      }\n\n      for (i = startFrame; i <= endFrame; i++) {\n        if (texture.has(i)) {\n          out.push({\n            key: key,\n            frame: i\n          });\n        }\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Get an Animation.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the Animation to retrieve.\r\n   *\r\n   * @return {Phaser.Animations.Animation} The Animation.\r\n   */\n  get: function get(key) {\n    return this.anims.get(key);\n  },\n\n  /**\r\n   * Load an Animation into a Game Object's Animation Component.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#load\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to load the animation into.\r\n   * @param {string} key - The key of the animation to load.\r\n   * @param {(string|integer)} [startFrame] - The name of a start frame to set on the loaded animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object with the animation loaded into it.\r\n   */\n  load: function load(child, key, startFrame) {\n    var anim = this.get(key);\n\n    if (anim) {\n      anim.load(child, startFrame);\n    }\n\n    return child;\n  },\n\n  /**\r\n   * Pause all animations.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#pauseAll\r\n   * @fires Phaser.Animations.Events#PAUSE_ALL\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  pauseAll: function pauseAll() {\n    if (!this.paused) {\n      this.paused = true;\n      this.emit(Events.PAUSE_ALL);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Play an animation on the given Game Objects that have an Animation Component.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#play\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to play on the Game Object.\r\n   * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} child - The Game Objects to play the animation on.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  play: function play(key, child) {\n    if (!Array.isArray(child)) {\n      child = [child];\n    }\n\n    var anim = this.get(key);\n\n    if (!anim) {\n      return;\n    }\n\n    for (var i = 0; i < child.length; i++) {\n      child[i].anims.play(key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Remove an animation.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#remove\r\n   * @fires Phaser.Animations.Events#REMOVE_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to remove.\r\n   *\r\n   * @return {Phaser.Animations.Animation} [description]\r\n   */\n  remove: function remove(key) {\n    var anim = this.get(key);\n\n    if (anim) {\n      this.emit(Events.REMOVE_ANIMATION, key, anim);\n      this.anims.delete(key);\n    }\n\n    return anim;\n  },\n\n  /**\r\n   * Resume all paused animations.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#resumeAll\r\n   * @fires Phaser.Animations.Events#RESUME_ALL\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  resumeAll: function resumeAll() {\n    if (this.paused) {\n      this.paused = false;\n      this.emit(Events.RESUME_ALL);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Takes an array of Game Objects that have an Animation Component and then\r\n   * starts the given animation playing on them, each one offset by the\r\n   * `stagger` amount given to this method.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#staggerPlay\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n   *\r\n   * @param {string} key - The key of the animation to play on the Game Objects.\r\n   * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} children - An array of Game Objects to play the animation on. They must have an Animation Component.\r\n   * @param {number} [stagger=0] - The amount of time, in milliseconds, to offset each play time by.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  staggerPlay: function staggerPlay(key, children, stagger) {\n    if (stagger === undefined) {\n      stagger = 0;\n    }\n\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n\n    var anim = this.get(key);\n\n    if (!anim) {\n      return;\n    }\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].anims.delayedPlay(stagger * i, key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Get the animation data as javascript object by giving key, or get the data of all animations as array of objects, if key wasn't provided.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - [description]\r\n   *\r\n   * @return {Phaser.Animations.Types.JSONAnimations} [description]\r\n   */\n  toJSON: function toJSON(key) {\n    if (key !== undefined && key !== '') {\n      return this.anims.get(key).toJSON();\n    } else {\n      var output = {\n        anims: [],\n        globalTimeScale: this.globalTimeScale\n      };\n      this.anims.each(function (animationKey, animation) {\n        output.anims.push(animation.toJSON());\n      });\n      return output;\n    }\n  },\n\n  /**\r\n   * Destroy this Animation Manager and clean up animation definitions and references to other objects.\r\n   * This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.anims.clear();\n    this.textureManager = null;\n    this.game = null;\n  }\n});\nmodule.exports = AnimationManager;","map":null,"metadata":{},"sourceType":"script"}