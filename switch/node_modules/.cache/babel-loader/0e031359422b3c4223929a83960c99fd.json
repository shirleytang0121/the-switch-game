{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @callback EachSetCallback<E>\r\n *\r\n * @param {E} entry - The Set entry.\r\n * @param {number} index - The index of the entry within the Set.\r\n *\r\n * @return {?boolean} The callback result.\r\n */\n\n/**\r\n * @classdesc\r\n * A Set is a collection of unique elements.\r\n *\r\n * @class Set\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[]} - [elements]\r\n *\r\n * @param {Array.<*>} [elements] - An optional array of elements to insert into this Set.\r\n */\n\n\nvar Set = new Class({\n  initialize: function Set(elements) {\n    /**\r\n     * The entries of this Set. Stored internally as an array.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.Set#entries\r\n     * @type {Array.<*>}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n    this.entries = [];\n\n    if (Array.isArray(elements)) {\n      for (var i = 0; i < elements.length; i++) {\n        this.set(elements[i]);\n      }\n    }\n  },\n\n  /**\r\n   * Inserts the provided value into this Set. If the value is already contained in this Set this method will have no effect.\r\n   *\r\n   * @method Phaser.Structs.Set#set\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {*} value - The value to insert into this Set.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  set: function set(value) {\n    if (this.entries.indexOf(value) === -1) {\n      this.entries.push(value);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Get an element of this Set which has a property of the specified name, if that property is equal to the specified value.\r\n   * If no elements of this Set satisfy the condition then this method will return `null`.\r\n   *\r\n   * @method Phaser.Structs.Set#get\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value,$return]\r\n   *\r\n   * @param {string} property - The property name to check on the elements of this Set.\r\n   * @param {*} value - The value to check for.\r\n   *\r\n   * @return {*} The first element of this Set that meets the required condition, or `null` if this Set contains no elements that meet the condition.\r\n   */\n  get: function get(property, value) {\n    for (var i = 0; i < this.entries.length; i++) {\n      var entry = this.entries[i];\n\n      if (entry[property] === value) {\n        return entry;\n      }\n    }\n  },\n\n  /**\r\n   * Returns an array containing all the values in this Set.\r\n   *\r\n   * @method Phaser.Structs.Set#getArray\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} An array containing all the values in this Set.\r\n   */\n  getArray: function getArray() {\n    return this.entries.slice(0);\n  },\n\n  /**\r\n   * Removes the given value from this Set if this Set contains that value.\r\n   *\r\n   * @method Phaser.Structs.Set#delete\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {*} value - The value to remove from the Set.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  delete: function _delete(value) {\n    var index = this.entries.indexOf(value);\n\n    if (index > -1) {\n      this.entries.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Dumps the contents of this Set to the console via `console.group`.\r\n   *\r\n   * @method Phaser.Structs.Set#dump\r\n   * @since 3.0.0\r\n   */\n  dump: function dump() {\n    // eslint-disable-next-line no-console\n    console.group('Set');\n\n    for (var i = 0; i < this.entries.length; i++) {\n      var entry = this.entries[i];\n      console.log(entry);\n    } // eslint-disable-next-line no-console\n\n\n    console.groupEnd();\n  },\n\n  /**\r\n   * Passes each value in this Set to the given callback.\r\n   * Use this function when you know this Set will be modified during the iteration, otherwise use `iterate`.\r\n   *\r\n   * @method Phaser.Structs.Set#each\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachSetCallback.<T>} - [callback]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n   * @param {*} [callbackScope] - The scope of the callback.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  each: function each(callback, callbackScope) {\n    var i;\n    var temp = this.entries.slice();\n    var len = temp.length;\n\n    if (callbackScope) {\n      for (i = 0; i < len; i++) {\n        if (callback.call(callbackScope, temp[i], i) === false) {\n          break;\n        }\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        if (callback(temp[i], i) === false) {\n          break;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Passes each value in this Set to the given callback.\r\n   * For when you absolutely know this Set won't be modified during the iteration.\r\n   *\r\n   * @method Phaser.Structs.Set#iterate\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachSetCallback.<T>} - [callback]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n   * @param {*} [callbackScope] - The scope of the callback.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  iterate: function iterate(callback, callbackScope) {\n    var i;\n    var len = this.entries.length;\n\n    if (callbackScope) {\n      for (i = 0; i < len; i++) {\n        if (callback.call(callbackScope, this.entries[i], i) === false) {\n          break;\n        }\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        if (callback(this.entries[i], i) === false) {\n          break;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Goes through each entry in this Set and invokes the given function on them, passing in the arguments.\r\n   *\r\n   * @method Phaser.Structs.Set#iterateLocal\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {string} callbackKey - The key of the function to be invoked on each Set entry.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  iterateLocal: function iterateLocal(callbackKey) {\n    var i;\n    var args = [];\n\n    for (i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var len = this.entries.length;\n\n    for (i = 0; i < len; i++) {\n      var entry = this.entries[i];\n      entry[callbackKey].apply(entry, args);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Clears this Set so that it no longer contains any values.\r\n   *\r\n   * @method Phaser.Structs.Set#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  clear: function clear() {\n    this.entries.length = 0;\n    return this;\n  },\n\n  /**\r\n   * Returns `true` if this Set contains the given value, otherwise returns `false`.\r\n   *\r\n   * @method Phaser.Structs.Set#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {*} value - The value to check for in this Set.\r\n   *\r\n   * @return {boolean} `true` if the given value was found in this Set, otherwise `false`.\r\n   */\n  contains: function contains(value) {\n    return this.entries.indexOf(value) > -1;\n  },\n\n  /**\r\n   * Returns a new Set containing all values that are either in this Set or in the Set provided as an argument.\r\n   *\r\n   * @method Phaser.Structs.Set#union\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to perform the union with.\r\n   *\r\n   * @return {Phaser.Structs.Set} A new Set containing all the values in this Set and the Set provided as an argument.\r\n   */\n  union: function union(set) {\n    var newSet = new Set();\n    set.entries.forEach(function (value) {\n      newSet.set(value);\n    });\n    this.entries.forEach(function (value) {\n      newSet.set(value);\n    });\n    return newSet;\n  },\n\n  /**\r\n   * Returns a new Set that contains only the values which are in this Set and that are also in the given Set.\r\n   *\r\n   * @method Phaser.Structs.Set#intersect\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to intersect this set with.\r\n   *\r\n   * @return {Phaser.Structs.Set} The result of the intersection, as a new Set.\r\n   */\n  intersect: function intersect(set) {\n    var newSet = new Set();\n    this.entries.forEach(function (value) {\n      if (set.contains(value)) {\n        newSet.set(value);\n      }\n    });\n    return newSet;\n  },\n\n  /**\r\n   * Returns a new Set containing all the values in this Set which are *not* also in the given Set.\r\n   *\r\n   * @method Phaser.Structs.Set#difference\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to perform the difference with.\r\n   *\r\n   * @return {Phaser.Structs.Set} A new Set containing all the values in this Set that are not also in the Set provided as an argument to this method.\r\n   */\n  difference: function difference(set) {\n    var newSet = new Set();\n    this.entries.forEach(function (value) {\n      if (!set.contains(value)) {\n        newSet.set(value);\n      }\n    });\n    return newSet;\n  },\n\n  /**\r\n   * The size of this Set. This is the number of entries within it.\r\n   * Changing the size will truncate the Set if the given value is smaller than the current size.\r\n   * Increasing the size larger than the current size has no effect.\r\n   *\r\n   * @name Phaser.Structs.Set#size\r\n   * @type {integer}\r\n   * @since 3.0.0\r\n   */\n  size: {\n    get: function get() {\n      return this.entries.length;\n    },\n    set: function set(value) {\n      if (value < this.entries.length) {\n        return this.entries.length = value;\n      } else {\n        return this.entries.length;\n      }\n    }\n  }\n});\nmodule.exports = Set;","map":null,"metadata":{},"sourceType":"script"}