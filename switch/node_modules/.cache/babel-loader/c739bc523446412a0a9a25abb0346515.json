{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * @namespace Phaser.Renderer.WebGL.Utils\r\n * @since 3.0.0\r\n */\nmodule.exports = {\n  /**\r\n   * Packs four floats on a range from 0.0 to 1.0 into a single Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintFromFloats\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} r - Red component in a range from 0.0 to 1.0 \r\n   * @param {number} g - Green component in a range from 0.0 to 1.0\r\n   * @param {number} b - Blue component in a range from 0.0 to 1.0\r\n   * @param {number} a - Alpha component in a range from 0.0 to 1.0\r\n   * \r\n   * @return {number} [description]\r\n   */\n  getTintFromFloats: function getTintFromFloats(r, g, b, a) {\n    var ur = (r * 255.0 | 0) & 0xFF;\n    var ug = (g * 255.0 | 0) & 0xFF;\n    var ub = (b * 255.0 | 0) & 0xFF;\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | ur << 16 | ug << 8 | ub) >>> 0;\n  },\n\n  /**\r\n   * Packs a Uint24, representing RGB components, with a Float32, representing\r\n   * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - Uint24 representing RGB components\r\n   * @param {number} a - Float32 representing Alpha component\r\n   * \r\n   * @return {number} Packed RGBA as Uint32\r\n   */\n  getTintAppendFloatAlpha: function getTintAppendFloatAlpha(rgb, a) {\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | rgb) >>> 0;\n  },\n\n  /**\r\n   * Packs a Uint24, representing RGB components, with a Float32, representing\r\n   * the alpha component, with a range between 0.0 and 1.0 and return a \r\n   * swizzled Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - Uint24 representing RGB components\r\n   * @param {number} a - Float32 representing Alpha component\r\n   * \r\n   * @return {number} Packed RGBA as Uint32\r\n   */\n  getTintAppendFloatAlphaAndSwap: function getTintAppendFloatAlphaAndSwap(rgb, a) {\n    var ur = (rgb >> 16 | 0) & 0xff;\n    var ug = (rgb >> 8 | 0) & 0xff;\n    var ub = (rgb | 0) & 0xff;\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | ub << 16 | ug << 8 | ur) >>> 0;\n  },\n\n  /**\r\n   * Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getFloatsFromUintRGB\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - RGB packed as a Uint24\r\n   * \r\n   * @return {array} Array of floats representing each component as a float \r\n   */\n  getFloatsFromUintRGB: function getFloatsFromUintRGB(rgb) {\n    var ur = (rgb >> 16 | 0) & 0xff;\n    var ug = (rgb >> 8 | 0) & 0xff;\n    var ub = (rgb | 0) & 0xff;\n    return [ur / 255.0, ug / 255.0, ub / 255.0];\n  },\n\n  /**\r\n   * Counts how many attributes of 32 bits a vertex has\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getComponentCount\r\n   * @since 3.0.0\r\n   * \r\n   * @param {array} attributes - Array of attributes \r\n   * @param {WebGLRenderingContext} glContext - WebGLContext used for check types\r\n   * \r\n   * @return {number} Count of 32 bit attributes in vertex\r\n   */\n  getComponentCount: function getComponentCount(attributes, glContext) {\n    var count = 0;\n\n    for (var index = 0; index < attributes.length; ++index) {\n      var element = attributes[index];\n\n      if (element.type === glContext.FLOAT) {\n        count += element.size;\n      } else {\n        count += 1; // We'll force any other type to be 32 bit. for now\n      }\n    }\n\n    return count;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}