{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Documents\\\\GitHub\\\\the-switch-game\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Phaser from 'phaser';\nimport { Blank } from '../objects/Blank';\nimport { Player } from '../objects/Player';\nimport { Card } from '../objects/Card';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport Amplify, { Auth } from 'aws-amplify';\nimport * as mutations from '../../../graphql/mutations';\nimport * as subscriptions from '../../../graphql/subscriptions';\nimport * as queries from '../../../graphql/queries';\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameBoard, _Phaser$Scene);\n\n  function GameBoard() {\n    _classCallCheck(this, GameBoard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, {\n      key: 'GameBoard'\n    }));\n  }\n\n  _createClass(GameBoard, [{\n    key: \"create\",\n    value: function create() {\n      this.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]; //display board\n\n      var boardbg = this.add.image(400, 80, 'boardbg');\n      boardbg.setOrigin(0, 0).setScale(2.8, 2.8);\n      var x_pos1 = 0;\n      var y_pos1 = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          this.blank = new Blank(this, 405 + x_pos1, 85 + y_pos1, 'blank').data.set('blank', 53);\n          x_pos1 += 65;\n        }\n\n        y_pos1 += 65;\n        x_pos1 = 0;\n      }\n\n      var card_number = 0;\n      var nums = [],\n          ranNums = [];\n\n      for (var k = 0; k < 52; k++) {\n        nums.push(k);\n      }\n\n      var m = nums.length,\n          n = 0;\n\n      while (m--) {\n        n = Math.floor(Math.random() * (m + 1));\n        ranNums.push(nums[n]);\n        nums.splice(n, 1);\n      } //display board\n\n\n      var x_pos = 0;\n      var y_pos = 0;\n\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < 6; j++) {\n          var generatecard = ranNums[card_number];\n          this.card = new Card(this, 405 + x_pos, 85 + y_pos, 'cards', generatecard).setOrigin(0, 0).setInteractive().setDataEnabled();\n          this.card.data.set('card_number', card_number);\n          x_pos += 65;\n          card_number++;\n        }\n\n        y_pos += 65;\n        x_pos = 0;\n      }\n\n      var player1 = new Player(this, 405, 85, 'chess_red', 1).setOrigin(0, 0);\n      var player2 = new Player(this, 730, 85, 'chess_blue', 2).setOrigin(0, 0);\n      var player = [];\n      player.push(player1);\n      player.push(player2); //need user name array\n\n      var userName = ['switch', 'noviah'];\n      var seat = 0;\n      this.takeround(seat, player, userName);\n    }\n  }, {\n    key: \"takeround\",\n    value: function takeround(seat, player, userName) {\n      while (seat < 4) {\n        this.checkUserInfo(userName[seat], player[seat]);\n      }\n    } //move card\n\n  }, {\n    key: \"decideMove\",\n    value: function decideMove(x, y, player) {\n      player.setX(x);\n      player.setY(y);\n    } //move the card to the side\n\n  }, {\n    key: \"handlePlayer1Card\",\n    value: function handlePlayer1Card(card, arrangepostion) {\n      card.setX(10 + arrangepostion);\n      card.setY(40);\n      card.setScale(0.1, 0.1);\n    }\n  }, {\n    key: \"handlePlaye2Card\",\n    value: function handlePlaye2Card() {}\n  }, {\n    key: \"handlePlayer3Card\",\n    value: function handlePlayer3Card() {} //update movement to the database\n\n  }, {\n    key: \"updateCardData\",\n    value: function () {\n      var _updateCardData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(card, x, y) {\n        var cardV, xV, yV, thething, newThing;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cardV = card;\n                console.log(cardV);\n                xV = x;\n                console.log(\"x : \" + xV);\n                yV = y;\n                console.log(\"y : \" + yV);\n                thething = {\n                  whichCard: cardV,\n                  x: xV,\n                  y: yV\n                };\n                _context.next = 9;\n                return API.graphql(graphqlOperation(mutations.createTest1, {\n                  input: thething\n                }));\n\n              case 9:\n                newThing = _context.sent;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function updateCardData(_x, _x2, _x3) {\n        return _updateCardData.apply(this, arguments);\n      }\n\n      return updateCardData;\n    }() //check if the login user is in his round\n\n  }, {\n    key: \"checkUserInfo\",\n    value: function checkUserInfo(name, player) {\n      var _this = this;\n\n      Auth.currentUserInfo().then(function (userInfo) {\n        var username = userInfo.username;\n\n        if (name == username) {\n          _this.clickedBox(player);\n        } else {\n          console.log('update');\n        }\n      });\n    } //click the card and make it move\n\n  }, {\n    key: \"clickedBox\",\n    value: function clickedBox(player) {\n      var _this2 = this;\n\n      var arrangepostion = 0;\n      this.input.on('gameobjectdown', function (pointer, gameObject) {\n        for (var i = 0; i < 36; i++) {\n          if (_this2.gameBoard[i] == i) {\n            if (gameObject.x == player.x || gameObject.y == player.y) {\n              _this2.decideMove(gameObject.x, gameObject.y, player);\n\n              if (gameObject.data.get('card_number') == i) {\n                _this2.handlePlayer1Card(gameObject, arrangepostion);\n\n                arrangepostion += 20;\n\n                _this2.updateCardData(3, player.x, player.y);\n              } else if (gameObject.data.get('blank')) {\n                _this2.updateCardData(-1, player.x, player.y);\n\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {}\n  }]);\n\n  return GameBoard;\n}(Phaser.Scene);","map":{"version":3,"sources":["C:\\Users\\shirl\\Documents\\GitHub\\the-switch-game\\switch\\src\\Pages\\phaser\\scenes\\GameBoard.js"],"names":["Phaser","Blank","Player","Card","API","graphqlOperation","Amplify","Auth","mutations","subscriptions","queries","GameBoard","key","gameBoard","boardbg","add","image","setOrigin","setScale","x_pos1","y_pos1","i","j","blank","data","set","card_number","nums","ranNums","k","push","m","length","n","Math","floor","random","splice","x_pos","y_pos","generatecard","card","setInteractive","setDataEnabled","player1","player2","player","userName","seat","takeround","checkUserInfo","x","y","setX","setY","arrangepostion","cardV","console","log","xV","yV","thething","whichCard","graphql","createTest1","input","newThing","name","currentUserInfo","then","userInfo","username","clickedBox","on","pointer","gameObject","decideMove","get","handlePlayer1Card","updateCardData","time","delta","Scene"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nimport {Blank} from '../objects/Blank';\r\nimport {Player} from '../objects/Player';\r\nimport {Card} from '../objects/Card';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport * as mutations from '../../../graphql/mutations';\r\nimport * as subscriptions from '../../../graphql/subscriptions'\r\nimport * as queries from '../../../graphql/queries'\r\n\r\n\r\nexport class GameBoard extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: 'GameBoard',\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\r\n\r\n\tcreate() {\r\n\t\tthis.gameBoard = [0,1,2,3,4,5,6,7,8,9,10,\r\n\t\t\t11,12,13,14,15,16,17,18,19,20,21,22,\r\n\t\t\t23,24,25,26,27,28,29,30,31,32,33,34,35,36];\r\n\t\t \r\n        //display board\r\n\t\tlet boardbg = this.add.image(400, 80, 'boardbg');\r\n\t\tboardbg.setOrigin(0, 0).setScale(2.8,2.8);\r\n\t\tlet x_pos1=0;\r\n\t\tlet y_pos1=0;\r\n\t\tfor(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   this.blank=new Blank(this,405+x_pos1,85+y_pos1,'blank').data.set('blank', 53);\r\n\t\t\t\tx_pos1+=65;\r\n\t\t\t }\r\n\t\t\t   y_pos1+=65;\r\n\t\t\t   x_pos1=0;\r\n\t\t   }\r\n\t\t   let card_number=0;\r\n\t\t   let nums=[],\r\n\t\t\t   ranNums = [];\r\n\t\t  for(var k=0;k<52;k++){\r\n\t\t   nums.push(k);\r\n\t\t\t}\r\n\t\t   let m = nums.length,\r\n\t\t\t   n = 0;\r\n\t   while (m--) {\r\n\t\t   n = Math.floor(Math.random() * (m+1));\r\n\t\t   ranNums.push(nums[n]);\r\n\t\t   nums.splice(n,1);\r\n\t   }\r\n\t   //display board\r\n\t\t\tlet x_pos=0;\r\n\t\t\tlet y_pos=0;  \r\n\t\t   for(var i=0;i<6;i++){\r\n\t\t\tfor(var j=0 ;j<6;j++){\r\n\t\t\t   var generatecard=ranNums[card_number]\r\n\t\t\t   this.card=new Card(this,405+x_pos,85+y_pos,'cards',generatecard).setOrigin(0, 0).setInteractive().setDataEnabled()\r\n\t\t\t   this.card.data.set('card_number', card_number);\r\n\t\t\t\tx_pos+=65;\r\n\t\t\t\tcard_number++;\r\n\t\t\t }\r\n\t\t\t   y_pos+=65;\r\n\t\t\t   x_pos=0;\r\n\t\t   }\r\n\t\t\t let player1=new Player(this,405,85,'chess_red',1).setOrigin(0,0)\r\n\t\t\t let player2=new Player(this,730,85,'chess_blue',2).setOrigin(0,0)\r\n\r\n\t\t\t let player=[]\r\n\t\t\t player.push(player1)\r\n\t\t\t player.push(player2)\r\n\r\n\t\t//need user name array\r\n\t\tlet userName=['switch','noviah']\r\n\r\n\t\tvar seat=0\r\n\r\n\t\t\r\n\t\tthis.takeround(seat,player,userName)\r\n\t\t\t \r\n\t\t   \r\n\t}\r\n\r\n\ttakeround(seat,player,userName){\r\n\t\twhile(seat<4){\r\n\t\t\tthis.checkUserInfo(userName[seat],player[seat])\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t//move card\r\n\tdecideMove(x,y,player){\r\n\t\tplayer.setX(x)\r\n\t\tplayer.setY(y)\r\n\t}\r\n\r\n\t//move the card to the side\r\n\thandlePlayer1Card(card,arrangepostion){\r\n\t\tcard.setX(10+arrangepostion);\r\n\t\tcard.setY(40);\r\n\t\tcard.setScale(0.1,0.1)\r\n\t}\r\n\r\n\thandlePlaye2Card(){\r\n\t\t\r\n\t}\r\n\r\n\thandlePlayer3Card(){\r\n\t\t\r\n\t}\r\n\r\n\t//update movement to the database\r\n\tasync updateCardData(card,x,y){\r\n\t\tconst cardV = card;\r\n\t\tconsole.log(cardV)\r\n\t\tconst xV =x;\r\n\t\tconsole.log(\"x : \"+xV)\r\n\t\tconst yV = y;\r\n\t\tconsole.log(\"y : \"+yV)\r\n\t\tconst thething = {\r\n\t\t\t\t\twhichCard : cardV,\r\n\t\t\t\t\t\t\tx : xV,\r\n\t\t\t\t\t\t\ty : yV\r\n\t\t\t\t\t\t};\r\n\t const newThing = await API.graphql(graphqlOperation(mutations.createTest1, {input: thething}));\r\n\t}\r\n\t\r\n\t//check if the login user is in his round\r\n\tcheckUserInfo(name,player) {\r\n    Auth.currentUserInfo().then((userInfo) => {\r\n      const { username } = userInfo;\r\n      if(name==username){\r\n\t\t\t\tthis.clickedBox(player)\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log('update')\r\n\t\t\t}\r\n    })\r\n  }\r\n\r\n\r\n\r\n\t//click the card and make it move\r\n\tclickedBox(player){\r\n\t\tvar arrangepostion=0;\r\n\t\tthis.input.on('gameobjectdown', (pointer, gameObject) => {\r\n\t\t\tfor(var i=0;i<36;i++){\r\n\t\t\t\tif(this.gameBoard[i] == i ){\r\n\t\t\t\t\tif(gameObject.x==player.x||gameObject.y==player.y){\r\n\t\t\t\t\t\tthis.decideMove(gameObject.x,gameObject.y,player)\r\n\t\t\t\t\t\tif(gameObject.data.get('card_number') == i){\r\n\t\t\t\t\t\t\tthis.handlePlayer1Card(gameObject,arrangepostion)\r\n\t\t\t\t\t\t\tarrangepostion += 20\r\n\t\t\t\t\t\t\tthis.updateCardData(3,player.x,player.y)\r\n\t\t\t\t\t\t}else if(gameObject.data.get('blank')){\r\n\t\t\t\t\t\t\tthis.updateCardData(-1,player.x,player.y)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t}\t\r\n\t\r\n\t}\r\n\r\n\t\t\t\r\n\t});\r\n\r\n}\r\n\t\r\n\tupdate(time, delta) {\r\n\t\t\r\n\t\t\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}