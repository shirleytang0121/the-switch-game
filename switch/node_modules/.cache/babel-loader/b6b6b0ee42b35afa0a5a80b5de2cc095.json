{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar IsInLayerBounds = require('./IsInLayerBounds');\n/**\r\n * Gets a tile at the given tile coordinates from the given layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n * were invalid.\r\n */\n\n\nvar GetTileAt = function GetTileAt(tileX, tileY, nonNull, layer) {\n  if (nonNull === undefined) {\n    nonNull = false;\n  }\n\n  if (IsInLayerBounds(tileX, tileY, layer)) {\n    var tile = layer.data[tileY][tileX] || null;\n\n    if (tile === null) {\n      return null;\n    } else if (tile.index === -1) {\n      return nonNull ? tile : null;\n    } else {\n      return tile;\n    }\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = GetTileAt;","map":null,"metadata":{},"sourceType":"script"}