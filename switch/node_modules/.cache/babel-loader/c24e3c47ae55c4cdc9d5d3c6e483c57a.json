{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar Line = require('../../geom/line/Line');\n/**\r\n * @classdesc\r\n * The Shape Game Object is a base class for the various different shapes, such as the Arc, Star or Polygon.\r\n * You cannot add a Shape directly to your Scene, it is meant as a base for your own custom Shape classes.\r\n *\r\n * @class Shape\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {string} [type] - The internal type of the Shape.\r\n * @param {any} [data] - The data of the source shape geometry, if any.\r\n */\n\n\nvar Shape = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScaleMode, Components.ScrollFactor, Components.Transform, Components.Visible],\n  initialize: function Shape(scene, type, data) {\n    if (type === undefined) {\n      type = 'Shape';\n    }\n\n    GameObject.call(this, scene, type);\n    /**\r\n     * The source Shape data. Typically a geometry object.\r\n     * You should not manipulate this directly.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#data\r\n     * @type {any}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.geom = data;\n    /**\r\n     * Holds the polygon path data for filled rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#pathData\r\n     * @type {number[]}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.pathData = [];\n    /**\r\n     * Holds the earcut polygon path index data for filled rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#pathIndexes\r\n     * @type {integer[]}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.pathIndexes = [];\n    /**\r\n     * The fill color used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#fillColor\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillColor = 0xffffff;\n    /**\r\n     * The fill alpha value used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#fillAlpha\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillAlpha = 1;\n    /**\r\n     * The stroke color used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#strokeColor\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.strokeColor = 0xffffff;\n    /**\r\n     * The stroke alpha value used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#strokeAlpha\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.strokeAlpha = 1;\n    /**\r\n     * The stroke line width used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#lineWidth\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.lineWidth = 1;\n    /**\r\n     * Controls if this Shape is filled or not.\r\n     * Note that some Shapes do not support being filled (such as Line shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#isFilled\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.isFilled = false;\n    /**\r\n     * Controls if this Shape is stroked or not.\r\n     * Note that some Shapes do not support being stroked (such as Iso Box shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#isStroked\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.isStroked = false;\n    /**\r\n     * Controls if this Shape path is closed during rendering when stroked.\r\n     * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#closePath\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.closePath = true;\n    /**\r\n     * Private internal value.\r\n     * A Line used when parsing internal path data to avoid constant object re-creation.\r\n     *\r\n     * @name Phaser.GameObjects.Curve#_tempLine\r\n     * @type {Phaser.Geom.Line}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._tempLine = new Line();\n    this.initPipeline();\n  },\n\n  /**\r\n   * Sets the fill color and alpha for this Shape.\r\n   * \r\n   * If you wish for the Shape to not be filled then call this method with no arguments, or just set `isFilled` to `false`.\r\n   * \r\n   * Note that some Shapes do not support fill colors, such as the Line shape.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setFillStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [color] - The color used to fill this shape. If not provided the Shape will not be filled.\r\n   * @param {number} [alpha=1] - The alpha value used when filling this shape, if a fill color is given.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFillStyle: function setFillStyle(color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    if (color === undefined) {\n      this.isFilled = false;\n    } else {\n      this.fillColor = color;\n      this.fillAlpha = alpha;\n      this.isFilled = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the stroke color and alpha for this Shape.\r\n   * \r\n   * If you wish for the Shape to not be stroked then call this method with no arguments, or just set `isStroked` to `false`.\r\n   * \r\n   * Note that some Shapes do not support being stroked, such as the Iso Box shape.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setStrokeStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [lineWidth] - The width of line to stroke with. If not provided or undefined the Shape will not be stroked.\r\n   * @param {number} [color] - The color used to stroke this shape. If not provided the Shape will not be stroked.\r\n   * @param {number} [alpha=1] - The alpha value used when stroking this shape, if a stroke color is given.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setStrokeStyle: function setStrokeStyle(lineWidth, color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    if (lineWidth === undefined) {\n      this.isStroked = false;\n    } else {\n      this.lineWidth = lineWidth;\n      this.strokeColor = color;\n      this.strokeAlpha = alpha;\n      this.isStroked = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets if this Shape path is closed during rendering when stroked.\r\n   * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setClosePath\r\n   * @since 3.13.0\r\n   * \r\n   * @param {boolean} value - Set to `true` if the Shape should be closed when stroked, otherwise `false`.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setClosePath: function setClosePath(value) {\n    this.closePath = value;\n    return this;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#preDestroy\r\n   * @protected\r\n   * @since 3.13.0\r\n   */\n  preDestroy: function preDestroy() {\n    this.geom = null;\n    this._tempLine = null;\n    this.pathData = [];\n    this.pathIndexes = [];\n  }\n});\nmodule.exports = Shape;","map":null,"metadata":{},"sourceType":"script"}