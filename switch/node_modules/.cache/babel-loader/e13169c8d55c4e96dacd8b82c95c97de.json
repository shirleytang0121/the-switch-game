{"ast":null,"code":"/**\r\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n*\r\n* @class Axes\r\n*/\nvar Axes = {};\nmodule.exports = Axes;\n\nvar Vector = require('../geometry/Vector');\n\nvar Common = require('../core/Common');\n\n(function () {\n  /**\r\n   * Creates a new set of axes from the given vertices.\r\n   * @method fromVertices\r\n   * @param {vertices} vertices\r\n   * @return {axes} A new axes from the given vertices\r\n   */\n  Axes.fromVertices = function (vertices) {\n    var axes = {}; // find the unique axes, using edge normal gradients\n\n    for (var i = 0; i < vertices.length; i++) {\n      var j = (i + 1) % vertices.length,\n          normal = Vector.normalise({\n        x: vertices[j].y - vertices[i].y,\n        y: vertices[i].x - vertices[j].x\n      }),\n          gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n      gradient = gradient.toFixed(3).toString();\n      axes[gradient] = normal;\n    }\n\n    return Common.values(axes);\n  };\n  /**\r\n   * Rotates a set of axes by the given angle.\r\n   * @method rotate\r\n   * @param {axes} axes\r\n   * @param {number} angle\r\n   */\n\n\n  Axes.rotate = function (axes, angle) {\n    if (angle === 0) return;\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n\n    for (var i = 0; i < axes.length; i++) {\n      var axis = axes[i],\n          xx;\n      xx = axis.x * cos - axis.y * sin;\n      axis.y = axis.x * sin + axis.y * cos;\n      axis.x = xx;\n    }\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}