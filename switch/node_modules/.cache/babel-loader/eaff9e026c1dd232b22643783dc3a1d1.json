{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shirl\\\\Desktop\\\\the-switch-game-master\\\\the-switch-game-master\\\\switch\\\\src\\\\Pages\\\\RoomListPage.js\";\nimport React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\n\nvar RoomListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RoomListPage, _React$Component);\n\n  function RoomListPage() {\n    var _this;\n\n    _classCallCheck(this, RoomListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoomListPage).call(this));\n    _this.state = {\n      roomID: getRoomID(),\n      player_count: getPlayerCount(),\n      status: getStatus(),\n      page: 1\n    };\n    _this.handleProfileClick = _this.handleProfileClick.bind(_assertThisInitialized(_this));\n    _this.handleGameRuleClick = _this.handleGameRuleClick.bind(_assertThisInitialized(_this));\n    _this.handleRoomClick = _this.handleRoomClick.bind(_assertThisInitialized(_this));\n    _this.handlePrevClick = _this.handlePrevClick.bind(_assertThisInitialized(_this));\n    _this.handleNextClick = _this.handleNextClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RoomListPage, [{\n    key: \"handleProfileClick\",\n    value: function handleProfileClick(e) {\n      e.preventDefault();\n      this.props.history.push('/my-account');\n    }\n  }, {\n    key: \"handleGameRuleClick\",\n    value: function handleGameRuleClick(e) {\n      e.preventDefault();\n      this.props.history.push('/game-rule');\n    } //user allowed to enter the room only when the status of the room is not 'playing'\n\n  }, {\n    key: \"handleRoomClick\",\n    value: function handleRoomClick(e, i) {\n      if (this.state.status[i] != 'playing') {\n        this.props.history.push('/room');\n      } else {\n        alert('This room is full. Please select to enter another room.');\n      }\n    } //render the room button only when the room id is available\n\n  }, {\n    key: \"renderRoom\",\n    value: function renderRoom(i) {\n      var _this2 = this;\n\n      if (this.state.roomID[i]) {\n        return React.createElement(\"button\", {\n          className: \"room-button\",\n          onClick: function onClick(e) {\n            _this2.handleRoomClick(e, i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Room \", this.state.roomID[i], \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }), this.state.player_count[i], \"/4 \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }), this.state.status[i]);\n      } else {\n        return React.createElement(\"button\", {\n          className: \"empty-room-button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n      }\n    } //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\n\n  }, {\n    key: \"handlePrevClick\",\n    value: function handlePrevClick(e) {} //after clicked, get the last room id in the current roomID array\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\n    //then, set the roomID array to the new room ids and re-render the components\n\n  }, {\n    key: \"handleNextClick\",\n    value: function handleNextClick(e) {}\n  }, {\n    key: \"handleCreateClick\",\n    value: function handleCreateClick(e) {\n      e.preventDefault();\n\n      for (var i = 0; i < this.state.status.length; i++) {\n        if (this.state.status[i] == 'closed') {\n          var temp_status = this.state.status;\n          temp_status[i] = 'open';\n          var temp_player_count = this.state.player_count;\n          temp_player_count[i] = 1;\n          this.setState({\n            status: temp_status,\n            player_count: temp_player_count\n          });\n          this.props.history.push('/room');\n        }\n      }\n\n      var last_id = this.state.roomID[this.state.roomID.length - 1];\n      var new_id = [].concat(_toConsumableArray(this.state.roomID), [last_id]);\n      this.setState({\n        room_id: new_id,\n        player_count: 1,\n        status: 'open'\n      });\n    }\n  }, {\n    key: \"handleRandomClick\",\n    value: function handleRandomClick(e) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"room-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"room-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"SWITCH\"), React.createElement(\"button\", {\n        className: \"game-rule-button\",\n        onClick: this.handleGameRuleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Game Rule\"), React.createElement(\"button\", {\n        className: \"profile-button\",\n        onClick: this.handleProfileClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"My Account\"), React.createElement(\"img\", {\n        src: img,\n        className: \"room-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"room-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.renderRoom(0), this.renderRoom(1), this.renderRoom(2)), React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.renderRoom(3), this.renderRoom(4), this.renderRoom(5)), React.createElement(\"div\", {\n        className: \"room-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.renderRoom(6), this.renderRoom(7), this.renderRoom(8))), React.createElement(\"button\", {\n        className: \"prev\",\n        onClick: this.handlePrevClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Prev\"), React.createElement(\"button\", {\n        className: \"next\",\n        onClick: this.handleNextClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"room-num\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Room #: \", React.createElement(\"input\", {\n        type: \"number\",\n        className: \"room-num-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"ENTER\",\n        className: \"enter-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"create-button\",\n        onClick: this.handleRoomClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Create New Room\"), React.createElement(\"button\", {\n        className: \"random-button\",\n        onClick: this.handleRoomClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Random Match\"));\n    }\n  }]);\n\n  return RoomListPage;\n}(React.Component); //retrieve all room data from database, excluding those rooms that were closed\n\n\nfunction getRoomID() {\n  return [1, 2, 3, 4, 5, 6, 7, 8, 9];\n}\n\nfunction getPlayerCount() {\n  return [4, 3, 4, 4, 3, 1, 2, 4, 3];\n}\n\nfunction getStatus() {\n  return ['playing', 'open', 'playing', 'open', 'open', 'open', 'playing', 'open', 'open'];\n}\n\nexport default withRouter(RoomListPage);","map":{"version":3,"sources":["C:\\Users\\shirl\\Desktop\\the-switch-game-master\\the-switch-game-master\\switch\\src\\Pages\\RoomListPage.js"],"names":["React","Component","img","RoomPage","GameRulePage","ProfilePage","withRouter","RoomListPage","state","roomID","getRoomID","player_count","getPlayerCount","status","getStatus","page","handleProfileClick","bind","handleGameRuleClick","handleRoomClick","handlePrevClick","handleNextClick","e","preventDefault","props","history","push","i","alert","length","temp_status","temp_player_count","setState","last_id","new_id","room_id","renderRoom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport img from '../img/background.png';\nimport './RoomListPage.css';\nimport RoomPage from './RoomPage';\nimport GameRulePage from './GameRulePage';\nimport ProfilePage from './ProfilePage';\nimport { withRouter } from \"react-router-dom\";\n\nclass RoomListPage extends React.Component {\n    constructor(){\n        super();\n        this.state={\n            roomID: getRoomID(),\n            player_count: getPlayerCount(),\n            status: getStatus(),\n            page: 1\n        };\n        this.handleProfileClick = this.handleProfileClick.bind(this);\n        this.handleGameRuleClick = this.handleGameRuleClick.bind(this);\n        this.handleRoomClick = this.handleRoomClick.bind(this);\n        this.handlePrevClick = this.handlePrevClick.bind(this);\n        this.handleNextClick = this.handleNextClick.bind(this);\n    }\n\n    handleProfileClick(e) {\n        e.preventDefault();\n        this.props.history.push('/my-account');\n    }\n\n    handleGameRuleClick(e) {\n        e.preventDefault();\n        this.props.history.push('/game-rule');\n    }\n    \n    //user allowed to enter the room only when the status of the room is not 'playing'\n    handleRoomClick(e, i) {\n        if(this.state.status[i] != 'playing'){\n            this.props.history.push('/room');\n        }\n        else {\n            alert('This room is full. Please select to enter another room.');\n        }\n    }\n\n    //render the room button only when the room id is available\n    renderRoom(i){\n        if (this.state.roomID[i]){\n            return(\n                <button className=\"room-button\" onClick={(e) => {this.handleRoomClick(e,i)}}>\n                        Room {this.state.roomID[i]} <br />\n                        {this.state.player_count[i]}/4 <br />\n                        {this.state.status[i]}\n                </button>\n            );\n        }\n        else {\n            return(\n                <button className=\"empty-room-button\"></button>\n            )\n        }\n    }\n\n    //after clicked, check if the first room id in the current roomID array is equal to the first room id in the database\n    handlePrevClick(e) {\n\n    }\n\n    //after clicked, get the last room id in the current roomID array\n    //then, filter the database and get 18 room ids that are after the last room id we get previously\n    //then, set the roomID array to the new room ids and re-render the components\n    handleNextClick(e) {\n\n    }\n\n    handleCreateClick(e) {\n        e.preventDefault();\n        for(let i = 0; i < this.state.status.length; i++) {\n            if(this.state.status[i] == 'closed') {\n                let temp_status = this.state.status;\n                temp_status[i] = 'open';\n                let temp_player_count = this.state.player_count;\n                temp_player_count[i] = 1;\n                this.setState({\n                    status: temp_status,\n                    player_count: temp_player_count\n                });\n                this.props.history.push('/room');\n            }\n        }\n        \n        let last_id = this.state.roomID[this.state.roomID.length - 1];\n        let new_id = [...this.state.roomID, last_id];\n        this.setState({\n            room_id: new_id,\n            player_count: 1,\n            status: 'open'\n        });\n    }\n\n    handleRandomClick(e) {\n\n    }\n\n    render() {\n        return (\n            <div className=\"room-list\">\n                <h1 className=\"room-list-header\">SWITCH</h1>\n                    <button className=\"game-rule-button\" onClick={this.handleGameRuleClick}>Game Rule</button>\n                    <button className=\"profile-button\" onClick={this.handleProfileClick}>My Account</button>\n                    <img src={img} className=\"room-img\" />\n                    <div className=\"room-row\">\n                        <div className=\"room-col\">\n                            {this.renderRoom(0)}\n                            {this.renderRoom(1)}\n                            {this.renderRoom(2)}\n                        </div>\n                        <div className=\"room-col\">\n                            {this.renderRoom(3)}\n                            {this.renderRoom(4)}\n                            {this.renderRoom(5)}\n                        </div>\n                        <div className=\"room-col\">\n                            {this.renderRoom(6)}\n                            {this.renderRoom(7)}\n                            {this.renderRoom(8)}\n                        </div>\n                    </div>\n                    <button className=\"prev\" onClick={this.handlePrevClick}>Prev</button>\n                    <button className=\"next\" onClick={this.handleNextClick}>Next</button>\n                    <form>\n                        <label className=\"room-num\">Room #: <input type=\"number\" className=\"room-num-input\" /></label>\n                        <input type=\"submit\" value=\"ENTER\" className=\"enter-button\" />\n                    </form>\n                    <button className=\"create-button\" onClick={this.handleRoomClick}>Create New Room</button>\n                    <button className=\"random-button\" onClick={this.handleRoomClick}>Random Match</button>\n            </div>\n        );\n    }\n}\n\n//retrieve all room data from database, excluding those rooms that were closed\nfunction getRoomID(){\n    return [1,2,3,4,5,6,7,8,9];\n}\n\nfunction getPlayerCount(){\n    return [4,3,4,4,3,1,2,4,3];\n}\n\nfunction getStatus(){\n    return ['playing','open','playing','open','open','open','playing','open','open'];\n}\n\nexport default withRouter(RoomListPage);"]},"metadata":{},"sourceType":"module"}