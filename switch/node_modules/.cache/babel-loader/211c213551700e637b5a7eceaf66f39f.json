{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar NumberTweenBuilder = require('./builders/NumberTweenBuilder');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar TimelineBuilder = require('./builders/TimelineBuilder');\n\nvar TWEEN_CONST = require('./tween/const');\n\nvar TweenBuilder = require('./builders/TweenBuilder');\n/**\r\n * @classdesc\r\n * The Tween Manager is a default Scene Plugin which controls and updates Tweens and Timelines.\r\n *\r\n * @class TweenManager\r\n * @memberof Phaser.Tweens\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Tween Manager.\r\n */\n\n\nvar TweenManager = new Class({\n  initialize: function TweenManager(scene) {\n    /**\r\n     * The Scene which owns this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * The Systems object of the Scene which owns this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * The time scale of the Tween Manager.\r\n     *\r\n     * This value scales the time delta between two frames, thus influencing the speed of time for all Tweens owned by this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * An array of Tweens and Timelines which will be added to the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_add\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._add = [];\n    /**\r\n     * An array of Tweens and Timelines pending to be later added to the Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_pending\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._pending = [];\n    /**\r\n     * An array of Tweens and Timelines which are still incomplete and are actively processed by the Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_active\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._active = [];\n    /**\r\n     * An array of Tweens and Timelines which will be removed from the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_destroy\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._destroy = [];\n    /**\r\n     * The number of Tweens and Timelines which need to be processed by the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_toProcess\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._toProcess = 0;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.on(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n    this.timeScale = 1;\n  },\n\n  /**\r\n   * Create a Tween Timeline and return it, but do NOT add it to the active or pending Tween lists.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#createTimeline\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - The configuration object for the Timeline and its Tweens.\r\n   *\r\n   * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n   */\n  createTimeline: function createTimeline(config) {\n    return TimelineBuilder(this, config);\n  },\n\n  /**\r\n   * Create a Tween Timeline and add it to the active Tween list/\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#timeline\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - The configuration object for the Timeline and its Tweens.\r\n   *\r\n   * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n   */\n  timeline: function timeline(config) {\n    var timeline = TimelineBuilder(this, config);\n\n    if (!timeline.paused) {\n      this._add.push(timeline);\n\n      this._toProcess++;\n    }\n\n    return timeline;\n  },\n\n  /**\r\n   * Create a Tween and return it, but do NOT add it to the active or pending Tween lists.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - The configuration object for the Tween as per {@link Phaser.Tweens.Builders.TweenBuilder}.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Tween object.\r\n   */\n  create: function create(config) {\n    return TweenBuilder(this, config);\n  },\n\n  /**\r\n   * Create a Tween and add it to the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - The configuration object for the Tween as per the {@link Phaser.Tweens.Builders.TweenBuilder}.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Tween.\r\n   */\n  add: function add(config) {\n    var tween = TweenBuilder(this, config);\n\n    this._add.push(tween);\n\n    this._toProcess++;\n    return tween;\n  },\n\n  /**\r\n   * Add an existing tween into the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to add.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n   */\n  existing: function existing(tween) {\n    this._add.push(tween);\n\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Create a Tween and add it to the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#addCounter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - The configuration object for the Number Tween as per the {@link Phaser.Tweens.Builders.NumberTweenBuilder}.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Number Tween.\r\n   */\n  addCounter: function addCounter(config) {\n    var tween = NumberTweenBuilder(this, config);\n\n    this._add.push(tween);\n\n    this._toProcess++;\n    return tween;\n  },\n\n  /**\r\n   * Updates the Tween Manager's internal lists at the start of the frame.\r\n   *\r\n   * This method will return immediately if no changes have been indicated.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#preUpdate\r\n   * @since 3.0.0\r\n   */\n  preUpdate: function preUpdate() {\n    if (this._toProcess === 0) {\n      //  Quick bail\n      return;\n    }\n\n    var list = this._destroy;\n    var active = this._active;\n    var pending = this._pending;\n    var i;\n    var tween; //  Clear the 'destroy' list\n\n    for (i = 0; i < list.length; i++) {\n      tween = list[i]; //  Remove from the 'active' array\n\n      var idx = active.indexOf(tween);\n\n      if (idx === -1) {\n        //  Not in the active array, is it in pending instead?\n        idx = pending.indexOf(tween);\n\n        if (idx > -1) {\n          tween.state = TWEEN_CONST.REMOVED;\n          pending.splice(idx, 1);\n        }\n      } else {\n        tween.state = TWEEN_CONST.REMOVED;\n        active.splice(idx, 1);\n      }\n    }\n\n    list.length = 0; //  Process the addition list\n    //  This stops callbacks and out of sync events from populating the active array mid-way during the update\n\n    list = this._add;\n\n    for (i = 0; i < list.length; i++) {\n      tween = list[i];\n\n      if (tween.state === TWEEN_CONST.PENDING_ADD) {\n        //  Return true if the Tween should be started right away, otherwise false\n        if (tween.init()) {\n          tween.play();\n\n          this._active.push(tween);\n        } else {\n          this._pending.push(tween);\n        }\n      }\n    }\n\n    list.length = 0;\n    this._toProcess = 0;\n  },\n\n  /**\r\n   * Updates all Tweens and Timelines of the Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestamp - The current time in milliseconds.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function update(timestamp, delta) {\n    //  Process active tweens\n    var list = this._active;\n    var tween; //  Scale the delta\n\n    delta *= this.timeScale;\n\n    for (var i = 0; i < list.length; i++) {\n      tween = list[i]; //  If Tween.update returns 'true' then it means it has completed,\n      //  so move it to the destroy list\n\n      if (tween.update(timestamp, delta)) {\n        this._destroy.push(tween);\n\n        this._toProcess++;\n      }\n    }\n  },\n\n  /**\r\n   * Checks if a Tween or Timeline is active and adds it to the Tween Manager at the start of the frame if it isn't.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#makeActive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to check.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n   */\n  makeActive: function makeActive(tween) {\n    if (this._add.indexOf(tween) !== -1 || this._active.indexOf(tween) !== -1) {\n      return;\n    }\n\n    var idx = this._pending.indexOf(tween);\n\n    if (idx !== -1) {\n      this._pending.splice(idx, 1);\n    }\n\n    this._add.push(tween);\n\n    tween.state = TWEEN_CONST.PENDING_ADD;\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Passes all Tweens to the given callback.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#each\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The function to call.\r\n   * @param {object} [scope] - The scope (`this` object) to call the function with.\r\n   * @param {...*} [args] - The arguments to pass into the function. Its first argument will always be the Tween currently being iterated.\r\n   */\n  each: function each(callback, scope) {\n    var args = [null];\n\n    for (var i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (var texture in this.list) {\n      args[0] = this.list[texture];\n      callback.apply(scope, args);\n    }\n  },\n\n  /**\r\n   * Returns an array of all active Tweens and Timelines in the Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getAllTweens\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.Tween[]} A new array containing references to all active Tweens and Timelines.\r\n   */\n  getAllTweens: function getAllTweens() {\n    var list = this._active;\n    var output = [];\n\n    for (var i = 0; i < list.length; i++) {\n      output.push(list[i]);\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Returns the scale of the time delta for all Tweens and Timelines owned by this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getGlobalTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The scale of the time delta, usually 1.\r\n   */\n  getGlobalTimeScale: function getGlobalTimeScale() {\n    return this.timeScale;\n  },\n\n  /**\r\n   * Returns an array of all Tweens or Timelines in the Tween Manager which affect the given target or array of targets.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getTweensOf\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n   *\r\n   * @return {Phaser.Tweens.Tween[]} A new array containing all Tweens and Timelines which affect the given target(s).\r\n   */\n  getTweensOf: function getTweensOf(target) {\n    var list = this._active;\n    var tween;\n    var output = [];\n    var i;\n\n    if (Array.isArray(target)) {\n      for (i = 0; i < list.length; i++) {\n        tween = list[i];\n\n        for (var t = 0; t < target.length; t++) {\n          if (tween.hasTarget(target[t])) {\n            output.push(tween);\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < list.length; i++) {\n        tween = list[i];\n\n        if (tween.hasTarget(target)) {\n          output.push(tween);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Checks if the given object is being affected by a playing Tween.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#isTweening\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} target - target Phaser.Tweens.Tween object\r\n   *\r\n   * @return {boolean} returns if target tween object is active or not\r\n   */\n  isTweening: function isTweening(target) {\n    var list = this._active;\n    var tween;\n\n    for (var i = 0; i < list.length; i++) {\n      tween = list[i];\n\n      if (tween.hasTarget(target) && tween.isPlaying()) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Stops all Tweens in this Tween Manager. They will be removed at the start of the frame.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#killAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  killAll: function killAll() {\n    var tweens = this.getAllTweens();\n\n    for (var i = 0; i < tweens.length; i++) {\n      tweens[i].stop();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Stops all Tweens which affect the given target or array of targets. The Tweens will be removed from the Tween Manager at the start of the frame.\r\n   *\r\n   * @see {@link #getTweensOf}\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#killTweensOf\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  killTweensOf: function killTweensOf(target) {\n    var tweens = this.getTweensOf(target);\n\n    for (var i = 0; i < tweens.length; i++) {\n      tweens[i].stop();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Pauses all Tweens in this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#pauseAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  pauseAll: function pauseAll() {\n    var list = this._active;\n\n    for (var i = 0; i < list.length; i++) {\n      list[i].pause();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Resumes all Tweens in this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#resumeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  resumeAll: function resumeAll() {\n    var list = this._active;\n\n    for (var i = 0; i < list.length; i++) {\n      list[i].resume();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets a new scale of the time delta for this Tween Manager.\r\n   *\r\n   * The time delta is the time elapsed between two consecutive frames and influences the speed of time for this Tween Manager and all Tweens it owns. Values higher than 1 increase the speed of time, while values smaller than 1 decrease it. A value of 0 freezes time and is effectively equivalent to pausing all Tweens.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#setGlobalTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The new scale of the time delta, where 1 is the normal speed.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  setGlobalTimeScale: function setGlobalTimeScale(value) {\n    this.timeScale = value;\n    return this;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    this.killAll();\n    this._add = [];\n    this._pending = [];\n    this._active = [];\n    this._destroy = [];\n    this._toProcess = 0;\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.off(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('TweenManager', TweenManager, 'tweens');\nmodule.exports = TweenManager;","map":null,"metadata":{},"sourceType":"script"}