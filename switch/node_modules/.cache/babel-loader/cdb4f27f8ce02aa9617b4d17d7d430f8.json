{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar GravityWell = require('./GravityWell');\n\nvar List = require('../../structs/List');\n\nvar ParticleEmitter = require('./ParticleEmitter');\n\nvar Render = require('./ParticleManagerRender');\n/**\r\n * @classdesc\r\n * A Particle Emitter Manager creates and controls {@link Phaser.GameObjects.Particles.ParticleEmitter Particle Emitters} and {@link Phaser.GameObjects.Particles.GravityWell Gravity Wells}.\r\n *\r\n * @class ParticleEmitterManager\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Emitter Manager belongs.\r\n * @param {string} texture - The key of the Texture this Emitter Manager will use to render particles, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Emitter Manager will use to render particles.\r\n * @param {ParticleEmitterConfig|ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n */\n\n\nvar ParticleEmitterManager = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Depth, Components.Pipeline, Components.Transform, Components.Visible, Render],\n  initialize: //  frame is optional and can contain the emitters array or object if skipped\n  function ParticleEmitterManager(scene, texture, frame, emitters) {\n    GameObject.call(this, scene, 'ParticleEmitterManager');\n    /**\r\n     * The blend mode applied to all emitters and particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#blendMode\r\n     * @type {integer}\r\n     * @default -1\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.blendMode = -1;\n    /**\r\n     * The time scale applied to all emitters and particles, affecting flow rate, lifespan, and movement.\r\n     * Values larger than 1 are faster than normal.\r\n     * This is multiplied with any timeScale set on each individual emitter.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * The texture used to render this Emitter Manager's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = null;\n    /**\r\n     * The texture frame used to render this Emitter Manager's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = null;\n    /**\r\n     * Names of this Emitter Manager's texture frames.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frameNames\r\n     * @type {string[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.frameNames = []; //  frame is optional and can contain the emitters array or object if skipped\n\n    if (frame !== null && (typeof frame === 'object' || Array.isArray(frame))) {\n      emitters = frame;\n      frame = null;\n    }\n\n    this.setTexture(texture, frame);\n    this.initPipeline();\n    /**\r\n     * A list of Emitters being managed by this Emitter Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#emitters\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.ParticleEmitter>}\r\n     * @since 3.0.0\r\n     */\n\n    this.emitters = new List(this);\n    /**\r\n     * A list of Gravity Wells being managed by this Emitter Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#wells\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.GravityWell>}\r\n     * @since 3.0.0\r\n     */\n\n    this.wells = new List(this);\n\n    if (emitters) {\n      //  An array of emitter configs?\n      if (!Array.isArray(emitters)) {\n        emitters = [emitters];\n      }\n\n      for (var i = 0; i < emitters.length; i++) {\n        this.createEmitter(emitters[i]);\n      }\n    }\n  },\n\n  /**\r\n   * Sets the texture and frame this Emitter Manager will use to render with.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setTexture: function setTexture(key, frame) {\n    this.texture = this.scene.sys.textures.get(key);\n    return this.setFrame(frame);\n  },\n\n  /**\r\n   * Sets the frame this Emitter Manager will use to render with.\r\n   *\r\n   * The Frame has to belong to the current Texture being used.\r\n   *\r\n   * It can be either a string or an index.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setFrame: function setFrame(frame) {\n    this.frame = this.texture.get(frame);\n    var frames = this.texture.getFramesFromTextureSource(this.frame.sourceIndex);\n    var names = [];\n    frames.forEach(function (sourceFrame) {\n      names.push(sourceFrame.name);\n    });\n    this.frameNames = names;\n    this.defaultFrame = this.frame;\n    return this;\n  },\n\n  /**\r\n   * Assigns texture frames to an emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setEmitterFrames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Textures.Frame|Phaser.Textures.Frame[])} frames - The texture frames.\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The particle emitter to modify.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setEmitterFrames: function setEmitterFrames(frames, emitter) {\n    if (!Array.isArray(frames)) {\n      frames = [frames];\n    }\n\n    var out = emitter.frames;\n    out.length = 0;\n\n    for (var i = 0; i < frames.length; i++) {\n      var frame = frames[i];\n\n      if (this.frameNames.indexOf(frame) !== -1) {\n        out.push(this.texture.get(frame));\n      }\n    }\n\n    if (out.length > 0) {\n      emitter.defaultFrame = out[0];\n    } else {\n      emitter.defaultFrame = this.defaultFrame;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Adds an existing Particle Emitter to this Emitter Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addEmitter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Particle Emitter to add to this Emitter Manager.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was added to this Emitter Manager.\r\n   */\n  addEmitter: function addEmitter(emitter) {\n    return this.emitters.add(emitter);\n  },\n\n  /**\r\n   * Creates a new Particle Emitter object, adds it to this Emitter Manager and returns a reference to it.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createEmitter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ParticleEmitterConfig} config - Configuration settings for the Particle Emitter to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was created.\r\n   */\n  createEmitter: function createEmitter(config) {\n    return this.addEmitter(new ParticleEmitter(this, config));\n  },\n\n  /**\r\n   * Adds an existing Gravity Well object to this Emitter Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addGravityWell\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.GravityWell} well - The Gravity Well to add to this Emitter Manager.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was added to this Emitter Manager.\r\n   */\n  addGravityWell: function addGravityWell(well) {\n    return this.wells.add(well);\n  },\n\n  /**\r\n   * Creates a new Gravity Well, adds it to this Emitter Manager and returns a reference to it.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createGravityWell\r\n   * @since 3.0.0\r\n   *\r\n   * @param {GravityWellConfig} config - Configuration settings for the Gravity Well to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was created.\r\n   */\n  createGravityWell: function createGravityWell(config) {\n    return this.addGravityWell(new GravityWell(config));\n  },\n\n  /**\r\n   * Emits particles from each active emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n   * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  emitParticle: function emitParticle(count, x, y) {\n    var emitters = this.emitters.list;\n\n    for (var i = 0; i < emitters.length; i++) {\n      var emitter = emitters[i];\n\n      if (emitter.active) {\n        emitter.emitParticle(count, x, y);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Emits particles from each active emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticleAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n   * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n   * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  emitParticleAt: function emitParticleAt(x, y, count) {\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Pauses this Emitter Manager.\r\n   *\r\n   * This has the effect of pausing all emitters, and all particles of those emitters, currently under its control.\r\n   *\r\n   * The particles will still render, but they will not have any of their logic updated.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  pause: function pause() {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Resumes this Emitter Manager, should it have been previously paused.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  resume: function resume() {\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Gets all active particle processors (gravity wells).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#getProcessors\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell[]} - The active gravity wells.\r\n   */\n  getProcessors: function getProcessors() {\n    return this.wells.getAll('active', true);\n  },\n\n  /**\r\n   * Updates all active emitters.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#preUpdate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  preUpdate: function preUpdate(time, delta) {\n    //  Scale the delta\n    delta *= this.timeScale;\n    var emitters = this.emitters.list;\n\n    for (var i = 0; i < emitters.length; i++) {\n      var emitter = emitters[i];\n\n      if (emitter.active) {\n        emitter.preUpdate(time, delta);\n      }\n    }\n  },\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setAlpha\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  setAlpha: function setAlpha() {},\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setScrollFactor\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  setScrollFactor: function setScrollFactor() {},\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setBlendMode\r\n   * @private\r\n   * @since 3.15.0\r\n   */\n  setBlendMode: function setBlendMode() {}\n});\nmodule.exports = ParticleEmitterManager;","map":null,"metadata":{},"sourceType":"script"}