{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Clone = require('../../utils/object/Clone');\n\nvar Defaults = require('../tween/Defaults');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar GetBoolean = require('./GetBoolean');\n\nvar GetEaseFunction = require('./GetEaseFunction');\n\nvar GetNewValue = require('./GetNewValue');\n\nvar GetTargets = require('./GetTargets');\n\nvar GetTweens = require('./GetTweens');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar Timeline = require('../Timeline');\n\nvar TweenBuilder = require('./TweenBuilder');\n/**\r\n * Builds a Timeline of Tweens based on a configuration object.\r\n *\r\n * The configuration object (`config`) can have the following properties:\r\n *\r\n * `tweens` - an array of tween configuration objects to create and add into the new Timeline, as described by `TweenBuilder`. If this doesn't exist or is empty, the Timeline will start off paused and none of the other configuration settings will be read. If it's a function, it will be called and its return value will be used as the array.\r\n * `targets` - an array (or function which returns one) of default targets to which to apply the Timeline. Each individual Tween configuration can override this value.\r\n * `totalDuration` - if specified, each Tween in the Timeline will get an equal portion of this duration, usually in milliseconds, by default. Each individual Tween configuration can override the Tween's duration.\r\n * `duration` - if `totalDuration` is not specified, the default duration, usually in milliseconds, of each Tween which will be created. Each individual Tween configuration can override the Tween's duration.\r\n * `delay`, `easeParams`, `ease`, `hold`, `repeat`, `repeatDelay`, `yoyo`, `flipX`, `flipY` - the default settings for each Tween which will be created, as specified by `TweenBuilder`. Each individual Tween configuration can override any of these values.\r\n * `completeDelay` - if specified, the time to wait, usually in milliseconds, before the Timeline completes.\r\n * `loop` - how many times the Timeline should loop, or -1 to loop indefinitely.\r\n * `loopDelay` - the time, usually in milliseconds, between each loop\r\n * `paused` - if `true`, the Timeline will start paused\r\n * `useFrames` - if `true`, all duration in the Timeline will be in frames instead of milliseconds\r\n * `callbackScope` - the default scope (`this` value) to use for each callback registered by the Timeline Builder. If not specified, the Timeline itself will be used.\r\n * `onStart` - if specified, the `onStart` callback for the Timeline, called every time it starts playing\r\n * `onStartScope` - the scope (`this` value) to use for the `onStart` callback. If not specified, the `callbackScope` will be used.\r\n * `onStartParams` - additional arguments to pass to the `onStart` callback. The Timeline will always be the first argument.\r\n * `onUpdate` - if specified, the `onUpdate` callback for the Timeline, called every frame it's active, regardless of its Tweens\r\n * `onUpdateScope` - the scope (`this` value) to use for the `onUpdate` callback. If not specified, the `callbackScope` will be used.\r\n * `onUpdateParams` - additional arguments to pass to the `onUpdate` callback. The Timeline will always be the first argument.\r\n * `onLoop` - if specified, the `onLoop` callback for the Timeline, called every time it loops\r\n * `onLoopScope` - the scope (`this` value) to use for the `onLoop` callback. If not specified, the `callbackScope` will be used.\r\n * `onLoopParams` - additional arguments to pass to the `onLoop` callback. The Timeline will always be the first argument.\r\n * `onYoyo` - if specified, the `onYoyo` callback for the Timeline, called every time it yoyos\r\n * `onYoyoScope` - the scope (`this` value) to use for the `onYoyo` callback. If not specified, the `callbackScope` will be used.\r\n * `onYoyoParams` - additional arguments to pass to the `onYoyo` callback. The first argument will always be `null`, while the Timeline will always be the second argument.\r\n * `onComplete` - if specified, the `onComplete` callback for the Timeline, called after it completes\r\n * `onCompleteScope` - the scope (`this` value) to use for the `onComplete` callback. If not specified, the `callbackScope` will be used.\r\n * `onCompleteParams` - additional arguments to pass to the `onComplete` callback. The Timeline will always be the first argument.\r\n *\r\n * @function Phaser.Tweens.Builders.TimelineBuilder\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tweens.TweenManager} manager - The Tween Manager to which the Timeline will belong.\r\n * @param {object} config - The configuration object for the Timeline, as described above.\r\n *\r\n * @return {Phaser.Tweens.Timeline} The created Timeline.\r\n */\n\n\nvar TimelineBuilder = function TimelineBuilder(manager, config) {\n  var timeline = new Timeline(manager);\n  var tweens = GetTweens(config);\n\n  if (tweens.length === 0) {\n    timeline.paused = true;\n    return timeline;\n  }\n\n  var defaults = Clone(Defaults);\n  defaults.targets = GetTargets(config); //  totalDuration: If specified each tween in the Timeline is given an equal portion of the totalDuration\n\n  var totalDuration = GetAdvancedValue(config, 'totalDuration', 0);\n\n  if (totalDuration > 0) {\n    defaults.duration = Math.floor(totalDuration / tweens.length);\n  } else {\n    defaults.duration = GetNewValue(config, 'duration', defaults.duration);\n  }\n\n  defaults.delay = GetNewValue(config, 'delay', defaults.delay);\n  defaults.easeParams = GetValue(config, 'easeParams', defaults.easeParams);\n  defaults.ease = GetEaseFunction(GetValue(config, 'ease', defaults.ease), defaults.easeParams);\n  defaults.hold = GetNewValue(config, 'hold', defaults.hold);\n  defaults.repeat = GetNewValue(config, 'repeat', defaults.repeat);\n  defaults.repeatDelay = GetNewValue(config, 'repeatDelay', defaults.repeatDelay);\n  defaults.yoyo = GetBoolean(config, 'yoyo', defaults.yoyo);\n  defaults.flipX = GetBoolean(config, 'flipX', defaults.flipX);\n  defaults.flipY = GetBoolean(config, 'flipY', defaults.flipY); //  Create the Tweens\n\n  for (var i = 0; i < tweens.length; i++) {\n    timeline.queue(TweenBuilder(timeline, tweens[i], defaults));\n  }\n\n  timeline.completeDelay = GetAdvancedValue(config, 'completeDelay', 0);\n  timeline.loop = Math.round(GetAdvancedValue(config, 'loop', 0));\n  timeline.loopDelay = Math.round(GetAdvancedValue(config, 'loopDelay', 0));\n  timeline.paused = GetBoolean(config, 'paused', false);\n  timeline.useFrames = GetBoolean(config, 'useFrames', false); //  Callbacks\n\n  var scope = GetValue(config, 'callbackScope', timeline);\n  var timelineArray = [timeline];\n  var onStart = GetValue(config, 'onStart', false); //  The Start of the Timeline\n\n  if (onStart) {\n    var onStartScope = GetValue(config, 'onStartScope', scope);\n    var onStartParams = GetValue(config, 'onStartParams', []);\n    timeline.setCallback('onStart', onStart, timelineArray.concat(onStartParams), onStartScope);\n  }\n\n  var onUpdate = GetValue(config, 'onUpdate', false); //  Every time the Timeline updates (regardless which Tweens are running)\n\n  if (onUpdate) {\n    var onUpdateScope = GetValue(config, 'onUpdateScope', scope);\n    var onUpdateParams = GetValue(config, 'onUpdateParams', []);\n    timeline.setCallback('onUpdate', onUpdate, timelineArray.concat(onUpdateParams), onUpdateScope);\n  }\n\n  var onLoop = GetValue(config, 'onLoop', false); //  Called when the whole Timeline loops\n\n  if (onLoop) {\n    var onLoopScope = GetValue(config, 'onLoopScope', scope);\n    var onLoopParams = GetValue(config, 'onLoopParams', []);\n    timeline.setCallback('onLoop', onLoop, timelineArray.concat(onLoopParams), onLoopScope);\n  }\n\n  var onYoyo = GetValue(config, 'onYoyo', false); //  Called when a Timeline yoyos\n\n  if (onYoyo) {\n    var onYoyoScope = GetValue(config, 'onYoyoScope', scope);\n    var onYoyoParams = GetValue(config, 'onYoyoParams', []);\n    timeline.setCallback('onYoyo', onYoyo, timelineArray.concat(null, onYoyoParams), onYoyoScope);\n  }\n\n  var onComplete = GetValue(config, 'onComplete', false); //  Called when the Timeline completes, after the completeDelay, etc.\n\n  if (onComplete) {\n    var onCompleteScope = GetValue(config, 'onCompleteScope', scope);\n    var onCompleteParams = GetValue(config, 'onCompleteParams', []);\n    timeline.setCallback('onComplete', onComplete, timelineArray.concat(onCompleteParams), onCompleteScope);\n  }\n\n  return timeline;\n};\n\nmodule.exports = TimelineBuilder;","map":null,"metadata":{},"sourceType":"script"}