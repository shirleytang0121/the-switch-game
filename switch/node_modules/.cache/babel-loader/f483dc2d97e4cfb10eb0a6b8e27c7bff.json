{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ComponentToHex = require('./ComponentToHex');\n/**\r\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\r\n *\r\n * @function Phaser.Display.Color.RGBToString\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {integer} [a=255] - The alpha value. A number between 0 and 255.\r\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\r\n *\r\n * @return {string} A string-based representation of the color values.\r\n */\n\n\nvar RGBToString = function RGBToString(r, g, b, a, prefix) {\n  if (a === undefined) {\n    a = 255;\n  }\n\n  if (prefix === undefined) {\n    prefix = '#';\n  }\n\n  if (prefix === '#') {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  } else {\n    return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\n  }\n};\n\nmodule.exports = RGBToString;","map":null,"metadata":{},"sourceType":"script"}