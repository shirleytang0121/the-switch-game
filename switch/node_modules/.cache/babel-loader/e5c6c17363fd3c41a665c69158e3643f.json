{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders a filled path for the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#FillPathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} calcMatrix - The transform matrix used to get the position values.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\n\n\nvar FillPathWebGL = function FillPathWebGL(pipeline, calcMatrix, src, alpha, dx, dy) {\n  var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\n  var path = src.pathData;\n  var pathIndexes = src.pathIndexes;\n\n  for (var i = 0; i < pathIndexes.length; i += 3) {\n    var p0 = pathIndexes[i] * 2;\n    var p1 = pathIndexes[i + 1] * 2;\n    var p2 = pathIndexes[i + 2] * 2;\n    var x0 = path[p0 + 0] - dx;\n    var y0 = path[p0 + 1] - dy;\n    var x1 = path[p1 + 0] - dx;\n    var y1 = path[p1 + 1] - dy;\n    var x2 = path[p2 + 0] - dx;\n    var y2 = path[p2 + 1] - dy;\n    var tx0 = calcMatrix.getX(x0, y0);\n    var ty0 = calcMatrix.getY(x0, y0);\n    var tx1 = calcMatrix.getX(x1, y1);\n    var ty1 = calcMatrix.getY(x1, y1);\n    var tx2 = calcMatrix.getX(x2, y2);\n    var ty2 = calcMatrix.getY(x2, y2);\n    pipeline.setTexture2D();\n    pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, pipeline.tintEffect);\n  }\n};\n\nmodule.exports = FillPathWebGL;","map":null,"metadata":{},"sourceType":"script"}