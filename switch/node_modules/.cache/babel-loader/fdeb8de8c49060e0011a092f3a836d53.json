{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * An Ellipse object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render an Ellipse you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Ellipse\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the ellipse.\r\n * @param {number} [y=0] - The y position of the center of the ellipse.\r\n * @param {number} [width=0] - The width of the ellipse.\r\n * @param {number} [height=0] - The height of the ellipse.\r\n */\n\n\nvar Ellipse = new Class({\n  initialize: function Ellipse(x, y, width, height) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 0;\n    }\n\n    if (height === undefined) {\n      height = 0;\n    }\n    /**\r\n     * The x position of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x = x;\n    /**\r\n     * The y position of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The width of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#width\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#height\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n  },\n\n  /**\r\n   * Check to see if the Ellipse contains the given x / y coordinates.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check within the ellipse.\r\n   * @param {number} y - The y coordinate to check within the ellipse.\r\n   *\r\n   * @return {boolean} True if the coordinates are within the ellipse, otherwise false.\r\n   */\n  contains: function contains(x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\r\n   * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n   * at 180 degrees around the circle.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [out,$return]\r\n   *\r\n   * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\r\n   * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the ellipse.\r\n   */\n  getPoint: function getPoint(position, point) {\n    return GetPoint(this, position, point);\n  },\n\n  /**\r\n   * Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\r\n   * based on the given quantity or stepRate values.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n   * @param {number} [stepRate] - Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\r\n   * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n   *\r\n   * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the ellipse.\r\n   */\n  getPoints: function getPoints(quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n   */\n  getRandomPoint: function getRandomPoint(point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets the x, y, width and height of this ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the center of the ellipse.\r\n   * @param {number} y - The y position of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setTo: function setTo(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Sets this Ellipse to be empty with a width and height of zero.\r\n   * Does not change its position.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setEmpty: function setEmpty() {\n    this.width = 0;\n    this.height = 0;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of this Ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the center of the ellipse.\r\n   * @param {number} y - The y position of the center of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setPosition: function setPosition(x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the size of this Ellipse.\r\n   * Does not change its position.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} [height=width] - The height of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setSize: function setSize(width, height) {\n    if (height === undefined) {\n      height = width;\n    }\n\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Checks to see if the Ellipse is empty: has a width or height equal to zero.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#isEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} True if the Ellipse is empty, otherwise false.\r\n   */\n  isEmpty: function isEmpty() {\n    return this.width <= 0 || this.height <= 0;\n  },\n\n  /**\r\n   * Returns the minor radius of the ellipse. Also known as the Semi Minor Axis.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getMinorRadius\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The minor radius.\r\n   */\n  getMinorRadius: function getMinorRadius() {\n    return Math.min(this.width, this.height) / 2;\n  },\n\n  /**\r\n   * Returns the major radius of the ellipse. Also known as the Semi Major Axis.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getMajorRadius\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The major radius.\r\n   */\n  getMajorRadius: function getMajorRadius() {\n    return Math.max(this.width, this.height) / 2;\n  },\n\n  /**\r\n   * The left position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function get() {\n      return this.x - this.width / 2;\n    },\n    set: function set(value) {\n      this.x = value + this.width / 2;\n    }\n  },\n\n  /**\r\n   * The right position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function get() {\n      return this.x + this.width / 2;\n    },\n    set: function set(value) {\n      this.x = value - this.width / 2;\n    }\n  },\n\n  /**\r\n   * The top position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function get() {\n      return this.y - this.height / 2;\n    },\n    set: function set(value) {\n      this.y = value + this.height / 2;\n    }\n  },\n\n  /**\r\n   * The bottom position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function get() {\n      return this.y + this.height / 2;\n    },\n    set: function set(value) {\n      this.y = value - this.height / 2;\n    }\n  }\n});\nmodule.exports = Ellipse;","map":null,"metadata":{},"sourceType":"script"}