{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar BlitterCanvasRenderer = function BlitterCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var list = src.getRenderList();\n\n  if (list.length === 0) {\n    return;\n  }\n\n  var ctx = renderer.currentContext;\n  var alpha = camera.alpha * src.alpha;\n\n  if (alpha === 0) {\n    //  Nothing to see, so abort early\n    return;\n  } //  Blend Mode\n\n\n  ctx.globalCompositeOperation = renderer.blendModes[src.blendMode];\n  var cameraScrollX = src.x - camera.scrollX * src.scrollFactorX;\n  var cameraScrollY = src.y - camera.scrollY * src.scrollFactorY;\n  ctx.save();\n\n  if (parentMatrix) {\n    parentMatrix.copyToContext(ctx);\n  }\n\n  var roundPixels = camera.roundPixels; //  Render bobs\n\n  for (var i = 0; i < list.length; i++) {\n    var bob = list[i];\n    var flip = bob.flipX || bob.flipY;\n    var frame = bob.frame;\n    var cd = frame.canvasData;\n    var dx = frame.x;\n    var dy = frame.y;\n    var fx = 1;\n    var fy = 1;\n    var bobAlpha = bob.alpha * alpha;\n\n    if (bobAlpha === 0) {\n      continue;\n    }\n\n    ctx.globalAlpha = bobAlpha;\n\n    if (!flip) {\n      if (roundPixels) {\n        dx = Math.round(dx);\n        dy = Math.round(dy);\n      }\n\n      ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx + bob.x + cameraScrollX, dy + bob.y + cameraScrollY, cd.width, cd.height);\n    } else {\n      if (bob.flipX) {\n        fx = -1;\n        dx -= cd.width;\n      }\n\n      if (bob.flipY) {\n        fy = -1;\n        dy -= cd.height;\n      }\n\n      ctx.save();\n      ctx.translate(bob.x + cameraScrollX, bob.y + cameraScrollY);\n      ctx.scale(fx, fy);\n      ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx, dy, cd.width, cd.height);\n      ctx.restore();\n    }\n  }\n\n  ctx.restore();\n};\n\nmodule.exports = BlitterCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}