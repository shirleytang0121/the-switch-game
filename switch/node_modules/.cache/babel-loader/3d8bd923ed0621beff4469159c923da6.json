{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar FillStyleCanvas = require('../FillStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.IsoTriangle#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.IsoTriangle} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar IsoTriangleCanvasRenderer = function IsoTriangleCanvasRenderer(renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix) && src.isFilled) {\n    var size = src.width;\n    var height = src.height;\n    var sizeA = size / 2;\n    var sizeB = size / src.projection;\n    var reversed = src.isReversed; //  Top Face\n\n    if (src.showTop && reversed) {\n      FillStyleCanvas(ctx, src, src.fillTop);\n      ctx.beginPath();\n      ctx.moveTo(-sizeA, -height);\n      ctx.lineTo(0, -sizeB - height);\n      ctx.lineTo(sizeA, -height);\n      ctx.lineTo(0, sizeB - height);\n      ctx.fill();\n    } //  Left Face\n\n\n    if (src.showLeft) {\n      FillStyleCanvas(ctx, src, src.fillLeft);\n      ctx.beginPath();\n\n      if (reversed) {\n        ctx.moveTo(-sizeA, -height);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      } else {\n        ctx.moveTo(-sizeA, 0);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      }\n\n      ctx.fill();\n    } //  Right Face\n\n\n    if (src.showRight) {\n      FillStyleCanvas(ctx, src, src.fillRight);\n      ctx.beginPath();\n\n      if (reversed) {\n        ctx.moveTo(sizeA, -height);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      } else {\n        ctx.moveTo(sizeA, 0);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      }\n\n      ctx.fill();\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = IsoTriangleCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}