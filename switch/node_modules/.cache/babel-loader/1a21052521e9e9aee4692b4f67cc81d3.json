{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Adds the given item, or array of items, to the array starting at the index specified.\r\n * \r\n * Each item must be unique within the array.\r\n * \r\n * Existing elements in the array are shifted up.\r\n * \r\n * The array is modified in-place and returned.\r\n * \r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.AddAt\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array.\r\n * @param {integer} [index=0] - The index in the array where the item will be inserted.\r\n * @param {integer} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\nvar AddAt = function AddAt(array, item, index, limit, callback, context) {\n  if (index === undefined) {\n    index = 0;\n  }\n\n  if (context === undefined) {\n    context = array;\n  }\n\n  if (limit > 0) {\n    var remaining = limit - array.length; //  There's nothing more we can do here, the array is full\n\n    if (remaining <= 0) {\n      return null;\n    }\n  } //  Fast path to avoid array mutation and iteration\n\n\n  if (!Array.isArray(item)) {\n    if (array.indexOf(item) === -1) {\n      array.splice(index, 0, item);\n\n      if (callback) {\n        callback.call(context, item);\n      }\n\n      return item;\n    } else {\n      return null;\n    }\n  } //  If we got this far, we have an array of items to insert\n  //  Ensure all the items are unique\n\n\n  var itemLength = item.length - 1;\n\n  while (itemLength >= 0) {\n    if (array.indexOf(item[itemLength]) !== -1) {\n      //  Already exists in array, so remove it\n      item.pop();\n    }\n\n    itemLength--;\n  } //  Anything left?\n\n\n  itemLength = item.length;\n\n  if (itemLength === 0) {\n    return null;\n  } //  Truncate to the limit\n\n\n  if (limit > 0 && itemLength > remaining) {\n    item.splice(remaining);\n    itemLength = remaining;\n  }\n\n  for (var i = itemLength - 1; i >= 0; i--) {\n    var entry = item[i];\n    array.splice(index, 0, entry);\n\n    if (callback) {\n      callback.call(context, entry);\n    }\n  }\n\n  return item;\n};\n\nmodule.exports = AddAt;","map":null,"metadata":{},"sourceType":"script"}