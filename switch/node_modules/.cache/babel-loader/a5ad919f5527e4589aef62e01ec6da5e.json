{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Factory = require('./Factory');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MatterAttractors = require('./lib/plugins/MatterAttractors');\n\nvar MatterLib = require('./lib/core/Matter');\n\nvar MatterWrap = require('./lib/plugins/MatterWrap');\n\nvar Merge = require('../../utils/object/Merge');\n\nvar Plugin = require('./lib/core/Plugin');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar SceneEvents = require('../../scene/events');\n\nvar World = require('./World');\n\nvar Vertices = require('./lib/geometry/Vertices');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class MatterPhysics\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\n\nvar MatterPhysics = new Class({\n  initialize: function MatterPhysics(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#config\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = this.getConfig();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#world\r\n     * @type {Phaser.Physics.Matter.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#add\r\n     * @type {Phaser.Physics.Matter.Factory}\r\n     * @since 3.0.0\r\n     */\n\n    this.add;\n    /**\r\n     * A reference to the `Matter.Vertices` module which contains methods for creating and manipulating sets of vertices.\r\n     * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n     * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#verts\r\n     * @type {MatterJS.Vertices}\r\n     * @since 3.14.0\r\n     */\n\n    this.verts = Vertices; //  Matter plugins\n\n    if (GetValue(this.config, 'plugins.attractors', false)) {\n      Plugin.register(MatterAttractors);\n      Plugin.use(MatterLib, MatterAttractors);\n    }\n\n    if (GetValue(this.config, 'plugins.wrap', false)) {\n      Plugin.register(MatterWrap);\n      Plugin.use(MatterLib, MatterWrap);\n    }\n\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function boot() {\n    this.world = new World(this.scene, this.config);\n    this.add = new Factory(this.world);\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function start() {\n    if (!this.world) {\n      this.world = new World(this.scene, this.config);\n      this.add = new Factory(this.world);\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#getConfig\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} [description]\r\n   */\n  getConfig: function getConfig() {\n    var gameConfig = this.systems.game.config.physics;\n    var sceneConfig = this.systems.settings.physics;\n    var config = Merge(GetFastValue(sceneConfig, 'matter', {}), GetFastValue(gameConfig, 'matter', {}));\n    return config;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#enableAttractorPlugin\r\n   * @since 3.0.0\r\n   * \r\n   * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n   */\n  enableAttractorPlugin: function enableAttractorPlugin() {\n    Plugin.register(MatterAttractors);\n    Plugin.use(MatterLib, MatterAttractors);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#enableWrapPlugin\r\n   * @since 3.0.0\r\n   * \r\n   * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n   */\n  enableWrapPlugin: function enableWrapPlugin() {\n    Plugin.register(MatterWrap);\n    Plugin.use(MatterLib, MatterWrap);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n   */\n  pause: function pause() {\n    return this.world.pause();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n   */\n  resume: function resume() {\n    return this.world.resume();\n  },\n\n  /**\r\n   * Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\r\n   * If you have set a custom `getDelta` function then this will override it.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#set60Hz\r\n   * @since 3.4.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n   */\n  set60Hz: function set60Hz() {\n    this.world.getDelta = this.world.update60Hz;\n    this.world.autoUpdate = true;\n    return this;\n  },\n\n  /**\r\n   * Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\r\n   * If you have set a custom `getDelta` function then this will override it.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#set30Hz\r\n   * @since 3.4.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n   */\n  set30Hz: function set30Hz() {\n    this.world.getDelta = this.world.update30Hz;\n    this.world.autoUpdate = true;\n    return this;\n  },\n\n  /**\r\n   * Manually advances the physics simulation by one iteration.\r\n   * \r\n   * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n   * If undefined they use the Matter defaults of 60Hz and no correction.\r\n   * \r\n   * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n   * \r\n   * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n   * value in to this call.\r\n   *\r\n   * You can adjust the number of iterations that Engine.update performs internally.\r\n   * Use the Scene Matter Physics config object to set the following properties:\r\n   *\r\n   * positionIterations (defaults to 6)\r\n   * velocityIterations (defaults to 4)\r\n   * constraintIterations (defaults to 2)\r\n   *\r\n   * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n   * of your game.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#step\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [delta=16.666] - [description]\r\n   * @param {number} [correction=1] - [description]\r\n   */\n  step: function step(delta, correction) {\n    this.world.step(delta, correction);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function shutdown() {\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n    this.add.destroy();\n    this.world.destroy();\n    this.add = null;\n    this.world = null;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function destroy() {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('MatterPhysics', MatterPhysics, 'matterPhysics');\nmodule.exports = MatterPhysics;","map":null,"metadata":{},"sourceType":"script"}