{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Container#renderCanvas\r\n * @since 3.4.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Container} container - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar ContainerCanvasRenderer = function ContainerCanvasRenderer(renderer, container, interpolationPercentage, camera, parentMatrix) {\n  var children = container.list;\n\n  if (children.length === 0) {\n    return;\n  }\n\n  var transformMatrix = container.localTransform;\n\n  if (parentMatrix) {\n    transformMatrix.loadIdentity();\n    transformMatrix.multiply(parentMatrix);\n    transformMatrix.translate(container.x, container.y);\n    transformMatrix.rotate(container.rotation);\n    transformMatrix.scale(container.scaleX, container.scaleY);\n  } else {\n    transformMatrix.applyITRS(container.x, container.y, container.rotation, container.scaleX, container.scaleY);\n  }\n\n  var containerHasBlendMode = container.blendMode !== -1;\n\n  if (!containerHasBlendMode) {\n    //  If Container is SKIP_TEST then set blend mode to be Normal\n    renderer.setBlendMode(0);\n  }\n\n  var alpha = container._alpha;\n  var scrollFactorX = container.scrollFactorX;\n  var scrollFactorY = container.scrollFactorY;\n\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    if (!child.willRender(camera)) {\n      continue;\n    }\n\n    var childAlpha = child._alpha;\n    var childBlendMode = child._blendMode;\n    var childScrollFactorX = child.scrollFactorX;\n    var childScrollFactorY = child.scrollFactorY; //  Set parent values\n\n    child.setScrollFactor(childScrollFactorX * scrollFactorX, childScrollFactorY * scrollFactorY);\n    child.setAlpha(childAlpha * alpha);\n\n    if (containerHasBlendMode) {\n      child.setBlendMode(container._blendMode);\n    } //  Render\n\n\n    child.renderCanvas(renderer, child, interpolationPercentage, camera, transformMatrix); //  Restore original values\n\n    child.setAlpha(childAlpha);\n    child.setScrollFactor(childScrollFactorX, childScrollFactorY);\n    child.setBlendMode(childBlendMode);\n  }\n};\n\nmodule.exports = ContainerCanvasRenderer;","map":null,"metadata":{},"sourceType":"script"}