{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar GetColor = require('./GetColor');\n/**\r\n * Converts an HSV (hue, saturation and value) color value to RGB.\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes HSV values are contained in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.HSVToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n * @param {(ColorObject|Phaser.Display.Color)} [out] - A Color object to store the results in. If not given a new ColorObject will be created.\r\n *\r\n * @return {(ColorObject|Phaser.Display.Color)} An object with the red, green and blue values set in the r, g and b properties.\r\n */\n\n\nvar HSVToRGB = function HSVToRGB(h, s, v, out) {\n  if (s === undefined) {\n    s = 1;\n  }\n\n  if (v === undefined) {\n    v = 1;\n  }\n\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = Math.floor(v * (1 - s) * 255);\n  var q = Math.floor(v * (1 - f * s) * 255);\n  var t = Math.floor(v * (1 - (1 - f) * s) * 255);\n  v = Math.floor(v *= 255);\n  var r = v;\n  var g = v;\n  var b = v;\n  var c = i % 6;\n\n  if (c === 0) {\n    g = t;\n    b = p;\n  } else if (c === 1) {\n    r = q;\n    b = p;\n  } else if (c === 2) {\n    r = p;\n    b = t;\n  } else if (c === 3) {\n    r = p;\n    g = q;\n  } else if (c === 4) {\n    r = t;\n    g = p;\n  } else if (c === 5) {\n    g = p;\n    b = q;\n  }\n\n  if (!out) {\n    return {\n      r: r,\n      g: g,\n      b: b,\n      color: GetColor(r, g, b)\n    };\n  } else if (out.setTo) {\n    return out.setTo(r, g, b, out.alpha, false);\n  } else {\n    out.r = r;\n    out.g = g;\n    out.b = b;\n    out.color = GetColor(r, g, b);\n    return out;\n  }\n};\n\nmodule.exports = HSVToRGB;","map":null,"metadata":{},"sourceType":"script"}