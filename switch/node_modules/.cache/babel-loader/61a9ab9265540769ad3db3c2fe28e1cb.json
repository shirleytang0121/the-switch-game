{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Returns an object containing dimensions of the Text object.\r\n *\r\n * @function Phaser.GameObjects.Text.GetTextSize\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object to calculate the size from.\r\n * @param {BitmapTextMetrics} size - The Text metrics to use when calculating the size.\r\n * @param {array} lines - The lines of text to calculate the size from.\r\n *\r\n * @return {object} An object containing dimensions of the Text object.\r\n */\nvar GetTextSize = function GetTextSize(text, size, lines) {\n  var canvas = text.canvas;\n  var context = text.context;\n  var style = text.style;\n  var lineWidths = [];\n  var maxLineWidth = 0;\n  var drawnLines = lines.length;\n\n  if (style.maxLines > 0 && style.maxLines < lines.length) {\n    drawnLines = style.maxLines;\n  }\n\n  style.syncFont(canvas, context); //  Text Width\n\n  for (var i = 0; i < drawnLines; i++) {\n    var lineWidth = style.strokeThickness;\n    lineWidth += context.measureText(lines[i]).width; // Adjust for wrapped text\n\n    if (style.wordWrap) {\n      lineWidth -= context.measureText(' ').width;\n    }\n\n    lineWidths[i] = Math.ceil(lineWidth);\n    maxLineWidth = Math.max(maxLineWidth, lineWidths[i]);\n  } //  Text Height\n\n\n  var lineHeight = size.fontSize + style.strokeThickness;\n  var height = lineHeight * drawnLines;\n  var lineSpacing = text.lineSpacing; //  Adjust for line spacing\n\n  if (lines.length > 1) {\n    height += lineSpacing * (lines.length - 1);\n  }\n\n  return {\n    width: maxLineWidth,\n    height: height,\n    lines: drawnLines,\n    lineWidths: lineWidths,\n    lineSpacing: lineSpacing,\n    lineHeight: lineHeight\n  };\n};\n\nmodule.exports = GetTextSize;","map":null,"metadata":{},"sourceType":"script"}