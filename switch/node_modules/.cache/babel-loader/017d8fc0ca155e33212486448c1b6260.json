{"ast":null,"code":"var AWS = require('../core');\n/**\r\n * Creates a credential provider chain that searches for AWS credentials\r\n * in a list of credential providers specified by the {providers} property.\r\n *\r\n * By default, the chain will use the {defaultProviders} to resolve credentials.\r\n * These providers will look in the environment using the\r\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\r\n *\r\n * ## Setting Providers\r\n *\r\n * Each provider in the {providers} list should be a function that returns\r\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\r\n * form allows for delayed execution of the credential construction.\r\n *\r\n * ## Resolving Credentials from a Chain\r\n *\r\n * Call {resolve} to return the first valid credential object that can be\r\n * loaded by the provider chain.\r\n *\r\n * For example, to resolve a chain with a custom provider that checks a file\r\n * on disk after the set of {defaultProviders}:\r\n *\r\n * ```javascript\r\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\r\n * var chain = new AWS.CredentialProviderChain();\r\n * chain.providers.push(diskProvider);\r\n * chain.resolve();\r\n * ```\r\n *\r\n * The above code will return the `diskProvider` object if the\r\n * file contains credentials and the `defaultProviders` do not contain\r\n * any credential settings.\r\n *\r\n * @!attribute providers\r\n *   @return [Array<AWS.Credentials, Function>]\r\n *     a list of credentials objects or functions that return credentials\r\n *     objects. If the provider is a function, the function will be\r\n *     executed lazily when the provider needs to be checked for valid\r\n *     credentials. By default, this object will be set to the\r\n *     {defaultProviders}.\r\n *   @see defaultProviders\r\n */\n\n\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new CredentialProviderChain with a default set of providers\r\n   * specified by {defaultProviders}.\r\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n  },\n\n  /**\r\n   * @!method  resolvePromise()\r\n   *   Returns a 'thenable' promise.\r\n   *   Resolves the provider chain by searching for the first set of\r\n   *   credentials in {providers}.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function(credentials)\r\n   *     Called if the promise is fulfilled and the provider resolves the chain\r\n   *     to a credentials object\r\n   *     @param credentials [AWS.Credentials] the credentials object resolved\r\n   *       by the provider chain.\r\n   *   @callback rejectedCallback function(error)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] the error object returned if no credentials are found.\r\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\r\n   *   @example Calling the `resolvePromise` method.\r\n   *     var promise = chain.resolvePromise();\r\n   *     promise.then(function(credentials) { ... }, function(err) { ... });\r\n   */\n\n  /**\r\n   * Resolves the provider chain by searching for the first set of\r\n   * credentials in {providers}.\r\n   *\r\n   * @callback callback function(err, credentials)\r\n   *   Called when the provider resolves the chain to a credentials object\r\n   *   or null if no credentials can be found.\r\n   *\r\n   *   @param err [Error] the error object returned if no credentials are\r\n   *     found.\r\n   *   @param credentials [AWS.Credentials] the credentials object resolved\r\n   *     by the provider chain.\r\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\r\n   */\n  resolve: function resolve(callback) {\n    if (this.providers.length === 0) {\n      callback(new Error('No providers'));\n      return this;\n    }\n\n    var index = 0;\n    var providers = this.providers.slice(0);\n\n    function resolveNext(err, creds) {\n      if (!err && creds || index === providers.length) {\n        callback(err, creds);\n        return;\n      }\n\n      var provider = providers[index++];\n\n      if (typeof provider === 'function') {\n        creds = provider.call();\n      } else {\n        creds = provider;\n      }\n\n      if (creds.get) {\n        creds.get(function (getErr) {\n          resolveNext(getErr, getErr ? null : creds);\n        });\n      } else {\n        resolveNext(null, creds);\n      }\n    }\n\n    resolveNext();\n    return this;\n  }\n});\n/**\r\n * The default set of providers used by a vanilla CredentialProviderChain.\r\n *\r\n * In the browser:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = []\r\n * ```\r\n *\r\n * In Node.js:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = [\r\n *   function () { return new AWS.EnvironmentCredentials('AWS'); },\r\n *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\r\n *   function () { return new AWS.SharedIniFileCredentials(); },\r\n *   function () {\r\n *     // if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set\r\n *       return new AWS.ECSCredentials();\r\n *     // else\r\n *       return new AWS.EC2MetadataCredentials();\r\n *   }\r\n * ]\r\n * ```\r\n */\n\nAWS.CredentialProviderChain.defaultProviders = [];\n/**\r\n * @api private\r\n */\n\nAWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n/**\r\n * @api private\r\n */\n\n\nAWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\n\nAWS.util.addPromises(AWS.CredentialProviderChain);","map":null,"metadata":{},"sourceType":"script"}