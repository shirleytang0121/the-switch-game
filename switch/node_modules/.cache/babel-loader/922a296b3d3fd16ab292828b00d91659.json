{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar Length = require('../line/Length');\n/**\r\n * Returns a Point from around the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the point on its perimeter from.\r\n * @param {number} position - The position along the perimeter of the triangle. A value between 0 and 1.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An option Point, or Point-like object to store the value in. If not given a new Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object containing the given position from the perimeter of the triangle.\r\n */\n\n\nvar GetPoint = function GetPoint(triangle, position, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var line1 = triangle.getLineA();\n  var line2 = triangle.getLineB();\n  var line3 = triangle.getLineC();\n\n  if (position <= 0 || position >= 1) {\n    out.x = line1.x1;\n    out.y = line1.y1;\n    return out;\n  }\n\n  var length1 = Length(line1);\n  var length2 = Length(line2);\n  var length3 = Length(line3);\n  var perimeter = length1 + length2 + length3;\n  var p = perimeter * position;\n  var localPosition = 0; //  Which line is it on?\n\n  if (p < length1) {\n    //  Line 1\n    localPosition = p / length1;\n    out.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\n    out.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\n  } else if (p > length1 + length2) {\n    //  Line 3\n    p -= length1 + length2;\n    localPosition = p / length3;\n    out.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\n    out.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\n  } else {\n    //  Line 2\n    p -= length1;\n    localPosition = p / length2;\n    out.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\n    out.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoint;","map":null,"metadata":{},"sourceType":"script"}