{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Linear = require('../../math/Linear');\n/**\r\n * @namespace Phaser.Display.Color.Interpolate\r\n * @memberof Phaser.Display.Color\r\n * @since 3.0.0\r\n */\n\n/**\r\n * Interpolates between the two given color ranges over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.RGBWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {number} r1 - Red value.\r\n * @param {number} g1 - Blue value.\r\n * @param {number} b1 - Green value.\r\n * @param {number} r2 - Red value.\r\n * @param {number} g2 - Blue value.\r\n * @param {number} b2 - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar RGBWithRGB = function RGBWithRGB(r1, g1, b1, r2, g2, b2, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  var t = index / length;\n  return {\n    r: Linear(r1, r2, t),\n    g: Linear(g1, g2, t),\n    b: Linear(b1, b2, t)\n  };\n};\n/**\r\n * Interpolates between the two given color objects over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithColor\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {Phaser.Display.Color} color2 - The second Color object.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar ColorWithColor = function ColorWithColor(color1, color2, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  return RGBWithRGB(color1.r, color1.g, color1.b, color2.r, color2.g, color2.b, length, index);\n};\n/**\r\n * Interpolates between the Color object and color values over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {number} r - Red value.\r\n * @param {number} g - Blue value.\r\n * @param {number} b - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar ColorWithRGB = function ColorWithRGB(color, r, g, b, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  return RGBWithRGB(color.r, color.g, color.b, r, g, b, length, index);\n};\n\nmodule.exports = {\n  RGBWithRGB: RGBWithRGB,\n  ColorWithRGB: ColorWithRGB,\n  ColorWithColor: ColorWithColor\n};","map":null,"metadata":{},"sourceType":"script"}