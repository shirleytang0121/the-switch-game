{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A Camera Fade effect.\r\n *\r\n * This effect will fade the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Fade\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Fade = new Class({\n  initialize: function Fade(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * Has this effect finished running?\r\n     * \r\n     * This is different from `isRunning` because it remains set to `true` when the effect is over,\r\n     * until the effect is either reset or started again.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#isComplete\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isComplete = false;\n    /**\r\n     * The direction of the fade.\r\n     * `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#direction\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n\n    this.direction = true;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.5.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The value of the red color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#red\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.red = 0;\n    /**\r\n     * The value of the green color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#green\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.green = 0;\n    /**\r\n     * The value of the blue color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#blue\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.blue = 0;\n    /**\r\n     * The value of the alpha channel used during the fade effect.\r\n     * A value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#alpha\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.alpha = 0;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#progress\r\n     * @type {number}\r\n     * @since 3.5.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * @callback CameraFadeCallback\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n     * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n     */\n\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdate\r\n     * @type {?CameraFadeCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * Fades the Camera to or from the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @since 3.5.0\r\n   *\r\n   * @param {boolean} [direction=true] - The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {CameraFadeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function start(direction, duration, red, green, blue, force, callback, context) {\n    if (direction === undefined) {\n      direction = true;\n    }\n\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    if (red === undefined) {\n      red = 0;\n    }\n\n    if (green === undefined) {\n      green = 0;\n    }\n\n    if (blue === undefined) {\n      blue = 0;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    if (!force && this.isRunning) {\n      return this.camera;\n    }\n\n    this.isRunning = true;\n    this.isComplete = false;\n    this.duration = duration;\n    this.direction = direction;\n    this.progress = 0;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = direction ? Number.MIN_VALUE : 1;\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    var eventName = direction ? Events.FADE_OUT_START : Events.FADE_IN_START;\n    this.camera.emit(eventName, this.camera, this, duration, red, green, blue);\n    return this.camera;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#update\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._onUpdate) {\n      this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\n    }\n\n    if (this._elapsed < this.duration) {\n      this.alpha = this.direction ? this.progress : 1 - this.progress;\n    } else {\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally by the Canvas Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderCanvas\r\n   * @since 3.5.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderCanvas: function postRenderCanvas(ctx) {\n    if (!this.isRunning && !this.isComplete) {\n      return false;\n    }\n\n    var camera = this.camera;\n    ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\n    ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\n    return true;\n  },\n\n  /**\r\n   * Called internally by the WebGL Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderWebGL\r\n   * @since 3.5.0\r\n   *\r\n   * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n   * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderWebGL: function postRenderWebGL(pipeline, getTintFunction) {\n    if (!this.isRunning && !this.isComplete) {\n      return false;\n    }\n\n    var camera = this.camera;\n    var red = this.red / 255;\n    var blue = this.blue / 255;\n    var green = this.green / 255;\n    pipeline.drawFillRect(camera._cx, camera._cy, camera._cw, camera._ch, getTintFunction(red, green, blue, 1), this.alpha);\n    return true;\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.5.0\r\n   */\n  effectComplete: function effectComplete() {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.isComplete = true;\n    var eventName = this.direction ? Events.FADE_OUT_COMPLETE : Events.FADE_IN_COMPLETE;\n    this.camera.emit(eventName, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#reset\r\n   * @since 3.5.0\r\n   */\n  reset: function reset() {\n    this.isRunning = false;\n    this.isComplete = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function destroy() {\n    this.reset();\n    this.camera = null;\n  }\n});\nmodule.exports = Fade;","map":null,"metadata":{},"sourceType":"script"}