{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar ArcRender = require('./ArcRender');\n\nvar Class = require('../../../utils/Class');\n\nvar DegToRad = require('../../../math/DegToRad');\n\nvar Earcut = require('../../../geom/polygon/Earcut');\n\nvar GeomCircle = require('../../../geom/circle/Circle');\n\nvar MATH_CONST = require('../../../math/const');\n\nvar Shape = require('../Shape');\n/**\r\n * @classdesc\r\n * The Arc Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an arc shape. You can control the start and end angles of the arc,\r\n * as well as if the angles are winding clockwise or anti-clockwise. With the default settings\r\n * it renders as a complete circle. By changing the angles you can create other arc shapes,\r\n * such as half-circles.\r\n * \r\n * Arcs also have an `iterations` property and corresponding `setIterations` method. This allows\r\n * you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction.\r\n *\r\n * @class Arc\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [radius=128] - The radius of the arc.\r\n * @param {integer} [startAngle=0] - The start angle of the arc, in degrees.\r\n * @param {integer} [endAngle=360] - The end angle of the arc, in degrees.\r\n * @param {boolean} [anticlockwise=false] - The winding order of the start and end angles.\r\n * @param {number} [fillColor] - The color the arc will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the arc will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Arc = new Class({\n  Extends: Shape,\n  Mixins: [ArcRender],\n  initialize: function Arc(scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor, fillAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (radius === undefined) {\n      radius = 128;\n    }\n\n    if (startAngle === undefined) {\n      startAngle = 0;\n    }\n\n    if (endAngle === undefined) {\n      endAngle = 360;\n    }\n\n    if (anticlockwise === undefined) {\n      anticlockwise = false;\n    }\n\n    Shape.call(this, scene, 'Arc', new GeomCircle(0, 0, radius));\n    /**\r\n     * Private internal value. Holds the start angle in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#_startAngle\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._startAngle = startAngle;\n    /**\r\n     * Private internal value. Holds the end angle in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#_endAngle\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._endAngle = endAngle;\n    /**\r\n     * Private internal value. Holds the winding order of the start and end angles.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#_anticlockwise\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._anticlockwise = anticlockwise;\n    /**\r\n     * Private internal value. Holds the number of iterations used when drawing the arc.\r\n     *\r\n     * @name Phaser.GameObjects.Arc#_iterations\r\n     * @type {number}\r\n     * @default 0.01\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._iterations = 0.01;\n    this.setPosition(x, y);\n    this.setSize(this.geom.radius, this.geom.radius);\n\n    if (fillColor !== undefined) {\n      this.setFillStyle(fillColor, fillAlpha);\n    }\n\n    this.updateDisplayOrigin();\n    this.updateData();\n  },\n\n  /**\r\n   * The number of iterations used when drawing the arc.\r\n   * Increase this value for smoother arcs, at the cost of more polygons being rendered.\r\n   * Modify this value by small amounts, such as 0.01.\r\n   *\r\n   * @name Phaser.GameObjects.Arc#iterations\r\n   * @type {number}\r\n   * @default 0.01\r\n   * @since 3.13.0\r\n   */\n  iterations: {\n    get: function get() {\n      return this._iterations;\n    },\n    set: function set(value) {\n      this._iterations = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * The radius of the arc.\r\n   *\r\n   * @name Phaser.GameObjects.Arc#radius\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  radius: {\n    get: function get() {\n      return this.geom.radius;\n    },\n    set: function set(value) {\n      this.geom.radius = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * The start angle of the arc, in degrees.\r\n   *\r\n   * @name Phaser.GameObjects.Arc#startAngle\r\n   * @type {integer}\r\n   * @since 3.13.0\r\n   */\n  startAngle: {\n    get: function get() {\n      return this._startAngle;\n    },\n    set: function set(value) {\n      this._startAngle = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * The end angle of the arc, in degrees.\r\n   *\r\n   * @name Phaser.GameObjects.Arc#endAngle\r\n   * @type {integer}\r\n   * @since 3.13.0\r\n   */\n  endAngle: {\n    get: function get() {\n      return this._endAngle;\n    },\n    set: function set(value) {\n      this._endAngle = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * The winding order of the start and end angles.\r\n   *\r\n   * @name Phaser.GameObjects.Arc#anticlockwise\r\n   * @type {boolean}\r\n   * @since 3.13.0\r\n   */\n  anticlockwise: {\n    get: function get() {\n      return this._anticlockwise;\n    },\n    set: function set(value) {\n      this._anticlockwise = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * Sets the radius of the arc.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Arc#setRadius\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} value - The value to set the radius to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setRadius: function setRadius(value) {\n    this.radius = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the number of iterations used when drawing the arc.\r\n   * Increase this value for smoother arcs, at the cost of more polygons being rendered.\r\n   * Modify this value by small amounts, such as 0.01.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Arc#setIterations\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} value - The value to set the iterations to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setIterations: function setIterations(value) {\n    if (value === undefined) {\n      value = 0.01;\n    }\n\n    this.iterations = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the starting angle of the arc, in degrees.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Arc#setStartAngle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the starting angle to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setStartAngle: function setStartAngle(angle, anticlockwise) {\n    this._startAngle = angle;\n\n    if (anticlockwise !== undefined) {\n      this._anticlockwise = anticlockwise;\n    }\n\n    return this.updateData();\n  },\n\n  /**\r\n   * Sets the ending angle of the arc, in degrees.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Arc#setEndAngle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the ending angle to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setEndAngle: function setEndAngle(angle, anticlockwise) {\n    this._endAngle = angle;\n\n    if (anticlockwise !== undefined) {\n      this._anticlockwise = anticlockwise;\n    }\n\n    return this.updateData();\n  },\n\n  /**\r\n   * Internal method that updates the data and path values.\r\n   *\r\n   * @method Phaser.GameObjects.Arc#updateData\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  updateData: function updateData() {\n    var step = this._iterations;\n    var iteration = step;\n    var radius = this.geom.radius;\n    var startAngle = DegToRad(this._startAngle);\n    var endAngle = DegToRad(this._endAngle);\n    var anticlockwise = this._anticlockwise;\n    var x = radius / 2;\n    var y = radius / 2;\n    endAngle -= startAngle;\n\n    if (anticlockwise) {\n      if (endAngle < -MATH_CONST.PI2) {\n        endAngle = -MATH_CONST.PI2;\n      } else if (endAngle > 0) {\n        endAngle = -MATH_CONST.PI2 + endAngle % MATH_CONST.PI2;\n      }\n    } else if (endAngle > MATH_CONST.PI2) {\n      endAngle = MATH_CONST.PI2;\n    } else if (endAngle < 0) {\n      endAngle = MATH_CONST.PI2 + endAngle % MATH_CONST.PI2;\n    }\n\n    var path = [x + Math.cos(startAngle) * radius, y + Math.sin(startAngle) * radius];\n    var ta;\n\n    while (iteration < 1) {\n      ta = endAngle * iteration + startAngle;\n      path.push(x + Math.cos(ta) * radius, y + Math.sin(ta) * radius);\n      iteration += step;\n    }\n\n    ta = endAngle + startAngle;\n    path.push(x + Math.cos(ta) * radius, y + Math.sin(ta) * radius);\n    path.push(x + Math.cos(startAngle) * radius, y + Math.sin(startAngle) * radius);\n    this.pathIndexes = Earcut(path);\n    this.pathData = path;\n    return this;\n  }\n});\nmodule.exports = Arc;","map":null,"metadata":{},"sourceType":"script"}