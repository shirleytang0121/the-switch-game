{"ast":null,"code":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\nvar RoundAwayFromZero = require('../../math/RoundAwayFromZero');\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n * \n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @function Phaser.Utils.Array.NumberArrayStep\n * @since 3.0.0\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} The array of number values.\n */\n\n\nvar NumberArrayStep = function NumberArrayStep(start, end, step) {\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = null;\n  }\n\n  if (step === undefined) {\n    step = 1;\n  }\n\n  if (end === null) {\n    end = start;\n    start = 0;\n  }\n\n  var result = [];\n  var total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n  for (var i = 0; i < total; i++) {\n    result.push(start);\n    start += step;\n  }\n\n  return result;\n};\n\nmodule.exports = NumberArrayStep;","map":null,"metadata":{},"sourceType":"script"}