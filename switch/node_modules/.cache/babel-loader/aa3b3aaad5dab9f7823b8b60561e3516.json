{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CONST = require('./const');\n\nvar Events = require('./events');\n\nvar GetFastValue = require('../utils/object/GetFastValue');\n\nvar GetURL = require('./GetURL');\n\nvar MergeXHRSettings = require('./MergeXHRSettings');\n\nvar XHRLoader = require('./XHRLoader');\n\nvar XHRSettings = require('./XHRSettings');\n/**\r\n * @typedef {object} FileConfig\r\n *\r\n * @property {string} type - The file type string (image, json, etc) for sorting within the Loader.\r\n * @property {string} key - Unique cache key (unique within its file type)\r\n * @property {string} [url] - The URL of the file, not including baseURL.\r\n * @property {string} [path] - The path of the file, not including the baseURL.\r\n * @property {string} [extension] - The default extension this file uses.\r\n * @property {XMLHttpRequestResponseType} [responseType] - The responseType to be used by the XHR request.\r\n * @property {(XHRSettingsObject|false)} [xhrSettings=false] - Custom XHR Settings specific to this file and merged with the Loader defaults.\r\n * @property {any} [config] - A config object that can be used by file types to store transitional data.\r\n */\n\n/**\r\n * @classdesc\r\n * The base File class used by all File Types that the Loader can support.\r\n * You shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class File\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {FileConfig} fileConfig - The file configuration object, as created by the file type.\r\n */\n\n\nvar File = new Class({\n  initialize: function File(loader, fileConfig) {\n    /**\r\n     * A reference to the Loader that is going to load this file.\r\n     *\r\n     * @name Phaser.Loader.File#loader\r\n     * @type {Phaser.Loader.LoaderPlugin}\r\n     * @since 3.0.0\r\n     */\n    this.loader = loader;\n    /**\r\n     * A reference to the Cache, or Texture Manager, that is going to store this file if it loads.\r\n     *\r\n     * @name Phaser.Loader.File#cache\r\n     * @type {(Phaser.Cache.BaseCache|Phaser.Textures.TextureManager)}\r\n     * @since 3.7.0\r\n     */\n\n    this.cache = GetFastValue(fileConfig, 'cache', false);\n    /**\r\n     * The file type string (image, json, etc) for sorting within the Loader.\r\n     *\r\n     * @name Phaser.Loader.File#type\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.type = GetFastValue(fileConfig, 'type', false);\n    /**\r\n     * Unique cache key (unique within its file type)\r\n     *\r\n     * @name Phaser.Loader.File#key\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.key = GetFastValue(fileConfig, 'key', false);\n    var loadKey = this.key;\n\n    if (loader.prefix && loader.prefix !== '') {\n      this.key = loader.prefix + loadKey;\n    }\n\n    if (!this.type || !this.key) {\n      throw new Error('Error calling \\'Loader.' + this.type + '\\' invalid key provided.');\n    }\n    /**\r\n     * The URL of the file, not including baseURL.\r\n     * Automatically has Loader.path prepended to it.\r\n     *\r\n     * @name Phaser.Loader.File#url\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.url = GetFastValue(fileConfig, 'url');\n\n    if (this.url === undefined) {\n      this.url = loader.path + loadKey + '.' + GetFastValue(fileConfig, 'extension', '');\n    } else if (typeof this.url !== 'function') {\n      this.url = loader.path + this.url;\n    }\n    /**\r\n     * The final URL this file will load from, including baseURL and path.\r\n     * Set automatically when the Loader calls 'load' on this file.\r\n     *\r\n     * @name Phaser.Loader.File#src\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.src = '';\n    /**\r\n     * The merged XHRSettings for this file.\r\n     *\r\n     * @name Phaser.Loader.File#xhrSettings\r\n     * @type {XHRSettingsObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.xhrSettings = XHRSettings(GetFastValue(fileConfig, 'responseType', undefined));\n\n    if (GetFastValue(fileConfig, 'xhrSettings', false)) {\n      this.xhrSettings = MergeXHRSettings(this.xhrSettings, GetFastValue(fileConfig, 'xhrSettings', {}));\n    }\n    /**\r\n     * The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.\r\n     *\r\n     * @name Phaser.Loader.File#xhrLoader\r\n     * @type {?XMLHttpRequest}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.xhrLoader = null;\n    /**\r\n     * The current state of the file. One of the FILE_CONST values.\r\n     *\r\n     * @name Phaser.Loader.File#state\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.state = typeof this.url === 'function' ? CONST.FILE_POPULATED : CONST.FILE_PENDING;\n    /**\r\n     * The total size of this file.\r\n     * Set by onProgress and only if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#bytesTotal\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bytesTotal = 0;\n    /**\r\n     * Updated as the file loads.\r\n     * Only set if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#bytesLoaded\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.bytesLoaded = -1;\n    /**\r\n     * A percentage value between 0 and 1 indicating how much of this file has loaded.\r\n     * Only set if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#percentComplete\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.percentComplete = -1;\n    /**\r\n     * For CORs based loading.\r\n     * If this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)\r\n     *\r\n     * @name Phaser.Loader.File#crossOrigin\r\n     * @type {(string|undefined)}\r\n     * @since 3.0.0\r\n     */\n\n    this.crossOrigin = undefined;\n    /**\r\n     * The processed file data, stored here after the file has loaded.\r\n     *\r\n     * @name Phaser.Loader.File#data\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = undefined;\n    /**\r\n     * A config object that can be used by file types to store transitional data.\r\n     *\r\n     * @name Phaser.Loader.File#config\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = GetFastValue(fileConfig, 'config', {});\n    /**\r\n     * If this is a multipart file, i.e. an atlas and its json together, then this is a reference\r\n     * to the parent MultiFile. Set and used internally by the Loader or specific file types.\r\n     *\r\n     * @name Phaser.Loader.File#multiFile\r\n     * @type {?Phaser.Loader.MultiFile}\r\n     * @since 3.7.0\r\n     */\n\n    this.multiFile;\n    /**\r\n     * Does this file have an associated linked file? Such as an image and a normal map.\r\n     * Atlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\r\n     * actually bound by data, where-as a linkFile is.\r\n     *\r\n     * @name Phaser.Loader.File#linkFile\r\n     * @type {?Phaser.Loader.File}\r\n     * @since 3.7.0\r\n     */\n\n    this.linkFile;\n  },\n\n  /**\r\n   * Links this File with another, so they depend upon each other for loading and processing.\r\n   *\r\n   * @method Phaser.Loader.File#setLink\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} fileB - The file to link to this one.\r\n   */\n  setLink: function setLink(fileB) {\n    this.linkFile = fileB;\n    fileB.linkFile = this;\n  },\n\n  /**\r\n   * Resets the XHRLoader instance this file is using.\r\n   *\r\n   * @method Phaser.Loader.File#resetXHR\r\n   * @since 3.0.0\r\n   */\n  resetXHR: function resetXHR() {\n    if (this.xhrLoader) {\n      this.xhrLoader.onload = undefined;\n      this.xhrLoader.onerror = undefined;\n      this.xhrLoader.onprogress = undefined;\n    }\n  },\n\n  /**\r\n   * Called by the Loader, starts the actual file downloading.\r\n   * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n   * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n   *\r\n   * @method Phaser.Loader.File#load\r\n   * @since 3.0.0\r\n   */\n  load: function load() {\n    if (this.state === CONST.FILE_POPULATED) {\n      //  Can happen for example in a JSONFile if they've provided a JSON object instead of a URL\n      this.loader.nextFile(this, true);\n    } else {\n      this.src = GetURL(this, this.loader.baseURL);\n\n      if (this.src.indexOf('data:') === 0) {\n        console.warn('Local data URIs are not supported: ' + this.key);\n      } else {\n        //  The creation of this XHRLoader starts the load process going.\n        //  It will automatically call the following, based on the load outcome:\n        //  \n        // xhr.onload = this.onLoad\n        // xhr.onerror = this.onError\n        // xhr.onprogress = this.onProgress\n        this.xhrLoader = XHRLoader(this, this.loader.xhr);\n      }\n    }\n  },\n\n  /**\r\n   * Called when the file finishes loading, is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onLoad\r\n   * @since 3.0.0\r\n   *\r\n   * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n   */\n  onLoad: function onLoad(xhr, event) {\n    var localFileOk = xhr.responseURL && xhr.responseURL.indexOf('file://') === 0 && event.target.status === 0;\n    var success = !(event.target && event.target.status !== 200) || localFileOk; //  Handle HTTP status codes of 4xx and 5xx as errors, even if xhr.onerror was not called.\n\n    if (xhr.readyState === 4 && xhr.status >= 400 && xhr.status <= 599) {\n      success = false;\n    }\n\n    this.resetXHR();\n    this.loader.nextFile(this, success);\n  },\n\n  /**\r\n   * Called if the file errors while loading, is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onError\r\n   * @since 3.0.0\r\n   *\r\n   * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this error.\r\n   */\n  onError: function onError() {\n    this.resetXHR();\n    this.loader.nextFile(this, false);\n  },\n\n  /**\r\n   * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onProgress\r\n   * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent.\r\n   */\n  onProgress: function onProgress(event) {\n    if (event.lengthComputable) {\n      this.bytesLoaded = event.loaded;\n      this.bytesTotal = event.total;\n      this.percentComplete = Math.min(this.bytesLoaded / this.bytesTotal, 1);\n      this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\n    }\n  },\n\n  /**\r\n   * Usually overridden by the FileTypes and is called by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data, for example a JSON file will parse itself during this stage.\r\n   *\r\n   * @method Phaser.Loader.File#onProcess\r\n   * @since 3.0.0\r\n   */\n  onProcess: function onProcess() {\n    this.state = CONST.FILE_PROCESSING;\n    this.onProcessComplete();\n  },\n\n  /**\r\n   * Called when the File has completed processing.\r\n   * Checks on the state of its multifile, if set.\r\n   *\r\n   * @method Phaser.Loader.File#onProcessComplete\r\n   * @since 3.7.0\r\n   */\n  onProcessComplete: function onProcessComplete() {\n    this.state = CONST.FILE_COMPLETE;\n\n    if (this.multiFile) {\n      this.multiFile.onFileComplete(this);\n    }\n\n    this.loader.fileProcessComplete(this);\n  },\n\n  /**\r\n   * Called when the File has completed processing but it generated an error.\r\n   * Checks on the state of its multifile, if set.\r\n   *\r\n   * @method Phaser.Loader.File#onProcessError\r\n   * @since 3.7.0\r\n   */\n  onProcessError: function onProcessError() {\n    this.state = CONST.FILE_ERRORED;\n\n    if (this.multiFile) {\n      this.multiFile.onFileFailed(this);\n    }\n\n    this.loader.fileProcessComplete(this);\n  },\n\n  /**\r\n   * Checks if a key matching the one used by this file exists in the target Cache or not.\r\n   * This is called automatically by the LoaderPlugin to decide if the file can be safely\r\n   * loaded or will conflict.\r\n   *\r\n   * @method Phaser.Loader.File#hasCacheConflict\r\n   * @since 3.7.0\r\n   *\r\n   * @return {boolean} `true` if adding this file will cause a conflict, otherwise `false`.\r\n   */\n  hasCacheConflict: function hasCacheConflict() {\n    return this.cache && this.cache.exists(this.key);\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   * This method is often overridden by specific file types.\r\n   *\r\n   * @method Phaser.Loader.File#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function addToCache() {\n    if (this.cache) {\n      this.cache.add(this.key, this.data);\n    }\n\n    this.pendingDestroy();\n  },\n\n  /**\r\n   * Called once the file has been added to its cache and is now ready for deletion from the Loader.\r\n   * It will emit a `filecomplete` event from the LoaderPlugin.\r\n   *\r\n   * @method Phaser.Loader.File#pendingDestroy\r\n   * @fires Phaser.Loader.Events#FILE_COMPLETE\r\n   * @fires Phaser.Loader.Events#FILE_KEY_COMPLETE\r\n   * @since 3.7.0\r\n   */\n  pendingDestroy: function pendingDestroy(data) {\n    if (data === undefined) {\n      data = this.data;\n    }\n\n    var key = this.key;\n    var type = this.type;\n    this.loader.emit(Events.FILE_COMPLETE, key, type, data);\n    this.loader.emit(Events.FILE_KEY_COMPLETE + type + '-' + key, key, type, data);\n    this.loader.flagForRemoval(this);\n  },\n\n  /**\r\n   * Destroy this File and any references it holds.\r\n   *\r\n   * @method Phaser.Loader.File#destroy\r\n   * @since 3.7.0\r\n   */\n  destroy: function destroy() {\n    this.loader = null;\n    this.cache = null;\n    this.xhrSettings = null;\n    this.multiFile = null;\n    this.linkFile = null;\n    this.data = null;\n  }\n});\n/**\r\n * Static method for creating object URL using URL API and setting it as image 'src' attribute.\r\n * If URL API is not supported (usually on old browsers) it falls back to creating Base64 encoded url using FileReader.\r\n *\r\n * @method Phaser.Loader.File.createObjectURL\r\n * @static\r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be set to object URL.\r\n * @param {Blob} blob - A Blob object to create an object URL for.\r\n * @param {string} defaultType - Default mime type used if blob type is not available.\r\n */\n\nFile.createObjectURL = function (image, blob, defaultType) {\n  if (typeof URL === 'function') {\n    image.src = URL.createObjectURL(blob);\n  } else {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      image.removeAttribute('crossOrigin');\n      image.src = 'data:' + (blob.type || defaultType) + ';base64,' + reader.result.split(',')[1];\n    };\n\n    reader.onerror = image.onerror;\n    reader.readAsDataURL(blob);\n  }\n};\n/**\r\n * Static method for releasing an existing object URL which was previously created\r\n * by calling {@link File#createObjectURL} method.\r\n *\r\n * @method Phaser.Loader.File.revokeObjectURL\r\n * @static\r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be revoked.\r\n */\n\n\nFile.revokeObjectURL = function (image) {\n  if (typeof URL === 'function') {\n    URL.revokeObjectURL(image.src);\n  }\n};\n\nmodule.exports = File;","map":null,"metadata":{},"sourceType":"script"}