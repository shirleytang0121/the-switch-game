{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n\nvar Vector2 = require('../../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera Shake effect.\r\n *\r\n * This effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\r\n *\r\n * Only the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Shake\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Shake = new Class({\n  initialize: function Shake(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.5.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\r\n     * This is a Vector2 object, allowing you to control the shake intensity independently across x and y.\r\n     * You can modify this value while the effect is active to create more varied shake effects.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#intensity\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.5.0\r\n     */\n\n    this.intensity = new Vector2();\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#progress\r\n     * @type {number}\r\n     * @since 3.5.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * How much to offset the camera by horizontally.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetX\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._offsetX = 0;\n    /**\r\n     * How much to offset the camera by vertically.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetY\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._offsetY = 0;\n    /**\r\n     * @callback CameraShakeCallback\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera on which the effect is running.\r\n     * @param {number} progress - The progress of the effect. A value between 0 and 1.\r\n     */\n\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdate\r\n     * @type {?CameraShakeCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * Shakes the Camera by the given intensity over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n   * @param {number} [intensity=0.05] - The intensity of the shake.\r\n   * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n   * @param {CameraShakeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function start(duration, intensity, force, callback, context) {\n    if (duration === undefined) {\n      duration = 100;\n    }\n\n    if (intensity === undefined) {\n      intensity = 0.05;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    if (!force && this.isRunning) {\n      return this.camera;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0;\n\n    if (typeof intensity === 'number') {\n      this.intensity.set(intensity);\n    } else {\n      this.intensity.set(intensity.x, intensity.y);\n    }\n\n    this._elapsed = 0;\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.SHAKE_START, this.camera, this, duration, intensity);\n    return this.camera;\n  },\n\n  /**\r\n   * The pre-render step for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#preRender\r\n   * @since 3.5.0\r\n   */\n  preRender: function preRender() {\n    if (this.isRunning) {\n      this.camera.matrix.translate(this._offsetX, this._offsetY);\n    }\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#update\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function update(time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._onUpdate) {\n      this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\n    }\n\n    if (this._elapsed < this.duration) {\n      var intensity = this.intensity;\n      var width = this.camera._cw;\n      var height = this.camera._ch;\n      var zoom = this.camera.zoom;\n      this._offsetX = (Math.random() * intensity.x * width * 2 - intensity.x * width) * zoom;\n      this._offsetY = (Math.random() * intensity.y * height * 2 - intensity.y * height) * zoom;\n\n      if (this.camera.roundPixels) {\n        this._offsetX = Math.round(this._offsetX);\n        this._offsetY = Math.round(this._offsetY);\n      }\n    } else {\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.5.0\r\n   */\n  effectComplete: function effectComplete() {\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.SHAKE_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#reset\r\n   * @since 3.5.0\r\n   */\n  reset: function reset() {\n    this.isRunning = false;\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function destroy() {\n    this.reset();\n    this.camera = null;\n    this.intensity = null;\n  }\n});\nmodule.exports = Shake;","map":null,"metadata":{},"sourceType":"script"}