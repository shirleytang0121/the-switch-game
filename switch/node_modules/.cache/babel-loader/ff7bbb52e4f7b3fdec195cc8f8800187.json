{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A representation of a vector in 3D space.\r\n *\r\n * A three-component vector.\r\n *\r\n * @class Vector3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n */\n\n\nvar Vector3 = new Class({\n  initialize: function Vector3(x, y, z) {\n    /**\r\n     * The x component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    this.x = 0;\n    /**\r\n     * The y component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The z component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.z = 0;\n\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n  },\n\n  /**\r\n   * Set this Vector to point up.\r\n   *\r\n   * Sets the y component of the vector to 1, and the others to 0.\r\n   *\r\n   * @method Phaser.Math.Vector3#up\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  up: function up() {\n    this.x = 0;\n    this.y = 1;\n    this.z = 0;\n    return this;\n  },\n\n  /**\r\n   * Make a clone of this Vector3.\r\n   *\r\n   * @method Phaser.Math.Vector3#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} A new Vector3 object containing this Vectors values.\r\n   */\n  clone: function clone() {\n    return new Vector3(this.x, this.y, this.z);\n  },\n\n  /**\r\n   * Calculate the cross (vector) product of two given Vectors.\r\n   *\r\n   * @method Phaser.Math.Vector3#crossVectors\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} a - The first Vector to multiply.\r\n   * @param {Phaser.Math.Vector3} b - The second Vector to multiply.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  crossVectors: function crossVectors(a, b) {\n    var ax = a.x;\n    var ay = a.y;\n    var az = a.z;\n    var bx = b.x;\n    var by = b.y;\n    var bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n\n  /**\r\n   * Check whether this Vector is equal to a given Vector.\r\n   *\r\n   * Performs a strict equality check against each Vector's components.\r\n   *\r\n   * @method Phaser.Math.Vector3#equals\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to compare against.\r\n   *\r\n   * @return {boolean} True if the two vectors strictly match, otherwise false.\r\n   */\n  equals: function equals(v) {\n    return this.x === v.x && this.y === v.y && this.z === v.z;\n  },\n\n  /**\r\n   * Copy the components of a given Vector into this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} src - The Vector to copy the components from.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  copy: function copy(src) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\r\n   *\r\n   * @method Phaser.Math.Vector3#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y and z components.\r\n   * @param {number} [y] - The y value to set for this Vector.\r\n   * @param {number} [z] - The z value to set for this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  set: function set(x, y, z) {\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a given Vector to this Vector. Addition is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector3#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  add: function add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector3#subtract\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to subtract from this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  subtract: function subtract(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise multiplication between this Vector and the given Vector.\r\n   *\r\n   * Multiplies this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to multiply this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  multiply: function multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z || 1;\n    return this;\n  },\n\n  /**\r\n   * Scale this Vector by the given value.\r\n   *\r\n   * @method Phaser.Math.Vector3#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} scale - The value to scale this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  scale: function scale(_scale) {\n    if (isFinite(_scale)) {\n      this.x *= _scale;\n      this.y *= _scale;\n      this.z *= _scale;\n    } else {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise division between this Vector and the given Vector.\r\n   *\r\n   * Divides this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#divide\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to divide this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z || 1;\n    return this;\n  },\n\n  /**\r\n   * Negate the `x`, `y` and `z` components of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#negate\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#distance\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector.\r\n   */\n  distance: function distance(v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector, squared.\r\n   *\r\n   * @method Phaser.Math.Vector3#distanceSq\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector, squared.\r\n   */\n  distanceSq: function distanceSq(v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    return dx * dx + dy * dy + dz * dz;\n  },\n\n  /**\r\n   * Calculate the length (or magnitude) of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#length\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector.\r\n   */\n  length: function length() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  },\n\n  /**\r\n   * Calculate the length of this Vector squared.\r\n   *\r\n   * @method Phaser.Math.Vector3#lengthSq\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector, squared.\r\n   */\n  lengthSq: function lengthSq() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    return x * x + y * y + z * z;\n  },\n\n  /**\r\n   * Normalize this Vector.\r\n   *\r\n   * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n   *\r\n   * @method Phaser.Math.Vector3#normalize\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  normalize: function normalize() {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var len = x * x + y * y + z * z;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      this.x = x * len;\n      this.y = y * len;\n      this.z = z * len;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the dot product of this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#dot\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to dot product with this Vector3.\r\n   *\r\n   * @return {number} The dot product of this Vector and `v`.\r\n   */\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  },\n\n  /**\r\n   * Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#cross\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector to cross product with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  cross: function cross(v) {\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var bx = v.x;\n    var by = v.y;\n    var bz = v.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n\n  /**\r\n   * Linearly interpolate between this Vector and the given Vector.\r\n   *\r\n   * Interpolates this Vector towards the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#lerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to interpolate towards.\r\n   * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  lerp: function lerp(v, t) {\n    if (t === undefined) {\n      t = 0;\n    }\n\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    this.x = ax + t * (v.x - ax);\n    this.y = ay + t * (v.y - ay);\n    this.z = az + t * (v.z - az);\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformMat3\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformMat3: function transformMat3(mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    this.x = x * m[0] + y * m[3] + z * m[6];\n    this.y = x * m[1] + y * m[4] + z * m[7];\n    this.z = x * m[2] + y * m[5] + z * m[8];\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformMat4: function transformMat4(mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    this.x = m[0] * x + m[4] * y + m[8] * z + m[12];\n    this.y = m[1] * x + m[5] * y + m[9] * z + m[13];\n    this.z = m[2] * x + m[6] * y + m[10] * z + m[14];\n    return this;\n  },\n\n  /**\r\n   * Transforms the coordinates of this Vector3 with the given Matrix4.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformCoordinates\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformCoordinates: function transformCoordinates(mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    var tx = x * m[0] + y * m[4] + z * m[8] + m[12];\n    var ty = x * m[1] + y * m[5] + z * m[9] + m[13];\n    var tz = x * m[2] + y * m[6] + z * m[10] + m[14];\n    var tw = x * m[3] + y * m[7] + z * m[11] + m[15];\n    this.x = tx / tw;\n    this.y = ty / tw;\n    this.z = tz / tw;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformQuat: function transformQuat(q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w; // calculate quat * vec\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n\n  /**\r\n   * Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\r\n   * e.g. unprojecting a 2D point into 3D space.\r\n   *\r\n   * @method Phaser.Math.Vector3#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to multiply this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  project: function project(mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    var a00 = m[0];\n    var a01 = m[1];\n    var a02 = m[2];\n    var a03 = m[3];\n    var a10 = m[4];\n    var a11 = m[5];\n    var a12 = m[6];\n    var a13 = m[7];\n    var a20 = m[8];\n    var a21 = m[9];\n    var a22 = m[10];\n    var a23 = m[11];\n    var a30 = m[12];\n    var a31 = m[13];\n    var a32 = m[14];\n    var a33 = m[15];\n    var lw = 1 / (x * a03 + y * a13 + z * a23 + a33);\n    this.x = (x * a00 + y * a10 + z * a20 + a30) * lw;\n    this.y = (x * a01 + y * a11 + z * a21 + a31) * lw;\n    this.z = (x * a02 + y * a12 + z * a22 + a32) * lw;\n    return this;\n  },\n\n  /**\r\n   * Unproject this point from 2D space to 3D space.\r\n   * The point should have its x and y properties set to\r\n   * 2D screen space, and the z either at 0 (near plane)\r\n   * or 1 (far plane). The provided matrix is assumed to already\r\n   * be combined, i.e. projection * view * model.\r\n   *\r\n   * After this operation, this vector's (x, y, z) components will\r\n   * represent the unprojected 3D coordinate.\r\n   *\r\n   * @method Phaser.Math.Vector3#unproject\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} viewport - Screen x, y, width and height in pixels.\r\n   * @param {Phaser.Math.Matrix4} invProjectionView - Combined projection and view matrix.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  unproject: function unproject(viewport, invProjectionView) {\n    var viewX = viewport.x;\n    var viewY = viewport.y;\n    var viewWidth = viewport.z;\n    var viewHeight = viewport.w;\n    var x = this.x - viewX;\n    var y = viewHeight - this.y - 1 - viewY;\n    var z = this.z;\n    this.x = 2 * x / viewWidth - 1;\n    this.y = 2 * y / viewHeight - 1;\n    this.z = 2 * z - 1;\n    return this.project(invProjectionView);\n  },\n\n  /**\r\n   * Make this Vector the zero vector (0, 0, 0).\r\n   *\r\n   * @method Phaser.Math.Vector3#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  reset: function reset() {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    return this;\n  }\n});\n/**\r\n * A static zero Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ZERO\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.ZERO = new Vector3();\n/**\r\n * A static right Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.RIGHT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.RIGHT = new Vector3(1, 0, 0);\n/**\r\n * A static left Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.LEFT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.LEFT = new Vector3(-1, 0, 0);\n/**\r\n * A static up Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.UP\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.UP = new Vector3(0, -1, 0);\n/**\r\n * A static down Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.DOWN\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.DOWN = new Vector3(0, 1, 0);\n/**\r\n * A static forward Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.FORWARD\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.FORWARD = new Vector3(0, 0, 1);\n/**\r\n * A static back Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.BACK\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.BACK = new Vector3(0, 0, -1);\n/**\r\n * A static one Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ONE\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.ONE = new Vector3(1, 1, 1);\nmodule.exports = Vector3;","map":null,"metadata":{},"sourceType":"script"}