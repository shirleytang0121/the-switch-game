{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar AudioFile = require('./AudioFile.js');\n\nvar Class = require('../../utils/Class');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar JSONFile = require('./JSONFile.js');\n\nvar MultiFile = require('../MultiFile.js');\n/**\r\n * @typedef {object} Phaser.Loader.FileTypes.AudioSpriteFileConfig\r\n *\r\n * @property {string} key - The key of the file. Must be unique within both the Loader and the Audio Cache.\r\n * @property {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @property {XHRSettingsObject} [jsonXhrSettings] - Extra XHR Settings specifically for the json file.\r\n * @property {{(string|string[])}} [audioURL] - The absolute or relative URL to load the audio file from.\r\n * @property {any} [audioConfig] - The audio configuration options.\r\n * @property {XHRSettingsObject} [audioXhrSettings] - Extra XHR Settings specifically for the audio file.\r\n */\n\n/**\r\n * @classdesc\r\n * An Audio Sprite File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audioSprite method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audioSprite.\r\n *\r\n * @class AudioSpriteFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Loader.FileTypes.AudioSpriteFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @param {{(string|string[])}} [audioURL] - The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\r\n * @param {any} [audioConfig] - The audio configuration options.\r\n * @param {XHRSettingsObject} [audioXhrSettings] - An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [jsonXhrSettings] - An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.\r\n */\n\n\nvar AudioSpriteFile = new Class({\n  Extends: MultiFile,\n  initialize: function AudioSpriteFile(loader, key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      jsonURL = GetFastValue(config, 'jsonURL');\n      audioURL = GetFastValue(config, 'audioURL');\n      audioConfig = GetFastValue(config, 'audioConfig');\n      audioXhrSettings = GetFastValue(config, 'audioXhrSettings');\n      jsonXhrSettings = GetFastValue(config, 'jsonXhrSettings');\n    }\n\n    var data; //  No url? then we're going to do a json load and parse it from that\n\n    if (!audioURL) {\n      data = new JSONFile(loader, key, jsonURL, jsonXhrSettings);\n      MultiFile.call(this, loader, 'audiosprite', key, [data]);\n      this.config.resourceLoad = true;\n      this.config.audioConfig = audioConfig;\n      this.config.audioXhrSettings = audioXhrSettings;\n    } else {\n      var audio = AudioFile.create(loader, key, audioURL, audioConfig, audioXhrSettings);\n\n      if (audio) {\n        data = new JSONFile(loader, key, jsonURL, jsonXhrSettings);\n        MultiFile.call(this, loader, 'audiosprite', key, [audio, data]);\n        this.config.resourceLoad = false;\n      }\n    }\n  },\n\n  /**\r\n   * Called by each File when it finishes loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.AudioSpriteFile#onFileComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n   */\n  onFileComplete: function onFileComplete(file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n\n      if (this.config.resourceLoad && file.type === 'json' && file.data.hasOwnProperty('resources')) {\n        //  Inspect the data for the files to now load\n        var urls = file.data.resources;\n        var audioConfig = GetFastValue(this.config, 'audioConfig');\n        var audioXhrSettings = GetFastValue(this.config, 'audioXhrSettings');\n        var audio = AudioFile.create(this.loader, file.key, urls, audioConfig, audioXhrSettings);\n\n        if (audio) {\n          this.addToMultiFile(audio);\n          this.loader.addFile(audio);\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.AudioSpriteFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function addToCache() {\n    if (this.isReadyToProcess()) {\n      var fileA = this.files[0];\n      var fileB = this.files[1];\n      fileA.addToCache();\n      fileB.addToCache();\n      this.complete = true;\n    }\n  }\n});\n/**\r\n * Adds a JSON based Audio Sprite, or array of audio sprites, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audioSprite('kyobi', 'kyobi.json', [\r\n *         'kyobi.ogg',\r\n *         'kyobi.mp3',\r\n *         'kyobi.m4a'\r\n *     ]);\r\n * }\r\n * ```\r\n * \r\n * Audio Sprites are a combination of audio files and a JSON configuration.\r\n * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n *\r\n * If the JSON file includes a 'resource' object then you can let Phaser parse it and load the audio\r\n * files automatically based on its content. To do this exclude the audio URLs from the load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audioSprite('kyobi', 'kyobi.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audioSprite({\r\n *     key: 'kyobi',\r\n *     jsonURL: 'audio/Kyobi.json',\r\n *     audioURL: [\r\n *         'audio/Kyobi.ogg',\r\n *         'audio/Kyobi.mp3',\r\n *         'audio/Kyobi.m4a'\r\n *     ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Loader.FileTypes.AudioSpriteFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the audio JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the audio has finished loading you can use it create an Audio Sprite by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.audioSprite('kyobi', 'kyobi.json');\r\n * // and later in your game ...\r\n * var music = this.sound.addAudioSprite('kyobi');\r\n * music.play('title');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n * \r\n * Note: The ability to load this type of file will only be available if the Audio Sprite File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audioSprite\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Loader.FileTypes.AudioSpriteFileConfig|Phaser.Loader.FileTypes.AudioSpriteFileConfig[])} key - The key to use for this file, or a file configuration object, or an array of objects.\r\n * @param {string} jsonURL - The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\r\n * @param {(string|string[])} [audioURL] - The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\r\n * @param {any} [audioConfig] - The audio configuration options.\r\n * @param {XHRSettingsObject} [audioXhrSettings] - An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {XHRSettingsObject} [jsonXhrSettings] - An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader.\r\n */\n\nFileTypesManager.register('audioSprite', function (key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings) {\n  var game = this.systems.game;\n  var gameAudioConfig = game.config.audio;\n  var deviceAudio = game.device.audio;\n\n  if (gameAudioConfig && gameAudioConfig.noAudio || !deviceAudio.webAudio && !deviceAudio.audioData) {\n    //  Sounds are disabled, so skip loading audio\n    return this;\n  }\n\n  var multifile; //  Supports an Object file definition in the key argument\n  //  Or an array of objects in the key argument\n  //  Or a single entry where all arguments have been defined\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      multifile = new AudioSpriteFile(this, key[i]);\n\n      if (multifile.files) {\n        this.addFile(multifile.files);\n      }\n    }\n  } else {\n    multifile = new AudioSpriteFile(this, key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings);\n\n    if (multifile.files) {\n      this.addFile(multifile.files);\n    }\n  }\n\n  return this;\n});","map":null,"metadata":{},"sourceType":"script"}