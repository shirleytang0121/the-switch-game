{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Rectangle = require('./Rectangle');\n/**\r\n * Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\r\n *\r\n * @function Phaser.Geom.Rectangle.Union\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} [out] - The Rectangle to store the union in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified `out` Rectangle, or a new Rectangle if none was provided.\r\n */\n\n\nvar Union = function Union(rectA, rectB, out) {\n  if (out === undefined) {\n    out = new Rectangle();\n  } //  Cache vars so we can use one of the input rects as the output rect\n\n\n  var x = Math.min(rectA.x, rectB.x);\n  var y = Math.min(rectA.y, rectB.y);\n  var w = Math.max(rectA.right, rectB.right) - x;\n  var h = Math.max(rectA.bottom, rectB.bottom) - y;\n  return out.setTo(x, y, w, h);\n};\n\nmodule.exports = Union;","map":null,"metadata":{},"sourceType":"script"}