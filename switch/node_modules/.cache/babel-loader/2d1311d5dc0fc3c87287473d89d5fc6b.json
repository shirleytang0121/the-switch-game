{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A seeded Random Data Generator.\r\n * \r\n * Access via `Phaser.Math.RND` which is an instance of this class pre-defined\r\n * by Phaser. Or, create your own instance to use as you require.\r\n * \r\n * The `Math.RND` generator is seeded by the Game Config property value `seed`.\r\n * If no such config property exists, a random number is used.\r\n * \r\n * If you create your own instance of this class you should provide a seed for it.\r\n * If no seed is given it will use a 'random' one based on Date.now.\r\n *\r\n * @class RandomDataGenerator\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|string[])} [seeds] - The seeds to use for the random number generator.\r\n */\n\n\nvar RandomDataGenerator = new Class({\n  initialize: function RandomDataGenerator(seeds) {\n    if (seeds === undefined) {\n      seeds = [(Date.now() * Math.random()).toString()];\n    }\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#c\r\n     * @type {number}\r\n     * @default 1\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n\n    this.c = 1;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s0\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s0 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s1\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s1 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s2\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s2 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#n\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.2.0\r\n     */\n\n    this.n = 0;\n    /**\r\n     * Signs to choose from.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#signs\r\n     * @type {number[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.signs = [-1, 1];\n\n    if (seeds) {\n      this.init(seeds);\n    }\n  },\n\n  /**\r\n   * Private random helper.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#rnd\r\n   * @since 3.0.0\r\n   * @private\r\n   *\r\n   * @return {number} A random number.\r\n   */\n  rnd: function rnd() {\n    var t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\n\n    this.c = t | 0;\n    this.s0 = this.s1;\n    this.s1 = this.s2;\n    this.s2 = t - this.c;\n    return this.s2;\n  },\n\n  /**\r\n   * Internal method that creates a seed hash.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#hash\r\n   * @since 3.0.0\r\n   * @private\r\n   *\r\n   * @param {string} data - The value to hash.\r\n   *\r\n   * @return {number} The hashed value.\r\n   */\n  hash: function hash(data) {\n    var h;\n    var n = this.n;\n    data = data.toString();\n\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n\n    this.n = n;\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  },\n\n  /**\r\n   * Initialize the state of the random data generator.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#init\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} seeds - The seeds to initialize the random data generator with.\r\n   */\n  init: function init(seeds) {\n    if (typeof seeds === 'string') {\n      this.state(seeds);\n    } else {\n      this.sow(seeds);\n    }\n  },\n\n  /**\r\n   * Reset the seed of the random data generator.\r\n   *\r\n   * _Note_: the seed array is only processed up to the first `undefined` (or `null`) value, should such be present.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#sow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string[]} seeds - The array of seeds: the `toString()` of each value is used.\r\n   */\n  sow: function sow(seeds) {\n    // Always reset to default seed\n    this.n = 0xefc8249d;\n    this.s0 = this.hash(' ');\n    this.s1 = this.hash(' ');\n    this.s2 = this.hash(' ');\n    this.c = 1;\n\n    if (!seeds) {\n      return;\n    } // Apply any seeds\n\n\n    for (var i = 0; i < seeds.length && seeds[i] != null; i++) {\n      var seed = seeds[i];\n      this.s0 -= this.hash(seed);\n      this.s0 += ~~(this.s0 < 0);\n      this.s1 -= this.hash(seed);\n      this.s1 += ~~(this.s1 < 0);\n      this.s2 -= this.hash(seed);\n      this.s2 += ~~(this.s2 < 0);\n    }\n  },\n\n  /**\r\n   * Returns a random integer between 0 and 2^32.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#integer\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random integer between 0 and 2^32.\r\n   */\n  integer: function integer() {\n    // 2^32\n    return this.rnd() * 0x100000000;\n  },\n\n  /**\r\n   * Returns a random real number between 0 and 1.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#frac\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between 0 and 1.\r\n   */\n  frac: function frac() {\n    // 2^-53\n    return this.rnd() + (this.rnd() * 0x200000 | 0) * 1.1102230246251565e-16;\n  },\n\n  /**\r\n   * Returns a random real number between 0 and 2^32.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#real\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between 0 and 2^32.\r\n   */\n  real: function real() {\n    return this.integer() + this.frac();\n  },\n\n  /**\r\n   * Returns a random integer between and including min and max.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#integerInRange\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  integerInRange: function integerInRange(min, max) {\n    return Math.floor(this.realInRange(0, max - min + 1) + min);\n  },\n\n  /**\r\n   * Returns a random integer between and including min and max.\r\n   * This method is an alias for RandomDataGenerator.integerInRange.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#between\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  between: function between(min, max) {\n    return Math.floor(this.realInRange(0, max - min + 1) + min);\n  },\n\n  /**\r\n   * Returns a random real number between min and max.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#realInRange\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  realInRange: function realInRange(min, max) {\n    return this.frac() * (max - min) + min;\n  },\n\n  /**\r\n   * Returns a random real number between -1 and 1.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#normal\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between -1 and 1.\r\n   */\n  normal: function normal() {\n    return 1 - 2 * this.frac();\n  },\n\n  /**\r\n   * Returns a valid RFC4122 version4 ID hex string from https://gist.github.com/1308368\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#uuid\r\n   * @since 3.0.0\r\n   *\r\n   * @return {string} A valid RFC4122 version4 ID hex string\r\n   */\n  uuid: function uuid() {\n    var a = '';\n    var b = '';\n\n    for (b = a = ''; a++ < 36; b += ~a % 5 | a * 3 & 4 ? (a ^ 15 ? 8 ^ this.frac() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-') {// eslint-disable-next-line no-empty\n    }\n\n    return b;\n  },\n\n  /**\r\n   * Returns a random element from within the given array.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#pick\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} array - The array to pick a random element from.\r\n   *\r\n   * @return {*} A random member of the array.\r\n   */\n  pick: function pick(array) {\n    return array[this.integerInRange(0, array.length - 1)];\n  },\n\n  /**\r\n   * Returns a sign to be used with multiplication operator.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#sign\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} -1 or +1.\r\n   */\n  sign: function sign() {\n    return this.pick(this.signs);\n  },\n\n  /**\r\n   * Returns a random element from within the given array, favoring the earlier entries.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#weightedPick\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} array - The array to pick a random element from.\r\n   *\r\n   * @return {*} A random member of the array.\r\n   */\n  weightedPick: function weightedPick(array) {\n    return array[~~(Math.pow(this.frac(), 2) * (array.length - 1) + 0.5)];\n  },\n\n  /**\r\n   * Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#timestamp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random timestamp between min and max.\r\n   */\n  timestamp: function timestamp(min, max) {\n    return this.realInRange(min || 946684800000, max || 1577862000000);\n  },\n\n  /**\r\n   * Returns a random angle between -180 and 180.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#angle\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random number between -180 and 180.\r\n   */\n  angle: function angle() {\n    return this.integerInRange(-180, 180);\n  },\n\n  /**\r\n   * Returns a random rotation in radians, between -3.141 and 3.141\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#rotation\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random number between -3.141 and 3.141\r\n   */\n  rotation: function rotation() {\n    return this.realInRange(-3.1415926, 3.1415926);\n  },\n\n  /**\r\n   * Gets or Sets the state of the generator. This allows you to retain the values\r\n   * that the generator is using between games, i.e. in a game save file.\r\n   *\r\n   * To seed this generator with a previously saved state you can pass it as the\r\n   * `seed` value in your game config, or call this method directly after Phaser has booted.\r\n   *\r\n   * Call this method with no parameters to return the current state.\r\n   *\r\n   * If providing a state it should match the same format that this method\r\n   * returns, which is a string with a header `!rnd` followed by the `c`,\r\n   * `s0`, `s1` and `s2` values respectively, each comma-delimited.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#state\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [state] - Generator state to be set.\r\n   *\r\n   * @return {string} The current state of the generator.\r\n   */\n  state: function state(_state) {\n    if (typeof _state === 'string' && _state.match(/^!rnd/)) {\n      _state = _state.split(',');\n      this.c = parseFloat(_state[1]);\n      this.s0 = parseFloat(_state[2]);\n      this.s1 = parseFloat(_state[3]);\n      this.s2 = parseFloat(_state[4]);\n    }\n\n    return ['!rnd', this.c, this.s0, this.s1, this.s2].join(',');\n  },\n\n  /**\r\n   * Shuffles the given array, using the current seed.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#shuffle\r\n   * @since 3.7.0\r\n   *\r\n   * @param {array} [array] - The array to be shuffled.\r\n   *\r\n   * @return {array} The shuffled array.\r\n   */\n  shuffle: function shuffle(array) {\n    var len = array.length - 1;\n\n    for (var i = len; i > 0; i--) {\n      var randomIndex = Math.floor(this.frac() * (i + 1));\n      var itemAtIndex = array[randomIndex];\n      array[randomIndex] = array[i];\n      array[i] = itemAtIndex;\n    }\n\n    return array;\n  }\n});\nmodule.exports = RandomDataGenerator;","map":null,"metadata":{},"sourceType":"script"}