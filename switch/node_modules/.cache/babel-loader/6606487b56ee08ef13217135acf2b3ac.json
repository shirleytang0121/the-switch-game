{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\n\n/**\r\n * Using Bresenham's line algorithm this will return an array of all coordinates on this line.\r\n *\r\n * The `start` and `end` points are rounded before this runs as the algorithm works on integers.\r\n *\r\n * @function Phaser.Geom.Line.BresenhamPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {integer} [stepRate=1] - The optional step rate for the points on the line.\r\n * @param {array} [results] - An optional array to push the resulting coordinates into.\r\n *\r\n * @return {object[]} The array of coordinates on the line.\r\n */\nvar BresenhamPoints = function BresenhamPoints(line, stepRate, results) {\n  if (stepRate === undefined) {\n    stepRate = 1;\n  }\n\n  if (results === undefined) {\n    results = [];\n  }\n\n  var x1 = Math.round(line.x1);\n  var y1 = Math.round(line.y1);\n  var x2 = Math.round(line.x2);\n  var y2 = Math.round(line.y2);\n  var dx = Math.abs(x2 - x1);\n  var dy = Math.abs(y2 - y1);\n  var sx = x1 < x2 ? 1 : -1;\n  var sy = y1 < y2 ? 1 : -1;\n  var err = dx - dy;\n  results.push({\n    x: x1,\n    y: y1\n  });\n  var i = 1;\n\n  while (!(x1 === x2 && y1 === y2)) {\n    var e2 = err << 1;\n\n    if (e2 > -dy) {\n      err -= dy;\n      x1 += sx;\n    }\n\n    if (e2 < dx) {\n      err += dx;\n      y1 += sy;\n    }\n\n    if (i % stepRate === 0) {\n      results.push({\n        x: x1,\n        y: y1\n      });\n    }\n\n    i++;\n  }\n\n  return results;\n};\n\nmodule.exports = BresenhamPoints;","map":null,"metadata":{},"sourceType":"script"}