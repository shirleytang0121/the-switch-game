{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Circumference = require('./Circumference');\n\nvar CircumferencePoint = require('./CircumferencePoint');\n\nvar FromPercent = require('../../math/FromPercent');\n\nvar MATH_CONST = require('../../math/const');\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the circle.\r\n */\n\n\nvar GetPoints = function GetPoints(circle, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  } //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n\n  if (!quantity) {\n    quantity = Circumference(circle) / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\n    out.push(CircumferencePoint(circle, angle));\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":null,"metadata":{},"sourceType":"script"}